<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\p\bin_dex.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../i/private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dex/dex.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_hash_adler32</name></cpp:macro> <cpp:value>__adler32</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../hash/adler32.c"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>r_bin_dbginfo_t</name></name></type> <name>r_bin_dbginfo_dex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>dexdump</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Sdb</name> <modifier>*</modifier></type><name>mdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dexSubsystem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>simplifiedDemangling</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>get_method_flags</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>MA</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_PUBLIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_PUBLIC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_PRIVATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_PRIVATE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_PROTECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_PROTECTED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_STATIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_STATIC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_FINAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_FINAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_SYNCHRONIZED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_SYNCHRONIZED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_BRIDGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_BRIDGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_VARARGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_VARARGS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_NATIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_NATIVE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_ABSTRACT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_ABSTRACT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_STRICT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_STRICT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_SYNTHETIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_SYNTHETIC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_MIRANDA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_MIRANDA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_CONSTRUCTOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_CONSTRUCTOR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MA</name> <operator>&amp;</operator> <name>R_DEX_METH_DECLARED_SYNCHRONIZED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_BIN_METH_DECLARED_SYNCHRONIZED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>offset_of_method_idx</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name> <modifier>*</modifier></type><name>dex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name>mdb</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"method.%d"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>dex_field_offset</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>fields_offset</name></name> <operator>+</operator> <operator>(</operator><name>fid</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getstr</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>dex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uleblen</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dex</name> <operator>||</operator> <name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>strings_size</name></name> <operator>||</operator> <operator>!</operator><name><name>dex</name><operator>-&gt;</operator><name>strings</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dex</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>dex</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>dex</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uleblen</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uleblen</name> <operator>||</operator> <name>uleblen</name> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>uleblen</name> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>strings_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>dex</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>dex</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name>uleblen</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>countOnes</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>+</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_clz</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{
<decl><name>kAccessForClass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>kAccessForMethod</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>kAccessForField</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>kAccessForMAX</name></decl>
}</block></enum></type> <name>AccessFor</name>;</typedef>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>createAccessFlagStr</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AccessFor</name></type> <name>forWhat</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_FLAGS</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kAccessStrings</name><index>[<expr><name>kAccessForMAX</name></expr>]</index><index>[<expr><name>NUM_FLAGS</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{

<expr><literal type="string">"PUBLIC"</literal></expr>, 
<expr><literal type="string">"PRIVATE"</literal></expr>, 
<expr><literal type="string">"PROTECTED"</literal></expr>, 
<expr><literal type="string">"STATIC"</literal></expr>, 
<expr><literal type="string">"FINAL"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"INTERFACE"</literal></expr>, 
<expr><literal type="string">"ABSTRACT"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"SYNTHETIC"</literal></expr>, 
<expr><literal type="string">"ANNOTATION"</literal></expr>, 
<expr><literal type="string">"ENUM"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"VERIFIED"</literal></expr>, 
<expr><literal type="string">"OPTIMIZED"</literal></expr>, 
}</block></expr>,
<expr><block>{

<expr><literal type="string">"PUBLIC"</literal></expr>, 
<expr><literal type="string">"PRIVATE"</literal></expr>, 
<expr><literal type="string">"PROTECTED"</literal></expr>, 
<expr><literal type="string">"STATIC"</literal></expr>, 
<expr><literal type="string">"FINAL"</literal></expr>, 
<expr><literal type="string">"SYNCHRONIZED"</literal></expr>, 
<expr><literal type="string">"BRIDGE"</literal></expr>, 
<expr><literal type="string">"VARARGS"</literal></expr>, 
<expr><literal type="string">"NATIVE"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"ABSTRACT"</literal></expr>, 
<expr><literal type="string">"STRICT"</literal></expr>, 
<expr><literal type="string">"SYNTHETIC"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"MIRANDA"</literal></expr>, 
<expr><literal type="string">"CONSTRUCTOR"</literal></expr>, 
<expr><literal type="string">"DECLARED_SYNCHRONIZED"</literal></expr>, 
}</block></expr>,
<expr><block>{

<expr><literal type="string">"PUBLIC"</literal></expr>, 
<expr><literal type="string">"PRIVATE"</literal></expr>, 
<expr><literal type="string">"PROTECTED"</literal></expr>, 
<expr><literal type="string">"STATIC"</literal></expr>, 
<expr><literal type="string">"FINAL"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"VOLATILE"</literal></expr>, 
<expr><literal type="string">"TRANSIENT"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"SYNTHETIC"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"ENUM"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
<expr><literal type="string">"?"</literal></expr>, 
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><call><name>countOnes</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kLongest</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxSize</name> <init>= <expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>kLongest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>count</name> <operator>*</operator> <operator>(</operator><name>kLongest</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>str</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>kLongest</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_FLAGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>accessStr</name> <init>= <expr><name><name>kAccessStrings</name><index>[<expr><name>forWhat</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>accessStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>cp</name> <operator>-</operator> <name>str</name><operator>)</operator> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&gt;=</operator> <name>maxSize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>accessStr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dex_type_descriptor</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>type_idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>type_idx</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dex_get_proto</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proto_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>params_off</name></decl>, <decl><type ref="prev"/><name>type_id</name></decl>, <decl><type ref="prev"/><name>list_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>return_type</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>signature</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>type_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>proto_id</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>prototypes_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>params_off</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>protos</name><index>[<expr><name>proto_id</name></expr>]</index></name><operator>.</operator><name>parameters_off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>params_off</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>type_id</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>protos</name><index>[<expr><name>proto_id</name></expr>]</index></name><operator>.</operator><name>return_type_id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type_id</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr> )</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>return_type</name> <operator>=</operator> <call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>type_id</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>return_type</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>params_off</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"()%s"</literal></expr></argument>, <argument><expr><name>return_type</name></expr></argument>)</argument_list></call></expr>;</return><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>params_buf</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>params_off</name></expr></argument>, <argument><expr><name>params_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>params_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list_size</name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>params_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list_size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>list_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buff_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>params_off</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>typeidx_buf</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>typeidx_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>typeidx_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>type_idx</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>typeidx_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type_idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name> <operator>||</operator> <name>type_idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buff</name> <operator>=</operator> <call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>type_idx</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buff</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buff_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>buff_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newsig</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newsig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot realloc to %d\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>signature</name> <operator>=</operator> <name>newsig</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>signature</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>buff_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>signature</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>signature</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"(%s)%s"</literal></expr></argument>, <argument><expr><name>signature</name></expr></argument>, <argument><expr><name>return_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dex_method_signature</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>method_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>method_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>method_idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>dex_get_proto</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>method_idx</name></expr>]</index></name><operator>.</operator><name>proto_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>read32</name><parameter_list>(<parameter><decl><type><name>RBuffer</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>read16</name><parameter_list>(<parameter><decl><type><name>RBuffer</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>dex_method_signature2</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>method_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>proto_id</name></decl>, <decl><type ref="prev"/><name>params_off</name></decl>, <decl><type ref="prev"/><name>list_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>type_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>params</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>method_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>method_idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>proto_id</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>method_idx</name></expr>]</index></name><operator>.</operator><name>proto_id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>proto_id</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>prototypes_size</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>params_off</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>protos</name><index>[<expr><name>proto_id</name></expr>]</index></name><operator>.</operator><name>parameters_off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>params_off</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>params_off</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>params</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list_size</name> <operator>=</operator> <call><name>read32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>params_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>list_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>of</name> <init>= <expr><name>params_off</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>of</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>of</name> <operator>&lt;</operator> <name>params_off</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>type_idx</name> <operator>=</operator> <call><name>read16</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>of</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type_idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name> <operator>||</operator> <name>type_idx</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>type_idx</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buff</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>params</name></expr>;</return>
<label><name>out_error</name>:</label>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>dex_parse_debug_item</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>,
<parameter><decl><type><name>RBinDexClass</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>MI</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>MA</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ins_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>insns_size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regsz</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>debug_info_off</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>rbin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>dex</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>debug_info_off</name> <operator>&gt;=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>debug_info_off</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>debug_info_off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p4</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p4_end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>line_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>parameters_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>param_type_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>argReg</name> <init>= <expr><name>regsz</name> <operator>-</operator> <name>ins_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>source_file_idx</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>source_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>params</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>debug_positions</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>emitted_debug_locals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>keep</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argReg</name> <operator>&gt;</operator> <name>regsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parameters_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ut32</name></type> <name>address</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>line</name> <init>= <expr><name>line_start</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>debug_positions</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>emitted_debug_locals</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dex_debug_local_t</name></name> <modifier>*</modifier></type><name>debug_locals</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_debug_local_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>regsz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>MA</name> <operator>&amp;</operator> <literal type="number">0x0008</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>argReg</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"this"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>argReg</name></expr>]</index></name><operator>.</operator><name>descriptor</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s;"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>argReg</name></expr>]</index></name><operator>.</operator><name>startAddress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>argReg</name></expr>]</index></name><operator>.</operator><name>signature</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>argReg</name></expr>]</index></name><operator>.</operator><name>live</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argReg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>params</name> <operator>=</operator> <call><name>dex_method_signature2</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>MI</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>emitted_debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>params</argument>, <argument>iter</argument>, <argument>type</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>argReg</name> <operator>&gt;=</operator> <name>regsz</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>type</name> <operator>||</operator> <name>parameters_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>emitted_debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_type_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>param_type_idx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>getstr</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>param_type_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <name>argReg</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<expr_stmt><expr><name>argReg</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>argReg</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>descriptor</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>signature</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>startAddress</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>live</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>parameters_size</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p4</name> <operator>||</operator> <name>p4</name> <operator>&gt;=</operator> <name>p4_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>emitted_debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name> <init>= <expr><operator>*</operator><operator>(</operator><name>p4</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>keep</name> <operator>&amp;&amp;</operator> <name>p4</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>p4_end</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> 
<expr_stmt><expr><name>keep</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x1</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr_diff</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>address</name> <operator>+=</operator> <name>addr_diff</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x2</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>st64</name></type> <name>line_diff</name> <init>= <expr><call><name>r_sleb128</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>line_diff</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x3</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>register_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>name_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>type_idx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>register_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_idx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type_idx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>register_num</name> <operator>&gt;=</operator> <name>regsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>emitted_debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>live</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_debug_local_t</name></name> <modifier>*</modifier></type><name>local</name> <init>= <expr><call><name>malloc</name> <argument_list>(
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_debug_local_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keep</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>descriptor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>startAddress</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>startAddress</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>signature</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>live</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name>register_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>endAddress</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>emitted_debug_locals</name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>getstr</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>name_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>descriptor</name> <operator>=</operator> <call><name>dex_type_descriptor</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>type_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>startAddress</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>signature</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>live</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x4</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>register_num</name></decl>, <decl><type ref="prev"/><name>name_idx</name></decl>, <decl><type ref="prev"/><name>type_idx</name></decl>, <decl><type ref="prev"/><name>sig_idx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>register_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_idx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type_idx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sig_idx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>register_num</name> <operator>&gt;=</operator> <name>regsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>live</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_debug_local_t</name></name> <modifier>*</modifier></type><name>local</name> <init>= <expr><call><name>malloc</name> <argument_list>(
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_debug_local_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keep</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>descriptor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>startAddress</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>startAddress</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>signature</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>live</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name>register_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>endAddress</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>emitted_debug_locals</name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>getstr</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>name_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>descriptor</name> <operator>=</operator> <call><name>dex_type_descriptor</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>type_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>startAddress</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>signature</name> <operator>=</operator> <call><name>getstr</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>sig_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>live</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x5</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>register_num</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>register_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>register_num</name> <operator>&gt;=</operator> <name>regsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>live</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_debug_local_t</name></name> <modifier>*</modifier></type><name>local</name> <init>= <expr><call><name>malloc</name> <argument_list>(
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_debug_local_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keep</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>descriptor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>startAddress</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>startAddress</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>signature</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>live</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name>register_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>endAddress</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>emitted_debug_locals</name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>live</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x6</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>register_num</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>register_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>register_num</name> <operator>&gt;=</operator> <name>regsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>live</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>startAddress</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>debug_locals</name><index>[<expr><name>register_num</name></expr>]</index></name><operator>.</operator><name>live</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x7</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">0x9</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p4_end</name> <operator>-</operator> <name>p4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_file_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source_file_idx</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>adjusted_opcode</name> <init>= <expr><name>opcode</name> <operator>-</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>address</name> <operator>+=</operator> <operator>(</operator><name>adjusted_opcode</name> <operator>/</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <operator>-</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>adjusted_opcode</name> <operator>%</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_debug_position_t</name></name> <modifier>*</modifier></type><name>position</name> <init>=
<expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>dex_debug_position_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>position</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keep</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>position</name><operator>-&gt;</operator><name>source_file_idx</name></name> <operator>=</operator> <name>source_file_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>p4</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>p4_end</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p4</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_debug_position_t</name></name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<macro><name>r_list_foreach</name> <argument_list>(<argument>debug_positions</argument>, <argument>iter1</argument>, <argument>pos</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>source_file_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>offset</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fileline</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s|%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>offset_ptr</name> <init>= <expr><call><name>sdb_itoa</name> <argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>address</name></name> <operator>+</operator> <name>paddr</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>, <argument><expr><name>offset_ptr</name></expr></argument>, <argument><expr><name>fileline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>, <argument><expr><name>fileline</name></expr></argument>, <argument><expr><name>offset_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fileline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>RBinDwarfRow</name> <modifier>*</modifier></type><name>rbindwardrow</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinDwarfRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rbindwardrow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dexdump</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rbindwardrow</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbindwardrow</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>address</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbindwardrow</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dex</name><operator>-&gt;</operator><name>lines_list</name></name></expr></argument>, <argument><expr><name>rbindwardrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rbindwardrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>emitted_debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_debug_position_t</name></name> <modifier>*</modifier></type><name>position</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" positions :\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>debug_positions</argument>, <argument>iter2</argument>, <argument>position</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" 0x%04"</literal><name>PFMT64x</name><literal type="string">" line=%llu\n"</literal></expr></argument>,
<argument><expr><name><name>position</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" locals :\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_debug_local_t</name></name> <modifier>*</modifier></type><name>local</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>emitted_debug_locals</argument>, <argument>iter3</argument>, <argument>local</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>local</name><operator>-&gt;</operator><name>signature</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(
<argument><expr><literal type="string">" 0x%04x - 0x%04x reg=%d %s %s %s\n"</literal></expr></argument>,
<argument><expr><name><name>local</name><operator>-&gt;</operator><name>startAddress</name></name></expr></argument>, <argument><expr><name><name>local</name><operator>-&gt;</operator><name>endAddress</name></name></expr></argument>,
<argument><expr><name><name>local</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>local</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>local</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>,
<argument><expr><name><name>local</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(
<argument><expr><literal type="string">" 0x%04x - 0x%04x reg=%d %s %s\n"</literal></expr></argument>,
<argument><expr><name><name>local</name><operator>-&gt;</operator><name>startAddress</name></name></expr></argument>, <argument><expr><name><name>local</name><operator>-&gt;</operator><name>endAddress</name></name></expr></argument>,
<argument><expr><name><name>local</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>local</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>local</name><operator>-&gt;</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<for>for <control>(<init><expr><name>reg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>reg</name> <operator>&lt;</operator> <name>regsz</name></expr>;</condition> <incr><expr><name>reg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>live</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>signature</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(
<argument><expr><literal type="string">" 0x%04x - 0x%04x reg=%d %s %s "</literal>
<literal type="string">"%s\n"</literal></expr></argument>,
<argument><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>startAddress</name></expr></argument>,
<argument><expr><name>insns_size</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>descriptor</name></expr></argument>,
<argument><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(
<argument><expr><literal type="string">" 0x%04x - 0x%04x reg=%d %s %s"</literal>
<literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>startAddress</name></expr></argument>,
<argument><expr><name>insns_size</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>debug_locals</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>emitted_debug_locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Sdb</name> <modifier>*</modifier></type><name>get_sdb</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><operator>(</operator>struct <name>r_bin_dex_obj_t</name> <operator>*</operator><operator>)</operator> <name><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bin_obj</name> <operator>=</operator> <call><name>r_bin_dex_new_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>bin_obj</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>baddr</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>tmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"dex\n035\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"dex\n036\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"dex\n038\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"dex\n009\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"dex\n009\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"dex\n"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinInfo</name> <modifier>*</modifier></type><name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinHash</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <ternary><condition><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"DEX CLASS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_lit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bclass</name></name> <operator>=</operator> <call><name>r_bin_dex_get_version</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>rclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"linux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>subsystem</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>dexSubsystem</name></expr>?</condition><then> <expr><name>dexSubsystem</name></expr></then><else>: <expr><literal type="string">"java"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Dalvik VM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"sha1"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"adler32"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>fc</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>tmpsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>cc</name> <init>= <expr><call><name>__adler32</name> <argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>tmpsz</name> <operator>-</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>!=</operator> <name>cc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"#adler32 checksum doesn't match. Type this to fix it:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"wx `ph sha1 $s-32 @32` @12 ; wx `ph adler32 $s-12 @12` @8\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"dalvik"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <literal type="string">"dalvik"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>dbg_info</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>strings</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><operator>(</operator>struct <name>r_bin_dex_obj_t</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>strings_size</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>strings_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinString</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name><name>bin</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>dex_read_uleb128</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <name>R_BIN_SIZEOF_STRINGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>dex_uleb128_len</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>off</name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name><name>ptr</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>string</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><literal type="string">"[L"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
<label><name>out_error</name>:</label>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dex_method_name</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cid</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>class_id</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>cid</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>strings_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name_id</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>tid</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>strings_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>simplify</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_rchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_cpy</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dex_class_name_byid</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>types</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>cid</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tid</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>simplifiedDemangling</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>simplify</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dex_class_name</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinDexClass</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>dex_class_name_byid</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>class_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>simplifiedDemangling</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>simplify</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_str_cpy</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dex_field_name</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cid</name></decl>, <decl><type ref="prev"/><name>tid</name></decl>, <decl><type ref="prev"/><name>type_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fid</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>fields_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cid</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>fid</name></expr>]</index></name><operator>.</operator><name>class_id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>cid</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>type_id</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>fid</name></expr>]</index></name><operator>.</operator><name>type_id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type_id</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>type_id</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tid</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>fid</name></expr>]</index></name><operator>.</operator><name>name_id</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>type_id</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>simplifiedDemangling</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_a</name> <init>= <expr><call><name>simplify</name><argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_b</name> <init>= <expr><call><name>simplify</name><argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_c</name> <init>= <expr><call><name>simplify</name><argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"(%s) %s.%s"</literal></expr></argument>, <argument><expr><name>_c</name></expr></argument>, <argument><expr><name>_a</name></expr></argument>, <argument><expr><name>_b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"(%d) %d.%d"</literal></expr></argument>,
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>type_id</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>,
<argument><expr><name>tid</name></expr></argument>,
<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>
)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>c</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s-&gt;%s %s"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%d-&gt;%d %d"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>type_id</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dex_method_fullname</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>method_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>types</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>method_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>method_idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cid</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>method_idx</name></expr>]</index></name><operator>.</operator><name>class_id</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>cid</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>dex_method_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>method_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>className</name> <init>= <expr><call><name>dex_class_name_byid</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>cid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flagname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>className</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>signature</name> <init>= <expr><call><name>dex_method_signature</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>method_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>signature</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flagname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s%s"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flagname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s%s"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>signature</name> <init>= <expr><call><name>dex_method_signature</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>method_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>signature</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flagname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s%s"</literal></expr></argument>, <argument><expr><literal type="string">"???"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flagname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s%s"</literal></expr></argument>, <argument><expr><literal type="string">"???"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flagname</name> <operator>&amp;&amp;</operator> <name>simplifiedDemangling</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>flagname</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>simplify</name> <argument_list>(<argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_cpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>simplify</name> <argument_list>(<argument><expr><name>flagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>flagname</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>dex_get_type_offset</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><operator>(</operator><name>RBinDexObj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>types</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>type_idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_offset</name></name> <operator>+</operator> <name>type_idx</name> <operator>*</operator> <literal type="number">0x04</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dex_class_super_name</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinDexClass</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>types</name></name> <operator>&amp;&amp;</operator> <name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cid</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>super_class</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>cid</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>parse_dex_class_fields</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinDexClass</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>cls</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sym_count</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>fields_count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_sfield</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>dex</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>lastIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>ff</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>DexField</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DexField</name></type> <name>field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>type_str</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>fieldIndex</name></decl>, <decl><type ref="prev"/><name>accessFlags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fieldIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>accessFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>fieldIndex</name> <operator>+=</operator> <name>lastIndex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>=</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>fields_offset</name></name> <operator>+</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>DexField</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>fieldIndex</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>total</name> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>total</name> <operator>&lt;</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>fields_offset</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>DexField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>DexField</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>field</name><operator>.</operator><name>class_id</name></name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>.</operator><name>type_id</name></name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>ff</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>.</operator><name>name_id</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>ff</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fieldName</name> <init>= <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name><name>field</name><operator>.</operator><name>name_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>.</operator><name>type_id</name></name> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tid</name> <operator>=</operator> <name><name>dex</name><operator>-&gt;</operator><name>types</name><index>[<expr><name><name>field</name><operator>.</operator><name>type_id</name></name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_str</name> <operator>=</operator> <call><name>getstr</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_sfield</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.sfield_%s:%s"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"STATIC"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.ifield_%s:%s"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FIELD"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"method."</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>sym_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>accessStr</name> <init>= <expr><call><name>createAccessFlagStr</name> <argument_list>(
<argument><expr><name>accessFlags</name></expr></argument>, <argument><expr><name>kAccessForField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" #%d : (in %s;)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" name : '%s'\n"</literal></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" type : '%s'\n"</literal></expr></argument>, <argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" access : 0x%04x (%s)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>accessFlags</name></expr></argument>, <argument><expr><ternary><condition><expr><name>accessStr</name></expr>?</condition><then> <expr><name>accessStr</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dex</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>get_method_flags</name> <argument_list>(<argument><expr><name>accessFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lastIndex</name> <operator>=</operator> <name>fieldIndex</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>parse_dex_class_method</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinDexClass</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>cls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sym_count</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>DM</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>methods</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_direct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bufbuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>dex</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bin_dbginfo</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>want_dbginfo</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>omi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>catchAll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>regsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ins_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>outs_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tries_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>start_addr</name></decl>, <decl><type ref="prev"/><name>insn_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>debug_info_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>insns_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>encoded_method_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dex</name><operator>-&gt;</operator><name>trycatch_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dex</name><operator>-&gt;</operator><name>trycatch_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_trycatch_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>DM</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"This DEX is probably corrupted. Chopping DM from %d to 4KB\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>DM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DM</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>encoded_method_addr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>MI</name></decl>, <decl><type ref="prev"/><name>MA</name></decl>, <decl><type ref="prev"/><name>MC</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MI</name> <operator>+=</operator> <name>omi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>omi</name> <operator>=</operator> <name>MI</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>MI</name> <operator>&lt;</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>methods</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>methods</name><index>[<expr><name>MI</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>method_name</name> <init>= <expr><call><name>dex_method_name</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>MI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>signature</name> <init>= <expr><call><name>dex_method_signature</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>MI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>method_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>method_name</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flag_name</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.method.%s%s"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>method_name</name></expr></argument>, <argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag_name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>flag_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>flag_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>ut64</name></type> <name>v2</name></decl>, <decl><type ref="prev"/><name>handler_type</name></decl>, <decl><type ref="prev"/><name>handler_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>MC</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>MC</name> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>MC</name> <operator>+</operator> <literal type="number">16</literal> <operator>&lt;</operator> <name>MC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>flag_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>bufsz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bufsz</name> <operator>&lt;</operator> <name>MC</name> <operator>||</operator> <name>bufsz</name> <operator>&lt;</operator> <name>MC</name> <operator>+</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>flag_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>regsz</name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>MC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ins_size</name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>MC</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outs_size</name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>MC</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tries_size</name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>MC</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_info_off</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>MC</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>insns_size</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>MC</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>padd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tries_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>insns_size</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>padd</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>insns_size</name> <operator>+</operator> <name>padd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>accessStr</name> <init>= <expr><call><name>createAccessFlagStr</name> <argument_list>(<argument><expr><name>MA</name></expr></argument>, <argument><expr><name>kAccessForMethod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" #%d : (in %s;)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" name : '%s'\n"</literal></expr></argument>, <argument><expr><name>method_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" type : '%s'\n"</literal></expr></argument>, <argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" access : 0x%04x (%s)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>MA</name></expr></argument>, <argument><expr><name>accessStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>MC</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" code -\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" registers : %d\n"</literal></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" ins : %d\n"</literal></expr></argument>, <argument><expr><name>ins_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" outs : %d\n"</literal></expr></argument>, <argument><expr><name>outs_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(
<argument><expr><literal type="string">" insns size : %d 16-bit code "</literal>
<literal type="string">"units\n"</literal></expr></argument>,
<argument><expr><name>insns_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tries_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" catches : %d\n"</literal></expr></argument>, <argument><expr><name>tries_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tries_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name>MC</name> <operator>+</operator> <name>t</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <name>MC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>bufsz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bufsz</name> <operator>&lt;</operator> <name>offset</name> <operator>||</operator> <name>bufsz</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>start_addr</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>insn_count</name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>ut64</name></type> <name>handler_off</name> <init>= <expr><call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>method_offset</name> <init>= <expr><name>MC</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>try_from</name> <init>= <expr><operator>(</operator><name>start_addr</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>method_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>try_to</name> <init>= <expr><operator>(</operator><name>start_addr</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>insn_count</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>method_offset</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>try_catch</name> <init>= <expr><name>try_to</name> <operator>+</operator> <name>handler_off</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" 0x%04x - 0x%04x\n"</literal></expr></argument>, <argument><expr><name>start_addr</name></expr></argument>, <argument><expr><operator>(</operator><name>start_addr</name> <operator>+</operator> <name>insn_count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinTrycatch</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><call><name>r_bin_trycatch_new</name> <argument_list>(<argument><expr><name>method_offset</name></expr></argument>, <argument><expr><name>try_from</name></expr></argument>, <argument><expr><name>try_to</name></expr></argument>, <argument><expr><name>try_catch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dex</name><operator>-&gt;</operator><name>trycatch_list</name></name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>MC</name> <operator>+</operator> <name>t</name> <operator>+</operator> <name>tries_size</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>handler_off</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>off</name> <operator>&lt;</operator> <name>tries_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_sleb128</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>catchAll</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>-</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>catchAll</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_uleb128</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_uleb128</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>handler_type</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>handler_type</name> <operator>&lt;</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>getstr</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name><name>dex</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>handler_type</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(
<argument><expr><literal type="string">" %s "</literal>
<literal type="string">"-&gt; 0x%04"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>handler_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" (error) -&gt; 0x%04"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>handler_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>catchAll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_uleb128</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" &lt;any&gt; -&gt; 0x%04"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(
<argument><expr><literal type="string">" catches : "</literal>
<literal type="string">"(none)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(
<argument><expr><literal type="string">" code : (none)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>flag_name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>flag_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>flag_name</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>MC</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_FUNC_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>MC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>MC</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_METH_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>encoded_method_addr</name> <operator>-</operator> <name>bufbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>encoded_method_addr</name> <operator>-</operator> <name>bufbuf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dex</name><operator>-&gt;</operator><name>code_from</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>dex</name><operator>-&gt;</operator><name>code_from</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>MA</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>R_BIN_BIND_GLOBAL_STR</name></expr> </then><else>: <expr><name>R_BIN_BIND_LOCAL_STR</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>method_flags</name></name> <operator>=</operator> <call><name>get_method_flags</name> <argument_list>(<argument><expr><name>MA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>sym_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>MC</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>bufsz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bufsz</name> <operator>&lt;</operator> <name>MC</name> <operator>||</operator> <name>bufsz</name> <operator>&lt;</operator> <name>MC</name> <operator>+</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>tries_size</name> <init>= <expr><call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>MC</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>insns_size</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>MC</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>prolog_size</name> <init>= <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tries_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>MC</name> <operator>+</operator> <name>prolog_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>MC</name> <operator>+</operator> <name>prolog_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>insns_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dex</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dex</name><operator>-&gt;</operator><name>code_from</name></name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <name><name>dex</name><operator>-&gt;</operator><name>code_from</name></name> <operator>&gt;</operator> <name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dex</name><operator>-&gt;</operator><name>code_from</name></name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dex</name><operator>-&gt;</operator><name>code_to</name></name> <operator>&lt;</operator> <name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dex</name><operator>-&gt;</operator><name>code_to</name></name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name><name>sym</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mdb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mdb</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>mdb</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"method.%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>MI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (0) {
if (MA &amp; 0x10000) { 
if (!cdb) {
cdb = sdb_new0 ();
}
sdb_num_set (cdb, sdb_fmt ("%d", c-&gt;class_id), sym-&gt;paddr, 0);
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dex</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MC</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>debug_info_off</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>data_offset</name></name> <operator>&lt;</operator> <name>debug_info_off</name> <operator>&amp;&amp;</operator>
<name>debug_info_off</name> <operator>&lt;</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>data_offset</name></name> <operator>+</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bin_dbginfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dex_parse_debug_item</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>MI</name></expr></argument>, <argument><expr><name>MA</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>ins_size</name></expr></argument>,
<argument><expr><name>insns_size</name></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>, <argument><expr><name>debug_info_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>MC</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" positions :\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">" locals :\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>flag_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_class</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinDexClass</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>class_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>methods</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sym_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name> <modifier>*</modifier></type><name>dex</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>rbin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name> <init>= <expr><call><name>dex_class_name</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>class_name</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>superClass</name> <init>= <expr><call><name>dex_class_super_name</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>superClass</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>class_name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>class_name</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>cls</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cls</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>class_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cls</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>class_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cls</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>class_offset</name></name> <operator>+</operator> <name>class_index</name> <operator>*</operator> <name>DEX_CLASS_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cls</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cls</name><operator>-&gt;</operator><name>super</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>superClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cls</name><operator>-&gt;</operator><name>methods</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cls</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cls</name><operator>-&gt;</operator><name>fields</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>createAccessFlagStr</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>access_flags</name></name></expr></argument>, <argument><expr><name>kAccessForClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cls</name><operator>-&gt;</operator><name>visibility_str</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>str</name></expr>?</condition><then> <expr><name>str</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dex</name><operator>-&gt;</operator><name>classes_list</name></name></expr></argument>, <argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Class descriptor : '%s;'\n"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Access flags : 0x%04x (%s)\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>access_flags</name></name></expr></argument>,
<argument><expr><call><name>createAccessFlagStr</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>access_flags</name></name></expr></argument>, <argument><expr><name>kAccessForClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Superclass : '%s'\n"</literal></expr></argument>, <argument><expr><call><name>dex_class_super_name</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Interfaces -\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>interfaces_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>data_offset</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>interfaces_offset</name></name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>interfaces_offset</name></name> <operator>&lt;</operator>
<name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>data_offset</name></name> <operator>+</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>types_list_size</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>interfaces_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>types_list_size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>types_list_size</name> <operator>&gt;=</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr> )</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>types_list_size</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>le16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>off</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>interfaces_offset</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>z</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>le16</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>le16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>le16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;</operator> <name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><name><name>dex</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(
<argument><expr><literal type="string">" #%d : '%s'\n"</literal></expr></argument>,
<argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>getstr</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>class_data_offset</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(
<argument><expr><literal type="string">" Static fields -\n"</literal>
<literal type="string">" Instance fields -\n"</literal>
<literal type="string">" Direct methods -\n"</literal>
<literal type="string">" Virtual methods -\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>class_offset</name></name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>class_data_offset</name></name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>class_data_offset</name></name> <operator>&lt;</operator>
<name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>class_offset</name></name> <operator>+</operator>
<name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>class_size</name></name> <operator>*</operator> <name>DEX_CLASS_SIZE</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>bufbufsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bufbuf</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufbufsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>bufbuf</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>class_data_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bufbufsz</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>class_data_offset</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>p_size</name> <init>= <expr><operator>(</operator><name>bufbufsz</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>class_data_offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>p_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name></name> <operator>=</operator> <operator>(</operator>struct <name>dex_class_data_item_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_class_data_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>class_data</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>p_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>eof</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>p_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name><operator>-&gt;</operator><name>static_fields_size</name></name> <operator>=</operator> <name>eof</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>p_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name><operator>-&gt;</operator><name>instance_fields_size</name></name> <operator>=</operator> <name>eof</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>p_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name><operator>-&gt;</operator><name>direct_methods_size</name></name> <operator>=</operator> <name>eof</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_uleb128</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>p_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name><operator>-&gt;</operator><name>virtual_methods_size</name></name> <operator>=</operator> <name>eof</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Static fields -\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_dex_class_fields</name> <argument_list>(
<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>, <argument><expr><name>sym_count</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name><operator>-&gt;</operator><name>static_fields_size</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Instance fields -\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_dex_class_fields</name> <argument_list>(
<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>, <argument><expr><name>sym_count</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name><operator>-&gt;</operator><name>instance_fields_size</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Direct methods -\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse_dex_class_method</name> <argument_list>(
<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>, <argument><expr><name>sym_count</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name><operator>-&gt;</operator><name>direct_methods_size</name></name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>bufbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" Virtual methods -\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>parse_dex_class_method</name> <argument_list>(
<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>, <argument><expr><name>sym_count</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>class_data</name><operator>-&gt;</operator><name>virtual_methods_size</name></name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>bufbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>source_file</name> <init>= <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>source_file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(
<argument><expr><literal type="string">" source_file_idx : %d (unknown)\n\n"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" source_file_idx : %d (%s)\n\n"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>source_file</name></name></expr></argument>, <argument><expr><name>source_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_class_idx_in_code_classes</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>class_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>class_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>class_idx</name> <operator>==</operator> <name><name>bin</name><operator>-&gt;</operator><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class_id</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>dex_loadcode</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>rbin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>methods</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sym_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name>bin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>r_bin_dex_get_version</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>code_from</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>code_to</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>lines_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>lines_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>classes_list</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_class_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>classes_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>lines_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name><operator>&gt;</operator><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>class_size</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>class_size</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>strings_size</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>strings_size</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>strings_size</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid strings size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dexSubsystem</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>amount</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&gt;</operator> <name>UT32_MAX</name> <operator>||</operator> <name>amount</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>methods</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>amount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>class_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_class_t</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>classes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dexdump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Class #%d -\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>parse_class</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>methods</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>import_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sym_count</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class_id</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>types_size</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_class_idx_in_code_classes</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>className</name> <init>= <expr><call><name>getstr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class_id</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>className</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dexSubsystem</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><literal type="string">"wearable/view"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dexSubsystem</name> <operator>=</operator> <literal type="string">"android-wear"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><literal type="string">"android/view/View"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dexSubsystem</name> <operator>=</operator> <literal type="string">"android"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>method_name</name> <init>= <expr><call><name>dex_method_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>signature</name> <init>= <expr><call><name>dex_method_signature</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>method_name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>method_name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.method.%s%s"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>method_name</name></expr></argument>, <argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FUNC"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>import_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr></argument>, <argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>is_imported</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_FUNC_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>method_offset</name></name> <operator>+</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_method_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name><operator>)</operator></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>sym_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>mdb</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"method.%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>imports</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><operator>(</operator><name>RBinDexObj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dex_loadcode</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>trycatch</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><operator>(</operator><name>RBinDexObj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>trycatch_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dex_loadcode</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>trycatch_list</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>methods</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><operator>(</operator><name>RBinDexObj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dex_loadcode</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>classes</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><operator>(</operator><name>RBinDexObj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>classes_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dex_loadcode</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>classes_list</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>already_entry</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>entries</argument>, <argument>iter</argument>, <argument>e</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>==</operator> <name>vaddr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>entries</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><operator>(</operator><name>RBinDexObj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dex_loadcode</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>m</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">30</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>bind</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bind</name></name></expr></argument>, <argument><expr><name>R_BIN_BIND_LOCAL_STR</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>bind</name></name></expr></argument>, <argument><expr><name>R_BIN_BIND_GLOBAL_STR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">31</literal></expr></argument>,
<argument><expr><literal type="string">".onCreate(Landroid/os/Bundle;)V"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>already_entry</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>iter</argument>, <argument>m</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">26</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">27</literal></expr></argument>,
<argument><expr><literal type="string">".main([Ljava/lang/String;)V"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>already_entry</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>


if (r_list_empty (ret)) {
if (!already_entry (ret, bin-&gt;code_from)) {
ptr = R_NEW0 (RBinAddr);
if (ptr) {
ptr-&gt;paddr = ptr-&gt;vaddr = bin-&gt;code_from;
r_list_append (ret, ptr);
}
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getoffset</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name> <modifier>*</modifier></type><name>dex</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> 

<return>return <expr><call><name>offset_of_method_idx</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>dex</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<return>return <expr><call><name>dex_field_offset</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'o'</literal></expr>:</case> 
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: getoffset object\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
<case>case <expr><literal type="char">'s'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>dex</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>strings_size</name></name> <operator>&gt;</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dex</name><operator>-&gt;</operator><name>strings</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>dex</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> 
<return>return <expr><call><name>dex_get_type_offset</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> 
<return>return <expr><call><name>dex_get_type_offset</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getname</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>simplifiedDemangling</name> <operator>=</operator> <name>sd</name></expr>;</expr_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name> <modifier>*</modifier></type><name>dex</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> 
<return>return <expr><call><name>dex_method_fullname</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> 
<return>return <expr><call><name>dex_class_name_byid</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> 
<return>return <expr><call><name>dex_field_name</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> 
<return>return <expr><call><name>dex_get_proto</name> <argument_list>(<argument><expr><name>dex</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>sections</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ml</name> <init>= <expr><call><name>methods</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ns</name></decl>, <decl><type ref="prev"/><name>fsymsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fsym</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>ml</argument>, <argument>iter</argument>, <argument>m</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fsym</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&lt;</operator> <name>fsym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fsym</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ns</name> <operator>&gt;</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ns</name> <operator>&gt;</operator> <name>fsymsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fsymsz</name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fsym</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_header_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name><operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"constpool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_header_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>code_from</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>code_from</name></name> <operator>-</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Invalid code size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"Cd %d[%d]"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>code_from</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>code_to</name></name> <operator>-</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>fsymsz</name><operator>+</operator><name>fsym</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&gt;</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>code_to</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>


</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>code_from</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>code_to</name></name> <operator>-</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>is_segment</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>is_segment</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dex_header</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>dex</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DexHeader</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>&amp;</operator><name><name>dex</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PrintfCallback</name></type> <name>cb_printf</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"DEX file header:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"magic : 'dex\\n035\\0'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"checksum : %x\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"signature : %02x%02x...%02x%02x\n"</literal></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>signature</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>signature</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>signature</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>signature</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"file_size : %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"header_size : %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"link_size : %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>linksection_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"link_off : %d (0x%06x)\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>linksection_offset</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>linksection_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"string_ids_size : %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>strings_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"string_ids_off : %d (0x%06x)\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>strings_offset</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>strings_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"type_ids_size : %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>types_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"type_ids_off : %d (0x%06x)\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>types_offset</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>types_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"proto_ids_size : %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>prototypes_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"proto_ids_off : %d (0x%06x)\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>prototypes_offset</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>prototypes_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"field_ids_size : %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"field_ids_off : %d (0x%06x)\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>fields_offset</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>fields_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"method_ids_size : %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>method_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"method_ids_off : %d (0x%06x)\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>method_offset</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>method_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"class_defs_size : %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>class_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"class_defs_off : %d (0x%06x)\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>class_offset</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>class_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"data_size : %d\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb_printf</name> <argument_list>(<argument><expr><literal type="string">"data_off : %d (0x%06x)\n\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>dex</name><operator>-&gt;</operator><name>methods_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dexdump</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>dex_loadcode</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dexdump</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>u32s</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">108</literal></expr></argument>, <argument><expr><name>u32s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>off</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>u32s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">104</literal></expr></argument>, <argument><expr><name>u32s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>off</name> <operator>+</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>u32s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>R_BORROW</name> <name>RList</name> <modifier>*</modifier></type><name>lines</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name> <modifier>*</modifier></type><name>dex</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>


<return>return <expr><name><name>dex</name><operator>-&gt;</operator><name>lines_list</name></name></expr>;</return>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>dex_fields</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW</name><parameter_list>(<parameter><type><name>nam</name></type></parameter>,<parameter><type><name>siz</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_list_append (ret, r_bin_field_new (addr, addr, siz, nam, sdb_fmt ("0x%08"PFMT64x, (ut64)val), fmt, false)); addr += siz;</cpp:value></cpp:define>



<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>magic</name> <init>= <expr><call><name>r_buf_read_le64</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ROW</name> <argument_list>(<argument><expr><literal type="string">"dex_magic"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><literal type="string">"[8]c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>checksum</name> <init>= <expr><call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ROW</name> <argument_list>(<argument><expr><literal type="string">"dex_checksum"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>signature</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ROW</name> <argument_list>(<argument><expr><literal type="string">"dex_signature"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>signature</name></expr></argument>, <argument><expr><literal type="string">"[20]c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ROW</name> <argument_list>(<argument><expr><literal type="string">"dex_size"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>header_size</name> <init>= <expr><call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ROW</name> <argument_list>(<argument><expr><literal type="string">"dex_header_size"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>header_size</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>endian</name> <init>= <expr><call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ROW</name> <argument_list>(<argument><expr><literal type="string">"dex_endian"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>endian</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>libs</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_file_dirname</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"./"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>files</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_sort</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>cmp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>files</argument>, <argument>iter</argument>, <argument>file</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"classes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">".dex"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_dex</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dex"</literal></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"dex format bin plugin"</literal></expr>,
<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,
<expr><operator>.</operator><name>get_sdb</name> <operator>=</operator> <operator>&amp;</operator><name>get_sdb</name></expr>,
<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,
<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <name>check_buffer</name></expr>,
<expr><operator>.</operator><name>baddr</name> <operator>=</operator> <name>baddr</name></expr>,
<expr><operator>.</operator><name>entries</name> <operator>=</operator> <name>entries</name></expr>,
<expr><operator>.</operator><name>classes</name> <operator>=</operator> <name>classes</name></expr>,
<expr><operator>.</operator><name>sections</name> <operator>=</operator> <name>sections</name></expr>,
<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <name>methods</name></expr>,
<expr><operator>.</operator><name>trycatch</name> <operator>=</operator> <name>trycatch</name></expr>,
<expr><operator>.</operator><name>imports</name> <operator>=</operator> <name>imports</name></expr>,
<expr><operator>.</operator><name>strings</name> <operator>=</operator> <name>strings</name></expr>,
<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,
<expr><operator>.</operator><name>header</name> <operator>=</operator> <name>dex_header</name></expr>,
<expr><operator>.</operator><name>fields</name> <operator>=</operator> <name>dex_fields</name></expr>,
<expr><operator>.</operator><name>libs</name> <operator>=</operator> <operator>&amp;</operator><name>libs</name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>&amp;</operator><name>size</name></expr>,
<expr><operator>.</operator><name>get_offset</name> <operator>=</operator> <operator>&amp;</operator><name>getoffset</name></expr>,
<expr><operator>.</operator><name>get_name</name> <operator>=</operator> <operator>&amp;</operator><name>getname</name></expr>,
<expr><operator>.</operator><name>dbginfo</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_dbginfo_dex</name></expr>,
<expr><operator>.</operator><name>lines</name> <operator>=</operator> <operator>&amp;</operator><name>lines</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_dex</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
