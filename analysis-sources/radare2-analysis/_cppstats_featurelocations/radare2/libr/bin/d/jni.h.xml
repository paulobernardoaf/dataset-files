<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\d\jni.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JNI_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_H_</name></cpp:macro></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__R2TINYC__</name></expr></cpp:if>
<typedef>typedef <type><name>char</name><modifier>*</modifier></type> <name>va_list</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include> 
<typedef>typedef <type><name>uint8_t</name></type> <name>jboolean</name>;</typedef> 
<typedef>typedef <type><name>int8_t</name></type> <name>jbyte</name>;</typedef> 
<typedef>typedef <type><name>uint16_t</name></type> <name>jchar</name>;</typedef> 
<typedef>typedef <type><name>int16_t</name></type> <name>jshort</name>;</typedef> 
<typedef>typedef <type><name>int32_t</name></type> <name>jint</name>;</typedef> 
<typedef>typedef <type><name>int64_t</name></type> <name>jlong</name>;</typedef> 
<typedef>typedef <type><name>float</name></type> <name>jfloat</name>;</typedef> 
<typedef>typedef <type><name>double</name></type> <name>jdouble</name>;</typedef> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>jboolean</name>;</typedef> 
<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>jbyte</name>;</typedef> 
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>jchar</name>;</typedef> 
<typedef>typedef <type><name>short</name></type> <name>jshort</name>;</typedef> 
<typedef>typedef <type><name>int</name></type> <name>jint</name>;</typedef> 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>jlong</name>;</typedef> 
<typedef>typedef <type><name>float</name></type> <name>jfloat</name>;</typedef> 
<typedef>typedef <type><name>double</name></type> <name>jdouble</name>;</typedef> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name>jint</name></type> <name>jsize</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>class</name></type> <name>_jobject</name> <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jclass</name> <range>: <expr><name>public</name> <name>_jobject</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jstring</name> <range>: <expr><name>public</name> <name>_jobject</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jarray</name> <range>: <expr><name>public</name> <name>_jobject</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jobjectArray</name> <range>: <expr><name>public</name> <name>_jarray</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jbooleanArray</name> <range>: <expr><name>public</name> <name>_jarray</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jbyteArray</name> <range>: <expr><name>public</name> <name>_jarray</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jcharArray</name> <range>: <expr><name>public</name> <name>_jarray</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jshortArray</name> <range>: <expr><name>public</name> <name>_jarray</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jintArray</name> <range>: <expr><name>public</name> <name>_jarray</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jlongArray</name> <range>: <expr><name>public</name> <name>_jarray</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jfloatArray</name> <range>: <expr><name>public</name> <name>_jarray</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jdoubleArray</name> <range>: <expr><name>public</name> <name>_jarray</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>_jthrowable</name> <range>: <expr><name>public</name> <name>_jobject</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <type><name>_jobject</name><modifier>*</modifier></type> <name>jobject</name>;</typedef>
<typedef>typedef <type><name>_jclass</name><modifier>*</modifier></type> <name>jclass</name>;</typedef>
<typedef>typedef <type><name>_jstring</name><modifier>*</modifier></type> <name>jstring</name>;</typedef>
<typedef>typedef <type><name>_jarray</name><modifier>*</modifier></type> <name>jarray</name>;</typedef>
<typedef>typedef <type><name>_jobjectArray</name><modifier>*</modifier></type> <name>jobjectArray</name>;</typedef>
<typedef>typedef <type><name>_jbooleanArray</name><modifier>*</modifier></type> <name>jbooleanArray</name>;</typedef>
<typedef>typedef <type><name>_jbyteArray</name><modifier>*</modifier></type> <name>jbyteArray</name>;</typedef>
<typedef>typedef <type><name>_jcharArray</name><modifier>*</modifier></type> <name>jcharArray</name>;</typedef>
<typedef>typedef <type><name>_jshortArray</name><modifier>*</modifier></type> <name>jshortArray</name>;</typedef>
<typedef>typedef <type><name>_jintArray</name><modifier>*</modifier></type> <name>jintArray</name>;</typedef>
<typedef>typedef <type><name>_jlongArray</name><modifier>*</modifier></type> <name>jlongArray</name>;</typedef>
<typedef>typedef <type><name>_jfloatArray</name><modifier>*</modifier></type> <name>jfloatArray</name>;</typedef>
<typedef>typedef <type><name>_jdoubleArray</name><modifier>*</modifier></type> <name>jdoubleArray</name>;</typedef>
<typedef>typedef <type><name>_jthrowable</name><modifier>*</modifier></type> <name>jthrowable</name>;</typedef>
<typedef>typedef <type><name>_jobject</name><modifier>*</modifier></type> <name>jweak</name>;</typedef>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 




<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>jobject</name>;</typedef>
<typedef>typedef <type><name>jobject</name></type> <name>jclass</name>;</typedef>
<typedef>typedef <type><name>jobject</name></type> <name>jstring</name>;</typedef>
<typedef>typedef <type><name>jobject</name></type> <name>jarray</name>;</typedef>
<typedef>typedef <type><name>jarray</name></type> <name>jobjectArray</name>;</typedef>
<typedef>typedef <type><name>jarray</name></type> <name>jbooleanArray</name>;</typedef>
<typedef>typedef <type><name>jarray</name></type> <name>jbyteArray</name>;</typedef>
<typedef>typedef <type><name>jarray</name></type> <name>jcharArray</name>;</typedef>
<typedef>typedef <type><name>jarray</name></type> <name>jshortArray</name>;</typedef>
<typedef>typedef <type><name>jarray</name></type> <name>jintArray</name>;</typedef>
<typedef>typedef <type><name>jarray</name></type> <name>jlongArray</name>;</typedef>
<typedef>typedef <type><name>jarray</name></type> <name>jfloatArray</name>;</typedef>
<typedef>typedef <type><name>jarray</name></type> <name>jdoubleArray</name>;</typedef>
<typedef>typedef <type><name>jobject</name></type> <name>jthrowable</name>;</typedef>
<typedef>typedef <type><name>jobject</name></type> <name>jweak</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<struct_decl>struct <name>_jfieldID</name>;</struct_decl> 
<typedef>typedef <type><name><name>struct</name> <name>_jfieldID</name></name><modifier>*</modifier></type> <name>jfieldID</name>;</typedef> 

<struct_decl>struct <name>_jmethodID</name>;</struct_decl> 
<typedef>typedef <type><name><name>struct</name> <name>_jmethodID</name></name><modifier>*</modifier></type> <name>jmethodID</name>;</typedef> 

<struct_decl>struct <name>JNIInvokeInterface</name>;</struct_decl>

<typedef>typedef <type><union>union <name>jvalue</name> <block>{
<decl_stmt><decl><type><name>jboolean</name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jbyte</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jchar</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jshort</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jint</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jlong</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfloat</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jdouble</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>l</name></decl>;</decl_stmt>
}</block></union></type> <name>jvalue</name>;</typedef>

<typedef>typedef <type><enum>enum <name>jobjectRefType</name> <block>{
<decl><name>JNIInvalidRefType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>JNILocalRefType</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>JNIGlobalRefType</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>JNIWeakGlobalRefType</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block></enum></type> <name>jobjectRefType</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>signature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>fnPtr</name></decl>;</decl_stmt>
}</block></struct></type> <name>JNINativeMethod</name>;</typedef>

<struct_decl>struct <name>_JNIEnv</name>;</struct_decl>
<struct_decl>struct <name>_JavaVM</name>;</struct_decl>
<typedef>typedef <type><specifier>const</specifier> <name><name>struct</name> <name>JNINativeInterface</name></name><modifier>*</modifier></type> <name>C_JNIEnv</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>_JNIEnv</name></type> <name>JNIEnv</name>;</typedef>
<typedef>typedef <type><name>_JavaVM</name></type> <name>JavaVM</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><specifier>const</specifier> <name><name>struct</name> <name>JNINativeInterface</name></name><modifier>*</modifier></type> <name>JNIEnv</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name><name>struct</name> <name>JNIInvokeInterface</name></name><modifier>*</modifier></type> <name>JavaVM</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<struct>struct <name>JNINativeInterface</name> <block>{
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved3</name></decl>;</decl_stmt>

<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>GetVersion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jclass</name></type> (<modifier>*</modifier><name>DefineClass</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jbyte</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jclass</name></type> (<modifier>*</modifier><name>FindClass</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jmethodID</name></type> (<modifier>*</modifier><name>FromReflectedMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jfieldID</name></type> (<modifier>*</modifier><name>FromReflectedField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>ToReflectedMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jclass</name></type> (<modifier>*</modifier><name>GetSuperclass</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>IsAssignableFrom</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>ToReflectedField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>Throw</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jthrowable</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>ThrowNew</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jthrowable</name></type> (<modifier>*</modifier><name>ExceptionOccurred</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ExceptionDescribe</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ExceptionClear</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>FatalError</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>PushLocalFrame</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>PopLocalFrame</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>NewGlobalRef</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>DeleteGlobalRef</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>DeleteLocalRef</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>IsSameObject</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>NewLocalRef</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>EnsureLocalCapacity</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>AllocObject</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>NewObject</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>NewObjectV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>NewObjectA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jclass</name></type> (<modifier>*</modifier><name>GetObjectClass</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>IsInstanceOf</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jmethodID</name></type> (<modifier>*</modifier><name>GetMethodID</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>CallObjectMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>CallObjectMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>CallObjectMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>CallBooleanMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>CallBooleanMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>CallBooleanMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>CallByteMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>CallByteMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>CallByteMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>CallCharMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>CallCharMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>CallCharMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>CallShortMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>CallShortMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>CallShortMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>CallIntMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>CallIntMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>CallIntMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>CallLongMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>CallLongMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>CallLongMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>CallFloatMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>CallFloatMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>CallFloatMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>CallDoubleMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>CallDoubleMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>CallDoubleMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CallVoidMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CallVoidMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CallVoidMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>CallNonvirtualObjectMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>CallNonvirtualObjectMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>CallNonvirtualObjectMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>CallNonvirtualBooleanMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>CallNonvirtualBooleanMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>CallNonvirtualBooleanMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>CallNonvirtualByteMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>CallNonvirtualByteMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>CallNonvirtualByteMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>CallNonvirtualCharMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>CallNonvirtualCharMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>CallNonvirtualCharMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>CallNonvirtualShortMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>CallNonvirtualShortMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>CallNonvirtualShortMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>CallNonvirtualIntMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>CallNonvirtualIntMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>CallNonvirtualIntMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>CallNonvirtualLongMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>CallNonvirtualLongMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>CallNonvirtualLongMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>CallNonvirtualFloatMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>CallNonvirtualFloatMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>CallNonvirtualFloatMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>CallNonvirtualDoubleMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>CallNonvirtualDoubleMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>CallNonvirtualDoubleMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CallNonvirtualVoidMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CallNonvirtualVoidMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CallNonvirtualVoidMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jfieldID</name></type> (<modifier>*</modifier><name>GetFieldID</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>GetObjectField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>GetBooleanField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>GetByteField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>GetCharField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>GetShortField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>GetIntField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>GetLongField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>GetFloatField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>GetDoubleField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list> ;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetObjectField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetBooleanField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetByteField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jbyte</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetCharField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jchar</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetShortField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jshort</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetIntField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetLongField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jlong</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetFloatField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jfloat</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetDoubleField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jdouble</name></type></decl></parameter>)</parameter_list> ;</function_decl>

<function_decl><type><name>jmethodID</name></type> (<modifier>*</modifier><name>GetStaticMethodID</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>CallStaticObjectMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>CallStaticObjectMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>CallStaticObjectMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>CallStaticBooleanMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>CallStaticBooleanMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>,
<parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>CallStaticBooleanMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>,
<parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>CallStaticByteMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>CallStaticByteMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>CallStaticByteMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>CallStaticCharMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>CallStaticCharMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>CallStaticCharMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>CallStaticShortMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>CallStaticShortMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>CallStaticShortMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>CallStaticIntMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>CallStaticIntMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>CallStaticIntMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>CallStaticLongMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>CallStaticLongMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>CallStaticLongMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>CallStaticFloatMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>CallStaticFloatMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>CallStaticFloatMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>CallStaticDoubleMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>CallStaticDoubleMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>CallStaticDoubleMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CallStaticVoidMethod</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CallStaticVoidMethodV</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CallStaticVoidMethodA</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jfieldID</name></type> (<modifier>*</modifier><name>GetStaticFieldID</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>GetStaticObjectField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>GetStaticBooleanField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name></type> (<modifier>*</modifier><name>GetStaticByteField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name></type> (<modifier>*</modifier><name>GetStaticCharField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name></type> (<modifier>*</modifier><name>GetStaticShortField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>GetStaticIntField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>GetStaticLongField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jfloat</name></type> (<modifier>*</modifier><name>GetStaticFloatField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>jdouble</name></type> (<modifier>*</modifier><name>GetStaticDoubleField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>)</parameter_list> ;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetStaticObjectField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetStaticBooleanField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetStaticByteField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jbyte</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetStaticCharField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jchar</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetStaticShortField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jshort</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetStaticIntField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetStaticLongField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jlong</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetStaticFloatField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jfloat</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetStaticDoubleField</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type></decl></parameter>, <parameter><decl><type><name>jdouble</name></type></decl></parameter>)</parameter_list> ;</function_decl>

<function_decl><type><name>jstring</name></type> (<modifier>*</modifier><name>NewString</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jsize</name></type> (<modifier>*</modifier><name>GetStringLength</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jstring</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetStringChars</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jstring</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseStringChars</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jstring</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jstring</name></type> (<modifier>*</modifier><name>NewStringUTF</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jsize</name></type> (<modifier>*</modifier><name>GetStringUTFLength</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jstring</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetStringUTFChars</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jstring</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseStringUTFChars</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jstring</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jsize</name></type> (<modifier>*</modifier><name>GetArrayLength</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jarray</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobjectArray</name></type> (<modifier>*</modifier><name>NewObjectArray</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>GetObjectArrayElement</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobjectArray</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetObjectArrayElement</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobjectArray</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jbooleanArray</name></type> (<modifier>*</modifier><name>NewBooleanArray</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyteArray</name></type> (<modifier>*</modifier><name>NewByteArray</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jcharArray</name></type> (<modifier>*</modifier><name>NewCharArray</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshortArray</name></type> (<modifier>*</modifier><name>NewShortArray</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jintArray</name></type> (<modifier>*</modifier><name>NewIntArray</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlongArray</name></type> (<modifier>*</modifier><name>NewLongArray</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jfloatArray</name></type> (<modifier>*</modifier><name>NewFloatArray</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jdoubleArray</name></type> (<modifier>*</modifier><name>NewDoubleArray</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jboolean</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetBooleanArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jbooleanArray</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jbyte</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetByteArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jchar</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetCharArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jcharArray</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jshort</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetShortArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jshortArray</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetIntArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jintArray</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetLongArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jlongArray</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jfloat</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetFloatArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jfloatArray</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jdouble</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetDoubleArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jdoubleArray</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseBooleanArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jbooleanArray</name></type></decl></parameter>,
<parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseByteArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type></decl></parameter>,
<parameter><decl><type><name>jbyte</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseCharArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jcharArray</name></type></decl></parameter>,
<parameter><decl><type><name>jchar</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseShortArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jshortArray</name></type></decl></parameter>,
<parameter><decl><type><name>jshort</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseIntArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jintArray</name></type></decl></parameter>,
<parameter><decl><type><name>jint</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseLongArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jlongArray</name></type></decl></parameter>,
<parameter><decl><type><name>jlong</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseFloatArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jfloatArray</name></type></decl></parameter>,
<parameter><decl><type><name>jfloat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseDoubleArrayElements</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jdoubleArray</name></type></decl></parameter>,
<parameter><decl><type><name>jdouble</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GetBooleanArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jbooleanArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GetByteArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GetCharArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jcharArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GetShortArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jshortArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GetIntArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jintArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GetLongArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jlongArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jlong</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GetFloatArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jfloatArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GetDoubleArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jdoubleArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetBooleanArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jbooleanArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetByteArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jbyte</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetCharArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jcharArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetShortArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jshortArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jshort</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetIntArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jintArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jint</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetLongArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jlongArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jlong</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetFloatArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jfloatArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jfloat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SetDoubleArrayRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jdoubleArray</name></type></decl></parameter>,
<parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jdouble</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>RegisterNatives</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JNINativeMethod</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>UnregisterNatives</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jclass</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>MonitorEnter</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>MonitorExit</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>GetJavaVM</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>JavaVM</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GetStringRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jstring</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>GetStringUTFRegion</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jstring</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>jsize</name></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetPrimitiveArrayCritical</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jarray</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleasePrimitiveArrayCritical</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jarray</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetStringCritical</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jstring</name></type></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReleaseStringCritical</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jstring</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jweak</name></type> (<modifier>*</modifier><name>NewWeakGlobalRef</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>DeleteWeakGlobalRef</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jweak</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jboolean</name></type> (<modifier>*</modifier><name>ExceptionCheck</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>jobject</name></type> (<modifier>*</modifier><name>NewDirectByteBuffer</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jlong</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>GetDirectBufferAddress</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jlong</name></type> (<modifier>*</modifier><name>GetDirectBufferCapacity</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>jobjectRefType</name></type> (<modifier>*</modifier><name>GetObjectRefType</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>







<struct>struct <name>_JNIEnv</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>JNINativeInterface</name></name><modifier>*</modifier></type> <name>functions</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>jint</name></type> <name>GetVersion</name><parameter_list>()</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetVersion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jclass</name></type> <name>DefineClass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jbyte</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>jsize</name></type> <name>bufLen</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>DefineClass</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jclass</name></type> <name>FindClass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jmethodID</name></type> <name>FromReflectedMethod</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>FromReflectedMethod</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jfieldID</name></type> <name>FromReflectedField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>FromReflectedField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>ToReflectedMethod</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>cls</name></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><name>jboolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>ToReflectedMethod</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>isStatic</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jclass</name></type> <name>GetSuperclass</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetSuperclass</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jboolean</name></type> <name>IsAssignableFrom</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz1</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>clazz2</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>IsAssignableFrom</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz1</name></expr></argument>, <argument><expr><name>clazz2</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>ToReflectedField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>cls</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jboolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>ToReflectedField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>isStatic</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jint</name></type> <name>Throw</name><parameter_list>(<parameter><decl><type><name>jthrowable</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>Throw</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jint</name></type> <name>ThrowNew</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>ThrowNew</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jthrowable</name></type> <name>ExceptionOccurred</name><parameter_list>()</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>ExceptionOccurred</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ExceptionDescribe</name><parameter_list>()</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ExceptionDescribe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ExceptionClear</name><parameter_list>()</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>FatalError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>FatalError</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jint</name></type> <name>PushLocalFrame</name><parameter_list>(<parameter><decl><type><name>jint</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>PushLocalFrame</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>PopLocalFrame</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>PopLocalFrame</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>NewGlobalRef</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>DeleteGlobalRef</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>globalRef</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>globalRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>DeleteLocalRef</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>localRef</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>localRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jboolean</name></type> <name>IsSameObject</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>ref1</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>ref2</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>IsSameObject</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>NewLocalRef</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewLocalRef</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jint</name></type> <name>EnsureLocalCapacity</name><parameter_list>(<parameter><decl><type><name>jint</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>EnsureLocalCapacity</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>AllocObject</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>AllocObject</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>NewObject</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>result</name> <init>= <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewObjectV</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>jobject</name></type> <name>NewObjectV</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewObjectV</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>NewObjectA</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewObjectA</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jclass</name></type> <name>GetObjectClass</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jboolean</name></type> <name>IsInstanceOf</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>IsInstanceOf</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jmethodID</name></type> <name>GetMethodID</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_TYPE_METHOD</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jtype Call##_jname##Method(jobject obj, jmethodID methodID, ...) { _jtype result; va_list args; va_start(args, methodID); result = functions-&gt;Call##_jname##MethodV(this, obj, methodID, args); va_end(args); return result; }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_TYPE_METHODV</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jtype Call##_jname##MethodV(jobject obj, jmethodID methodID, va_list args) { return functions-&gt;Call##_jname##MethodV(this, obj, methodID, args); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_TYPE_METHODA</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jtype Call##_jname##MethodA(jobject obj, jmethodID methodID, jvalue* args) { return functions-&gt;Call##_jname##MethodA(this, obj, methodID, args); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_TYPE</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CALL_TYPE_METHOD(_jtype, _jname) CALL_TYPE_METHODV(_jtype, _jname) CALL_TYPE_METHODA(_jtype, _jname)</cpp:value></cpp:define>




<macro><name>CALL_TYPE</name><argument_list>(<argument>jobject</argument>, <argument>Object</argument>)</argument_list></macro>
<macro><name>CALL_TYPE</name><argument_list>(<argument>jboolean</argument>, <argument>Boolean</argument>)</argument_list></macro>
<macro><name>CALL_TYPE</name><argument_list>(<argument>jbyte</argument>, <argument>Byte</argument>)</argument_list></macro>
<macro><name>CALL_TYPE</name><argument_list>(<argument>jchar</argument>, <argument>Char</argument>)</argument_list></macro>
<macro><name>CALL_TYPE</name><argument_list>(<argument>jshort</argument>, <argument>Short</argument>)</argument_list></macro>
<macro><name>CALL_TYPE</name><argument_list>(<argument>jint</argument>, <argument>Int</argument>)</argument_list></macro>
<macro><name>CALL_TYPE</name><argument_list>(<argument>jlong</argument>, <argument>Long</argument>)</argument_list></macro>
<macro><name>CALL_TYPE</name><argument_list>(<argument>jfloat</argument>, <argument>Float</argument>)</argument_list></macro>
<macro><name>CALL_TYPE</name><argument_list>(<argument>jdouble</argument>, <argument>Double</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>CallVoidMethod</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>CallVoidMethodV</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>CallVoidMethodV</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>CallVoidMethodV</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>CallVoidMethodA</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>CallVoidMethodA</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_NONVIRT_TYPE_METHOD</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jtype CallNonvirtual##_jname##Method(jobject obj, jclass clazz, jmethodID methodID, ...) { _jtype result; va_list args; va_start(args, methodID); result = functions-&gt;CallNonvirtual##_jname##MethodV(this, obj, clazz, methodID, args); va_end(args); return result; }</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_NONVIRT_TYPE_METHODV</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jtype CallNonvirtual##_jname##MethodV(jobject obj, jclass clazz, jmethodID methodID, va_list args) { return functions-&gt;CallNonvirtual##_jname##MethodV(this, obj, clazz, methodID, args); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_NONVIRT_TYPE_METHODA</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jtype CallNonvirtual##_jname##MethodA(jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { return functions-&gt;CallNonvirtual##_jname##MethodA(this, obj, clazz, methodID, args); }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_NONVIRT_TYPE</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CALL_NONVIRT_TYPE_METHOD(_jtype, _jname) CALL_NONVIRT_TYPE_METHODV(_jtype, _jname) CALL_NONVIRT_TYPE_METHODA(_jtype, _jname)</cpp:value></cpp:define>




<macro><name>CALL_NONVIRT_TYPE</name><argument_list>(<argument>jobject</argument>, <argument>Object</argument>)</argument_list></macro>
<macro><name>CALL_NONVIRT_TYPE</name><argument_list>(<argument>jboolean</argument>, <argument>Boolean</argument>)</argument_list></macro>
<macro><name>CALL_NONVIRT_TYPE</name><argument_list>(<argument>jbyte</argument>, <argument>Byte</argument>)</argument_list></macro>
<macro><name>CALL_NONVIRT_TYPE</name><argument_list>(<argument>jchar</argument>, <argument>Char</argument>)</argument_list></macro>
<macro><name>CALL_NONVIRT_TYPE</name><argument_list>(<argument>jshort</argument>, <argument>Short</argument>)</argument_list></macro>
<macro><name>CALL_NONVIRT_TYPE</name><argument_list>(<argument>jint</argument>, <argument>Int</argument>)</argument_list></macro>
<macro><name>CALL_NONVIRT_TYPE</name><argument_list>(<argument>jlong</argument>, <argument>Long</argument>)</argument_list></macro>
<macro><name>CALL_NONVIRT_TYPE</name><argument_list>(<argument>jfloat</argument>, <argument>Float</argument>)</argument_list></macro>
<macro><name>CALL_NONVIRT_TYPE</name><argument_list>(<argument>jdouble</argument>, <argument>Double</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>CallNonvirtualVoidMethod</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>CallNonvirtualVoidMethodV</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>CallNonvirtualVoidMethodV</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>CallNonvirtualVoidMethodV</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>CallNonvirtualVoidMethodA</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>,
<parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>CallNonvirtualVoidMethodA</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jfieldID</name></type> <name>GetFieldID</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>GetObjectField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetObjectField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jboolean</name></type> <name>GetBooleanField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetBooleanField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jbyte</name></type> <name>GetByteField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetByteField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jchar</name></type> <name>GetCharField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetCharField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jshort</name></type> <name>GetShortField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetShortField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jint</name></type> <name>GetIntField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jlong</name></type> <name>GetLongField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jfloat</name></type> <name>GetFloatField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetFloatField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jdouble</name></type> <name>GetDoubleField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetDoubleField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetObjectField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetObjectField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetBooleanField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jboolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetBooleanField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetByteField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jbyte</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetByteField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetCharField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jchar</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetCharField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetShortField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jshort</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetShortField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetIntField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetIntField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetLongField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetLongField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetFloatField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jfloat</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetFloatField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetDoubleField</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jdouble</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetDoubleField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jmethodID</name></type> <name>GetStaticMethodID</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticMethodID</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_STATIC_TYPE_METHOD</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jtype CallStatic##_jname##Method(jclass clazz, jmethodID methodID, ...) { _jtype result; va_list args; va_start(args, methodID); result = functions-&gt;CallStatic##_jname##MethodV(this, clazz, methodID, args); va_end(args); return result; }</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_STATIC_TYPE_METHODV</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jtype CallStatic##_jname##MethodV(jclass clazz, jmethodID methodID, va_list args) { return functions-&gt;CallStatic##_jname##MethodV(this, clazz, methodID, args); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_STATIC_TYPE_METHODA</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_jtype CallStatic##_jname##MethodA(jclass clazz, jmethodID methodID, jvalue* args) { return functions-&gt;CallStatic##_jname##MethodA(this, clazz, methodID, args); }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_STATIC_TYPE</name><parameter_list>(<parameter><type><name>_jtype</name></type></parameter>, <parameter><type><name>_jname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CALL_STATIC_TYPE_METHOD(_jtype, _jname) CALL_STATIC_TYPE_METHODV(_jtype, _jname) CALL_STATIC_TYPE_METHODA(_jtype, _jname)</cpp:value></cpp:define>




<macro><name>CALL_STATIC_TYPE</name><argument_list>(<argument>jobject</argument>, <argument>Object</argument>)</argument_list></macro>
<macro><name>CALL_STATIC_TYPE</name><argument_list>(<argument>jboolean</argument>, <argument>Boolean</argument>)</argument_list></macro>
<macro><name>CALL_STATIC_TYPE</name><argument_list>(<argument>jbyte</argument>, <argument>Byte</argument>)</argument_list></macro>
<macro><name>CALL_STATIC_TYPE</name><argument_list>(<argument>jchar</argument>, <argument>Char</argument>)</argument_list></macro>
<macro><name>CALL_STATIC_TYPE</name><argument_list>(<argument>jshort</argument>, <argument>Short</argument>)</argument_list></macro>
<macro><name>CALL_STATIC_TYPE</name><argument_list>(<argument>jint</argument>, <argument>Int</argument>)</argument_list></macro>
<macro><name>CALL_STATIC_TYPE</name><argument_list>(<argument>jlong</argument>, <argument>Long</argument>)</argument_list></macro>
<macro><name>CALL_STATIC_TYPE</name><argument_list>(<argument>jfloat</argument>, <argument>Float</argument>)</argument_list></macro>
<macro><name>CALL_STATIC_TYPE</name><argument_list>(<argument>jdouble</argument>, <argument>Double</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>CallStaticVoidMethod</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>CallStaticVoidMethodV</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>CallStaticVoidMethodV</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>CallStaticVoidMethodV</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>CallStaticVoidMethodA</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jmethodID</name></type> <name>methodID</name></decl></parameter>, <parameter><decl><type><name>jvalue</name><modifier>*</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>CallStaticVoidMethodA</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>methodID</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jfieldID</name></type> <name>GetStaticFieldID</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticFieldID</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>GetStaticObjectField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticObjectField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jboolean</name></type> <name>GetStaticBooleanField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticBooleanField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jbyte</name></type> <name>GetStaticByteField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticByteField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jchar</name></type> <name>GetStaticCharField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticCharField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jshort</name></type> <name>GetStaticShortField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticShortField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jint</name></type> <name>GetStaticIntField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jlong</name></type> <name>GetStaticLongField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticLongField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jfloat</name></type> <name>GetStaticFloatField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticFloatField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jdouble</name></type> <name>GetStaticDoubleField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStaticDoubleField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetStaticObjectField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetStaticObjectField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetStaticBooleanField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jboolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetStaticBooleanField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetStaticByteField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jbyte</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetStaticByteField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetStaticCharField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jchar</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetStaticCharField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetStaticShortField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jshort</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetStaticShortField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetStaticIntField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetStaticIntField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetStaticLongField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetStaticLongField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetStaticFloatField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jfloat</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetStaticFloatField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetStaticDoubleField</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jfieldID</name></type> <name>fieldID</name></decl></parameter>, <parameter><decl><type><name>jdouble</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetStaticDoubleField</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jstring</name></type> <name>NewString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type> <name>unicodeChars</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewString</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>unicodeChars</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jsize</name></type> <name>GetStringLength</name><parameter_list>(<parameter><decl><type><name>jstring</name></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStringLength</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type> <name>GetStringChars</name><parameter_list>(<parameter><decl><type><name>jstring</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStringChars</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ReleaseStringChars</name><parameter_list>(<parameter><decl><type><name>jstring</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type> <name>chars</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseStringChars</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jstring</name></type> <name>NewStringUTF</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jsize</name></type> <name>GetStringUTFLength</name><parameter_list>(<parameter><decl><type><name>jstring</name></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStringUTFLength</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GetStringUTFChars</name><parameter_list>(<parameter><decl><type><name>jstring</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ReleaseStringUTFChars</name><parameter_list>(<parameter><decl><type><name>jstring</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>utf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>utf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jsize</name></type> <name>GetArrayLength</name><parameter_list>(<parameter><decl><type><name>jarray</name></type> <name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobjectArray</name></type> <name>NewObjectArray</name><parameter_list>(<parameter><decl><type><name>jsize</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>elementClass</name></decl></parameter>,
<parameter><decl><type><name>jobject</name></type> <name>initialElement</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewObjectArray</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>elementClass</name></expr></argument>,
<argument><expr><name>initialElement</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>GetObjectArrayElement</name><parameter_list>(<parameter><decl><type><name>jobjectArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetObjectArrayElement</name><parameter_list>(<parameter><decl><type><name>jobjectArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetObjectArrayElement</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jbooleanArray</name></type> <name>NewBooleanArray</name><parameter_list>(<parameter><decl><type><name>jsize</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewBooleanArray</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jbyteArray</name></type> <name>NewByteArray</name><parameter_list>(<parameter><decl><type><name>jsize</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewByteArray</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jcharArray</name></type> <name>NewCharArray</name><parameter_list>(<parameter><decl><type><name>jsize</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewCharArray</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jshortArray</name></type> <name>NewShortArray</name><parameter_list>(<parameter><decl><type><name>jsize</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewShortArray</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jintArray</name></type> <name>NewIntArray</name><parameter_list>(<parameter><decl><type><name>jsize</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewIntArray</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jlongArray</name></type> <name>NewLongArray</name><parameter_list>(<parameter><decl><type><name>jsize</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewLongArray</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jfloatArray</name></type> <name>NewFloatArray</name><parameter_list>(<parameter><decl><type><name>jsize</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewFloatArray</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jdoubleArray</name></type> <name>NewDoubleArray</name><parameter_list>(<parameter><decl><type><name>jsize</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewDoubleArray</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jboolean</name><modifier>*</modifier></type> <name>GetBooleanArrayElements</name><parameter_list>(<parameter><decl><type><name>jbooleanArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetBooleanArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jbyte</name><modifier>*</modifier></type> <name>GetByteArrayElements</name><parameter_list>(<parameter><decl><type><name>jbyteArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetByteArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jchar</name><modifier>*</modifier></type> <name>GetCharArrayElements</name><parameter_list>(<parameter><decl><type><name>jcharArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetCharArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jshort</name><modifier>*</modifier></type> <name>GetShortArrayElements</name><parameter_list>(<parameter><decl><type><name>jshortArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetShortArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jint</name><modifier>*</modifier></type> <name>GetIntArrayElements</name><parameter_list>(<parameter><decl><type><name>jintArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetIntArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jlong</name><modifier>*</modifier></type> <name>GetLongArrayElements</name><parameter_list>(<parameter><decl><type><name>jlongArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetLongArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jfloat</name><modifier>*</modifier></type> <name>GetFloatArrayElements</name><parameter_list>(<parameter><decl><type><name>jfloatArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetFloatArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jdouble</name><modifier>*</modifier></type> <name>GetDoubleArrayElements</name><parameter_list>(<parameter><decl><type><name>jdoubleArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetDoubleArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ReleaseBooleanArrayElements</name><parameter_list>(<parameter><decl><type><name>jbooleanArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>elems</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseBooleanArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>elems</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>ReleaseByteArrayElements</name><parameter_list>(<parameter><decl><type><name>jbyteArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jbyte</name><modifier>*</modifier></type> <name>elems</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseByteArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>elems</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>ReleaseCharArrayElements</name><parameter_list>(<parameter><decl><type><name>jcharArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jchar</name><modifier>*</modifier></type> <name>elems</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseCharArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>elems</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>ReleaseShortArrayElements</name><parameter_list>(<parameter><decl><type><name>jshortArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jshort</name><modifier>*</modifier></type> <name>elems</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseShortArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>elems</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>ReleaseIntArrayElements</name><parameter_list>(<parameter><decl><type><name>jintArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jint</name><modifier>*</modifier></type> <name>elems</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseIntArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>elems</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>ReleaseLongArrayElements</name><parameter_list>(<parameter><decl><type><name>jlongArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jlong</name><modifier>*</modifier></type> <name>elems</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseLongArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>elems</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>ReleaseFloatArrayElements</name><parameter_list>(<parameter><decl><type><name>jfloatArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jfloat</name><modifier>*</modifier></type> <name>elems</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseFloatArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>elems</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>ReleaseDoubleArrayElements</name><parameter_list>(<parameter><decl><type><name>jdoubleArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jdouble</name><modifier>*</modifier></type> <name>elems</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseDoubleArrayElements</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>elems</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>GetBooleanArrayRegion</name><parameter_list>(<parameter><decl><type><name>jbooleanArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetBooleanArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>GetByteArrayRegion</name><parameter_list>(<parameter><decl><type><name>jbyteArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>jbyte</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>GetCharArrayRegion</name><parameter_list>(<parameter><decl><type><name>jcharArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>jchar</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetCharArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>GetShortArrayRegion</name><parameter_list>(<parameter><decl><type><name>jshortArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>jshort</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetShortArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>GetIntArrayRegion</name><parameter_list>(<parameter><decl><type><name>jintArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>jint</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetIntArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>GetLongArrayRegion</name><parameter_list>(<parameter><decl><type><name>jlongArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>jlong</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetLongArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>GetFloatArrayRegion</name><parameter_list>(<parameter><decl><type><name>jfloatArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>jfloat</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetFloatArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>GetDoubleArrayRegion</name><parameter_list>(<parameter><decl><type><name>jdoubleArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>jdouble</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetDoubleArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetBooleanArrayRegion</name><parameter_list>(<parameter><decl><type><name>jbooleanArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>jboolean</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetBooleanArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetByteArrayRegion</name><parameter_list>(<parameter><decl><type><name>jbyteArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>jbyte</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetByteArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetCharArrayRegion</name><parameter_list>(<parameter><decl><type><name>jcharArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetCharArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetShortArrayRegion</name><parameter_list>(<parameter><decl><type><name>jshortArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>jshort</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetShortArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetIntArrayRegion</name><parameter_list>(<parameter><decl><type><name>jintArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>jint</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetIntArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetLongArrayRegion</name><parameter_list>(<parameter><decl><type><name>jlongArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>jlong</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetLongArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetFloatArrayRegion</name><parameter_list>(<parameter><decl><type><name>jfloatArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>jfloat</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetFloatArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>SetDoubleArrayRegion</name><parameter_list>(<parameter><decl><type><name>jdoubleArray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>jdouble</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>SetDoubleArrayRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jint</name></type> <name>RegisterNatives</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JNINativeMethod</name><modifier>*</modifier></type> <name>methods</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>nMethods</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>RegisterNatives</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>nMethods</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jint</name></type> <name>UnregisterNatives</name><parameter_list>(<parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>UnregisterNatives</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jint</name></type> <name>MonitorEnter</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>MonitorEnter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jint</name></type> <name>MonitorExit</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>MonitorExit</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jint</name></type> <name>GetJavaVM</name><parameter_list>(<parameter><decl><type><name>JavaVM</name><modifier>*</modifier><modifier>*</modifier></type> <name>vm</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetJavaVM</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>GetStringRegion</name><parameter_list>(<parameter><decl><type><name>jstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>jchar</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStringRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>GetStringUTFRegion</name><parameter_list>(<parameter><decl><type><name>jstring</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>jsize</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStringUTFRegion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>GetPrimitiveArrayCritical</name><parameter_list>(<parameter><decl><type><name>jarray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetPrimitiveArrayCritical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ReleasePrimitiveArrayCritical</name><parameter_list>(<parameter><decl><type><name>jarray</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>carray</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleasePrimitiveArrayCritical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>carray</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type> <name>GetStringCritical</name><parameter_list>(<parameter><decl><type><name>jstring</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>jboolean</name><modifier>*</modifier></type> <name>isCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetStringCritical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>isCopy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ReleaseStringCritical</name><parameter_list>(<parameter><decl><type><name>jstring</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jchar</name><modifier>*</modifier></type> <name>carray</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>ReleaseStringCritical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>carray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jweak</name></type> <name>NewWeakGlobalRef</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewWeakGlobalRef</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>DeleteWeakGlobalRef</name><parameter_list>(<parameter><decl><type><name>jweak</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name><name>functions</name><operator>-&gt;</operator><name>DeleteWeakGlobalRef</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>jboolean</name></type> <name>ExceptionCheck</name><parameter_list>()</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jobject</name></type> <name>NewDirectByteBuffer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>NewDirectByteBuffer</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>GetDirectBufferAddress</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetDirectBufferAddress</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>jlong</name></type> <name>GetDirectBufferCapacity</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetDirectBufferCapacity</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><name>jobjectRefType</name></type> <name>GetObjectRefType</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetObjectRefType</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
}</block>;</struct>





<struct>struct <name>JNIInvokeInterface</name> <block>{
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved2</name></decl>;</decl_stmt>

<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>DestroyJavaVM</name>)<parameter_list>(<parameter><decl><type><name>JavaVM</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>AttachCurrentThread</name>)<parameter_list>(<parameter><decl><type><name>JavaVM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>JNIEnv</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>DetachCurrentThread</name>)<parameter_list>(<parameter><decl><type><name>JavaVM</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>GetEnv</name>)<parameter_list>(<parameter><decl><type><name>JavaVM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>jint</name></type> (<modifier>*</modifier><name>AttachCurrentThreadAsDaemon</name>)<parameter_list>(<parameter><decl><type><name>JavaVM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>JNIEnv</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>




<struct>struct <name>_JavaVM</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>JNIInvokeInterface</name></name><modifier>*</modifier></type> <name>functions</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>jint</name></type> <name>DestroyJavaVM</name><parameter_list>()</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>DestroyJavaVM</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jint</name></type> <name>AttachCurrentThread</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier><modifier>*</modifier></type> <name>p_env</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>thr_args</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>AttachCurrentThread</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>thr_args</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jint</name></type> <name>DetachCurrentThread</name><parameter_list>()</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>DetachCurrentThread</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jint</name></type> <name>GetEnv</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>GetEnv</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>jint</name></type> <name>AttachCurrentThreadAsDaemon</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier><modifier>*</modifier></type> <name>p_env</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>thr_args</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name><name>functions</name><operator>-&gt;</operator><name>AttachCurrentThreadAsDaemon</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>thr_args</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
}</block>;</struct>

<struct>struct <name>JavaVMAttachArgs</name> <block>{
<decl_stmt><decl><type><name>jint</name></type> <name>version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>jobject</name></type> <name>group</name></decl>;</decl_stmt> 
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>JavaVMAttachArgs</name></name></type> <name>JavaVMAttachArgs</name>;</typedef>





<typedef>typedef <type><struct>struct <name>JavaVMOption</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>optionString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>extraInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>JavaVMOption</name>;</typedef>

<typedef>typedef <type><struct>struct <name>JavaVMInitArgs</name> <block>{
<decl_stmt><decl><type><name>jint</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>jint</name></type> <name>nOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JavaVMOption</name><modifier>*</modifier></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jboolean</name></type> <name>ignoreUnrecognized</name></decl>;</decl_stmt>
}</block></struct></type> <name>JavaVMInitArgs</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
jint JNI_GetDefaultJavaVMInitArgs(void*);
jint JNI_CreateJavaVM(JavaVM**, JNIEnv**, void*);
jint JNI_GetCreatedJavaVMs(JavaVM**, jsize, jsize*);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNIIMPORT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNIEXPORT</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("default")))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNICALL</name></cpp:macro></cpp:define> 





<function_decl><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>JNI_OnLoad</name><parameter_list>(<parameter><decl><type><name>JavaVM</name><modifier>*</modifier></type> <name>vm</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>JNI_OnUnload</name><parameter_list>(<parameter><decl><type><name>JavaVM</name><modifier>*</modifier></type> <name>vm</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>reserved</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_VERSION_1_1</name></cpp:macro> <cpp:value>0x00010001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_VERSION_1_2</name></cpp:macro> <cpp:value>0x00010002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_VERSION_1_4</name></cpp:macro> <cpp:value>0x00010004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_VERSION_1_6</name></cpp:macro> <cpp:value>0x00010006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_OK</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_ERR</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_EDETACHED</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_EVERSION</name></cpp:macro> <cpp:value>(-3)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_COMMIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_ABORT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
