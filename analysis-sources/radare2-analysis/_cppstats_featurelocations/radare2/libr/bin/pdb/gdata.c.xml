<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\pdb\gdata.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tpi.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_global</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>SGlobal</name> <modifier>*</modifier></type><name>global</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>read_bytes</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name><name>global</name><operator>-&gt;</operator><name>symtype</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name><name>global</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ2</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name><name>global</name><operator>-&gt;</operator><name>segment</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>leaf_type</name></name> <operator>==</operator> <literal type="number">0x110E</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_sctring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_bytes</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>READ1</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name><name>global</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_scstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>global</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>read_bytes</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>parse_gdata_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>R_STREAM_FILE</name> <modifier>*</modifier></type><name>stream_file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>leaf_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGDATAStream</name> <modifier>*</modifier></type><name>data_stream</name> <init>= <expr><operator>(</operator><name>SGDATAStream</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGlobal</name> <modifier>*</modifier></type><name>global</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data_stream</name><operator>-&gt;</operator><name>globals_list</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>leaf_type</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>leaf_type</name> <operator>==</operator> <literal type="number">0x110E</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>leaf_type</name> <operator>==</operator> <literal type="number">0x1009</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>global</name> <operator>=</operator> <operator>(</operator><name>SGlobal</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGlobal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>global</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>leaf_type</name></name> <operator>=</operator> <name>leaf_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_global</name> <argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>data_stream</name><operator>-&gt;</operator><name>globals_list</name></name></expr></argument>, <argument><expr><name>global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>











</block_content>}</block></function>


<function><type><name>void</name></type> <name>free_gdata_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SGDATAStream</name> <modifier>*</modifier></type><name>data_stream</name> <init>= <expr><operator>(</operator><name>SGDATAStream</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGlobal</name> <modifier>*</modifier></type><name>global</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name><argument_list>(<argument><expr><name><name>data_stream</name><operator>-&gt;</operator><name>globals_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>r_list_iter_next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>global</name> <operator>=</operator> <operator>(</operator><name>SGlobal</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>data_stream</name><operator>-&gt;</operator><name>globals_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
