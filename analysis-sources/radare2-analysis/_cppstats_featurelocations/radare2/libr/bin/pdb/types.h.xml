<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\pdb\types.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PDB_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDB_TYPES_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_R_LIST_C</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_PAGE_FAIL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PAGE</name><parameter_list>(<parameter><type><name>pn</name></type></parameter>, <parameter><type><name>off</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>, <parameter><type><name>page_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (pn) = (pos) / (page_size); (off) = (pos) % (page_size); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_PAGES</name><parameter_list>(<parameter><type><name>start_indx</name></type></parameter>, <parameter><type><name>end_indx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ for (i = start_indx; i &lt; end_indx; i++) { fseek(stream_file-&gt;fp, stream_file-&gt;pages[i] * stream_file-&gt;page_size, SEEK_SET); fread(tmp, stream_file-&gt;page_size, 1, stream_file-&gt;fp); tmp += stream_file-&gt;page_size; } }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP_UINT16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 8) | ((x) &lt;&lt; 8))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP_UINT32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 24) | (((x) &amp; 0x00FF0000) &gt;&gt; 8) | (((x) &amp; 0x0000FF00) &lt;&lt; 8) | ((x) &lt;&lt; 24))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_READ</name><parameter_list>(<parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>bytes_for_read</name></type></parameter>, <parameter><type><name>max_len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if ((((curr_read_bytes) + (bytes_for_read)) &gt;= (max_len))) { return 0; } }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_DATA</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>bytes_for_read</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (src) += (bytes_for_read); (curr_read_bytes) += (bytes_for_read); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEEK_READ1</name><parameter_list>(<parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>max_len</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>type_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ CAN_READ((curr_read_bytes), 1, (max_len)); (dst) = *(type_name *) (src); }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEEK_READ2</name><parameter_list>(<parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>max_len</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>type_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ CAN_READ((curr_read_bytes), 2, (max_len)); (dst) = (type_name) r_read_le16 (src); }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEEK_READ4</name><parameter_list>(<parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>max_len</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>type_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ CAN_READ((curr_read_bytes), 4, (max_len)); (dst) = (type_name) r_read_le32 (src); }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEEK_READ8</name><parameter_list>(<parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>max_len</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>type_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ CAN_READ((curr_read_bytes), 8, (max_len)); (dst) = (type_name) r_read_le64 (src); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ1</name><parameter_list>(<parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>max_len</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>type_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ PEEK_READ1((curr_read_bytes), (max_len), (dst), (src), type_name); UPDATE_DATA((src), (curr_read_bytes), 1); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ2</name><parameter_list>(<parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>max_len</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>type_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ PEEK_READ2((curr_read_bytes), (max_len), (dst), (src), type_name); UPDATE_DATA((src), (curr_read_bytes), 2); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ4</name><parameter_list>(<parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>max_len</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>type_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ PEEK_READ4((curr_read_bytes), (max_len), (dst), (src), type_name); UPDATE_DATA((src), (curr_read_bytes), 4); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ8</name><parameter_list>(<parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>max_len</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>type_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ PEEK_READ8((curr_read_bytes), (max_len), (dst), (src), type_name); UPDATE_DATA((src), (curr_read_bytes), 8); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAD_ALIGN</name><parameter_list>(<parameter><type><name>pad</name></type></parameter>, <parameter><type><name>curr_read_bytes</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>max_len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int tmp = 0; if ((pad) &gt; 0xF0) { tmp = (pad) &amp; 0x0F; CAN_READ((curr_read_bytes), (tmp), (len)); UPDATE_DATA((src), (curr_read_bytes), (tmp)); } }</cpp:value></cpp:define>








<typedef>typedef <type><struct>struct <name>R_STREAM_FILE_</name><block>{

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>page_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pages_amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
}</block></struct></type> <name>R_STREAM_FILE</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_value_name</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>res_name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_value</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_value_name_len</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_member_list</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier><modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_arg_type_</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_type</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_val_type</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_type</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name>get_val_type</name></type> <name>get_element_type_</name>;</typedef>
<typedef>typedef <type><name>get_val_type</name></type> <name>get_index_type_</name>;</typedef>
<typedef>typedef <type><name>get_val_type</name></type> <name>get_base_type_</name>;</typedef>
<typedef>typedef <type><name>get_arg_type_</name></type> <name>get_derived_</name>;</typedef>
<typedef>typedef <type><name>get_arg_type_</name></type> <name>get_vshape_</name>;</typedef>
<typedef>typedef <type><name>get_arg_type_</name></type> <name>get_utype_</name>;</typedef>
<typedef>typedef <type><name>get_val_type</name></type> <name>get_return_type_</name>;</typedef>
<typedef>typedef <type><name>get_val_type</name></type> <name>get_class_type_</name>;</typedef>
<typedef>typedef <type><name>get_val_type</name></type> <name>get_this_type_</name>;</typedef>
<typedef>typedef <type><name>get_arg_type_</name></type> <name>get_arglist_</name>;</typedef>
<typedef>typedef <type><name>get_arg_type_</name></type> <name>get_index_</name>;</typedef>
<typedef>typedef <type><name>get_arg_type_</name></type> <name>get_mlist_</name>;</typedef>
<typedef>typedef <type><name>get_arg_type_</name></type> <name>get_modified_type_</name>;</typedef>
<typedef>typedef <type><name>get_value</name></type> <name>get_index_val</name>;</typedef>
<typedef>typedef <type><name>get_value_name</name></type> <name>get_print_type_</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>eT_NOTYPE</name> <init>= <expr><literal type="number">0x00000000</literal></expr></init></decl>,
<decl><name>eT_ABS</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,
<decl><name>eT_SEGMENT</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,
<decl><name>eT_VOID</name> <init>= <expr><literal type="number">0x00000003</literal></expr></init></decl>,

<decl><name>eT_HRESULT</name> <init>= <expr><literal type="number">0x00000008</literal></expr></init></decl>,
<decl><name>eT_32PHRESULT</name> <init>= <expr><literal type="number">0x00000408</literal></expr></init></decl>,
<decl><name>eT_64PHRESULT</name> <init>= <expr><literal type="number">0x00000608</literal></expr></init></decl>,

<decl><name>eT_PVOID</name> <init>= <expr><literal type="number">0x00000103</literal></expr></init></decl>,
<decl><name>eT_PFVOID</name> <init>= <expr><literal type="number">0x00000203</literal></expr></init></decl>,
<decl><name>eT_PHVOID</name> <init>= <expr><literal type="number">0x00000303</literal></expr></init></decl>,
<decl><name>eT_32PVOID</name> <init>= <expr><literal type="number">0x00000403</literal></expr></init></decl>,
<decl><name>eT_32PFVOID</name> <init>= <expr><literal type="number">0x00000503</literal></expr></init></decl>,
<decl><name>eT_64PVOID</name> <init>= <expr><literal type="number">0x00000603</literal></expr></init></decl>,

<decl><name>eT_CURRENCY</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,
<decl><name>eT_NBASICSTR</name> <init>= <expr><literal type="number">0x00000005</literal></expr></init></decl>,
<decl><name>eT_FBASICSTR</name> <init>= <expr><literal type="number">0x00000006</literal></expr></init></decl>,
<decl><name>eT_NOTTRANS</name> <init>= <expr><literal type="number">0x00000007</literal></expr></init></decl>,
<decl><name>eT_BIT</name> <init>= <expr><literal type="number">0x00000060</literal></expr></init></decl>,
<decl><name>eT_PASCHAR</name> <init>= <expr><literal type="number">0x00000061</literal></expr></init></decl>,

<decl><name>eT_CHAR</name> <init>= <expr><literal type="number">0x00000010</literal></expr></init></decl>,
<decl><name>eT_PCHAR</name> <init>= <expr><literal type="number">0x00000110</literal></expr></init></decl>,
<decl><name>eT_PFCHAR</name> <init>= <expr><literal type="number">0x00000210</literal></expr></init></decl>,
<decl><name>eT_PHCHAR</name> <init>= <expr><literal type="number">0x00000310</literal></expr></init></decl>,
<decl><name>eT_32PCHAR</name> <init>= <expr><literal type="number">0x00000410</literal></expr></init></decl>,
<decl><name>eT_32PFCHAR</name> <init>= <expr><literal type="number">0x00000510</literal></expr></init></decl>,
<decl><name>eT_64PCHAR</name> <init>= <expr><literal type="number">0x00000610</literal></expr></init></decl>,

<decl><name>eT_UCHAR</name> <init>= <expr><literal type="number">0x00000020</literal></expr></init></decl>,
<decl><name>eT_PUCHAR</name> <init>= <expr><literal type="number">0x00000120</literal></expr></init></decl>,
<decl><name>eT_PFUCHAR</name> <init>= <expr><literal type="number">0x00000220</literal></expr></init></decl>,
<decl><name>eT_PHUCHAR</name> <init>= <expr><literal type="number">0x00000320</literal></expr></init></decl>,
<decl><name>eT_32PUCHAR</name> <init>= <expr><literal type="number">0x00000420</literal></expr></init></decl>,
<decl><name>eT_32PFUCHAR</name> <init>= <expr><literal type="number">0x00000520</literal></expr></init></decl>,
<decl><name>eT_64PUCHAR</name> <init>= <expr><literal type="number">0x00000620</literal></expr></init></decl>,

<decl><name>eT_RCHAR</name> <init>= <expr><literal type="number">0x00000070</literal></expr></init></decl>,
<decl><name>eT_PRCHAR</name> <init>= <expr><literal type="number">0x00000170</literal></expr></init></decl>,
<decl><name>eT_PFRCHAR</name> <init>= <expr><literal type="number">0x00000270</literal></expr></init></decl>,
<decl><name>eT_PHRCHAR</name> <init>= <expr><literal type="number">0x00000370</literal></expr></init></decl>,
<decl><name>eT_32PRCHAR</name> <init>= <expr><literal type="number">0x00000470</literal></expr></init></decl>,
<decl><name>eT_32PFRCHAR</name> <init>= <expr><literal type="number">0x00000570</literal></expr></init></decl>,
<decl><name>eT_64PRCHAR</name> <init>= <expr><literal type="number">0x00000670</literal></expr></init></decl>,

<decl><name>eT_WCHAR</name> <init>= <expr><literal type="number">0x00000071</literal></expr></init></decl>,
<decl><name>eT_PWCHAR</name> <init>= <expr><literal type="number">0x00000171</literal></expr></init></decl>,
<decl><name>eT_PFWCHAR</name> <init>= <expr><literal type="number">0x00000271</literal></expr></init></decl>,
<decl><name>eT_PHWCHAR</name> <init>= <expr><literal type="number">0x00000371</literal></expr></init></decl>,
<decl><name>eT_32PWCHAR</name> <init>= <expr><literal type="number">0x00000471</literal></expr></init></decl>,
<decl><name>eT_32PFWCHAR</name> <init>= <expr><literal type="number">0x00000571</literal></expr></init></decl>,
<decl><name>eT_64PWCHAR</name> <init>= <expr><literal type="number">0x00000671</literal></expr></init></decl>,

<decl><name>eT_INT1</name> <init>= <expr><literal type="number">0x00000068</literal></expr></init></decl>,
<decl><name>eT_PINT1</name> <init>= <expr><literal type="number">0x00000168</literal></expr></init></decl>,
<decl><name>eT_PFINT1</name> <init>= <expr><literal type="number">0x00000268</literal></expr></init></decl>,
<decl><name>eT_PHINT1</name> <init>= <expr><literal type="number">0x00000368</literal></expr></init></decl>,
<decl><name>eT_32PINT1</name> <init>= <expr><literal type="number">0x00000468</literal></expr></init></decl>,
<decl><name>eT_32PFINT1</name> <init>= <expr><literal type="number">0x00000568</literal></expr></init></decl>,
<decl><name>eT_64PINT1</name> <init>= <expr><literal type="number">0x00000668</literal></expr></init></decl>,

<decl><name>eT_UINT1</name> <init>= <expr><literal type="number">0x00000069</literal></expr></init></decl>,
<decl><name>eT_PUINT1</name> <init>= <expr><literal type="number">0x00000169</literal></expr></init></decl>,
<decl><name>eT_PFUINT1</name> <init>= <expr><literal type="number">0x00000269</literal></expr></init></decl>,
<decl><name>eT_PHUINT1</name> <init>= <expr><literal type="number">0x00000369</literal></expr></init></decl>,
<decl><name>eT_32PUINT1</name> <init>= <expr><literal type="number">0x00000469</literal></expr></init></decl>,
<decl><name>eT_32PFUINT1</name> <init>= <expr><literal type="number">0x00000569</literal></expr></init></decl>,
<decl><name>eT_64PUINT1</name> <init>= <expr><literal type="number">0x00000669</literal></expr></init></decl>,

<decl><name>eT_SHORT</name> <init>= <expr><literal type="number">0x00000011</literal></expr></init></decl>,
<decl><name>eT_PSHORT</name> <init>= <expr><literal type="number">0x00000111</literal></expr></init></decl>,
<decl><name>eT_PFSHORT</name> <init>= <expr><literal type="number">0x00000211</literal></expr></init></decl>,
<decl><name>eT_PHSHORT</name> <init>= <expr><literal type="number">0x00000311</literal></expr></init></decl>,
<decl><name>eT_32PSHORT</name> <init>= <expr><literal type="number">0x00000411</literal></expr></init></decl>,
<decl><name>eT_32PFSHORT</name> <init>= <expr><literal type="number">0x00000511</literal></expr></init></decl>,
<decl><name>eT_64PSHORT</name> <init>= <expr><literal type="number">0x00000611</literal></expr></init></decl>,

<decl><name>eT_USHORT</name> <init>= <expr><literal type="number">0x00000021</literal></expr></init></decl>,
<decl><name>eT_PUSHORT</name> <init>= <expr><literal type="number">0x00000121</literal></expr></init></decl>,
<decl><name>eT_PFUSHORT</name> <init>= <expr><literal type="number">0x00000221</literal></expr></init></decl>,
<decl><name>eT_PHUSHORT</name> <init>= <expr><literal type="number">0x00000321</literal></expr></init></decl>,
<decl><name>eT_32PUSHORT</name> <init>= <expr><literal type="number">0x00000421</literal></expr></init></decl>,
<decl><name>eT_32PFUSHORT</name> <init>= <expr><literal type="number">0x00000521</literal></expr></init></decl>,
<decl><name>eT_64PUSHORT</name> <init>= <expr><literal type="number">0x00000621</literal></expr></init></decl>,

<decl><name>eT_INT2</name> <init>= <expr><literal type="number">0x00000072</literal></expr></init></decl>,
<decl><name>eT_PINT2</name> <init>= <expr><literal type="number">0x00000172</literal></expr></init></decl>,
<decl><name>eT_PFINT2</name> <init>= <expr><literal type="number">0x00000272</literal></expr></init></decl>,
<decl><name>eT_PHINT2</name> <init>= <expr><literal type="number">0x00000372</literal></expr></init></decl>,
<decl><name>eT_32PINT2</name> <init>= <expr><literal type="number">0x00000472</literal></expr></init></decl>,
<decl><name>eT_32PFINT2</name> <init>= <expr><literal type="number">0x00000572</literal></expr></init></decl>,
<decl><name>eT_64PINT2</name> <init>= <expr><literal type="number">0x00000672</literal></expr></init></decl>,

<decl><name>eT_UINT2</name> <init>= <expr><literal type="number">0x00000073</literal></expr></init></decl>,
<decl><name>eT_PUINT2</name> <init>= <expr><literal type="number">0x00000173</literal></expr></init></decl>,
<decl><name>eT_PFUINT2</name> <init>= <expr><literal type="number">0x00000273</literal></expr></init></decl>,
<decl><name>eT_PHUINT2</name> <init>= <expr><literal type="number">0x00000373</literal></expr></init></decl>,
<decl><name>eT_32PUINT2</name> <init>= <expr><literal type="number">0x00000473</literal></expr></init></decl>,
<decl><name>eT_32PFUINT2</name> <init>= <expr><literal type="number">0x00000573</literal></expr></init></decl>,
<decl><name>eT_64PUINT2</name> <init>= <expr><literal type="number">0x00000673</literal></expr></init></decl>,

<decl><name>eT_LONG</name> <init>= <expr><literal type="number">0x00000012</literal></expr></init></decl>,
<decl><name>eT_PLONG</name> <init>= <expr><literal type="number">0x00000112</literal></expr></init></decl>,
<decl><name>eT_PFLONG</name> <init>= <expr><literal type="number">0x00000212</literal></expr></init></decl>,
<decl><name>eT_PHLONG</name> <init>= <expr><literal type="number">0x00000312</literal></expr></init></decl>,
<decl><name>eT_32PLONG</name> <init>= <expr><literal type="number">0x00000412</literal></expr></init></decl>,
<decl><name>eT_32PFLONG</name> <init>= <expr><literal type="number">0x00000512</literal></expr></init></decl>,
<decl><name>eT_64PLONG</name> <init>= <expr><literal type="number">0x00000612</literal></expr></init></decl>,

<decl><name>eT_ULONG</name> <init>= <expr><literal type="number">0x00000022</literal></expr></init></decl>,
<decl><name>eT_PULONG</name> <init>= <expr><literal type="number">0x00000122</literal></expr></init></decl>,
<decl><name>eT_PFULONG</name> <init>= <expr><literal type="number">0x00000222</literal></expr></init></decl>,
<decl><name>eT_PHULONG</name> <init>= <expr><literal type="number">0x00000322</literal></expr></init></decl>,
<decl><name>eT_32PULONG</name> <init>= <expr><literal type="number">0x00000422</literal></expr></init></decl>,
<decl><name>eT_32PFULONG</name> <init>= <expr><literal type="number">0x00000522</literal></expr></init></decl>,
<decl><name>eT_64PULONG</name> <init>= <expr><literal type="number">0x00000622</literal></expr></init></decl>,

<decl><name>eT_INT4</name> <init>= <expr><literal type="number">0x00000074</literal></expr></init></decl>,
<decl><name>eT_PINT4</name> <init>= <expr><literal type="number">0x00000174</literal></expr></init></decl>,
<decl><name>eT_PFINT4</name> <init>= <expr><literal type="number">0x00000274</literal></expr></init></decl>,
<decl><name>eT_PHINT4</name> <init>= <expr><literal type="number">0x00000374</literal></expr></init></decl>,
<decl><name>eT_32PINT4</name> <init>= <expr><literal type="number">0x00000474</literal></expr></init></decl>,
<decl><name>eT_32PFINT4</name> <init>= <expr><literal type="number">0x00000574</literal></expr></init></decl>,
<decl><name>eT_64PINT4</name> <init>= <expr><literal type="number">0x00000674</literal></expr></init></decl>,

<decl><name>eT_UINT4</name> <init>= <expr><literal type="number">0x00000075</literal></expr></init></decl>,
<decl><name>eT_PUINT4</name> <init>= <expr><literal type="number">0x00000175</literal></expr></init></decl>,
<decl><name>eT_PFUINT4</name> <init>= <expr><literal type="number">0x00000275</literal></expr></init></decl>,
<decl><name>eT_PHUINT4</name> <init>= <expr><literal type="number">0x00000375</literal></expr></init></decl>,
<decl><name>eT_32PUINT4</name> <init>= <expr><literal type="number">0x00000475</literal></expr></init></decl>,
<decl><name>eT_32PFUINT4</name> <init>= <expr><literal type="number">0x00000575</literal></expr></init></decl>,
<decl><name>eT_64PUINT4</name> <init>= <expr><literal type="number">0x00000675</literal></expr></init></decl>,

<decl><name>eT_QUAD</name> <init>= <expr><literal type="number">0x00000013</literal></expr></init></decl>,
<decl><name>eT_PQUAD</name> <init>= <expr><literal type="number">0x00000113</literal></expr></init></decl>,
<decl><name>eT_PFQUAD</name> <init>= <expr><literal type="number">0x00000213</literal></expr></init></decl>,
<decl><name>eT_PHQUAD</name> <init>= <expr><literal type="number">0x00000313</literal></expr></init></decl>,
<decl><name>eT_32PQUAD</name> <init>= <expr><literal type="number">0x00000413</literal></expr></init></decl>,
<decl><name>eT_32PFQUAD</name> <init>= <expr><literal type="number">0x00000513</literal></expr></init></decl>,
<decl><name>eT_64PQUAD</name> <init>= <expr><literal type="number">0x00000613</literal></expr></init></decl>,

<decl><name>eT_UQUAD</name> <init>= <expr><literal type="number">0x00000023</literal></expr></init></decl>,
<decl><name>eT_PUQUAD</name> <init>= <expr><literal type="number">0x00000123</literal></expr></init></decl>,
<decl><name>eT_PFUQUAD</name> <init>= <expr><literal type="number">0x00000223</literal></expr></init></decl>,
<decl><name>eT_PHUQUAD</name> <init>= <expr><literal type="number">0x00000323</literal></expr></init></decl>,
<decl><name>eT_32PUQUAD</name> <init>= <expr><literal type="number">0x00000423</literal></expr></init></decl>,
<decl><name>eT_32PFUQUAD</name> <init>= <expr><literal type="number">0x00000523</literal></expr></init></decl>,
<decl><name>eT_64PUQUAD</name> <init>= <expr><literal type="number">0x00000623</literal></expr></init></decl>,

<decl><name>eT_INT8</name> <init>= <expr><literal type="number">0x00000076</literal></expr></init></decl>,
<decl><name>eT_PINT8</name> <init>= <expr><literal type="number">0x00000176</literal></expr></init></decl>,
<decl><name>eT_PFINT8</name> <init>= <expr><literal type="number">0x00000276</literal></expr></init></decl>,
<decl><name>eT_PHINT8</name> <init>= <expr><literal type="number">0x00000376</literal></expr></init></decl>,
<decl><name>eT_32PINT8</name> <init>= <expr><literal type="number">0x00000476</literal></expr></init></decl>,
<decl><name>eT_32PFINT8</name> <init>= <expr><literal type="number">0x00000576</literal></expr></init></decl>,
<decl><name>eT_64PINT8</name> <init>= <expr><literal type="number">0x00000676</literal></expr></init></decl>,

<decl><name>eT_UINT8</name> <init>= <expr><literal type="number">0x00000077</literal></expr></init></decl>,
<decl><name>eT_PUINT8</name> <init>= <expr><literal type="number">0x00000177</literal></expr></init></decl>,
<decl><name>eT_PFUINT8</name> <init>= <expr><literal type="number">0x00000277</literal></expr></init></decl>,
<decl><name>eT_PHUINT8</name> <init>= <expr><literal type="number">0x00000377</literal></expr></init></decl>,
<decl><name>eT_32PUINT8</name> <init>= <expr><literal type="number">0x00000477</literal></expr></init></decl>,
<decl><name>eT_32PFUINT8</name> <init>= <expr><literal type="number">0x00000577</literal></expr></init></decl>,
<decl><name>eT_64PUINT8</name> <init>= <expr><literal type="number">0x00000677</literal></expr></init></decl>,

<decl><name>eT_OCT</name> <init>= <expr><literal type="number">0x00000014</literal></expr></init></decl>,
<decl><name>eT_POCT</name> <init>= <expr><literal type="number">0x00000114</literal></expr></init></decl>,
<decl><name>eT_PFOCT</name> <init>= <expr><literal type="number">0x00000214</literal></expr></init></decl>,
<decl><name>eT_PHOCT</name> <init>= <expr><literal type="number">0x00000314</literal></expr></init></decl>,
<decl><name>eT_32POCT</name> <init>= <expr><literal type="number">0x00000414</literal></expr></init></decl>,
<decl><name>eT_32PFOCT</name> <init>= <expr><literal type="number">0x00000514</literal></expr></init></decl>,
<decl><name>eT_64POCT</name> <init>= <expr><literal type="number">0x00000614</literal></expr></init></decl>,

<decl><name>eT_UOCT</name> <init>= <expr><literal type="number">0x00000024</literal></expr></init></decl>,
<decl><name>eT_PUOCT</name> <init>= <expr><literal type="number">0x00000124</literal></expr></init></decl>,
<decl><name>eT_PFUOCT</name> <init>= <expr><literal type="number">0x00000224</literal></expr></init></decl>,
<decl><name>eT_PHUOCT</name> <init>= <expr><literal type="number">0x00000324</literal></expr></init></decl>,
<decl><name>eT_32PUOCT</name> <init>= <expr><literal type="number">0x00000424</literal></expr></init></decl>,
<decl><name>eT_32PFUOCT</name> <init>= <expr><literal type="number">0x00000524</literal></expr></init></decl>,
<decl><name>eT_64PUOCT</name> <init>= <expr><literal type="number">0x00000624</literal></expr></init></decl>,

<decl><name>eT_INT16</name> <init>= <expr><literal type="number">0x00000078</literal></expr></init></decl>,
<decl><name>eT_PINT16</name> <init>= <expr><literal type="number">0x00000178</literal></expr></init></decl>,
<decl><name>eT_PFINT16</name> <init>= <expr><literal type="number">0x00000278</literal></expr></init></decl>,
<decl><name>eT_PHINT16</name> <init>= <expr><literal type="number">0x00000378</literal></expr></init></decl>,
<decl><name>eT_32PINT16</name> <init>= <expr><literal type="number">0x00000478</literal></expr></init></decl>,
<decl><name>eT_32PFINT16</name> <init>= <expr><literal type="number">0x00000578</literal></expr></init></decl>,
<decl><name>eT_64PINT16</name> <init>= <expr><literal type="number">0x00000678</literal></expr></init></decl>,

<decl><name>eT_UINT16</name> <init>= <expr><literal type="number">0x00000079</literal></expr></init></decl>,
<decl><name>eT_PUINT16</name> <init>= <expr><literal type="number">0x00000179</literal></expr></init></decl>,
<decl><name>eT_PFUINT16</name> <init>= <expr><literal type="number">0x00000279</literal></expr></init></decl>,
<decl><name>eT_PHUINT16</name> <init>= <expr><literal type="number">0x00000379</literal></expr></init></decl>,
<decl><name>eT_32PUINT16</name> <init>= <expr><literal type="number">0x00000479</literal></expr></init></decl>,
<decl><name>eT_32PFUINT16</name> <init>= <expr><literal type="number">0x00000579</literal></expr></init></decl>,
<decl><name>eT_64PUINT16</name> <init>= <expr><literal type="number">0x00000679</literal></expr></init></decl>,

<decl><name>eT_REAL32</name> <init>= <expr><literal type="number">0x00000040</literal></expr></init></decl>,
<decl><name>eT_PREAL32</name> <init>= <expr><literal type="number">0x00000140</literal></expr></init></decl>,
<decl><name>eT_PFREAL32</name> <init>= <expr><literal type="number">0x00000240</literal></expr></init></decl>,
<decl><name>eT_PHREAL32</name> <init>= <expr><literal type="number">0x00000340</literal></expr></init></decl>,
<decl><name>eT_32PREAL32</name> <init>= <expr><literal type="number">0x00000440</literal></expr></init></decl>,
<decl><name>eT_32PFREAL32</name> <init>= <expr><literal type="number">0x00000540</literal></expr></init></decl>,
<decl><name>eT_64PREAL32</name> <init>= <expr><literal type="number">0x00000640</literal></expr></init></decl>,

<decl><name>eT_REAL48</name> <init>= <expr><literal type="number">0x00000044</literal></expr></init></decl>,
<decl><name>eT_PREAL48</name> <init>= <expr><literal type="number">0x00000144</literal></expr></init></decl>,
<decl><name>eT_PFREAL48</name> <init>= <expr><literal type="number">0x00000244</literal></expr></init></decl>,
<decl><name>eT_PHREAL48</name> <init>= <expr><literal type="number">0x00000344</literal></expr></init></decl>,
<decl><name>eT_32PREAL48</name> <init>= <expr><literal type="number">0x00000444</literal></expr></init></decl>,
<decl><name>eT_32PFREAL48</name> <init>= <expr><literal type="number">0x00000544</literal></expr></init></decl>,
<decl><name>eT_64PREAL48</name> <init>= <expr><literal type="number">0x00000644</literal></expr></init></decl>,

<decl><name>eT_REAL64</name> <init>= <expr><literal type="number">0x00000041</literal></expr></init></decl>,
<decl><name>eT_PREAL64</name> <init>= <expr><literal type="number">0x00000141</literal></expr></init></decl>,
<decl><name>eT_PFREAL64</name> <init>= <expr><literal type="number">0x00000241</literal></expr></init></decl>,
<decl><name>eT_PHREAL64</name> <init>= <expr><literal type="number">0x00000341</literal></expr></init></decl>,
<decl><name>eT_32PREAL64</name> <init>= <expr><literal type="number">0x00000441</literal></expr></init></decl>,
<decl><name>eT_32PFREAL64</name> <init>= <expr><literal type="number">0x00000541</literal></expr></init></decl>,
<decl><name>eT_64PREAL64</name> <init>= <expr><literal type="number">0x00000641</literal></expr></init></decl>,

<decl><name>eT_REAL80</name> <init>= <expr><literal type="number">0x00000042</literal></expr></init></decl>,
<decl><name>eT_PREAL80</name> <init>= <expr><literal type="number">0x00000142</literal></expr></init></decl>,
<decl><name>eT_PFREAL80</name> <init>= <expr><literal type="number">0x00000242</literal></expr></init></decl>,
<decl><name>eT_PHREAL80</name> <init>= <expr><literal type="number">0x00000342</literal></expr></init></decl>,
<decl><name>eT_32PREAL80</name> <init>= <expr><literal type="number">0x00000442</literal></expr></init></decl>,
<decl><name>eT_32PFREAL80</name> <init>= <expr><literal type="number">0x00000542</literal></expr></init></decl>,
<decl><name>eT_64PREAL80</name> <init>= <expr><literal type="number">0x00000642</literal></expr></init></decl>,

<decl><name>eT_REAL128</name> <init>= <expr><literal type="number">0x00000043</literal></expr></init></decl>,
<decl><name>eT_PREAL128</name> <init>= <expr><literal type="number">0x00000143</literal></expr></init></decl>,
<decl><name>eT_PFREAL128</name> <init>= <expr><literal type="number">0x00000243</literal></expr></init></decl>,
<decl><name>eT_PHREAL128</name> <init>= <expr><literal type="number">0x00000343</literal></expr></init></decl>,
<decl><name>eT_32PREAL128</name> <init>= <expr><literal type="number">0x00000443</literal></expr></init></decl>,
<decl><name>eT_32PFREAL128</name> <init>= <expr><literal type="number">0x00000543</literal></expr></init></decl>,
<decl><name>eT_64PREAL128</name> <init>= <expr><literal type="number">0x00000643</literal></expr></init></decl>,

<decl><name>eT_CPLX32</name> <init>= <expr><literal type="number">0x00000050</literal></expr></init></decl>,
<decl><name>eT_PCPLX32</name> <init>= <expr><literal type="number">0x00000150</literal></expr></init></decl>,
<decl><name>eT_PFCPLX32</name> <init>= <expr><literal type="number">0x00000250</literal></expr></init></decl>,
<decl><name>eT_PHCPLX32</name> <init>= <expr><literal type="number">0x00000350</literal></expr></init></decl>,
<decl><name>eT_32PCPLX32</name> <init>= <expr><literal type="number">0x00000450</literal></expr></init></decl>,
<decl><name>eT_32PFCPLX32</name> <init>= <expr><literal type="number">0x00000550</literal></expr></init></decl>,
<decl><name>eT_64PCPLX32</name> <init>= <expr><literal type="number">0x00000650</literal></expr></init></decl>,

<decl><name>eT_CPLX64</name> <init>= <expr><literal type="number">0x00000051</literal></expr></init></decl>,
<decl><name>eT_PCPLX64</name> <init>= <expr><literal type="number">0x00000151</literal></expr></init></decl>,
<decl><name>eT_PFCPLX64</name> <init>= <expr><literal type="number">0x00000251</literal></expr></init></decl>,
<decl><name>eT_PHCPLX64</name> <init>= <expr><literal type="number">0x00000351</literal></expr></init></decl>,
<decl><name>eT_32PCPLX64</name> <init>= <expr><literal type="number">0x00000451</literal></expr></init></decl>,
<decl><name>eT_32PFCPLX64</name> <init>= <expr><literal type="number">0x00000551</literal></expr></init></decl>,
<decl><name>eT_64PCPLX64</name> <init>= <expr><literal type="number">0x00000651</literal></expr></init></decl>,

<decl><name>eT_CPLX80</name> <init>= <expr><literal type="number">0x00000052</literal></expr></init></decl>,
<decl><name>eT_PCPLX80</name> <init>= <expr><literal type="number">0x00000152</literal></expr></init></decl>,
<decl><name>eT_PFCPLX80</name> <init>= <expr><literal type="number">0x00000252</literal></expr></init></decl>,
<decl><name>eT_PHCPLX80</name> <init>= <expr><literal type="number">0x00000352</literal></expr></init></decl>,
<decl><name>eT_32PCPLX80</name> <init>= <expr><literal type="number">0x00000452</literal></expr></init></decl>,
<decl><name>eT_32PFCPLX80</name> <init>= <expr><literal type="number">0x00000552</literal></expr></init></decl>,
<decl><name>eT_64PCPLX80</name> <init>= <expr><literal type="number">0x00000652</literal></expr></init></decl>,

<decl><name>eT_CPLX128</name> <init>= <expr><literal type="number">0x00000053</literal></expr></init></decl>,
<decl><name>eT_PCPLX128</name> <init>= <expr><literal type="number">0x00000153</literal></expr></init></decl>,
<decl><name>eT_PFCPLX128</name> <init>= <expr><literal type="number">0x00000253</literal></expr></init></decl>,
<decl><name>eT_PHCPLX128</name> <init>= <expr><literal type="number">0x00000353</literal></expr></init></decl>,
<decl><name>eT_32PCPLX128</name> <init>= <expr><literal type="number">0x00000453</literal></expr></init></decl>,
<decl><name>eT_32PFCPLX128</name> <init>= <expr><literal type="number">0x00000553</literal></expr></init></decl>,
<decl><name>eT_64PCPLX128</name> <init>= <expr><literal type="number">0x00000653</literal></expr></init></decl>,

<decl><name>eT_BOOL08</name> <init>= <expr><literal type="number">0x00000030</literal></expr></init></decl>,
<decl><name>eT_PBOOL08</name> <init>= <expr><literal type="number">0x00000130</literal></expr></init></decl>,
<decl><name>eT_PFBOOL08</name> <init>= <expr><literal type="number">0x00000230</literal></expr></init></decl>,
<decl><name>eT_PHBOOL08</name> <init>= <expr><literal type="number">0x00000330</literal></expr></init></decl>,
<decl><name>eT_32PBOOL08</name> <init>= <expr><literal type="number">0x00000430</literal></expr></init></decl>,
<decl><name>eT_32PFBOOL08</name> <init>= <expr><literal type="number">0x00000530</literal></expr></init></decl>,
<decl><name>eT_64PBOOL08</name> <init>= <expr><literal type="number">0x00000630</literal></expr></init></decl>,

<decl><name>eT_BOOL16</name> <init>= <expr><literal type="number">0x00000031</literal></expr></init></decl>,
<decl><name>eT_PBOOL16</name> <init>= <expr><literal type="number">0x00000131</literal></expr></init></decl>,
<decl><name>eT_PFBOOL16</name> <init>= <expr><literal type="number">0x00000231</literal></expr></init></decl>,
<decl><name>eT_PHBOOL16</name> <init>= <expr><literal type="number">0x00000331</literal></expr></init></decl>,
<decl><name>eT_32PBOOL16</name> <init>= <expr><literal type="number">0x00000431</literal></expr></init></decl>,
<decl><name>eT_32PFBOOL16</name> <init>= <expr><literal type="number">0x00000531</literal></expr></init></decl>,
<decl><name>eT_64PBOOL16</name> <init>= <expr><literal type="number">0x00000631</literal></expr></init></decl>,

<decl><name>eT_BOOL32</name> <init>= <expr><literal type="number">0x00000032</literal></expr></init></decl>,
<decl><name>eT_PBOOL32</name> <init>= <expr><literal type="number">0x00000132</literal></expr></init></decl>,
<decl><name>eT_PFBOOL32</name> <init>= <expr><literal type="number">0x00000232</literal></expr></init></decl>,
<decl><name>eT_PHBOOL32</name> <init>= <expr><literal type="number">0x00000332</literal></expr></init></decl>,
<decl><name>eT_32PBOOL32</name> <init>= <expr><literal type="number">0x00000432</literal></expr></init></decl>,
<decl><name>eT_32PFBOOL32</name> <init>= <expr><literal type="number">0x00000532</literal></expr></init></decl>,
<decl><name>eT_64PBOOL32</name> <init>= <expr><literal type="number">0x00000632</literal></expr></init></decl>,

<decl><name>eT_BOOL64</name> <init>= <expr><literal type="number">0x00000033</literal></expr></init></decl>,
<decl><name>eT_PBOOL64</name> <init>= <expr><literal type="number">0x00000133</literal></expr></init></decl>,
<decl><name>eT_PFBOOL64</name> <init>= <expr><literal type="number">0x00000233</literal></expr></init></decl>,
<decl><name>eT_PHBOOL64</name> <init>= <expr><literal type="number">0x00000333</literal></expr></init></decl>,
<decl><name>eT_32PBOOL64</name> <init>= <expr><literal type="number">0x00000433</literal></expr></init></decl>,
<decl><name>eT_32PFBOOL64</name> <init>= <expr><literal type="number">0x00000533</literal></expr></init></decl>,
<decl><name>eT_64PBOOL64</name> <init>= <expr><literal type="number">0x00000633</literal></expr></init></decl>,

<decl><name>eT_NCVPTR</name> <init>= <expr><literal type="number">0x000001F0</literal></expr></init></decl>,
<decl><name>eT_FCVPTR</name> <init>= <expr><literal type="number">0x000002F0</literal></expr></init></decl>,
<decl><name>eT_HCVPTR</name> <init>= <expr><literal type="number">0x000003F0</literal></expr></init></decl>,
<decl><name>eT_32NCVPTR</name> <init>= <expr><literal type="number">0x000004F0</literal></expr></init></decl>,
<decl><name>eT_32FCVPTR</name> <init>= <expr><literal type="number">0x000005F0</literal></expr></init></decl>,
<decl><name>eT_64NCVPTR</name> <init>= <expr><literal type="number">0x000006F0</literal></expr></init></decl>,
}</block></enum></type> <name>EBASE_TYPES</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>eNEAR_C</name> <init>= <expr><literal type="number">0x00000000</literal></expr></init></decl>,
<decl><name>eFAR_C</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,
<decl><name>eNEAR_PASCAL</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,
<decl><name>eFAR_PASCAL</name> <init>= <expr><literal type="number">0x00000003</literal></expr></init></decl>,
<decl><name>eNEAR_FAST</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,
<decl><name>eFAR_FAST</name> <init>= <expr><literal type="number">0x00000005</literal></expr></init></decl>,
<decl><name>eSKIPPED</name> <init>= <expr><literal type="number">0x00000006</literal></expr></init></decl>,
<decl><name>eNEAR_STD</name> <init>= <expr><literal type="number">0x00000007</literal></expr></init></decl>,
<decl><name>eFAR_STD</name> <init>= <expr><literal type="number">0x00000008</literal></expr></init></decl>,
<decl><name>eNEAR_SYS</name> <init>= <expr><literal type="number">0x00000009</literal></expr></init></decl>,
<decl><name>eFAR_SYS</name> <init>= <expr><literal type="number">0x0000000A</literal></expr></init></decl>,
<decl><name>eTHISCALL</name> <init>= <expr><literal type="number">0x0000000B</literal></expr></init></decl>,
<decl><name>eMIPSCALL</name> <init>= <expr><literal type="number">0x0000000C</literal></expr></init></decl>,
<decl><name>eGENERIC</name> <init>= <expr><literal type="number">0x0000000D</literal></expr></init></decl>,
<decl><name>eALPHACALL</name> <init>= <expr><literal type="number">0x0000000E</literal></expr></init></decl>,
<decl><name>ePPCCALL</name> <init>= <expr><literal type="number">0x0000000F</literal></expr></init></decl>,
<decl><name>eSHCALL</name> <init>= <expr><literal type="number">0x00000010</literal></expr></init></decl>,
<decl><name>eARMCALL</name> <init>= <expr><literal type="number">0x00000011</literal></expr></init></decl>,
<decl><name>eAM33CALL</name> <init>= <expr><literal type="number">0x00000012</literal></expr></init></decl>,
<decl><name>eTRICALL</name> <init>= <expr><literal type="number">0x00000013</literal></expr></init></decl>,
<decl><name>eSH5CALL</name> <init>= <expr><literal type="number">0x00000014</literal></expr></init></decl>,
<decl><name>eM32RCALL</name> <init>= <expr><literal type="number">0x00000015</literal></expr></init></decl>,
<decl><name>eRESERVED</name> <init>= <expr><literal type="number">0x00000016</literal></expr></init></decl>,
<decl><name>eMAX_CV_CALL</name></decl>
}</block></enum></type> <name>ECV_CALL</name>;</typedef>

<typedef>typedef <type><union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>scoped</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>reserved</name> <range>: <expr><literal type="number">7</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut8</name></type> <name>packed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>ctor</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>ovlops</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>isnested</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>cnested</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>opassign</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>opcast</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>fwdref</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><name>bits</name></decl>;</struct>
<decl_stmt><decl><type><name>ut16</name></type> <name>cv_property</name></decl>;</decl_stmt>
}</block></union></type> <name>UCV_PROPERTY</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>eMTvanilla</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>eMTvirtual</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>eMTstatic</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>eMTfriend</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,
<decl><name>eMTintro</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>eMTpurevirt</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,
<decl><name>eMTpureintro</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>,
<decl><name>eMT_MAX</name></decl>
}</block></enum></type> <name>EMPROP</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>ePrivate</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>eProtected</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>ePublic</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>eAccessMax</name></decl>
}</block></enum></type> <name>EACCESS</name>;</typedef>




<typedef>typedef <type><union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>access</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>mprop</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>pseudo</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>noinherit</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>noconstruct</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>padding</name> <range>: <expr><literal type="number">7</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>compgenx</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><name>bits</name></decl>;</struct>
<decl_stmt><decl><type><name>ut16</name></type> <name>fldattr</name></decl>;</decl_stmt>
}</block></union></type> <name>UCV_fldattr</name>;</typedef>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 return_type;
ECV_CALL call_conv;
ut8 reserved;
ut16 parm_count;
ut32 arg_list;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_PROCEDURE</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 return_type;
ut32 class_type;
ut32 this_type;
ECV_CALL call_conv; 
ut8 reserved;
ut16 parm_count;
ut32 arglist;
st32 this_adjust;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_MFUNCTION</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 count;
ut32 *arg_type;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_ARGLIST</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 modified_type;
union {
struct {
ut8 pad2 : <literal type="number">8</literal>;
ut8 const_ : <literal type="number">1</literal>;
ut8 volatile_ : <literal type="number">1</literal>;
ut8 unaligned : <literal type="number">1</literal>;
ut8 pad1 : <literal type="number">5</literal>;
} bits;
ut16 modifier;
} umodifier;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_MODIFIER</name></expr>;</expr_stmt>

<typedef>typedef <type><enum>enum <block>{
<decl><name>ePTR_MODE_PTR</name> <init>= <expr><literal type="number">0x00000000</literal></expr></init></decl>,
<decl><name>ePTR_MODE_REF</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,
<decl><name>ePTR_MODE_PMEM</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,
<decl><name>ePTR_MODE_PMFUNC</name> <init>= <expr><literal type="number">0x00000003</literal></expr></init></decl>,
<decl><name>ePTR_MODE_RESERVED</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,
<decl><name>eModeMax</name></decl>
}</block></enum></type> <name>EMode</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>ePTR_NEAR</name> <init>= <expr><literal type="number">0x00000000</literal></expr></init></decl>,
<decl><name>ePTR_FAR</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,
<decl><name>ePTR_HUGE</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,
<decl><name>ePTR_BASE_SEG</name> <init>= <expr><literal type="number">0x00000003</literal></expr></init></decl>,
<decl><name>ePTR_BASE_VAL</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,
<decl><name>ePTR_BASE_SEGVAL</name> <init>= <expr><literal type="number">0x00000005</literal></expr></init></decl>,
<decl><name>ePTR_BASE_ADDR</name> <init>= <expr><literal type="number">0x00000006</literal></expr></init></decl>,
<decl><name>ePTR_BASE_SEGADDR</name> <init>= <expr><literal type="number">0x00000007</literal></expr></init></decl>,
<decl><name>ePTR_BASE_TYPE</name> <init>= <expr><literal type="number">0x00000008</literal></expr></init></decl>,
<decl><name>ePTR_BASE_SELF</name> <init>= <expr><literal type="number">0x00000009</literal></expr></init></decl>,
<decl><name>ePTR_NEAR32</name> <init>= <expr><literal type="number">0x0000000A</literal></expr></init></decl>,
<decl><name>ePTR_FAR32</name> <init>= <expr><literal type="number">0x0000000B</literal></expr></init></decl>,
<decl><name>ePTR_64</name> <init>= <expr><literal type="number">0x0000000C</literal></expr></init></decl>,
<decl><name>ePTR_UNUSEDPTR</name> <init>= <expr><literal type="number">0x0000000D</literal></expr></init></decl>,
<decl><name>eTypeMax</name></decl>
}</block></enum></type> <name>EType</name>;</typedef>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef union {
struct {
ut8 pad[<literal type="number">2</literal>];
ut8 flat32 : <literal type="number">1</literal>;
ut8 volatile_ : <literal type="number">1</literal>;
ut8 const_ : <literal type="number">1</literal>;
ut8 unaligned : <literal type="number">1</literal>;
ut8 restrict_ : <literal type="number">1</literal>;
ut8 pad1 : <literal type="number">3</literal>;
ut8 type : <literal type="number">5</literal>;
ut8 mode : <literal type="number">3</literal>;
} bits;
ut32 ptr_attr;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>UPTR_ATTR</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 utype;
UPTR_ATTR ptr_attr;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_POINTER</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
st32 stream_size;
st32 num_pages;
ut8 *stream_pages;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SPage</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pages_amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>page_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>R_STREAM_FILE</name></type> <name>stream_file</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>free_func</name></type> <name>free_</name></decl>;</decl_stmt>
}</block></struct></type> <name>R_PDB_STREAM</name>;</typedef>

<typedef>typedef <type><struct>struct <name>R_PDB7_ROOT_STREAM</name><block>{
<decl_stmt><decl><type><name>R_PDB_STREAM</name></type> <name>pdb_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>streams_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>R_PDB7_ROOT_STREAM</name>;</typedef>

<typedef>typedef <type><enum>enum <name>EStream_</name><block>{
<decl><name>ePDB_STREAM_ROOT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>ePDB_STREAM_PDB</name></decl>, 
<decl><name>ePDB_STREAM_TPI</name></decl>, 
<decl><name>ePDB_STREAM_DBI</name></decl>, 

<decl><name>ePDB_STREAM_GSYM</name></decl>,
<decl><name>ePDB_STREAM_SECT_HDR</name></decl>,
<decl><name>ePDB_STREAM_SECT__HDR_ORIG</name></decl>,
<decl><name>ePDB_STREAM_OMAP_TO_SRC</name></decl>,
<decl><name>ePDB_STREAM_OMAP_FROM_SRC</name></decl>,
<decl><name>ePDB_STREAM_FPO</name></decl>,
<decl><name>ePDB_STREAM_FPO_NEW</name></decl>,
<decl><name>ePDB_STREAM_XDATA</name></decl>,
<decl><name>ePDB_STREAM_PDATA</name></decl>,
<decl><name>ePDB_STREAM_TOKEN_RID_MAP</name></decl>,
<decl><name>ePDB_STREAM_MAX</name></decl>
}</block></enum></type> <name>EStream</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>f_load</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parsed_pdb_stream</name></decl></parameter>, <parameter><decl><type><name>R_STREAM_FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>R_PDB_STREAM</name> <modifier>*</modifier></type><name>pdb_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>f_load</name></type> <name>load</name></decl>;</decl_stmt>
}</block></struct></type> <name>SParsedPDBStream</name>;</typedef>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
char *name;
ut32 size;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SCString</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
SCString name;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SNoVal</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
char value;
SCString name;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SVal_LF_CHAR</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
st16 value;
SCString name;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SVal_LF_SHORT</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut16 value;
SCString name;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SVal_LF_USHORT</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>st32</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SCString</name></type> <name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>SVal_LF_LONG</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SCString</name></type> <name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>SVal_LF_ULONG</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>st64</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SCString</name></type> <name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>SVal_LF_QUADWORD</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SCString</name></type> <name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>SVal_LF_UQUADWORD</name>;</typedef>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut16 value_or_type;
void *name_or_val;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SVal</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 element_type;
ut32 index_type;
SVal size;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_ARRAY</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut16 count;
UCV_PROPERTY prop;
ut32 field_list;
ut32 derived;
ut32 vshape;
SVal size;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_STRUCTURE</name></expr><operator>,</operator> <expr><name>SLF_CLASS</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut16 count;
UCV_PROPERTY prop;
ut32 field_list;
SVal size;
ut32 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_UNION</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 base_type;
ut8 length;
ut8 position;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_BITFIELD</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut16 count;
char *vt_descriptors;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_VTSHAPE</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut16 count;
UCV_PROPERTY prop;
ut32 utype;
ut32 field_list;
SCString name;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_ENUM</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
UCV_fldattr fldattr;
SVal enum_value;
ut8 pad;

free_func free_;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_ENUMERATE</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut16 pad;
ut32 index;
SCString name;

free_func free_;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_NESTTYPE</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut16 count;
ut32 mlist;
SCString name;
ut8 pad;

free_func free_;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_METHOD</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
UCV_fldattr fldattr;
ut32 index;
SVal offset;
ut8 pad;


free_func free_;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_MEMBER</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 val;
SCString str_data;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_ONEMETHOD_VAL</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
UCV_fldattr fldattr;
ut32 index;
SLF_ONEMETHOD_VAL val;
ut8 pad;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SLF_ONEMETHOD</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>substructs</name></decl>;</decl_stmt>
}</block></struct></type> <name>SLF_FIELDLIST</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>st32</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>cb</name></decl>;</decl_stmt>
}</block></struct></type> <name>SOffCb</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>st16</name></type> <name>sn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st16</name></type> <name>padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>hash_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOffCb</name></type> <name>hash_vals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOffCb</name></type> <name>ti_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOffCb</name></type> <name>hash_adj</name></decl>;</decl_stmt>
}</block></struct></type> <name>STPI</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st32</name></type> <name>hdr_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ti_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ti_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>follow_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STPI</name></type> <name>tpi</name></decl>;</decl_stmt>
}</block></struct></type> <name>STPIHeader</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>eLF_MODIFIER_16t</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,
<decl><name>eLF_POINTER_16t</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,
<decl><name>eLF_ARRAY_16t</name> <init>= <expr><literal type="number">0x00000003</literal></expr></init></decl>,
<decl><name>eLF_CLASS_16t</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,
<decl><name>eLF_STRUCTURE_16t</name> <init>= <expr><literal type="number">0x00000005</literal></expr></init></decl>,
<decl><name>eLF_UNION_16t</name> <init>= <expr><literal type="number">0x00000006</literal></expr></init></decl>,
<decl><name>eLF_ENUM_16t</name> <init>= <expr><literal type="number">0x00000007</literal></expr></init></decl>,
<decl><name>eLF_PROCEDURE_16t</name> <init>= <expr><literal type="number">0x00000008</literal></expr></init></decl>,
<decl><name>eLF_MFUNCTION_16t</name> <init>= <expr><literal type="number">0x00000009</literal></expr></init></decl>,
<decl><name>eLF_VTSHAPE</name> <init>= <expr><literal type="number">0x0000000A</literal></expr></init></decl>,
<decl><name>eLF_COBOL0_16t</name> <init>= <expr><literal type="number">0x0000000B</literal></expr></init></decl>,
<decl><name>eLF_COBOL1</name> <init>= <expr><literal type="number">0x0000000C</literal></expr></init></decl>,
<decl><name>eLF_BARRAY_16t</name> <init>= <expr><literal type="number">0x0000000D</literal></expr></init></decl>,
<decl><name>eLF_LABEL</name> <init>= <expr><literal type="number">0x0000000E</literal></expr></init></decl>,
<decl><name>eLF_NULL</name> <init>= <expr><literal type="number">0x0000000F</literal></expr></init></decl>,
<decl><name>eLF_NOTTRAN</name> <init>= <expr><literal type="number">0x00000010</literal></expr></init></decl>,
<decl><name>eLF_DIMARRAY_16t</name> <init>= <expr><literal type="number">0x00000011</literal></expr></init></decl>,
<decl><name>eLF_VFTPATH_16t</name> <init>= <expr><literal type="number">0x00000012</literal></expr></init></decl>,
<decl><name>eLF_PRECOMP_16t</name> <init>= <expr><literal type="number">0x00000013</literal></expr></init></decl>,
<decl><name>eLF_ENDPRECOMP</name> <init>= <expr><literal type="number">0x00000014</literal></expr></init></decl>,
<decl><name>eLF_OEM_16t</name> <init>= <expr><literal type="number">0x00000015</literal></expr></init></decl>,
<decl><name>eLF_TYPESERVER_ST</name> <init>= <expr><literal type="number">0x00000016</literal></expr></init></decl>,
<decl><name>eLF_SKIP_16t</name> <init>= <expr><literal type="number">0x00000200</literal></expr></init></decl>,
<decl><name>eLF_ARGLIST_16t</name> <init>= <expr><literal type="number">0x00000201</literal></expr></init></decl>,
<decl><name>eLF_DEFARG_16t</name> <init>= <expr><literal type="number">0x00000202</literal></expr></init></decl>,
<decl><name>eLF_LIST</name> <init>= <expr><literal type="number">0x00000203</literal></expr></init></decl>,
<decl><name>eLF_FIELDLIST_16t</name> <init>= <expr><literal type="number">0x00000204</literal></expr></init></decl>,
<decl><name>eLF_DERIVED_16t</name> <init>= <expr><literal type="number">0x00000205</literal></expr></init></decl>,
<decl><name>eLF_BITFIELD_16t</name> <init>= <expr><literal type="number">0x00000206</literal></expr></init></decl>,
<decl><name>eLF_METHODLIST_16t</name> <init>= <expr><literal type="number">0x00000207</literal></expr></init></decl>,
<decl><name>eLF_DIMCONU_16t</name> <init>= <expr><literal type="number">0x00000208</literal></expr></init></decl>,
<decl><name>eLF_DIMCONLU_16t</name> <init>= <expr><literal type="number">0x00000209</literal></expr></init></decl>,
<decl><name>eLF_DIMVARU_16t</name> <init>= <expr><literal type="number">0x0000020A</literal></expr></init></decl>,
<decl><name>eLF_DIMVARLU_16t</name> <init>= <expr><literal type="number">0x0000020B</literal></expr></init></decl>,
<decl><name>eLF_REFSYM</name> <init>= <expr><literal type="number">0x0000020C</literal></expr></init></decl>,
<decl><name>eLF_BCLASS_16t</name> <init>= <expr><literal type="number">0x00000400</literal></expr></init></decl>,
<decl><name>eLF_VBCLASS_16t</name> <init>= <expr><literal type="number">0x00000401</literal></expr></init></decl>,
<decl><name>eLF_IVBCLASS_16t</name> <init>= <expr><literal type="number">0x00000402</literal></expr></init></decl>,
<decl><name>eLF_ENUMERATE_ST</name> <init>= <expr><literal type="number">0x00000403</literal></expr></init></decl>,
<decl><name>eLF_FRIENDFCN_16t</name> <init>= <expr><literal type="number">0x00000404</literal></expr></init></decl>,
<decl><name>eLF_INDEX_16t</name> <init>= <expr><literal type="number">0x00000405</literal></expr></init></decl>,
<decl><name>eLF_MEMBER_16t</name> <init>= <expr><literal type="number">0x00000406</literal></expr></init></decl>,
<decl><name>eLF_STMEMBER_16t</name> <init>= <expr><literal type="number">0x00000407</literal></expr></init></decl>,
<decl><name>eLF_METHOD_16t</name> <init>= <expr><literal type="number">0x00000408</literal></expr></init></decl>,
<decl><name>eLF_NESTTYPE_16t</name> <init>= <expr><literal type="number">0x00000409</literal></expr></init></decl>,
<decl><name>eLF_VFUNCTAB_16t</name> <init>= <expr><literal type="number">0x0000040A</literal></expr></init></decl>,
<decl><name>eLF_FRIENDCLS_16t</name> <init>= <expr><literal type="number">0x0000040B</literal></expr></init></decl>,
<decl><name>eLF_ONEMETHOD_16t</name> <init>= <expr><literal type="number">0x0000040C</literal></expr></init></decl>,
<decl><name>eLF_VFUNCOFF_16t</name> <init>= <expr><literal type="number">0x0000040D</literal></expr></init></decl>,
<decl><name>eLF_TI16_MAX</name> <init>= <expr><literal type="number">0x00001000</literal></expr></init></decl>,
<decl><name>eLF_MODIFIER</name> <init>= <expr><literal type="number">0x00001001</literal></expr></init></decl>,
<decl><name>eLF_POINTER</name> <init>= <expr><literal type="number">0x00001002</literal></expr></init></decl>,
<decl><name>eLF_ARRAY_ST</name> <init>= <expr><literal type="number">0x00001003</literal></expr></init></decl>,
<decl><name>eLF_CLASS_ST</name> <init>= <expr><literal type="number">0x00001004</literal></expr></init></decl>,
<decl><name>eLF_STRUCTURE_ST</name> <init>= <expr><literal type="number">0x00001005</literal></expr></init></decl>,
<decl><name>eLF_UNION_ST</name> <init>= <expr><literal type="number">0x00001006</literal></expr></init></decl>,
<decl><name>eLF_ENUM_ST</name> <init>= <expr><literal type="number">0x00001007</literal></expr></init></decl>,
<decl><name>eLF_PROCEDURE</name> <init>= <expr><literal type="number">0x00001008</literal></expr></init></decl>,
<decl><name>eLF_MFUNCTION</name> <init>= <expr><literal type="number">0x00001009</literal></expr></init></decl>,
<decl><name>eLF_COBOL0</name> <init>= <expr><literal type="number">0x0000100A</literal></expr></init></decl>,
<decl><name>eLF_BARRAY</name> <init>= <expr><literal type="number">0x0000100B</literal></expr></init></decl>,
<decl><name>eLF_DIMARRAY_ST</name> <init>= <expr><literal type="number">0x0000100C</literal></expr></init></decl>,
<decl><name>eLF_VFTPATH</name> <init>= <expr><literal type="number">0x0000100D</literal></expr></init></decl>,
<decl><name>eLF_PRECOMP_ST</name> <init>= <expr><literal type="number">0x0000100E</literal></expr></init></decl>,
<decl><name>eLF_OEM</name> <init>= <expr><literal type="number">0x0000100F</literal></expr></init></decl>,
<decl><name>eLF_ALIAS_ST</name> <init>= <expr><literal type="number">0x00001010</literal></expr></init></decl>,
<decl><name>eLF_OEM2</name> <init>= <expr><literal type="number">0x00001011</literal></expr></init></decl>,
<decl><name>eLF_SKIP</name> <init>= <expr><literal type="number">0x00001200</literal></expr></init></decl>,
<decl><name>eLF_ARGLIST</name> <init>= <expr><literal type="number">0x00001201</literal></expr></init></decl>,
<decl><name>eLF_DEFARG_ST</name> <init>= <expr><literal type="number">0x00001202</literal></expr></init></decl>,
<decl><name>eLF_FIELDLIST</name> <init>= <expr><literal type="number">0x00001203</literal></expr></init></decl>,
<decl><name>eLF_DERIVED</name> <init>= <expr><literal type="number">0x00001204</literal></expr></init></decl>,
<decl><name>eLF_BITFIELD</name> <init>= <expr><literal type="number">0x00001205</literal></expr></init></decl>,
<decl><name>eLF_METHODLIST</name> <init>= <expr><literal type="number">0x00001206</literal></expr></init></decl>,
<decl><name>eLF_DIMCONU</name> <init>= <expr><literal type="number">0x00001207</literal></expr></init></decl>,
<decl><name>eLF_DIMCONLU</name> <init>= <expr><literal type="number">0x00001208</literal></expr></init></decl>,
<decl><name>eLF_DIMVARU</name> <init>= <expr><literal type="number">0x00001209</literal></expr></init></decl>,
<decl><name>eLF_DIMVARLU</name> <init>= <expr><literal type="number">0x0000120A</literal></expr></init></decl>,
<decl><name>eLF_BCLASS</name> <init>= <expr><literal type="number">0x00001400</literal></expr></init></decl>,
<decl><name>eLF_VBCLASS</name> <init>= <expr><literal type="number">0x00001401</literal></expr></init></decl>,
<decl><name>eLF_IVBCLASS</name> <init>= <expr><literal type="number">0x00001402</literal></expr></init></decl>,
<decl><name>eLF_FRIENDFCN_ST</name> <init>= <expr><literal type="number">0x00001403</literal></expr></init></decl>,
<decl><name>eLF_INDEX</name> <init>= <expr><literal type="number">0x00001404</literal></expr></init></decl>,
<decl><name>eLF_MEMBER_ST</name> <init>= <expr><literal type="number">0x00001405</literal></expr></init></decl>,
<decl><name>eLF_STMEMBER_ST</name> <init>= <expr><literal type="number">0x00001406</literal></expr></init></decl>,
<decl><name>eLF_METHOD_ST</name> <init>= <expr><literal type="number">0x00001407</literal></expr></init></decl>,
<decl><name>eLF_NESTTYPE_ST</name> <init>= <expr><literal type="number">0x00001408</literal></expr></init></decl>,
<decl><name>eLF_VFUNCTAB</name> <init>= <expr><literal type="number">0x00001409</literal></expr></init></decl>,
<decl><name>eLF_FRIENDCLS</name> <init>= <expr><literal type="number">0x0000140A</literal></expr></init></decl>,
<decl><name>eLF_ONEMETHOD_ST</name> <init>= <expr><literal type="number">0x0000140B</literal></expr></init></decl>,
<decl><name>eLF_VFUNCOFF</name> <init>= <expr><literal type="number">0x0000140C</literal></expr></init></decl>,
<decl><name>eLF_NESTTYPEEX_ST</name> <init>= <expr><literal type="number">0x0000140D</literal></expr></init></decl>,
<decl><name>eLF_MEMBERMODIFY_ST</name> <init>= <expr><literal type="number">0x0000140E</literal></expr></init></decl>,
<decl><name>eLF_MANAGED_ST</name> <init>= <expr><literal type="number">0x0000140F</literal></expr></init></decl>,
<decl><name>eLF_ST_MAX</name> <init>= <expr><literal type="number">0x00001500</literal></expr></init></decl>,
<decl><name>eLF_TYPESERVER</name> <init>= <expr><literal type="number">0x00001501</literal></expr></init></decl>,
<decl><name>eLF_ENUMERATE</name> <init>= <expr><literal type="number">0x00001502</literal></expr></init></decl>,
<decl><name>eLF_ARRAY</name> <init>= <expr><literal type="number">0x00001503</literal></expr></init></decl>,
<decl><name>eLF_CLASS</name> <init>= <expr><literal type="number">0x00001504</literal></expr></init></decl>,
<decl><name>eLF_STRUCTURE</name> <init>= <expr><literal type="number">0x00001505</literal></expr></init></decl>,
<decl><name>eLF_UNION</name> <init>= <expr><literal type="number">0x00001506</literal></expr></init></decl>,
<decl><name>eLF_ENUM</name> <init>= <expr><literal type="number">0x00001507</literal></expr></init></decl>,
<decl><name>eLF_DIMARRAY</name> <init>= <expr><literal type="number">0x00001508</literal></expr></init></decl>,
<decl><name>eLF_PRECOMP</name> <init>= <expr><literal type="number">0x00001509</literal></expr></init></decl>,
<decl><name>eLF_ALIAS</name> <init>= <expr><literal type="number">0x0000150A</literal></expr></init></decl>,
<decl><name>eLF_DEFARG</name> <init>= <expr><literal type="number">0x0000150B</literal></expr></init></decl>,
<decl><name>eLF_FRIENDFCN</name> <init>= <expr><literal type="number">0x0000150C</literal></expr></init></decl>,
<decl><name>eLF_MEMBER</name> <init>= <expr><literal type="number">0x0000150D</literal></expr></init></decl>,
<decl><name>eLF_STMEMBER</name> <init>= <expr><literal type="number">0x0000150E</literal></expr></init></decl>,
<decl><name>eLF_METHOD</name> <init>= <expr><literal type="number">0x0000150F</literal></expr></init></decl>,
<decl><name>eLF_NESTTYPE</name> <init>= <expr><literal type="number">0x00001510</literal></expr></init></decl>,
<decl><name>eLF_ONEMETHOD</name> <init>= <expr><literal type="number">0x00001511</literal></expr></init></decl>,
<decl><name>eLF_NESTTYPEEX</name> <init>= <expr><literal type="number">0x00001512</literal></expr></init></decl>,
<decl><name>eLF_MEMBERMODIFY</name> <init>= <expr><literal type="number">0x00001513</literal></expr></init></decl>,
<decl><name>eLF_MANAGED</name> <init>= <expr><literal type="number">0x00001514</literal></expr></init></decl>,
<decl><name>eLF_TYPESERVER2</name> <init>= <expr><literal type="number">0x00001515</literal></expr></init></decl>,
<decl><name>eLF_CHAR</name> <init>= <expr><literal type="number">0x00008000</literal></expr></init></decl>,
<decl><name>eLF_SHORT</name> <init>= <expr><literal type="number">0x00008001</literal></expr></init></decl>,
<decl><name>eLF_USHORT</name> <init>= <expr><literal type="number">0x00008002</literal></expr></init></decl>,
<decl><name>eLF_LONG</name> <init>= <expr><literal type="number">0x00008003</literal></expr></init></decl>,
<decl><name>eLF_ULONG</name> <init>= <expr><literal type="number">0x00008004</literal></expr></init></decl>,
<decl><name>eLF_REAL32</name> <init>= <expr><literal type="number">0x00008005</literal></expr></init></decl>,
<decl><name>eLF_REAL64</name> <init>= <expr><literal type="number">0x00008006</literal></expr></init></decl>,
<decl><name>eLF_REAL80</name> <init>= <expr><literal type="number">0x00008007</literal></expr></init></decl>,
<decl><name>eLF_REAL128</name> <init>= <expr><literal type="number">0x00008008</literal></expr></init></decl>,
<decl><name>eLF_QUADWORD</name> <init>= <expr><literal type="number">0x00008009</literal></expr></init></decl>,
<decl><name>eLF_UQUADWORD</name> <init>= <expr><literal type="number">0x0000800A</literal></expr></init></decl>,
<decl><name>eLF_REAL48</name> <init>= <expr><literal type="number">0x0000800B</literal></expr></init></decl>,
<decl><name>eLF_COMPLEX32</name> <init>= <expr><literal type="number">0x0000800C</literal></expr></init></decl>,
<decl><name>eLF_COMPLEX64</name> <init>= <expr><literal type="number">0x0000800D</literal></expr></init></decl>,
<decl><name>eLF_COMPLEX80</name> <init>= <expr><literal type="number">0x0000800E</literal></expr></init></decl>,
<decl><name>eLF_COMPLEX128</name> <init>= <expr><literal type="number">0x0000800F</literal></expr></init></decl>,
<decl><name>eLF_VARSTRING</name> <init>= <expr><literal type="number">0x00008010</literal></expr></init></decl>,
<decl><name>eLF_OCTWORD</name> <init>= <expr><literal type="number">0x00008017</literal></expr></init></decl>,
<decl><name>eLF_UOCTWORD</name> <init>= <expr><literal type="number">0x00008018</literal></expr></init></decl>,
<decl><name>eLF_DECIMAL</name> <init>= <expr><literal type="number">0x00008019</literal></expr></init></decl>,
<decl><name>eLF_DATE</name> <init>= <expr><literal type="number">0x0000801A</literal></expr></init></decl>,
<decl><name>eLF_UTF8STRING</name> <init>= <expr><literal type="number">0x0000801B</literal></expr></init></decl>,
<decl><name>eLF_PAD0</name> <init>= <expr><literal type="number">0x000000F0</literal></expr></init></decl>,
<decl><name>eLF_PAD1</name> <init>= <expr><literal type="number">0x000000F1</literal></expr></init></decl>,
<decl><name>eLF_PAD2</name> <init>= <expr><literal type="number">0x000000F2</literal></expr></init></decl>,
<decl><name>eLF_PAD3</name> <init>= <expr><literal type="number">0x000000F3</literal></expr></init></decl>,
<decl><name>eLF_PAD4</name> <init>= <expr><literal type="number">0x000000F4</literal></expr></init></decl>,
<decl><name>eLF_PAD5</name> <init>= <expr><literal type="number">0x000000F5</literal></expr></init></decl>,
<decl><name>eLF_PAD6</name> <init>= <expr><literal type="number">0x000000F6</literal></expr></init></decl>,
<decl><name>eLF_PAD7</name> <init>= <expr><literal type="number">0x000000F7</literal></expr></init></decl>,
<decl><name>eLF_PAD8</name> <init>= <expr><literal type="number">0x000000F8</literal></expr></init></decl>,
<decl><name>eLF_PAD9</name> <init>= <expr><literal type="number">0x000000F9</literal></expr></init></decl>,
<decl><name>eLF_PAD10</name> <init>= <expr><literal type="number">0x000000FA</literal></expr></init></decl>,
<decl><name>eLF_PAD11</name> <init>= <expr><literal type="number">0x000000FB</literal></expr></init></decl>,
<decl><name>eLF_PAD12</name> <init>= <expr><literal type="number">0x000000FC</literal></expr></init></decl>,
<decl><name>eLF_PAD13</name> <init>= <expr><literal type="number">0x000000FD</literal></expr></init></decl>,
<decl><name>eLF_PAD14</name> <init>= <expr><literal type="number">0x000000FE</literal></expr></init></decl>,
<decl><name>eLF_PAD15</name> <init>= <expr><literal type="number">0x000000FF</literal></expr></init></decl>,
<decl><name>eLF_MAX</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>ELeafType</name>;</typedef>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ELeafType leaf_type;
void *type_info;

free_func free_;
get_value_name get_name;
get_value get_val;
get_value_name_len get_name_len;
get_member_list get_members;
get_arg_type_ get_arg_type;
get_element_type_ get_element_type;
get_index_type_ get_index_type;
get_base_type_ get_base_type;
get_derived_ get_derived;
get_vshape_ get_vshape;
get_utype_ get_utype;
get_return_type_ get_return_type;
get_class_type_ get_class_type;
get_this_type_ get_this_type;
get_arglist_ get_arglist;
get_index_ get_index;
get_mlist_ get_mlist;
get_modified_type_ get_modified_type;
get_value is_fwdref;
get_print_type_ get_print_type;

}</argument>)</argument_list></macro> <expr_stmt><expr><name>STypeInfo</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut16 length;
ut32 tpi_idx;
STypeInfo type_data;


}</argument>)</argument_list></macro> <expr_stmt><expr><name>SType</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>STPIHeader</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>types</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>free_func</name></type> <name>free_</name></decl>;</decl_stmt>
}</block></struct></type> <name>STpiStream</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>data1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>data2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>data3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>data4</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SGUID</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>time_date_stamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>age</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGUID</name></type> <name>guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>cb_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>free_func</name></type> <name>free_</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPDBInfoStream</name>;</typedef>



<typedef>typedef <type><enum>enum <block>{
<decl><name>eIMAGE_FILE_MACHINE_UNKNOWN</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,
<decl><name>eIMAGE_FILE_MACHINE_I386</name> <init>= <expr><literal type="number">0x014c</literal></expr></init></decl>,
<decl><name>eIMAGE_FILE_MACHINE_IA64</name> <init>= <expr><literal type="number">0x0200</literal></expr></init></decl>,
<decl><name>eIMAGE_FILE_MACHINE_AMD64</name> <init>= <expr><literal type="number">0x8664</literal></expr></init></decl>,
<decl><name>eMaxMachine</name></decl>
}</block></enum></type> <name>EMachine</name>;</typedef>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut16 section;
ut16 padding1;
st32 offset;
st32 size;
ut32 flags;
st32 module;
st16 padding2;
ut32 data_crc;
ut32 reloc_crc;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SSymbolRange</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 opened;
SSymbolRange range;
ut16 flags;
st16 stream;
ut32 symSize;
ut32 oldLineSize;
ut32 lineSize;
st16 nSrcFiles;
st16 padding1;
ut32 offsets;
ut32 niSource;
ut32 niCompiler;
SCString modName;
SCString objName;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SDBIExHeader</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
st16 sn_fpo;
st16 sn_exception;
st16 sn_fixup;
st16 sn_omap_to_src;
st16 sn_omap_from_src;
st16 sn_section_hdr;
st16 sn_token_rid_map;
st16 sn_xdata;
st16 sn_pdata;
st16 sn_new_fpo;
st16 sn_section_hdr_orig;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SDbiDbgHeader</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 magic;
ut32 version;
ut32 age;
st16 gssymStream;
ut16 vers;
st16 pssymStream;
ut16 pdbver;
st16 symrecStream;
ut16 pdbver2;
ut32 module_size;
ut32 seccon_size;
ut32 secmap_size;
ut32 filinf_size;
ut32 tsmap_size;
ut32 mfc_index;
ut32 dbghdr_size;
ut32 ecinfo_size;
ut16 flags;
EMachine machine; 
ut32 resvd;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SDBIHeader</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>SDBIHeader</name></type> <name>dbi_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDbiDbgHeader</name></type> <name>dbg_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>dbiexhdrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>free_func</name></type> <name>free_</name></decl>;</decl_stmt>
}</block></struct></type> <name>SDbiStream</name>;</typedef>



<typedef>typedef <type><union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>cbRegs</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>fHashSEH</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>fUseBp</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>reserved</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>cbFrame</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>cbProlog</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><name>bits</name></decl>;</struct>
<decl_stmt><decl><type><name>ut16</name></type> <name>bit_values</name></decl>;</decl_stmt>
}</block></union></type> <name>UBit_values</name>;</typedef>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 ul_off_start;
ut32 cb_proc_size;
ut32 cdw_locals;
ut16 cdw_params;
UBit_values bit_values;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SFPO_DATA</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>fpo_data_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFPOStream</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>eSEH</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>eCPPEH</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>eFnStart</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>eFPO_DATA_FLAGS_MAX</name></decl>
}</block></enum></type> <name>EFPO_DATA_FLAGS</name>;</typedef>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
ut32 ul_off_start;
ut32 cb_proc_size;
ut32 cdw_locals;
ut32 cdw_params;
ut32 max_stack;
ut32 programm_string_offset;
ut16 cb_prolog;
ut16 cb_save_regs;
EFPO_DATA_FLAGS flags;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SFPO_DATA_V2</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>fpo_data_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFPONewStream</name>;</typedef>



<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>globals_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>SGDATAStream</name>;</typedef>

<macro><name>R_PACKED</name> <argument_list>(
<argument>typedef struct {
ut16 leaf_type;
ut32 symtype;
ut32 offset;
ut16 segment;
SCString name;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SGlobal</name></expr>;</expr_stmt>




<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>physical_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>virtual_address</name></decl>;</decl_stmt>
}</block></union></type> <name>UMISC</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDB_SIZEOF_SECTION_NAME</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct {
char name[PDB_SIZEOF_SECTION_NAME];
UMISC misc;
ut32 virtual_address;
ut32 size_of_raw_data;
ut32 pointer_to_raw_data;
ut32 pointer_to_relocations;
ut32 pointer_to_line_numbers;
ut16 number_of_relocations;
ut16 number_of_line_numbers;
ut32 charactestics;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>SIMAGE_SECTION_HEADER</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>sections_hdrs</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPEStream</name>;</typedef>



<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>to</name></decl>;</decl_stmt>
}</block></struct></type> <name>SOmapEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>omap_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>froms</name></decl>;</decl_stmt>
}</block></struct></type> <name>SOmapStream</name>;</typedef>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
