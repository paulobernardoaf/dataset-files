<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\pe\pe_write.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pe.h"</cpp:file></cpp:include>


<function><type><name>bool</name> <name>PE_</name></type>(<name>r_bin_pe_section_perms</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>pe</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_section_header</name></expr></argument>)</argument_list></call> <operator>*</operator><name>shdr</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>section_header</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shdr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>num_sections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sname</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Name</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>sname</name></expr></argument>, <argument><expr><name>PE_IMAGE_SIZEOF_SHORT_NAME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>newperms</name> <init>= <expr><name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Characteristics</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>newperms_le</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>&amp;</operator> <name>R_PERM_X</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newperms</name> <operator>|=</operator> <name>PE_IMAGE_SCN_MEM_EXECUTE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>newperms</name> <operator>&amp;=</operator> <operator>~</operator><name>PE_IMAGE_SCN_MEM_EXECUTE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>&amp;</operator> <name>R_PERM_W</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newperms</name> <operator>|=</operator> <name>PE_IMAGE_SCN_MEM_WRITE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>newperms</name> <operator>&amp;=</operator> <operator>~</operator><name>PE_IMAGE_SCN_MEM_WRITE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>&amp;</operator> <name>R_PERM_R</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newperms</name> <operator>|=</operator> <name>PE_IMAGE_SCN_MEM_READ</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>newperms</name> <operator>&amp;=</operator> <operator>~</operator><name>PE_IMAGE_SCN_MEM_READ</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>&amp;</operator> <name>R_PERM_SHAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newperms</name> <operator>|=</operator> <name>PE_IMAGE_SCN_MEM_SHARED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>newperms</name> <operator>&amp;=</operator> <operator>~</operator><name>PE_IMAGE_SCN_MEM_SHARED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>patchoff</name> <init>= <expr><name><name>pe</name><operator>-&gt;</operator><name>section_header_offset</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>patchoff</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_section_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>patchoff</name> <operator>+=</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_section_header</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Characteristics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_write_le32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>newperms_le</name></expr></argument>, <argument><expr><name>newperms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"wx %02x @ 0x%x\n"</literal></expr></argument>, <argument><expr><name>newperms_le</name></expr></argument>, <argument><expr><name>patchoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>patchoff</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>newperms_le</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>newperms_le</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>newperms_le</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
