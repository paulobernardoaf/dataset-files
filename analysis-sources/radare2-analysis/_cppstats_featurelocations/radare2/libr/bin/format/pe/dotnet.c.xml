<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\pe\dotnet.c">

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONGLONG</name></cpp:macro> <cpp:value>ut64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DWORD</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_IMAGE_DATA_DIRECTORY</name> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>VirtualAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>Size</name></decl>;</decl_stmt>
}</block></struct></type> <name>IMAGE_DATA_DIRECTORY</name><operator>,</operator> *<name>PIMAGE_DATA_DIRECTORY</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pe_specs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dotnet.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"-&gt; %s = %s\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_integer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"-&gt; %s = %d\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_sized_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"-&gt; %s = %d (%s)\n"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>pe_rva_to_offset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>_PE</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>object</name></decl>;</decl_stmt>
}</block></struct></type> <name>PE</name>;</typedef>

<function><type><name>PIMAGE_DATA_DIRECTORY</name></type> <name>pe_get_directory_entry</name><parameter_list>( <parameter><decl><type><name>PE</name><modifier>*</modifier></type> <name>pe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
PIMAGE_DATA_DIRECTORY result = IS_64BITS_PE(pe)
? &amp;pe-&gt;header64-&gt;OptionalHeader.DataDirectory[entry]
: &amp;pe-&gt;header-&gt;OptionalHeader.DataDirectory[entry];
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>PIMAGE_DATA_DIRECTORY</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>pe_get_dotnet_string</name><parameter_list>( <parameter><decl><type><name>PE</name><modifier>*</modifier></type> <name>pe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>string_offset</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>string_index</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>string_offset</name> <operator>+</operator> <name>string_index</name> <operator>&gt;=</operator> <name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator>
<name>string_offset</name> <operator>+</operator> <name>string_index</name> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>data_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name> <init>= <expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>data_size</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>string_offset</name> <operator>+</operator> <name>string_index</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>string_offset</name> <operator>+</operator> <name>string_index</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eos</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>memmem</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>start</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>eos</name></expr>?</condition><then> <expr><name>start</name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>max_rows</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biggest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>biggest</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>biggest</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <name>biggest</name><operator>)</operator></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name>biggest</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>biggest</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dotnet_parse_guid</name><parameter_list>( <parameter><decl><type><name>PE</name><modifier>*</modifier></type> <name>pe</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>metadata_root</name></decl></parameter>, <parameter><decl><type><name>PSTREAM_HEADER</name></type> <name>guid_header</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>guid</name><index>[<expr><literal type="number">37</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>guid_offset</name> <init>= <expr><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>metadata_root</name> <operator>+</operator> <name><name>guid_header</name><operator>-&gt;</operator><name>Offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>guid_size</name> <init>= <expr><name><name>guid_header</name><operator>-&gt;</operator><name>Size</name></name></expr></init></decl>;</decl_stmt>



<while>while <condition>(<expr><name>guid_size</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>guid_offset</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="string">"%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x"</literal></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator> <name>guid_offset</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>guid_offset</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>guid_offset</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>guid_offset</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>guid_offset</name> <operator>+</operator> <literal type="number">9</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>guid_offset</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>guid_offset</name> <operator>+</operator> <literal type="number">11</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>guid_offset</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>guid_offset</name> <operator>+</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>guid_offset</name> <operator>+</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>guid_offset</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>guid</name><index>[<expr><operator>(</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string</name> <argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"guids[%i]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>guid_size</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"number_of_guids"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>BLOB_PARSE_RESULT</name></type> <name>dotnet_parse_blob_entry</name><parameter_list>( <parameter><decl><type><name>PE</name><modifier>*</modifier></type> <name>pe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BLOB_PARSE_RESULT</name></type> <name>result</name></decl>;</decl_stmt>















<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <operator>*</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>result</name><operator>.</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>*</operator><operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>*</operator><operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>*</operator><operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dotnet_parse_us</name><parameter_list>( <parameter><decl><type><name>PE</name><modifier>*</modifier></type> <name>pe</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>metadata_root</name></decl></parameter>, <parameter><decl><type><name>PSTREAM_HEADER</name></type> <name>us_header</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BLOB_PARSE_RESULT</name></type> <name>blob_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>offset</name> <init>= <expr><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>metadata_root</name> <operator>+</operator> <name><name>us_header</name><operator>-&gt;</operator><name>Offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>end_of_header</name> <init>= <expr><name>offset</name> <operator>+</operator> <name><name>us_header</name><operator>-&gt;</operator><name>Size</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>us_header</name><operator>-&gt;</operator><name>Size</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>offset</name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>end_of_header</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blob_result</name> <operator>=</operator> <call><name>dotnet_parse_blob_entry</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>blob_result</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>blob_result</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"number_of_user_strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>blob_result</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>blob_result</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_sized_string</name><argument_list>(
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>offset</name></expr></argument>,
<argument><expr><name><name>blob_result</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
<argument><expr><literal type="string">"user_strings[%i]"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>blob_result</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"number_of_user_strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STREAMS</name></type> <name>dotnet_parse_stream_headers</name><parameter_list>(
<parameter><decl><type><name>PE</name><modifier>*</modifier></type> <name>pe</name></decl></parameter>,
<parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>ut64</name></type> <name>metadata_root</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>num_streams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PSTREAM_HEADER</name></type> <name>stream_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STREAMS</name></type> <name>headers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>stream_name</name><index>[<expr><name>DOTNET_STREAM_NAME_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STREAMS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_header</name> <operator>=</operator> <operator>(</operator><name>PSTREAM_HEADER</name><operator>)</operator> <operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>struct_fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>stream_header</name></expr></argument>, <argument><expr><name>STREAM_HEADER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>stream_header</name><operator>-&gt;</operator><name>Name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>DOTNET_STREAM_NAME_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>eos</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>memmem</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>start</name></expr></argument>, <argument><expr><name>DOTNET_STREAM_NAME_SIZE</name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eos</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>, <argument><expr><name><name>stream_header</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>, <argument><expr><name>DOTNET_STREAM_NAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_name</name><index>[<expr><name>DOTNET_STREAM_NAME_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"streams[%i].name"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>metadata_root</name> <operator>+</operator> <name><name>stream_header</name><operator>-&gt;</operator><name>Offset</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"streams[%i].offset"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name><name>stream_header</name><operator>-&gt;</operator><name>Size</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"streams[%i].size"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>, <argument><expr><literal type="string">"#GUID"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>guid</name></name> <operator>=</operator> <name>stream_header</name></expr>;</expr_stmt></block_content></block></if>




<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>, <argument><expr><literal type="string">"#~"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>headers</name><operator>.</operator><name>tilde</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>tilde</name></name> <operator>=</operator> <name>stream_header</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>, <argument><expr><literal type="string">"#Strings"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>headers</name><operator>.</operator><name>string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>stream_header</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>, <argument><expr><literal type="string">"#Blob"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>blob</name></name> <operator>=</operator> <name>stream_header</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>, <argument><expr><literal type="string">"#US"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>headers</name><operator>.</operator><name>us</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>us</name></name> <operator>=</operator> <name>stream_header</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>stream_header</name> <operator>=</operator> <operator>(</operator><name>PSTREAM_HEADER</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>stream_header</name> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>STREAM_HEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="number">4</literal> <operator>-</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"number_of_streams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>headers</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>void</name></type> <name>dotnet_parse_tilde_2</name><parameter_list>(
<parameter><decl><type><name>PE</name><modifier>*</modifier></type> <name>pe</name></decl></parameter>,
<parameter><decl><type><name>PTILDE_HEADER</name></type> <name>tilde_header</name></decl></parameter>,
<parameter><decl><type><name>ut64</name></type> <name>resource_base</name></decl></parameter>,
<parameter><decl><type><name>ut64</name></type> <name>metadata_root</name></decl></parameter>,
<parameter><decl><type><name>ROWS</name></type> <name>rows</name></decl></parameter>,
<parameter><decl><type><name>INDEX_SIZES</name></type> <name>index_sizes</name></decl></parameter>,
<parameter><decl><type><name>PSTREAMS</name></type> <name>streams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PMODULE_TABLE</name></type> <name>module_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PASSEMBLY_TABLE</name></type> <name>assembly_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PASSEMBLYREF_TABLE</name></type> <name>assemblyref_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PMANIFESTRESOURCE_TABLE</name></type> <name>manifestresource_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PMODULEREF_TABLE</name></type> <name>moduleref_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PCUSTOMATTRIBUTE_TABLE</name></type> <name>customattribute_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PCONSTANT_TABLE</name></type> <name>constant_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>resource_size</name></decl>, <decl><type ref="prev"/><name>implementation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>typelib</name><index>[<expr><name>MAX_TYPELIB_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit_check</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matched_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>resource_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row_size</name></decl>, <decl><type ref="prev"/><name>row_count</name></decl>, <decl><type ref="prev"/><name>counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>string_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>blob_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>valid_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>row_offset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>table_offset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>row_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




















<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>typeref_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>memberref_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>typeref_row_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>memberref_row_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>typeref_row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>memberref_row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>type_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>class_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BLOB_PARSE_RESULT</name></type> <name>blob_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>blob_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>blob_length</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint8_t</name></type> <name>index_size</name></decl>, <decl><type ref="prev"/><name>index_size2</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>valid_rows</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>tilde_header</name><operator>-&gt;</operator><name>Valid</name></name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>row_offset</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>tilde_header</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>table_offset</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>row_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>valid_rows</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOTNET_STRING_INDEX</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>index_sizes.string == 2 ? Name.Name_Short : Name.Name_Long</cpp:value></cpp:define>


<expr_stmt><expr><name>string_offset</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>metadata_root</name> <operator>+</operator> <name><name>streams</name><operator>-&gt;</operator><name>string</name><operator>-&gt;</operator><name>Offset</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>bit_check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bit_check</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>bit_check</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>tilde_header</name><operator>-&gt;</operator><name>Valid</name></name> <operator>&gt;&gt;</operator> <name>bit_check</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name> <argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>table_offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_rows</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>row_offset</name> <operator>+</operator> <name>matched_bits</name><operator>)</operator></expr>;</expr_stmt>











<switch>switch <condition>(<expr><name>bit_check</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BIT_MODULE</name></expr>:</case>
<expr_stmt><expr><name>module_table</name> <operator>=</operator> <operator>(</operator><name>PMODULE_TABLE</name><operator>)</operator> <name>table_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name>string_offset</name></expr></argument>,
<argument><expr><call><name>DOTNET_STRING_INDEX</name><argument_list>(<argument><expr><name><name>module_table</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"module_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator>
<literal type="number">2</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>+</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>guid</name></name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BIT_TYPEREF</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>module</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>moduleref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>assemblyref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typeref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>row_size</name> <operator>=</operator> <operator>(</operator><name>index_size</name> <operator>+</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>typeref_row_size</name> <operator>=</operator> <name>row_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>typeref_ptr</name> <operator>=</operator> <name>table_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <name>row_size</name> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_TYPEDEF</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typedef_</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typeref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typespec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator>
<literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>index_size</name> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>field</name></name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>methoddef</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_FIELDPTR</name></expr>:</case>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>field</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_FIELD</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator>
<literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>string</name></name><operator>)</operator> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_METHODDEFPTR</name></expr>:</case>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>methoddef</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_METHODDEF</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator>
<literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>blob</name></name> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>param</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_PARAM</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_INTERFACEIMPL</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typedef_</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typeref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typespec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>typedef_</name></name> <operator>+</operator> <name>index_size</name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_MEMBERREF</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>methoddef</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>moduleref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typeref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typespec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>row_size</name> <operator>=</operator> <operator>(</operator><name>index_size</name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>memberref_row_size</name> <operator>=</operator> <name>row_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>memberref_ptr</name> <operator>=</operator> <name>table_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <name>row_size</name> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_CONSTANT</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>property</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>row_size</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>index_size</name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>row_ptr</name> <operator>=</operator> <name>table_offset</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>row_ptr</name></expr></argument>, <argument><expr><name>row_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>constant_table</name> <operator>=</operator> <operator>(</operator><name>PCONSTANT_TABLE</name><operator>)</operator> <name>row_ptr</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>constant_table</name><operator>-&gt;</operator><name>Type</name></name> <operator>!=</operator> <name>ELEMENT_TYPE_STRING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>blob_offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>constant_table</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>index_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_sizes</name><operator>.</operator><name>blob</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blob_index</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <name>blob_offset</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>blob_index</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <name>blob_offset</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



<expr_stmt><expr><name>blob_offset</name> <operator>=</operator> \
<name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>metadata_root</name> <operator>+</operator>
<name><name>streams</name><operator>-&gt;</operator><name>blob</name><operator>-&gt;</operator><name>Offset</name></name> <operator>+</operator> <name>blob_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blob_result</name> <operator>=</operator> <call><name>dotnet_parse_blob_entry</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>blob_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>blob_result</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blob_length</name> <operator>=</operator> <name><name>blob_result</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>blob_offset</name> <operator>+=</operator> <name><name>blob_result</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>blob_offset</name> <operator>+</operator> <name>blob_length</name> <operator>&gt;=</operator> <name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_sized_string</name><argument_list>(
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>blob_offset</name></expr></argument>,
<argument><expr><name><name>blob_result</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
<argument><expr><literal type="string">"constants[%i]"</literal></expr></argument>,
<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"number_of_constants"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <name>row_size</name> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_CUSTOMATTRIBUTE</name></expr>:</case>

<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>methoddef</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>field</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typeref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typedef_</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>param</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>interfaceimpl</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>memberref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>module</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>property</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>event</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>standalonesig</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>moduleref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typespec</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>assembly</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>assemblyref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>file</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>exportedtype</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>manifestresource</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>genericparam</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>genericparamconstraint</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>methodspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x05</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>methoddef</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>memberref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size2</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>row_size</name> <operator>=</operator> <operator>(</operator><name>index_size</name> <operator>+</operator> <name>index_size2</name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>typeref_ptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>memberref_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>=</operator> <name>table_offset</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>row_ptr</name></expr></argument>, <argument><expr><name>row_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>customattribute_table</name> <operator>=</operator> <operator>(</operator><name>PCUSTOMATTRIBUTE_TABLE</name><operator>)</operator> <name>row_ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <name>customattribute_table</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x0E</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <name>customattribute_table</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x0E</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>customattribute_table</name> <operator>=</operator> <operator>(</operator><name>PCUSTOMATTRIBUTE_TABLE</name><operator>)</operator> \
<operator>(</operator><name>row_ptr</name> <operator>+</operator> <name>index_size</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index_size2</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <name>customattribute_table</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x03</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type_index</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <name>customattribute_table</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <name>customattribute_table</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x03</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>type_index</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <name>customattribute_table</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type_index</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>memberref_row</name> <operator>=</operator> <name>memberref_ptr</name> <operator>+</operator> <operator>(</operator><name>memberref_row_size</name> <operator>*</operator> <name>type_index</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_sizes</name><operator>.</operator><name>memberref</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <name>memberref_row</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x01</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>class_index</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <name>memberref_row</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <name>memberref_row</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x01</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>class_index</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <name>memberref_row</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>class_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>class_index</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>typeref_row</name> <operator>=</operator> <name>typeref_ptr</name> <operator>+</operator> <operator>(</operator><name>typeref_row_size</name> <operator>*</operator> <name>class_index</name><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>module</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>moduleref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>assemblyref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typeref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>typeref_row</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>typeref_row</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(
<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>string_offset</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <name>typeref_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(
<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>string_offset</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <name>typeref_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"GuidAttribute"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>customattribute_table</name> <operator>=</operator> <operator>(</operator><name>PCUSTOMATTRIBUTE_TABLE</name><operator>)</operator> \
<operator>(</operator><name>row_ptr</name> <operator>+</operator> <name>index_size</name> <operator>+</operator> <name>index_size2</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_sizes</name><operator>.</operator><name>blob</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blob_index</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <name>customattribute_table</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>blob_index</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <name>customattribute_table</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



<expr_stmt><expr><name>blob_offset</name> <operator>=</operator> \
<name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>metadata_root</name> <operator>+</operator> <name><name>streams</name><operator>-&gt;</operator><name>blob</name><operator>-&gt;</operator><name>Offset</name></name> <operator>+</operator> <name>blob_index</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>blob_index</name> <operator>==</operator> <literal type="number">0x00</literal> <operator>||</operator> <name>blob_offset</name> <operator>&gt;=</operator> <name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blob_result</name> <operator>=</operator> <call><name>dotnet_parse_blob_entry</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>blob_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>blob_result</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blob_length</name> <operator>=</operator> <name><name>blob_result</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>blob_offset</name> <operator>+=</operator> <name><name>blob_result</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>blob_offset</name> <operator>+</operator> <name>blob_length</name> <operator>&gt;=</operator> <name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <name>blob_offset</name> <operator>!=</operator> <literal type="number">0x0001</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>blob_offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blob_offset</name> <operator>+</operator> <operator>*</operator><name>blob_offset</name> <operator>&gt;=</operator> <name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blob_offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>blob_offset</name> <operator>==</operator> <literal type="number">0xFF</literal> <operator>||</operator> <operator>*</operator><name>blob_offset</name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>typelib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>blob_offset</name></expr></argument>, <argument><expr><name>MAX_TYPELIB_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typelib</name><index>[<expr><name>MAX_TYPELIB_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>typelib</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"typelib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <name>row_size</name> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_FIELDMARSHAL</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>field</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name>index_size</name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_DECLSECURITY</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typedef_</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>methoddef</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>assembly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>index_size</name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_CLASSLAYOUT</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>typedef_</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_FIELDLAYOUT</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>field</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_STANDALONESIG</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_EVENTMAP</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>typedef_</name></name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>event</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_EVENTPTR</name></expr>:</case>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>event</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_EVENT</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typedef_</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typeref</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>typespec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>+</operator> <name>index_size</name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_PROPERTYMAP</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>typedef_</name></name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>property</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_PROPERTYPTR</name></expr>:</case>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>property</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_PROPERTY</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_METHODSEMANTICS</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>event</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>property</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>methoddef</name></name> <operator>+</operator> <name>index_size</name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_METHODIMPL</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>methoddef</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>memberref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>typedef_</name></name> <operator>+</operator> <operator>(</operator><name>index_size</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_MODULEREF</name></expr>:</case>
<expr_stmt><expr><name>row_ptr</name> <operator>=</operator> <name>table_offset</name></expr>;</expr_stmt>



<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>moduleref_table</name> <operator>=</operator> <operator>(</operator><name>PMODULEREF_TABLE</name><operator>)</operator> <name>row_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name>string_offset</name></expr></argument>,
<argument><expr><call><name>DOTNET_STRING_INDEX</name><argument_list>(<argument><expr><name><name>moduleref_table</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"modulerefs[%i]"</literal></expr></argument>, <argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"number_of_modulerefs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>string</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_TYPESPEC</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_IMPLMAP</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>field</name></name></expr></argument>,
<argument><expr><name><name>rows</name><operator>.</operator><name>methoddef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator>
<literal type="number">2</literal> <operator>+</operator> <name>index_size</name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>moduleref</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_FIELDRVA</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>field</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_ENCLOG</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_ENCMAP</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_ASSEMBLY</name></expr>:</case>
<expr_stmt><expr><name>row_size</name> <operator>=</operator> <operator>(</operator>
<literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name> <operator>+</operator>
<operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>table_offset</name></expr></argument>, <argument><expr><name>row_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row_ptr</name> <operator>=</operator> <name>table_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>assembly_table</name> <operator>=</operator> <operator>(</operator><name>PASSEMBLY_TABLE</name><operator>)</operator> <name>table_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name><name>assembly_table</name><operator>-&gt;</operator><name>MajorVersion</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly.version.major"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name><name>assembly_table</name><operator>-&gt;</operator><name>MinorVersion</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly.version.minor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name><name>assembly_table</name><operator>-&gt;</operator><name>BuildNumber</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly.version.build_number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name><name>assembly_table</name><operator>-&gt;</operator><name>RevisionNumber</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly.version.revision_number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(
<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name>string_offset</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <operator>(</operator>
<name>row_ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(
<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name>string_offset</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <operator>(</operator>
<name>row_ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly.name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(
<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name>string_offset</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <operator>(</operator>
<name>row_ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>blob</name></name> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>string</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(
<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name>string_offset</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <operator>(</operator>
<name>row_ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>blob</name></name> <operator>+</operator>
<name><name>index_sizes</name><operator>.</operator><name>string</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly.culture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <name>row_size</name> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_ASSEMBLYPROCESSOR</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_ASSEMBLYOS</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_ASSEMBLYREF</name></expr>:</case>
<expr_stmt><expr><name>row_size</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>blob</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>row_ptr</name> <operator>=</operator> <name>table_offset</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>table_offset</name></expr></argument>, <argument><expr><name>row_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>assemblyref_table</name> <operator>=</operator> <operator>(</operator><name>PASSEMBLYREF_TABLE</name><operator>)</operator> <name>row_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name><name>assemblyref_table</name><operator>-&gt;</operator><name>MajorVersion</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly_refs[%i].version.major"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name><name>assemblyref_table</name><operator>-&gt;</operator><name>MinorVersion</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly_refs[%i].version.minor"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name><name>assemblyref_table</name><operator>-&gt;</operator><name>BuildNumber</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly_refs[%i].version.build_number"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name><name>assemblyref_table</name><operator>-&gt;</operator><name>RevisionNumber</name></name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly_refs[%i].version.revision_number"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blob_offset</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>metadata_root</name> <operator>+</operator> <name><name>streams</name><operator>-&gt;</operator><name>blob</name><operator>-&gt;</operator><name>Offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index_sizes</name><operator>.</operator><name>blob</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blob_offset</name> <operator>+=</operator> \
<name><name>assemblyref_table</name><operator>-&gt;</operator><name>PublicKeyOrToken</name><operator>.</operator><name>PublicKeyOrToken_Long</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>blob_offset</name> <operator>+=</operator> \
<name><name>assemblyref_table</name><operator>-&gt;</operator><name>PublicKeyOrToken</name><operator>.</operator><name>PublicKeyOrToken_Short</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>blob_result</name> <operator>=</operator> <call><name>dotnet_parse_blob_entry</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>blob_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>blob_result</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>blob_offset</name></expr></argument>, <argument><expr><name><name>blob_result</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>blob_result</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>blob_offset</name> <operator>+=</operator> <name><name>blob_result</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_sized_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>blob_offset</name></expr></argument>,
<argument><expr><name><name>blob_result</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
<argument><expr><literal type="string">"assembly_refs[%i].public_key_or_token"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name>string_offset</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>row_ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name>string_offset</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>row_ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"assembly_refs[%i].name"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"number_of_assembly_refs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <name>row_size</name> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_ASSEMBLYREFPROCESSOR</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>assemblyrefprocessor</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_ASSEMBLYREFOS</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>assemblyref</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_FILE</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_EXPORTEDTYPE</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>assemblyref</name></name></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>exportedtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>index_size</name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_MANIFESTRESOURCE</name></expr>:</case>

<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>assemblyref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>row_size</name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>+</operator> <name>index_size</name><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>row_ptr</name> <operator>=</operator> <name>table_offset</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>row_ptr</name></expr></argument>, <argument><expr><name>row_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>manifestresource_table</name> <operator>=</operator> <operator>(</operator><name>PMANIFESTRESOURCE_TABLE</name><operator>)</operator> <name>row_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>resource_offset</name> <operator>=</operator> <name><name>manifestresource_table</name><operator>-&gt;</operator><name>Offset</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>index_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>implementation</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>row_ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>implementation</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>WORD</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>row_ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>implementation</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(
<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>resource_base</name> <operator>+</operator> <name>resource_offset</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>resource_size</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>DWORD</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>resource_base</name> <operator>+</operator> <name>resource_offset</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(
<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>resource_base</name> <operator>+</operator>
<name>resource_offset</name></expr></argument>,
<argument><expr><name>resource_size</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>resource_base</name> <operator>+</operator> <name>resource_offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"resources[%i].offset"</literal></expr></argument>, <argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>resource_size</name></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"resources[%i].length"</literal></expr></argument>, <argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pe_get_dotnet_string</name><argument_list>(<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name>string_offset</name></expr></argument>,
<argument><expr><call><name>DOTNET_STRING_INDEX</name><argument_list>(<argument><expr><name><name>manifestresource_table</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"resources[%i].name"</literal></expr></argument>, <argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>row_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>set_integer</name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"number_of_resources"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <name>row_size</name> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_NESTEDCLASS</name></expr>:</case>
<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>typedef_</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_GENERICPARAM</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>typedef_</name></name></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>methoddef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>index_size</name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>string</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_METHODSPEC</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>methoddef</name></name></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>memberref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name>index_size</name> <operator>+</operator> <name><name>index_sizes</name><operator>.</operator><name>blob</name></name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BIT_GENERICPARAMCONSTRAINT</name></expr>:</case>
<expr_stmt><expr><name>row_count</name> <operator>=</operator> <call><name>max_rows</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>typedef_</name></name></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>typeref</name></name></expr></argument>, <argument><expr><name><name>rows</name><operator>.</operator><name>typespec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>table_offset</name> <operator>+=</operator> <operator>(</operator><name><name>index_sizes</name><operator>.</operator><name>genericparam</name></name> <operator>+</operator> <name>index_size</name><operator>)</operator> <operator>*</operator> <name>num_rows</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>

<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>matched_bits</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>dotnet_parse_tilde</name><parameter_list>(
<parameter><decl><type><name>PE</name><modifier>*</modifier></type> <name>pe</name></decl></parameter>,
<parameter><decl><type><name>ut64</name></type> <name>metadata_root</name></decl></parameter>,
<parameter><decl><type><name>PCLI_HEADER</name></type> <name>cli_header</name></decl></parameter>,
<parameter><decl><type><name>PSTREAMS</name></type> <name>streams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PTILDE_HEADER</name></type> <name>tilde_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>resource_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>row_offset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_check</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>matched_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>ROWS</name></type> <name>rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INDEX_SIZES</name></type> <name>index_sizes</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ROWS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>index_sizes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index_sizes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tilde_header</name> <operator>=</operator> <operator>(</operator><name>PTILDE_HEADER</name><operator>)</operator> <operator>(</operator>
<name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator>
<name>metadata_root</name> <operator>+</operator>
<name><name>streams</name><operator>-&gt;</operator><name>tilde</name><operator>-&gt;</operator><name>Offset</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>struct_fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>tilde_header</name></expr></argument>, <argument><expr><name>TILDE_HEADER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tilde_header</name><operator>-&gt;</operator><name>HeapSizes</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>index_sizes</name><operator>.</operator><name>string</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tilde_header</name><operator>-&gt;</operator><name>HeapSizes</name></name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>index_sizes</name><operator>.</operator><name>guid</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tilde_header</name><operator>-&gt;</operator><name>HeapSizes</name></name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>index_sizes</name><operator>.</operator><name>blob</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name>row_offset</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>tilde_header</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>bit_check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bit_check</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>bit_check</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>tilde_header</name><operator>-&gt;</operator><name>Valid</name></name> <operator>&gt;&gt;</operator> <name>bit_check</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_CHECK</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (fits_in_pe(pe, row_offset, (matched_bits + 1) * sizeof(uint32_t))) rows.name = *(row_offset + matched_bits);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_CHECK_WITH_INDEX</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ROW_CHECK(name); if (rows.name &gt; 0xFFFF) index_sizes.name = 4;</cpp:value></cpp:define>




<switch>switch <condition>(<expr><name>bit_check</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BIT_MODULE</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_MODULEREF</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>moduleref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_ASSEMBLYREF</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>assemblyref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_ASSEMBLYREFPROCESSOR</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>assemblyrefprocessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_TYPEREF</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>typeref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_METHODDEF</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>methoddef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_MEMBERREF</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>memberref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_TYPEDEF</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>typedef_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_TYPESPEC</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>typespec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_FIELD</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_PARAM</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_PROPERTY</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_INTERFACEIMPL</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>interfaceimpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_STANDALONESIG</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>standalonesig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_ASSEMBLY</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>assembly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_FILE</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_EXPORTEDTYPE</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>exportedtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_MANIFESTRESOURCE</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>manifestresource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_GENERICPARAM</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK_WITH_INDEX</name><argument_list>(<argument><expr><name>genericparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_GENERICPARAMCONSTRAINT</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>genericparamconstraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BIT_METHODSPEC</name></expr>:</case>
<expr_stmt><expr><call><name>ROW_CHECK</name><argument_list>(<argument><expr><name>methodspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>matched_bits</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>resource_base</name> <operator>=</operator> <call><name>pe_rva_to_offset</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>cli_header</name><operator>-&gt;</operator><name>Resources</name><operator>.</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dotnet_parse_tilde_2</name><argument_list>(
<argument><expr><name>pe</name></expr></argument>,
<argument><expr><name>tilde_header</name></expr></argument>,
<argument><expr><name>resource_base</name></expr></argument>,
<argument><expr><name>metadata_root</name></expr></argument>,
<argument><expr><name>rows</name></expr></argument>,
<argument><expr><name>index_sizes</name></expr></argument>,
<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
pe-&gt;data = block_data;
pe-&gt;data_size = block-&gt;size;
pe-&gt;object = module_object;
pe-&gt;header = pe_header;

module_object-&gt;data = pe;

dotnet_parse_com(pe, block-&gt;base);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>dotnet_parse_com</name><parameter_list>(<parameter><decl><type><name>PE</name><modifier>*</modifier></type> <name>pe</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PIMAGE_DATA_DIRECTORY</name></type> <name>directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PCLI_HEADER</name></type> <name>cli_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PNET_METADATA</name></type> <name>metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>metadata_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STREAMS</name></type> <name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>num_streams</name></decl>;</decl_stmt>

<expr_stmt><expr><name>directory</name> <operator>=</operator> <call><name>pe_get_directory_entry</name> <argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>PE_IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>offset</name> <init>= <expr><call><name>pe_rva_to_offset</name> <argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>directory</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>struct_fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>CLI_HEADER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cli_header</name> <operator>=</operator> <operator>(</operator><name>PCLI_HEADER</name><operator>)</operator> <operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>metadata_root</name> <operator>=</operator> <call><name>pe_rva_to_offset</name><argument_list>(
<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>cli_header</name><operator>-&gt;</operator><name>MetaData</name><operator>.</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>struct_fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>NET_METADATA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>metadata</name> <operator>=</operator> <operator>(</operator><name>PNET_METADATA</name><operator>)</operator> <operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>Magic</name></name> <operator>!=</operator> <name>NET_METADATA_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>Length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>metadata</name><operator>-&gt;</operator><name>Length</name></name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator>
<name><name>metadata</name><operator>-&gt;</operator><name>Length</name></name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>Length</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>memmem</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>metadata</name><operator>-&gt;</operator><name>Version</name></name></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>Length</name></name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_sized_string</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>Version</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>end</name> <operator>-</operator> <name><name>metadata</name><operator>-&gt;</operator><name>Version</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
<argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NET_METADATA</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>metadata</name><operator>-&gt;</operator><name>Length</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fits_in_pe</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_streams</name> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator> <operator>*</operator><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name>dotnet_parse_stream_headers</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>metadata_root</name></expr></argument>, <argument><expr><name>num_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>headers</name><operator>.</operator><name>guid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dotnet_parse_guid</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>metadata_root</name></expr></argument>, <argument><expr><name><name>headers</name><operator>.</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>headers</name><operator>.</operator><name>tilde</name></name> <operator>&amp;&amp;</operator> <name><name>headers</name><operator>.</operator><name>string</name></name> <operator>&amp;&amp;</operator> <name><name>headers</name><operator>.</operator><name>blob</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dotnet_parse_tilde</name> <argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>metadata_root</name></expr></argument>, <argument><expr><name>cli_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>headers</name><operator>.</operator><name>us</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dotnet_parse_us</name> <argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>metadata_root</name></expr></argument>, <argument><expr><name><name>headers</name><operator>.</operator><name>us</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>dotnet_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PE</name></type> <name>pe</name> <init>= <expr><block>{ <expr><name>buf</name></expr>, <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>size</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dotnet_parse_com</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
