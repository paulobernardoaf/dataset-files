<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\pe\pemixed.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pemixed.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_il_only</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_pemixed_init</name><argument_list>(<argument><expr>struct <name>r_bin_pemixed_obj_t</name><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>pe_bin</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>sub_bin_dos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>sub_bin_native</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>sub_bin_net</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sub_bin_dos</name> <operator>=</operator> <call><name>r_bin_pemixed_init_dos</name> <argument_list>(<argument><expr><name>pe_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sub_bin_dos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_dos</name></name> <operator>=</operator> <name>sub_bin_dos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sub_bin_native</name> <operator>=</operator> <call><name>r_bin_pemixed_init_native</name> <argument_list>(<argument><expr><name>pe_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sub_bin_native</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_native</name></name> <operator>=</operator> <name>sub_bin_native</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sub_bin_net</name> <operator>=</operator> <name>pe_bin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_net</name></name> <operator>=</operator> <name>sub_bin_net</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>r_bin_pemixed_init_dos</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>pe_bin</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>tmp_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>pe_hdr_off</name> <init>= <expr><name><name>pe_bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>e_lfanew</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp_buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>pe_hdr_off</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>pe_bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>pe_hdr_off</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error reading to buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>sub_bin_dos</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sub_bin_dos</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new_with_bytes</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>pe_hdr_off</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<function_decl><type><name>PE_</name></type>(<name>r_bin_pe_free</name>) <parameter_list>(<parameter><decl><type><name>sub_bin_dos</name></type></decl></parameter>)</parameter_list>;</function_decl>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub_bin_dos</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>pe_hdr_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_bin_dos</name><operator>-&gt;</operator><name>dos_header</name></name> <operator>=</operator> <name><name>pe_bin</name><operator>-&gt;</operator><name>dos_header</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sub_bin_dos</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>r_bin_pemixed_init_native</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>pe_bin</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>zero_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>sub_bin_native</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>sub_bin_native</name></expr></argument>, <argument><expr><name>pe_bin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sub_bin_native</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new_with_buf</name><argument_list>(<argument><expr><name><name>pe_bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sub_bin_native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>dotnet_offset</name> <init>= <expr><name><name>pe_bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>e_lfanew</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dotnet_offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_nt_headers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>dotnet_offset</name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>zero_out</name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>sub_bin_native</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sub_bin_native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>sub_bin_native</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>dotnet_offset</name></expr></argument>, <argument><expr><name>zero_out</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Zeroing out dotnet offset failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>sub_bin_native</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sub_bin_native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>zero_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>zero_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sub_bin_native</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>r_bin_pemixed_extract</name><argument_list>(<argument><expr>struct <name>r_bin_pemixed_obj_t</name><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>int</name> <name>sub_bin</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>sub_bin</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SUB_BIN_DOS</name></expr>:</case>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_dos</name></name></expr>;</return>
<case>case <expr><name>SUB_BIN_NATIVE</name></expr>:</case>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_native</name></name></expr>;</return>
<case>case <expr><name>SUB_BIN_NET</name></expr>:</case>
<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_net</name></name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_il_only</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>check_mask</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name>flag</name> <operator>&amp;</operator> <name>check_mask</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>r_bin_pemixed_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_pemixed_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<function_decl><type><name>PE_</name></type>(<name>r_bin_pe_free</name>)<parameter_list>(<parameter><decl><type><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_net</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_dos</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_dos</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_dos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>sub_bin_native</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_pemixed_obj_t</name></name> <modifier>*</modifier></type> <name>r_bin_pemixed_from_bytes_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pemixed_obj_t</name></name><modifier>*</modifier></type> <name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_pemixed_obj_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>pe_bin</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_bin_pemixed_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_bin_pemixed_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pe_bin</name> <operator>=</operator> <call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_new_buf</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pe_bin</name></expr>)</condition> <block>{<block_content>
<function_decl><type><name>PE_</name></type>(<name>r_bin_pe_free</name>)<parameter_list>(<parameter><decl><type><name>pe_bin</name></type></decl></parameter>)</parameter_list>;</function_decl>
<return>return <expr><call><name>r_bin_pemixed_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pe_bin</name><operator>-&gt;</operator><name>clr_hdr</name></name></expr>)</condition> <block>{<block_content>
<function_decl><type><name>PE_</name></type>(<name>r_bin_pe_free</name>) <parameter_list>(<parameter><decl><type><name>pe_bin</name></type></decl></parameter>)</parameter_list>;</function_decl>
<return>return <expr><call><name>r_bin_pemixed_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>check_il_only</name><argument_list>(<argument><expr><name><name>pe_bin</name><operator>-&gt;</operator><name>clr_hdr</name><operator>-&gt;</operator><name>Flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<function_decl><type><name>PE_</name></type>(<name>r_bin_pe_free</name>) <parameter_list>(<parameter><decl><type><name>pe_bin</name></type></decl></parameter>)</parameter_list>;</function_decl>
<return>return <expr><call><name>r_bin_pemixed_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_pemixed_init</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>pe_bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<function_decl><type><name>PE_</name></type>(<name>r_bin_pe_free</name>) <parameter_list>(<parameter><decl><type><name>pe_bin</name></type></decl></parameter>)</parameter_list>;</function_decl>
<return>return <expr><call><name>r_bin_pemixed_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bin</name></expr>;</return>
</block_content>}</block></function>

</unit>
