<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\xnu\yxml.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yxml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
<decl><name>YXMLS_string</name></decl>,
<decl><name>YXMLS_attr0</name></decl>,
<decl><name>YXMLS_attr1</name></decl>,
<decl><name>YXMLS_attr2</name></decl>,
<decl><name>YXMLS_attr3</name></decl>,
<decl><name>YXMLS_attr4</name></decl>,
<decl><name>YXMLS_cd0</name></decl>,
<decl><name>YXMLS_cd1</name></decl>,
<decl><name>YXMLS_cd2</name></decl>,
<decl><name>YXMLS_comment0</name></decl>,
<decl><name>YXMLS_comment1</name></decl>,
<decl><name>YXMLS_comment2</name></decl>,
<decl><name>YXMLS_comment3</name></decl>,
<decl><name>YXMLS_comment4</name></decl>,
<decl><name>YXMLS_dt0</name></decl>,
<decl><name>YXMLS_dt1</name></decl>,
<decl><name>YXMLS_dt2</name></decl>,
<decl><name>YXMLS_dt3</name></decl>,
<decl><name>YXMLS_dt4</name></decl>,
<decl><name>YXMLS_elem0</name></decl>,
<decl><name>YXMLS_elem1</name></decl>,
<decl><name>YXMLS_elem2</name></decl>,
<decl><name>YXMLS_elem3</name></decl>,
<decl><name>YXMLS_enc0</name></decl>,
<decl><name>YXMLS_enc1</name></decl>,
<decl><name>YXMLS_enc2</name></decl>,
<decl><name>YXMLS_enc3</name></decl>,
<decl><name>YXMLS_etag0</name></decl>,
<decl><name>YXMLS_etag1</name></decl>,
<decl><name>YXMLS_etag2</name></decl>,
<decl><name>YXMLS_init</name></decl>,
<decl><name>YXMLS_le0</name></decl>,
<decl><name>YXMLS_le1</name></decl>,
<decl><name>YXMLS_le2</name></decl>,
<decl><name>YXMLS_le3</name></decl>,
<decl><name>YXMLS_lee1</name></decl>,
<decl><name>YXMLS_lee2</name></decl>,
<decl><name>YXMLS_leq0</name></decl>,
<decl><name>YXMLS_misc0</name></decl>,
<decl><name>YXMLS_misc1</name></decl>,
<decl><name>YXMLS_misc2</name></decl>,
<decl><name>YXMLS_misc2a</name></decl>,
<decl><name>YXMLS_misc3</name></decl>,
<decl><name>YXMLS_pi0</name></decl>,
<decl><name>YXMLS_pi1</name></decl>,
<decl><name>YXMLS_pi2</name></decl>,
<decl><name>YXMLS_pi3</name></decl>,
<decl><name>YXMLS_pi4</name></decl>,
<decl><name>YXMLS_std0</name></decl>,
<decl><name>YXMLS_std1</name></decl>,
<decl><name>YXMLS_std2</name></decl>,
<decl><name>YXMLS_std3</name></decl>,
<decl><name>YXMLS_ver0</name></decl>,
<decl><name>YXMLS_ver1</name></decl>,
<decl><name>YXMLS_ver2</name></decl>,
<decl><name>YXMLS_ver3</name></decl>,
<decl><name>YXMLS_xmldecl0</name></decl>,
<decl><name>YXMLS_xmldecl1</name></decl>,
<decl><name>YXMLS_xmldecl2</name></decl>,
<decl><name>YXMLS_xmldecl3</name></decl>,
<decl><name>YXMLS_xmldecl4</name></decl>,
<decl><name>YXMLS_xmldecl5</name></decl>,
<decl><name>YXMLS_xmldecl6</name></decl>,
<decl><name>YXMLS_xmldecl7</name></decl>,
<decl><name>YXMLS_xmldecl8</name></decl>,
<decl><name>YXMLS_xmldecl9</name></decl>
}</block></enum></type> <name>yxml_state_t</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yxml_isChar</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yxml_isSP</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c == 0x20 || c == 0x09 || c == 0x0a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yxml_isAlpha</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c|32)-'a' &lt; 26)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yxml_isNum</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c-'0' &lt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yxml_isHex</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yxml_isNum(c) || (c|32)-'a' &lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yxml_isEncName</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yxml_isAlpha(c) || yxml_isNum(c) || c == '.' || c == '_' || c == '-')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yxml_isNameStart</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yxml_isAlpha(c) || c == ':' || c == '_' || c &gt;= 128)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yxml_isName</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yxml_isNameStart(c) || yxml_isNum(c) || c == '-' || c == '.')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yxml_isAttValue</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yxml_isChar(c) &amp;&amp; c != x-&gt;quote &amp;&amp; c != '&lt;' &amp;&amp; c != '&amp;')</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yxml_isRef</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yxml_isNum(c) || yxml_isAlpha(c) || c == '#')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTFROM5CHARS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((uint64_t)(a))&lt;&lt;32) | (((uint64_t)(b))&lt;&lt;24) | (((uint64_t)(c))&lt;&lt;16) | (((uint64_t)(d))&lt;&lt;8) | (uint64_t)(e))</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>yxml_setchar</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>_ch</name> <init>= <expr><name>ch</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>yxml_setutf8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">0x007F</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">0x07FF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0xC0</literal> <operator>|</operator> <operator>(</operator><name>ch</name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0xE0</literal> <operator>|</operator> <operator>(</operator><name>ch</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0xF0</literal> <operator>|</operator> <operator>(</operator><name>ch</name><operator>&gt;&gt;</operator><literal type="number">18</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_datacontent</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_CONTENT</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_datapi1</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_PICONTENT</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_datapi2</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_PICONTENT</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_datacd1</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_CONTENT</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_datacd2</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_CONTENT</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_dataattr</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ch</name> <operator>==</operator> <literal type="number">0x9</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="number">0xa</literal></expr> ?</condition><then> <expr><literal type="number">0x20</literal></expr> </then><else>: <expr><name>ch</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_ATTRVAL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>yxml_ret_t</name></type> <name>yxml_pushstack</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name><operator>+</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name><name>x</name><operator>-&gt;</operator><name>stacksize</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_ESTACK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>stack</name></name><operator>+</operator><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>yxml_ret_t</name></type> <name>yxml_pushstackc</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name><operator>+</operator><literal type="number">1</literal> <operator>&gt;=</operator> <name><name>x</name><operator>-&gt;</operator><name>stacksize</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_ESTACK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>yxml_popstack</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name></expr>]</index></name></expr>)</condition>;</do>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_elemstart</name> <parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>yxml_pushstack</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>elem</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_elemname</name> <parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>yxml_pushstackc</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_elemnameend</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>YXML_ELEMSTART</name></expr>;</return> </block_content>}</block></function>




<function><type><specifier>static</specifier> <name>yxml_ret_t</name></type> <name>yxml_selfclose</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>yxml_popstack</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>elem</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>stack</name></name><operator>+</operator><name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>elem</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>elem</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>YXML_ELEMEND</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>elem</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_ELEMEND</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_elemclose</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>elem</name></name><operator>)</operator> <operator>!=</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_ECLOSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>elem</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_elemcloseend</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>x</name><operator>-&gt;</operator><name>elem</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_ECLOSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yxml_selfclose</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_attrstart</name> <parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>yxml_pushstack</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_attrname</name> <parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>yxml_pushstackc</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_attrnameend</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>YXML_ATTRSTART</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_attrvalend</name> <parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>yxml_popstack</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>YXML_ATTREND</name></expr>;</return> </block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_pistart</name> <parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>yxml_pushstack</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>pi</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_piname</name> <parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>yxml_pushstackc</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_piabort</name> <parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>yxml_popstack</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>YXML_OK</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_pinameend</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>pi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>|</operator><literal type="number">32</literal><operator>)</operator> <operator>==</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>pi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>|</operator><literal type="number">32</literal><operator>)</operator> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>pi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>|</operator><literal type="number">32</literal><operator>)</operator> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>pi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>YXML_ESYN</name></expr> </then><else>: <expr><name>YXML_PISTART</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_pivalend</name> <parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>yxml_popstack</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>pi</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt> <return>return <expr><name>YXML_PIEND</name></expr>;</return> </block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_refstart</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>reflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>yxml_ret_t</name></type> <name>yxml_ref</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>reflen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_EREF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yxml_setchar</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name><name>x</name><operator>-&gt;</operator><name>reflen</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>reflen</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>yxml_ret_t</name></type> <name>yxml_refend</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>yxml_ret_t</name></type> <name>ret</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>r</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><call><name>yxml_isHex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>ch</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>r</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> ?</condition><then> <expr><operator>*</operator><name>r</name><operator>-</operator><literal type="char">'0'</literal></expr> </then><else>: <expr><operator>(</operator><operator>*</operator><name>r</name><operator>|</operator><literal type="number">32</literal><operator>)</operator><operator>-</operator><literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>r</name><operator>++</operator></expr>;</init> <condition><expr><call><name>yxml_isNum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>ch</name><operator>*</operator><literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>r</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><call><name>INTFROM5CHARS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator>
<ternary><condition><expr><name>i</name> <operator>==</operator> <call><name>INTFROM5CHARS</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'&lt;'</literal></expr> </then><else>:
<expr><ternary><condition><expr><name>i</name> <operator>==</operator> <call><name>INTFROM5CHARS</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'&gt;'</literal></expr> </then><else>:
<expr><ternary><condition><expr><name>i</name> <operator>==</operator> <call><name>INTFROM5CHARS</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'&amp;'</literal></expr> </then><else>:
<expr><ternary><condition><expr><name>i</name> <operator>==</operator> <call><name>INTFROM5CHARS</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'o'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'\''</literal></expr></then><else>:
<expr><ternary><condition><expr><name>i</name> <operator>==</operator> <call><name>INTFROM5CHARS</name><argument_list>(<argument><expr><literal type="char">'q'</literal></expr></argument>,<argument><expr><literal type="char">'u'</literal></expr></argument>,<argument><expr><literal type="char">'o'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ch</name> <operator>||</operator> <name>ch</name> <operator>&gt;</operator> <literal type="number">0x10FFFF</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="number">0xFFFE</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="number">0xFFFF</literal> <operator>||</operator> <operator>(</operator><name>ch</name><operator>-</operator><literal type="number">0xDFFF</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0x7FF</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_EREF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yxml_setutf8</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_refcontent</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>yxml_refend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>YXML_CONTENT</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>yxml_ret_t</name></type> <name>yxml_refattrval</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>yxml_refend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>YXML_ATTRVAL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><name>void</name></type> <name>yxml_init</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>stacksize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>stack</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name>stacksize</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>x</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>elem</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>pi</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_init</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>yxml_ret_t</name></type> <name>yxml_parse</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ch</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ch</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>_ch</name><operator>+</operator><literal type="number">256</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_ESYN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>total</name></name><operator>++</operator></expr>;</expr_stmt>





<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>ignore</name></name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="number">0xd</literal><operator>)</operator> <operator>*</operator> <literal type="number">0xa</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0xa</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="number">0xd</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0xa</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>line</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>byte</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>byte</name></name><operator>++</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><operator>(</operator><name>yxml_state_t</name><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>YXMLS_string</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>*</operator><name><name>x</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name><name>x</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_attr0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isName</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_attrname</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_attr1</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_attrnameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_attr2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_attrnameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_attr1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_attr2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_attr2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'\''</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_attr3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_attr3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isAttValue</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_dataattr</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_attr4</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_refstart</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_elem2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_attrvalend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_attr4</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isRef</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_ref</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'\x3b'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_attr3</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_refattrval</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_cd0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_cd1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_datacontent</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_cd1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_cd2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_cd0</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_datacd1</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_cd2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_datacontent</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_cd0</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_datacd2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_comment0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_comment1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_comment1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_comment2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_comment2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_comment3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_comment3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_comment4</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_comment2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_comment4</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_dt0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'\''</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_dt1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_dt0</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_dt2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_dt1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_dt2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_dt0</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_dt3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_dt3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_comment1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_dt0</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_dt4</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_dt4</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'\''</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_dt1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_dt4</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_dt0</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_elem0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isName</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_elemname</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_elem1</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_elemnameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_elem3</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_elemnameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_elemnameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_elem1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_elem3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isNameStart</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_attr0</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_attrstart</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_elem2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_elem1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_elem3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_elem3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_selfclose</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_enc0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_enc1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_enc1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'\''</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_enc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_enc2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isAlpha</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_enc3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_enc3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isEncName</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl6</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_etag0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isNameStart</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_etag1</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_elemclose</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_etag1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isName</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_elemclose</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_etag2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_elemcloseend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_elemcloseend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_etag2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_init</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'\xef'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_misc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\xbb\xbf"</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc0</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_le0</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_le0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_lee1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_leq0</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isNameStart</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_elem0</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_elemstart</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_le1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_lee1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_misc1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isNameStart</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_elem0</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_elemstart</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_le2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_lee2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_misc2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_etag0</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isNameStart</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_elem0</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_elemstart</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_le3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_comment0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_misc3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_misc3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_lee1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_comment1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_misc1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'D'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_dt0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"OCTYPE"</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_lee2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_comment1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_misc2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_cd0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"CDATA["</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_leq0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_misc1</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pistart</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isNameStart</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_misc1</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pistart</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_misc0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_le0</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_misc1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_le1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_misc2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_le2</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc2a</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_refstart</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_datacontent</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_misc2a</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isRef</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_ref</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'\x3b'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_refcontent</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_misc3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_le3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_pi0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isNameStart</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi1</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pistart</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_pi1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isName</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_piname</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi4</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pinameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pinameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_pi2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>yxml_datapi1</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_pi3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pivalend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_datapi2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_pi4</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pivalend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_std0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_std1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_std1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'\''</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_std2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_std2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_std3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"es"</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_std3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"o"</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_std3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl8</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_ver0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_ver1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_ver1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'\''</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_ver2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"1."</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_ver2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isNum</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_ver3</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_ver3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isNum</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>quote</name></name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl4</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_xmldecl0</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl1</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_piname</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isName</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi1</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_piname</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi4</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pinameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pinameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_xmldecl1</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_piname</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isName</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi1</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_piname</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi4</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pinameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi2</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_pinameend</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_xmldecl2</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl3</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_piabort</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isName</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_pi1</name></expr>;</expr_stmt>
<return>return <expr><call><name>yxml_piname</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_xmldecl3</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_ver0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"ersion"</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_xmldecl4</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl5</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl9</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_xmldecl5</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl9</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_enc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"ncoding"</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_std0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"tandalone"</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_xmldecl6</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl7</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl9</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_xmldecl7</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl9</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>YXMLS_std0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"tandalone"</literal></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_xmldecl8</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>yxml_isSP</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_xmldecl9</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>YXMLS_xmldecl9</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YXMLS_misc1</name></expr>;</expr_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>YXML_ESYN</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>yxml_ret_t</name></type> <name>yxml_eof</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>YXMLS_misc3</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YXML_EEOF</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>YXML_OK</name></expr>;</return>
</block_content>}</block></function>



</unit>
