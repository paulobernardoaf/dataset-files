<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\xnu\yxml.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YXML_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YXML_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><specifier>inline</specifier></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <type><enum>enum <block>{
<decl><name>YXML_EEOF</name> <init>= <expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>, 
<decl><name>YXML_EREF</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>, 
<decl><name>YXML_ECLOSE</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>, 
<decl><name>YXML_ESTACK</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>, 
<decl><name>YXML_ESYN</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 
<decl><name>YXML_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>YXML_ELEMSTART</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>YXML_CONTENT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>YXML_ELEMEND</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>YXML_ATTRSTART</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>YXML_ATTRVAL</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 
<decl><name>YXML_ATTREND</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>YXML_PISTART</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 
<decl><name>YXML_PICONTENT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>YXML_PIEND</name> <init>= <expr><literal type="number">9</literal></expr></init></decl> 
}</block></enum></type> <name>yxml_ret_t</name>;</typedef>























<typedef>typedef <type><struct>struct <block>{






<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>












<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pi</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint64_t</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>line</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>stacksize</name></decl>, <name>stacklen</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>reflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>quote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nextstate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>ignore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
}</block></struct></type> <name>yxml_t</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>yxml_init</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>yxml_ret_t</name></type> <name>yxml_parse</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>yxml_ret_t</name></type> <name>yxml_eof</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>yxml_symlen</name><parameter_list>(<parameter><decl><type><name>yxml_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>stack</name></name> <operator>+</operator> <name><name>x</name><operator>-&gt;</operator><name>stacklen</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>s</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
