<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\xnu\r_cf_dict.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_CF_DICT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CF_DICT_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CF_OPTION_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CF_OPTION_SKIP_NSDATA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>R_CF_INVALID</name></decl>,
<decl><name>R_CF_DICT</name></decl>,
<decl><name>R_CF_ARRAY</name></decl>,
<decl><name>R_CF_STRING</name></decl>,
<decl><name>R_CF_INTEGER</name></decl>,
<decl><name>R_CF_DATA</name></decl>,
<decl><name>R_CF_NULL</name></decl>,
<decl><name>R_CF_TRUE</name></decl>,
<decl><name>R_CF_FALSE</name></decl>
}</block></enum></type> <name>RCFValueType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CFValue</name> <block>{
<decl_stmt><decl><type><name>RCFValueType</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>RCFValue</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CFKeyValue</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCFValue</name> <modifier>*</modifier></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>RCFKeyValue</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CFValueDict</name> <block>{
<decl_stmt><decl><type><name>RCFValueType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>pairs</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RCFValueDict</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CFValueArray</name> <block>{
<decl_stmt><decl><type><name>RCFValueType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>values</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RCFValueArray</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CFValueString</name> <block>{
<decl_stmt><decl><type><name>RCFValueType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>RCFValueString</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CFValueInteger</name> <block>{
<decl_stmt><decl><type><name>RCFValueType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>RCFValueInteger</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CFValueData</name> <block>{
<decl_stmt><decl><type><name>RCFValueType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>RCFValueData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CFValueBool</name> <block>{
<decl_stmt><decl><type><name>RCFValueType</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>RCFValueBool</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CFValueNULL</name> <block>{
<decl_stmt><decl><type><name>RCFValueType</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>RCFValueNULL</name>;</typedef>

<function_decl><type><name>R_API</name> <name>RCFValueDict</name> <modifier>*</modifier></type> <name>r_cf_value_dict_parse</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>file_buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cf_value_dict_free</name><parameter_list>(<parameter><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type> <name>dict</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_cf_value_print</name><parameter_list>(<parameter><decl><type><name>RCFValue</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
