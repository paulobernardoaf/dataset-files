<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\spc700\spc_specs.h">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_SPC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SPC_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPC_MAGIC</name></cpp:macro> <cpp:value>"SNES-SPC700 Sound File Data"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPC_HDR_SIZE</name></cpp:macro> <cpp:value>sizeof (spc_hdr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAM_START_ADDRESS</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAM_SIZE</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSP_REG_START_ADDRESS</name></cpp:macro> <cpp:value>0x10100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSP_REG_SIZE</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_RAM_START_ADDRESS</name></cpp:macro> <cpp:value>0x101C0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_RAM_SIZE</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENDED_ID666_START_ADDRESS</name></cpp:macro> <cpp:value>0x10200</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>UNKNOWN</name></decl>,
<decl><name>ZSNES</name></decl>,
<decl><name>SNES9X</name></decl>,
}</block></enum></type> <name>emulator_used</name>;</typedef>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct { 
char song_title [<literal type="number">32</literal>];
char game_title [<literal type="number">32</literal>];
char name_of_dumper [<literal type="number">16</literal>];
char comments [<literal type="number">32</literal>];
ut8 date[<literal type="number">11</literal>];
ut8 num_sec_bef_fade_out[<literal type="number">3</literal>];
ut8 len_fade_out[<literal type="number">5</literal>];
char artist_song [<literal type="number">32</literal>];
bool default_channel_disabled;
emulator_used emulator_used[<literal type="number">1</literal>];
ut8 reserved[<literal type="number">1</literal>];
}</argument>)</argument_list></macro> <expr_stmt><expr><name>id666_tag_text</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name> <argument_list>(
<argument>typedef struct { 
char song_title [<literal type="number">32</literal>];
char game_title [<literal type="number">32</literal>];
char name_of_dumper [<literal type="number">16</literal>];
char comments [<literal type="number">32</literal>];
ut8 date[<literal type="number">4</literal>];
ut8 unused[<literal type="number">8</literal>];
ut8 num_sec_bef_fade_out[<literal type="number">3</literal>];
ut8 len_fade_out[<literal type="number">4</literal>];
char artist_song [<literal type="number">32</literal>];
bool default_channel_disabled;
ut8 reserved[<literal type="number">1</literal>];
}</argument>)</argument_list></macro> <expr_stmt><expr><name>id666_tag_binary</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name> <argument_list>(
<argument>typedef struct {
char signature [<literal type="number">33</literal>];
ut8 signature2 [<literal type="number">2</literal>];
ut8 has_id666;
ut8 version;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>spc_hdr</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name> <argument_list>(
<argument>typedef struct {
ut8 pcl;
ut8 pch;
ut8 a;
ut8 x;
ut8 y;
ut8 psw;
ut8 sp;
ut8 reserved_1;
ut8 reserved_2;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>spc_reg</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name> <argument_list>(
<argument>typedef struct {
ut8 ram [<literal type="number">0x10000</literal>];
ut8 dsp [<literal type="number">128</literal>];
ut8 unused [<literal type="number">0x40</literal>];
ut8 ipl_rom [<literal type="number">0x40</literal>];
}</argument>)</argument_list></macro> <expr_stmt><expr><name>spc_data</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
