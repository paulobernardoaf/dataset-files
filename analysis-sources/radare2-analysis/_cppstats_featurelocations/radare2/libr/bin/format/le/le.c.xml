<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\le\le.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"le.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__get_module_type</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>mflags</name></name> <operator>&amp;</operator> <name>M_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>M_TYPE_EXE</name></expr>:</case> <return>return <expr><literal type="string">"Program module (EXE)"</literal></expr>;</return>
<case>case <expr><name>M_TYPE_DLL</name></expr>:</case> <return>return <expr><literal type="string">"Library module (DLL)"</literal></expr>;</return>
<case>case <expr><name>M_TYPE_PDD</name></expr>:</case> <return>return <expr><literal type="string">"Physical Device Driver"</literal></expr>;</return>
<case>case <expr><name>M_TYPE_VDD</name></expr>:</case> <return>return <expr><literal type="string">"Virtual Device Driver"</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__get_os_type</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>os</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><literal type="string">"OS/2"</literal></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><literal type="string">"Windows"</literal></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><literal type="string">"DOS 4.x"</literal></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case> <return>return <expr><literal type="string">"Windows 386"</literal></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case> <return>return <expr><literal type="string">"IBM Microkernel Personality Neutral"</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__get_cpu_type</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>cpu</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><literal type="string">"80286"</literal></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><literal type="string">"80386"</literal></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><literal type="string">"80486"</literal></expr>;</return>
<case>case <expr><literal type="number">0x20</literal></expr>:</case> <return>return <expr><literal type="string">"N10"</literal></expr>;</return>
<case>case <expr><literal type="number">0x21</literal></expr>:</case> <return>return <expr><literal type="string">"N11"</literal></expr>;</return>
<case>case <expr><literal type="number">0x40</literal></expr>:</case> <return>return <expr><literal type="string">"R3000"</literal></expr>;</return>
<case>case <expr><literal type="number">0x41</literal></expr>:</case> <return>return <expr><literal type="string">"R6000"</literal></expr>;</return>
<case>case <expr><literal type="number">0x42</literal></expr>:</case> <return>return <expr><literal type="string">"R4000"</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__get_arch</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>cpu</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><literal type="string">"x86"</literal></expr>;</return>
<case>case <expr><literal type="number">0x20</literal></expr>:</case>
<case>case <expr><literal type="number">0x21</literal></expr>:</case>
<return>return <expr><literal type="string">"i860"</literal></expr>;</return>
<case>case <expr><literal type="number">0x40</literal></expr>:</case>
<case>case <expr><literal type="number">0x41</literal></expr>:</case>
<case>case <expr><literal type="number">0x42</literal></expr>:</case>
<return>return <expr><literal type="string">"mips"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__read_nonnull_str_at</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>size</name> <init>= <expr><call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>&amp;=</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>offset</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinSymbol</name> <modifier>*</modifier></type><name>__get_symbol</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>__read_nonnull_str_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_symbol_free</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>entry_idx</name> <init>= <expr><call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>entry_idx</name></expr>;</expr_stmt>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>__get_entries</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>enttab</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LE_entry_bundle_header</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LE_entry_bundle_entry</name></type> <name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>header</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <operator>~</operator><name>ENTRY_PARAMETER_TYPING_PRESENT</name><operator>)</operator> <operator>==</operator> <name>UNUSED_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>header</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>LE_entry_bundle_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>typeinfo</name> <init>= <expr><name><name>header</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>ENTRY_PARAMETER_TYPING_PRESENT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>header</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>entry</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>header</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <operator>~</operator><name>ENTRY_PARAMETER_TYPING_PRESENT</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENTRY16</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>.</operator><name>objnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>objcnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>e</name><operator>.</operator><name>entry_16</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>objtbl</name><index>[<expr><name><name>header</name><operator>.</operator><name>objnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reloc_base_addr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>entry_16</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>typeinfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name><name>e</name><operator>.</operator><name>entry_16</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ENTRY_PARAM_COUNT_MASK</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CALLGATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>.</operator><name>objnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>objcnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>e</name><operator>.</operator><name>callgate</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>objtbl</name><index>[<expr><name><name>header</name><operator>.</operator><name>objnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reloc_base_addr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>callgate</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>typeinfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name><name>e</name><operator>.</operator><name>callgate</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ENTRY_PARAM_COUNT_MASK</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ENTRY32</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>.</operator><name>objnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>objcnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>e</name><operator>.</operator><name>entry_32</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>objtbl</name><index>[<expr><name><name>header</name><operator>.</operator><name>objnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reloc_base_addr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>entry_32</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>typeinfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name><name>e</name><operator>.</operator><name>entry_32</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ENTRY_PARAM_COUNT_MASK</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FORWARDER</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>forwarder</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__get_symbols_at</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>syml</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>entl</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>__get_symbol</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>entl</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <name>R_BIN_BIND_GLOBAL_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_FUNC_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>syml</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_symbol_free</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_le_get_symbols</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_symbol_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>__get_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LE_image_header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>restab</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>end</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>enttab</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__get_symbols_at</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>nrestab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>nrestab</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>cbnrestab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__get_symbols_at</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_le_get_imports</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_import_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>LE_image_header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>impproc</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>fixupsize</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>fpagetab</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imp</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>__read_nonnull_str_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>imp</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_import_free</name> <argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_FUNC_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_le_get_entrypoints</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>startobj</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>objcnt</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>objtbl</name><index>[<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>startobj</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reloc_base_addr</name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>eip</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_le_get_libs</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>LE_image_header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>impmod</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name> <init>= <expr><name>offset</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>impproc</name></name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>impmod</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>__read_nonnull_str_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>__create_iter_sections</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>, <parameter><decl><type><name>LE_object_page_entry</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur_page</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>l</name> <operator>&amp;&amp;</operator> <name>bin</name> <operator>&amp;&amp;</operator> <name>sec</name> <operator>&amp;&amp;</operator> <name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LE_image_header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>itermap</name></name> <operator>+</operator> <operator>(</operator><name><name>page</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>is_le</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>pageshift</name></name></expr></else></ternary><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ut16</name></type> <name>iter_n</name> <init>= <expr><call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>data_size</name> <init>= <expr><call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>tot_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iter_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>bytes_left</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>iter_n</name> <operator>&amp;&amp;</operator> <name>bytes_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iter_n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.page.%d.iter.%d"</literal></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>cur_page</name></expr></argument>, <argument><expr><name>iter_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>perm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>vaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vaddr</name> <operator>+=</operator> <name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tot_size</name> <operator>+=</operator> <name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iter_cnt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>bytes_left</name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>data_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iter_n</name> <operator>=</operator> <call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>tot_size</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>pagesize</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.page.%d.iter.zerofill"</literal></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>cur_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>perm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>-</operator> <name>tot_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>vaddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_le_get_sections</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_section_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>LE_image_header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>pages_start_off</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>datapage</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>objcnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>sec</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sec</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>LE_object_entry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>objtbl</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"obj.%d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>virtual_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>reloc_base_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>O_READABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>perm</name></name> <operator>|=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>O_WRITABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>perm</name></name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>O_EXECUTABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>perm</name></name> <operator>|=</operator> <name>R_PERM_X</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>O_BIG_BIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>R_SYS_BITS_32</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>R_SYS_BITS_16</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>is_data</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>O_RESOURCE</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>sec</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_X</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>page_tbl_entries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>page_size_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>next_idx</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>objcnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>bin</name><operator>-&gt;</operator><name>objtbl</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>page_tbl_idx</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>UT32_MAX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>objmaptbloff</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>objmap</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>objpageentrysz</name> <init>= <expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>is_le</name></name></expr> ?</condition><then> <expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof <argument_list>(<argument><expr><name>LE_object_page_entry</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>page_tbl_entries</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>LE_object_page_entry</name></type> <name>page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_section_free</name> <argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.page.%d"</literal></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_data</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>is_data</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_idx</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>page_tbl_idx</name></name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>page_entry_off</name> <init>= <expr><name>objpageentrysz</name> <operator>*</operator> <name>cur_idx</name> <operator>+</operator> <name>objmaptbloff</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>page_entry_off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>page</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_idx</name> <operator>&lt;</operator> <name>next_idx</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>is_le</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><call><name>r_buf_read_be32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>page_entry_off</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>+</operator> <name>pages_start_off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>page_tbl_idx</name></name> <operator>+</operator> <name>j</name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>mpages</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>page</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pageshift</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>page</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pagesize</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>page</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <name>P_ITERATED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name> <init>= <expr><name><name>sec</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name>page_size_sum</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__create_iter_sections</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_section_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>page_size_sum</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>pagesize</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>page</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <name>P_COMPRESSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_LOG_WARN</name> <argument_list>(<argument><expr><literal type="string">"Compressed page not handled: %s"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>page</name><operator>.</operator><name>flags</name></name> <operator>!=</operator> <name>P_ZEROED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>page</name><operator>.</operator><name>offset</name></name> <operator>&lt;&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>pageshift</name></name><operator>)</operator> <operator>+</operator> <name>pages_start_off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pagesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name>page_size_sum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>perm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>page</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>page_size_sum</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>vsize</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>page_tbl_entries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_section_free</name> <argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__get_modname_by_ord</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ordinal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>modname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>impmod</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ordinal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>modname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>modname</name> <operator>=</operator> <call><name>__read_nonnull_str_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ordinal</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>modname</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_le_get_relocs</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>__get_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><call><name>r_bin_le_get_sections</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LE_image_header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>cur_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>fix_rec_tbl_off</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>frectab</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name>fix_rec_tbl_off</name> <operator>+</operator> <call><name>r_buf_read_ble32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>fpagetab</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name> <operator>+</operator> <name>cur_page</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name> <init>= <expr><name>fix_rec_tbl_off</name> <operator>+</operator> <call><name>r_buf_read_ble32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>fpagetab</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name> <operator>+</operator> <operator>(</operator><name>cur_page</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RBinSection</name> <modifier>*</modifier></type><name>cur_section</name> <init>= <expr><operator>(</operator><name>RBinSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><name>cur_page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>cur_page_offset</name> <init>= <expr><ternary><condition><expr><name>cur_section</name></expr> ?</condition><then> <expr><name><name>cur_section</name><operator>-&gt;</operator><name>vaddr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cur_page</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>mpages</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>rel</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinReloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rel_appended</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rel</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>LE_fixup_record_header</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: oobread in LE header parsing relocs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>header</name><operator>.</operator><name>source</name></name> <operator>&amp;</operator> <name>F_SOURCE_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BYTEFIXUP</name></expr>:</case>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_RELOC_8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SELECTOR16</name></expr>:</case>
<case>case <expr><name>OFFSET16</name></expr>:</case>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_RELOC_16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OFFSET32</name></expr>:</case>
<case>case <expr><name>POINTER32</name></expr>:</case>
<case>case <expr><name>SELFOFFSET32</name></expr>:</case>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_RELOC_32</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>POINTER48</name></expr>:</case>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<decl_stmt><decl><type><name>ut64</name></type> <name>repeat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>source</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>source</name></name> <operator>&amp;</operator> <name>F_SOURCE_LIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ordinal</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <name>F_TARGET_ORD16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ordinal</name> <operator>=</operator> <call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ordinal</name> <operator>=</operator> <call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<switch>switch <condition>(<expr><name><name>header</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <name>F_TARGET_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>INTERNAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ordinal</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>objcnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>addend</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>objtbl</name><index>[<expr><name>ordinal</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reloc_base_addr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>.</operator><name>source</name></name> <operator>&amp;</operator> <name>F_SOURCE_TYPE_MASK</name><operator>)</operator> <operator>!=</operator> <name>SELECTOR16</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <name>F_TARGET_OFF32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>addend</name></name> <operator>+=</operator> <call><name>r_buf_read_ble32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>addend</name></name> <operator>+=</operator> <call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>IMPORTORD</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imp</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mod_name</name> <init>= <expr><call><name>__get_modname_by_ord</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>ordinal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mod_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_import_free</name> <argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <name>F_TARGET_ORD8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ordinal</name> <operator>=</operator> <call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>header</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <name>F_TARGET_OFF32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ordinal</name> <operator>=</operator> <call><name>r_buf_read_ble32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ordinal</name> <operator>=</operator> <call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%u"</literal></expr></argument>, <argument><expr><name>mod_name</name></expr></argument>, <argument><expr><name>ordinal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>ordinal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>import</name></name> <operator>=</operator> <name>imp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mod_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>IMPORTNAME</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imp</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>nameoff</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <name>F_TARGET_OFF32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nameoff</name> <operator>=</operator> <call><name>r_buf_read_ble32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nameoff</name> <operator>=</operator> <call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>impproc</name></name> <operator>+</operator> <name>nameoff</name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proc_name</name> <init>= <expr><call><name>__read_nonnull_str_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mod_name</name> <init>= <expr><call><name>__get_modname_by_ord</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>ordinal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>mod_name</name></expr> ?</condition><then> <expr><name>mod_name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>proc_name</name></expr> ?</condition><then> <expr><name>proc_name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>import</name></name> <operator>=</operator> <name>imp</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>INTERNALENTRY</name></expr>:</case>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>addend</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>ordinal</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <name>F_TARGET_ADDITIVE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>additive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <name>F_TARGET_ADD32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>additive</name> <operator>=</operator> <call><name>r_buf_read_ble32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>additive</name> <operator>=</operator> <call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>addend</name></name> <operator>+=</operator> <name>additive</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>repeat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>cur_page_offset</name> <operator>+</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <ternary><condition><expr><name>cur_section</name></expr> ?</condition><then> <expr><name><name>cur_section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name>source</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rel_appended</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <name>F_TARGET_CHAIN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>fixupinfo</name> <init>= <expr><call><name>r_buf_read_ble32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>cur_page_offset</name> <operator>+</operator> <name>source</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>base_target_address</name> <init>= <expr><name><name>rel</name><operator>-&gt;</operator><name>addend</name></name> <operator>-</operator> <operator>(</operator><name>fixupinfo</name> <operator>&amp;</operator> <literal type="number">0xFFFFF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>fixupinfo</name> <operator>=</operator> <call><name>r_buf_read_ble32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>cur_page_offset</name> <operator>+</operator> <name>source</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinReloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>new</name> <operator>=</operator> <operator>*</operator><name>rel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addend</name></name> <operator>=</operator> <name>base_target_address</name> <operator>+</operator> <operator>(</operator><name>fixupinfo</name> <operator>&amp;</operator> <literal type="number">0xFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>(</operator><name>fixupinfo</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>source</name> <operator>!=</operator> <literal type="number">0xFFF</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>repeat</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>off</name> <init>= <expr><call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>cur_page_offset</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <ternary><condition><expr><name>cur_section</name></expr> ?</condition><then> <expr><name><name>cur_section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name>off</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinReloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>new</name> <operator>=</operator> <operator>*</operator><name>rel</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>repeat</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_page</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_page</name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>mpages</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>fpagetab</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>w0</name> <init>= <expr><call><name>r_buf_read_ble32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>at</name> <operator>+</operator> <name>cur_page</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>w1</name> <init>= <expr><call><name>r_buf_read_ble32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>at</name> <operator>+</operator> <operator>(</operator><name>cur_page</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>fix_rec_tbl_off</name> <operator>+</operator> <name>w0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>fix_rec_tbl_off</name> <operator>+</operator> <name>w1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_section</name> <operator>=</operator> <operator>(</operator><name>RBinSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><name>cur_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_page_offset</name> <operator>=</operator> <ternary><condition><expr><name>cur_section</name></expr> ?</condition><then> <expr><name><name>cur_section</name><operator>-&gt;</operator><name>vaddr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rel_appended</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__init_header</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>magic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>magic</name></expr></argument>, <argument><expr><literal type="string">"MZ"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x3c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>LE_image_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>LE_image_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>R_LOG_ERROR</name> <argument_list>(<argument><expr><literal type="string">"Failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_bin_le_free</name><parameter_list>(<parameter><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>objtbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>r_bin_le_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>r_bin_le_obj_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__init_header</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LE_image_header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><literal type="string">"LE"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>is_le</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>__get_module_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cpu</name></name> <operator>=</operator> <call><name>__get_cpu_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>__get_os_type</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>__get_arch</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>objtbl</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>objcnt</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>LE_object_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>objtbl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_le_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>restab</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>__read_nonnull_str_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>objtab</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>headerOff</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>objtbl</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>objcnt</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>LE_object_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<return>return <expr><name>bin</name></expr>;</return>
</block_content>}</block></function>
</unit>
