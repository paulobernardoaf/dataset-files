<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\ne\ne.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ne.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__get_target_os</name><parameter_list>(<parameter><decl><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>targOS</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><literal type="string">"OS/2"</literal></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><literal type="string">"Windows"</literal></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><literal type="string">"European MS-DOS 4.x"</literal></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><literal type="string">"Windows 386"</literal></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<return>return <expr><literal type="string">"BOSS (Borland Operating System Services)"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__translate_perms</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>perms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IS_RX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IS_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perms</name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>perms</name> <operator>=</operator> <name>R_PERM_X</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>perms</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perms</name> <operator>=</operator> <name>R_PERM_RWX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>perms</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__read_nonnull_str_at</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>sz</name> <init>= <expr><call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__func_name_from_ord</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>ordinal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><call><name>R_JOIN_4_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R2_SDB_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"dll"</literal></expr></argument>, <argument><expr><literal type="string">"%s.sdb"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>r_sys_prefix</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ord</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>ordinal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name> <init>= <expr><call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>sdb_get</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>ord</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>ord</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>sdb_close</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>ord</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_ne_get_segments</name><parameter_list>(<parameter><decl><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>segments</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>SegCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NE_image_segment_entry</name> <modifier>*</modifier></type><name>se</name> <init>= <expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>segment_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bs</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>segments</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>se</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <ternary><condition><expr><name><name>se</name><operator>-&gt;</operator><name>minAllocSz</name></name></expr> ?</condition><then> <expr><name><name>se</name><operator>-&gt;</operator><name>minAllocSz</name></name></expr> </then><else>: <expr><literal type="number">64000</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>R_SYS_BITS_16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>is_data</name></name> <operator>=</operator> <name><name>se</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <call><name>__translate_perms</name> <argument_list>(<argument><expr><name><name>se</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>se</name><operator>-&gt;</operator><name>offset</name></name> <operator>*</operator> <name><name>bin</name><operator>-&gt;</operator><name>alignment</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>se</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_MOVEABLE</name></expr> ?</condition><then> <expr><literal type="string">"MOVEABLE"</literal></expr> </then><else>: <expr><literal type="string">"FIXED"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>is_segment</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>segments</name></name> <operator>=</operator> <name>segments</name></expr>;</expr_stmt>
<return>return <expr><name>segments</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__find_symbol_by_paddr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>paddr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>!</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><name>paddr</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>RBinSymbol</name> <operator>*</operator><operator>)</operator><name>sym</name><operator>)</operator><operator>-&gt;</operator><name>paddr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_ne_get_symbols</name><parameter_list>(<parameter><decl><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>off</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ResidNamTable</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>header_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>symbols</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symbols</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>r_bin_ne_get_entrypoints</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>resident</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>sz</name> <init>= <expr><call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>resident</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>resident</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>OffStartNonResTab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <name>R_BIN_BIND_GLOBAL_STR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>entry_off</name> <init>= <expr><call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>entry_off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>entry_off</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>symbols</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>en</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>entries</argument>, <argument>it</argument>, <argument>en</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_find</name> <argument_list>(<argument><expr><name>symbols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>en</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>__find_symbol_by_paddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"entry%d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <name>R_BIN_BIND_GLOBAL_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>symbols</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>symbols</name></name> <operator>=</operator> <name>symbols</name></expr>;</expr_stmt>
<return>return <expr><name>symbols</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__resource_type_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>typeName</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"CURSOR"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"BITMAP"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"ICON"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"MENU"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"DIALOG"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"STRING"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"FONTDIR"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"FONT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"ACCELERATOR"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"RCDATA"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"MESSAGETABLE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"GROUP_CURSOR"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"GROUP_ICON"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"NAMETABLE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"VERSION"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"DLGINCLUDE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"PLUGPLAY"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">20</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"VXD"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"ANICURSOR"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"ANIICON"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"HTML"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"MANIFEST"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"UNKNOWN (%d)"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__free_resource_entry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>r_ne_resource_entry</name> <modifier>*</modifier></type><name>en</name> <init>= <expr><operator>(</operator><name>r_ne_resource_entry</name> <operator>*</operator><operator>)</operator><name>entry</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__free_resource</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>resource</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>r_ne_resource</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>r_ne_resource</name> <operator>*</operator><operator>)</operator><name>resource</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__ne_get_resources</name><parameter_list>(<parameter><decl><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>resources</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>resources</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>__free_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>resoff</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ResTableOffset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>header_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>alignment</name> <init>= <expr><call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>resoff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>off</name> <init>= <expr><name>resoff</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>NE_image_typeinfo_entry</name></type> <name>ti</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>r_ne_resource</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>r_ne_resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>__free_resource_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>res</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ti</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ti</name><operator>.</operator><name>rtTypeID</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ti</name><operator>.</operator><name>rtTypeID</name></name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>__resource_type_str</name> <argument_list>(<argument><expr><name><name>ti</name><operator>.</operator><name>rtTypeID</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>__read_nonnull_str_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>resoff</name> <operator>+</operator> <name><name>ti</name><operator>.</operator><name>rtTypeID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>NE_image_typeinfo_entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ti</name><operator>.</operator><name>rtResourceCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>NE_image_nameinfo_entry</name></type> <name>ni</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>r_ne_resource_entry</name> <modifier>*</modifier></type><name>ren</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>r_ne_resource_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ren</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ni</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>NE_image_nameinfo_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ren</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>ni</name><operator>.</operator><name>rnOffset</name></name> <operator>&lt;&lt;</operator> <name>alignment</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ren</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ni</name><operator>.</operator><name>rnLength</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ni</name><operator>.</operator><name>rnID</name></name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ren</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>ni</name><operator>.</operator><name>rnID</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ren</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>__read_nonnull_str_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>resoff</name> <operator>+</operator> <name><name>ni</name><operator>.</operator><name>rnID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>ren</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>NE_image_nameinfo_entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>resources</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_ne_get_imports</name><parameter_list>(<parameter><decl><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>imports</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imports</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>off</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ImportNameTable</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>header_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ModRefs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imp</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>sz</name> <init>= <expr><call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_import_free</name> <argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>imports</name></expr></argument>, <argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>imports</name></name> <operator>=</operator> <name>imports</name></expr>;</expr_stmt>
<return>return <expr><name>imports</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_ne_get_entrypoints</name><parameter_list>(<parameter><decl><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entries</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>segments</name> <init>= <expr><call><name>r_bin_ne_get_segments</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>segments</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>csEntryPoint</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>csEntryPoint</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ipEntryPoint</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>s</name></expr>?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>paddr</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>EntryTableLength</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name>bundle_length</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>entry_table</name></name> <operator>+</operator> <name>off</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bundle_length</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>bundle_type</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>entry_table</name></name> <operator>+</operator> <name>off</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bundle_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bundle_type</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>off</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bundle_type</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>off</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>segnum</name> <init>= <expr><operator>*</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>entry_table</name></name> <operator>+</operator> <name>off</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>segoff</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>entry_table</name></name> <operator>+</operator> <name>off</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>segment_entries</name><index>[<expr><name>segnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>bin</name><operator>-&gt;</operator><name>alignment</name></name> <operator>+</operator> <name>segoff</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>segment_entries</name><index>[<expr><name>bundle_type</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>bin</name><operator>-&gt;</operator><name>alignment</name></name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>entry_table</name></name> <operator>+</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>
<return>return <expr><name>entries</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_ne_get_relocs</name><parameter_list>(<parameter><decl><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>segments</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>segments</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>segments</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entries</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>symbols</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>symbols</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symbols</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name> <modifier>*</modifier></type><name>modref</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ModRefs</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>modref</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ModRefTable</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>header_offset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>modref</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ModRefs</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>relocs</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>relocs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>modref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>segments</argument>, <argument>it</argument>, <argument>seg</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>segment_entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>RELOCINFO</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><name>off</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name><name>seg</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>length</name> <init>= <expr><call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name>length</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>NE_image_reloc_item</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>reloc</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinReloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reloc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>NE_image_reloc_item</name></type> <name>rel</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name><name>rel</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>rel</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LOBYTE</name></expr>:</case>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_RELOC_8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEL_16</name></expr>:</case>
<case>case <expr><name>OFF_16</name></expr>:</case>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_RELOC_16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>POI_32</name></expr>:</case>
<case>case <expr><name>OFF_32</name></expr>:</case>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_RELOC_32</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>POI_48</name></expr>:</case>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_RELOC_64</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>IMPORTED_ORD</name> <operator>|</operator> <name>IMPORTED_NAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>.</operator><name>index</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ModRefs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"UnknownModule%d_%x"</literal></expr></argument>, <argument><expr><name><name>rel</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>modref</name><index>[<expr><name><name>rel</name><operator>.</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>header_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ImportNameTable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>__read_nonnull_str_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>IMPORTED_ORD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name><name>rel</name><operator>.</operator><name>func_ord</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>__func_name_from_ord</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rel</name><operator>.</operator><name>func_ord</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>ImportNameTable</name></name> <operator>+</operator> <name><name>rel</name><operator>.</operator><name>name_off</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>__read_nonnull_str_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>import</name></name> <operator>=</operator> <name>imp</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rel</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>OSFIXUP</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"FIXED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name><name>rel</name><operator>.</operator><name>segnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name><name>rel</name><operator>.</operator><name>segoff</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name><name>rel</name><operator>.</operator><name>entry_ordinal</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>addend</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>sit</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>symbols</argument>, <argument>sit</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>==</operator> <name><name>reloc</name><operator>-&gt;</operator><name>addend</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDITIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>additive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>relocs</name></expr></argument>, <argument><expr><name>reloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>relocs</name></expr></argument>, <argument><expr><name>reloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>reloc</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RBinReloc</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>reloc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>reloc</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinReloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reloc</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>reloc</name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reloc</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0xFFFF</literal></expr>)</condition>;</do>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>NE_image_reloc_item</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>modref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>relocs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>header_offset</name></name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x3c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>NE_image_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>header_offset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>NE_image_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>alignment</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>FileAlnSzShftCnt</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>alignment</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>alignment</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>__get_target_os</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>SegTableOffset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>header_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>size</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>SegCount</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>NE_image_segment_entry</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>segment_entries</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>segment_entries</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>segment_entries</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>entry_table</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>EntryTableLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>header_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>EntryTableOffset</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>entry_table</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name><operator>-&gt;</operator><name>EntryTableLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>imports</name></name> <operator>=</operator> <call><name>r_bin_ne_get_imports</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__ne_get_resources</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_bin_ne_free</name><parameter_list>(<parameter><decl><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>resources</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>entry_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ne_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>resident_name_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>segment_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>r_bin_ne_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>r_bin_ne_obj_t</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>r_bin_ne_obj_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__init</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bin</name></expr>;</return>
</block_content>}</block></function>
</unit>
