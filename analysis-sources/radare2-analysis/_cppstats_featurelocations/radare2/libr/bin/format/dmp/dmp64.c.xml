<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\dmp\dmp64.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmp64.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dmp64_init_memory_runs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dmp64_obj_t</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dmp64_p_memory_desc</name> <modifier>*</modifier></type><name>mem_desc</name> <init>= <expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>PhysicalMemoryBlockBuffer</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>mem_desc</name></expr></argument>, <argument><expr><name>DMP_UNUSED_MAGIC</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Invalid PhysicalMemoryDescriptor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>num_runs</name> <init>= <expr><name><name>mem_desc</name><operator>-&gt;</operator><name>NumberOfRuns</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num_runs</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dmp_p_memory_run</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr><name>dmp64_header</name></expr></argument>, <argument><expr><name>ContextRecord</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Invalid PhysicalMemoryDescriptor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>pages</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>dmp_p_memory_run</name> <modifier>*</modifier></type><name>runs</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>num_runs</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dmp_p_memory_run</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>num_runs_offset</name> <init>= <expr><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>dmp64_header</name></expr></argument>, <argument><expr><name>PhysicalMemoryBlockBuffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr><name>dmp64_p_memory_desc</name></expr></argument>, <argument><expr><name>NumberOfRuns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>num_runs_offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>runs</name></expr></argument>, <argument><expr><name>num_runs</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dmp_p_memory_run</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read memory runs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>runs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>num_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>base</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>dmp64_header</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_runs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dmp_p_memory_run</name> <modifier>*</modifier></type><name>run</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>runs</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>run</name><operator>-&gt;</operator><name>PageCount</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dmp_page_desc</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>dmp_page_desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>page</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>runs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <operator>(</operator><name><name>run</name><operator>-&gt;</operator><name>BasePage</name></name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>PAGE_SIZE</name></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>num_page</name> <operator>*</operator> <name>PAGE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_page</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>mem_desc</name><operator>-&gt;</operator><name>NumberOfPages</name></name> <operator>!=</operator> <name>num_page</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Number of Pages not matches\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>runs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dmp64_init_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dmp64_obj_t</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>dmp64_header</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"R_NEW0 (header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dmp64_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>dtb</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>DirectoryTableBase</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dmp64_init_bmp_pages</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dmp64_obj_t</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>bmp_header</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>pages</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>paddr_base</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>bmp_header</name><operator>-&gt;</operator><name>FirstPage</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>num_pages</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>bmp_header</name><operator>-&gt;</operator><name>Pages</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBitmap</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>r_bitmap_new</name><argument_list>(<argument><expr><name>num_pages</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_bitmap_set_bytes</name> <argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>num_pages</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>num_bitset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pages</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bitmap_test</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>dmp_page_desc</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>dmp_page_desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>page</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>PAGE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>paddr_base</name> <operator>+</operator> <name>num_bitset</name> <operator>*</operator> <name>PAGE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_bitset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>bmp_header</name><operator>-&gt;</operator><name>TotalPresentPages</name></name> <operator>!=</operator> <name>num_bitset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: TotalPresentPages not matched\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_bitmap_free</name> <argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dmp64_init_bmp_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dmp64_obj_t</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>bmp_header</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>dmp_bmp_header</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"R_NEW0 (dmp_bmp_header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dmp64_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>bmp_header</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dmp_bmp_header</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read bmp_header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bmp_header</name></name></expr></argument>, <argument><expr><name>DMP_BMP_MAGIC</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Invalid Bitmap Magic\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>bitmapsize</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>bmp_header</name><operator>-&gt;</operator><name>Pages</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bitmapsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dmp64_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dmp_bmp_header</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>bitmapsize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read bitmap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dmp64_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dmp64_obj_t</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_dmp64_init_header</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Invalid Kernel Dump x64 Format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>DumpType</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DMP_DUMPTYPE_BITMAPFULL</name></expr>:</case>
<case>case <expr><name>DMP_DUMPTYPE_BITMAPKERNEL</name></expr>:</case>
<expr_stmt><expr><call><name>r_bin_dmp64_init_bmp_header</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bin_dmp64_init_bmp_pages</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DMP_DUMPTYPE_FULL</name></expr>:</case>
<expr_stmt><expr><call><name>r_bin_dmp64_init_memory_runs</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_bin_dmp64_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dmp64_obj_t</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bmp_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>runs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_dmp64_obj_t</name></name> <modifier>*</modifier></type><name>r_bin_dmp64_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dmp64_obj_t</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_dmp64_obj_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_ref</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_dmp64_init</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_dmp64_free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>
</unit>
