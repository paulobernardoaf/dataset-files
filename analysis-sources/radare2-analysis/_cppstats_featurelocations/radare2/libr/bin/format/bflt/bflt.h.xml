<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\bflt\bflt.h">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BFLT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFLT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAT_VERSION</name></cpp:macro> <cpp:value>0x00000004L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAT_FLAG_RAM</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAT_FLAG_GOTPIC</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAT_FLAG_GZIP</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAT_FLAG_GZDATA</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAT_FLAG_KTRACE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<struct>struct <name>bflt_hdr</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>data_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>data_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>bss_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>stack_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reloc_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>reloc_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>build_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name><name>filler</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>reloc_struct_t</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>addr_to_patch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>data_offset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>r_bin_bflt_obj</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>bflt_hdr</name></name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reloc_struct_t</name></name> <modifier>*</modifier></type><name>reloc_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reloc_struct_t</name></name> <modifier>*</modifier></type><name>got_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>endian</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_got</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFLT_HDR_SIZE</name></cpp:macro> <cpp:value>sizeof (struct bflt_hdr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_GOT_ENTRY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x != 0xFFFFFFFF)</cpp:value></cpp:define>

<function_decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>r_bflt_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_bflt_obj</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>r_bin_bflt_obj</name></name> <modifier>*</modifier></type><name>r_bin_bflt_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>r_bin_bflt_free</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_bflt_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
