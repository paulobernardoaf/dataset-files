<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\mdmp\mdmp_pe.h">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MDMP_PE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_PE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pe/pe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdmp_specs.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>PE_</name></name></type>(<name>r_bin_mdmp_pe_bin</name>) <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_mdmp_pe_get_entrypoint</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_mdmp_pe_bin</name></expr></argument>)</argument_list></call> <operator>*</operator><name>pe_bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_mdmp_pe_get_imports</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_mdmp_pe_bin</name></expr></argument>)</argument_list></call> <operator>*</operator><name>pe_bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_mdmp_pe_get_sections</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_mdmp_pe_bin</name></expr></argument>)</argument_list></call> <operator>*</operator><name>pe_bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_mdmp_pe_get_symbols</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RBin</name> <operator>*</operator><name>rbin</name></expr></argument>, <argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_mdmp_pe_bin</name></expr></argument>)</argument_list></call> <operator>*</operator><name>pe_bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
