<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\dex\dex.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_DEX_MAXSTR</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEX_CLASS_SIZE</name></cpp:macro> <cpp:value>(32)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_PUBLIC</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_PRIVATE</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_PROTECTED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_STATIC</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_FINAL</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_SYNCHRONIZED</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_BRIDGE</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_VARARGS</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_NATIVE</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_ABSTRACT</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_STRICT</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_SYNTHETIC</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_MIRANDA</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_CONSTRUCTOR</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_DEX_METH_DECLARED_SYNCHRONIZED</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct dex_header_t {
ut8 magic[<literal type="number">8</literal>];
ut32 checksum;
ut8 signature[<literal type="number">20</literal>];
ut32 size;
ut32 header_size;
ut32 endian;
ut32 linksection_size;
ut32 linksection_offset;
ut32 map_offset;
ut32 strings_size;
ut32 strings_offset;
ut32 types_size;
ut32 types_offset;
ut32 prototypes_size;
ut32 prototypes_offset;
ut32 fields_size;
ut32 fields_offset;
ut32 method_size;
ut32 method_offset;
ut32 class_size;
ut32 class_offset;
ut32 data_size;
ut32 data_offset;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>DexHeader</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct dex_proto_t {
ut32 shorty_id;
ut32 return_type_id;
ut32 parameters_off;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>DexProto</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>dex_type_t</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>descriptor_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>DexType</name>;</typedef>


<typedef>typedef <type><struct>struct <name>dex_field_t</name> <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name>class_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>type_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>name_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>DexField</name>;</typedef>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct dex_method_t {
ut16 class_id;
ut16 proto_id;
ut32 name_id;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>RBinDexMethod</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct dex_class_t {
ut32 class_id; 
ut32 access_flags;
ut32 super_class;
ut32 interfaces_offset;
ut32 source_file;
ut32 anotations_offset;
ut32 class_data_offset;
ut32 static_values_offset;
struct dex_class_data_item_t *class_data;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>RBinDexClass</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name><argument_list>(
<argument>typedef struct dex_class_data_item_t {
ut64 static_fields_size;
ut64 instance_fields_size;
ut64 direct_methods_size;
ut64 virtual_methods_size;
}</argument>)</argument_list></macro> <expr_stmt><expr><name>RBinDexClassData</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>r_bin_dex_obj_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_header_t</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>strings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_type_t</name></name> <modifier>*</modifier></type><name>types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_proto_t</name></name> <modifier>*</modifier></type><name>protos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_field_t</name></name> <modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_method_t</name></name> <modifier>*</modifier></type><name>methods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_class_t</name></name> <modifier>*</modifier></type><name>classes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>methods_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>trycatch_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>imports_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>classes_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>lines_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>code_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>code_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>
}</block></struct></type> <name>RBinDexObj</name>;</typedef>

<struct>struct <name>r_bin_dex_str_t</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>R_BIN_DEX_MAXSTR</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>ordinal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dex_encoded_type_addr_pair_t</name> <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>type_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dex_encoded_catch_handler_t</name> <block>{
<decl_stmt><decl><type><name>st64</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dex_encoded_type_addr_pair_t</name></name> <modifier>*</modifier></type><name>handlers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>catch_all_addr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dex_debug_position_t</name> <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>source_file_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>line</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dex_debug_local_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>descriptor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>startAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>live</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>endAddress</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>r_bin_dex_get_version</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name> <modifier>*</modifier></type><name>r_bin_dex_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>r_bin_dex_str_t</name></name> <modifier>*</modifier></type><name>r_bin_dex_get_strings</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dex_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dex_read_uleb128</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dex_read_sleb128</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dex_uleb128_len</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
