<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\omf\omf.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OMF_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omf_specs.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>OMF_record_handler</name> <block>{
<decl_stmt><decl><type><name>OMF_record</name></type> <name>record</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>OMF_record_handler</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>OMF_record_handler</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>nb_elem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>
}</block></struct></type> <name>OMF_multi_datas</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMF_DATA</name><block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>seg_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>OMF_DATA</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>OMF_data</name>;</typedef>



<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut32</name></type> <name>name_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_data</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>OMF_segment</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>seg_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>OMF_symbol</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>nb_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_segment</name> <modifier>*</modifier><modifier>*</modifier></type><name>sections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>nb_section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_symbol</name> <modifier>*</modifier><modifier>*</modifier></type><name>symbols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>nb_symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>records</name></decl>;</decl_stmt>
}</block></struct></type> <name>r_bin_omf_obj</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_BASE_ADDR</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<function_decl><type><name>bool</name></type> <name>r_bin_checksum_omf_ok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>r_bin_internal_omf_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>r_bin_free_all_omf_obj</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>r_bin_omf_get_entry</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>r_bin_omf_get_bits</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>r_bin_omf_send_sections</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>OMF_segment</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ut64</name></type> <name>r_bin_omf_get_paddr_sym</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>OMF_symbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ut64</name></type> <name>r_bin_omf_get_vaddr_sym</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>OMF_symbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
