<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\omf\omf_specs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OMF_SPECS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_SPECS_H_</name></cpp:macro></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_THEADR</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LHEADR</name></cpp:macro> <cpp:value>0x82</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT</name></cpp:macro> <cpp:value>0x88</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_MODEND</name></cpp:macro> <cpp:value>0x8A</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_MODEND32</name></cpp:macro> <cpp:value>0x8B</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_EXTDEF</name></cpp:macro> <cpp:value>0x8C</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_PUBDEF</name></cpp:macro> <cpp:value>0x90</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_PUBDEF32</name></cpp:macro> <cpp:value>0x91</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LINNUM</name></cpp:macro> <cpp:value>0x94</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LINNUM32</name></cpp:macro> <cpp:value>0x95</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LNAMES</name></cpp:macro> <cpp:value>0x96</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_SEGDEF</name></cpp:macro> <cpp:value>0x98</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_SEGDEF32</name></cpp:macro> <cpp:value>0x99</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_GRPDEF</name></cpp:macro> <cpp:value>0x9A</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_FIXUPP</name></cpp:macro> <cpp:value>0x9C</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_FIXUPP32</name></cpp:macro> <cpp:value>0x9D</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LEDATA</name></cpp:macro> <cpp:value>0xA0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LEDATA32</name></cpp:macro> <cpp:value>0xA1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LIDATA</name></cpp:macro> <cpp:value>0xA2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LIDATA32</name></cpp:macro> <cpp:value>0xA3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMDEF</name></cpp:macro> <cpp:value>0xB0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_BAKPAT</name></cpp:macro> <cpp:value>0xB2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_BAKPAT32</name></cpp:macro> <cpp:value>0xB3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LEXTDEF</name></cpp:macro> <cpp:value>0xB4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LPUBDEF</name></cpp:macro> <cpp:value>0xB6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LPUBDEF32</name></cpp:macro> <cpp:value>0xB7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LCOMDEF</name></cpp:macro> <cpp:value>0xB8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_CEXTDEF</name></cpp:macro> <cpp:value>0xBC</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMDAT</name></cpp:macro> <cpp:value>0xC2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMDAT32</name></cpp:macro> <cpp:value>0xC3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LINSYM</name></cpp:macro> <cpp:value>0xC4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LINSYM32</name></cpp:macro> <cpp:value>0xC5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_ALIAS</name></cpp:macro> <cpp:value>0xC6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_NBKPAT</name></cpp:macro> <cpp:value>0xC8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_NBKPAT32</name></cpp:macro> <cpp:value>0xC9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_LLNAMES</name></cpp:macro> <cpp:value>0xCA</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_VERNUM</name></cpp:macro> <cpp:value>0xCC</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_VENDEXT</name></cpp:macro> <cpp:value>0xCE</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_EXT</name></cpp:macro> <cpp:value>0xA0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_NEW_EXT</name></cpp:macro> <cpp:value>0xA1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_LINK_SEP</name></cpp:macro> <cpp:value>0xA2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_LIBMOD</name></cpp:macro> <cpp:value>0xA3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_EXESTR</name></cpp:macro> <cpp:value>0xA4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_INCERR</name></cpp:macro> <cpp:value>0xA6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_NOPAD</name></cpp:macro> <cpp:value>0xA7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_WKEXT</name></cpp:macro> <cpp:value>0xA8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_LZEXT</name></cpp:macro> <cpp:value>0xA9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_COMMENT</name></cpp:macro> <cpp:value>0xDA</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_COMPIL</name></cpp:macro> <cpp:value>0xDB</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_DATE</name></cpp:macro> <cpp:value>0xDC</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_TIMESTAMP</name></cpp:macro> <cpp:value>0xDD</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_USER</name></cpp:macro> <cpp:value>0xDF</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_DEP_FILE</name></cpp:macro> <cpp:value>0xE9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_CMD_LINE</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_EXT_IMPDEF</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_EXT_EXPDEF</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_EXT_INCDEF</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_EXT_PMEM_LIB</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_EXT_LNKDIR</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMF_COMENT_EXT_BIG_E</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut8</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>checksum</name></decl>;</decl_stmt>
}</block></struct></type> <name>OMF_record</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
