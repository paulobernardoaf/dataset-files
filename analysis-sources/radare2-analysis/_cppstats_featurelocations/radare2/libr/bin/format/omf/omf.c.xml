<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\omf\omf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omf.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_valid_omf_type</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>types</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>OMF_THEADR</name></expr>, <expr><name>OMF_LHEADR</name></expr>, <expr><name>OMF_COMENT</name></expr>, <expr><name>OMF_MODEND</name></expr>, <expr><name>OMF_MODEND32</name></expr>,
<expr><name>OMF_EXTDEF</name></expr>, <expr><name>OMF_PUBDEF</name></expr>, <expr><name>OMF_PUBDEF32</name></expr>, <expr><name>OMF_LINNUM</name></expr>,
<expr><name>OMF_LINNUM32</name></expr>, <expr><name>OMF_LNAMES</name></expr>, <expr><name>OMF_LNAMES</name></expr>, <expr><name>OMF_SEGDEF</name></expr>,
<expr><name>OMF_SEGDEF32</name></expr>, <expr><name>OMF_GRPDEF</name></expr>, <expr><name>OMF_FIXUPP</name></expr>, <expr><name>OMF_FIXUPP32</name></expr>,
<expr><name>OMF_LEDATA</name></expr>, <expr><name>OMF_LEDATA32</name></expr>, <expr><name>OMF_LIDATA</name></expr>, <expr><name>OMF_LIDATA32</name></expr>,
<expr><name>OMF_COMDEF</name></expr>, <expr><name>OMF_BAKPAT</name></expr>, <expr><name>OMF_BAKPAT32</name></expr>, <expr><name>OMF_LEXTDEF</name></expr>,
<expr><name>OMF_LPUBDEF</name></expr>, <expr><name>OMF_LPUBDEF32</name></expr>, <expr><name>OMF_LCOMDEF</name></expr>, <expr><name>OMF_CEXTDEF</name></expr>,
<expr><name>OMF_COMDAT</name></expr>, <expr><name>OMF_COMDAT32</name></expr>, <expr><name>OMF_LINSYM</name></expr>, <expr><name>OMF_LINSYM32</name></expr>,
<expr><name>OMF_ALIAS</name></expr>, <expr><name>OMF_NBKPAT</name></expr>, <expr><name>OMF_NBKPAT32</name></expr>, <expr><name>OMF_LLNAMES</name></expr>, <expr><name>OMF_VERNUM</name></expr>,
<expr><name>OMF_VENDEXT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>types</name><index>[<expr><name>ct</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ct</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>types</name><index>[<expr><name>ct</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>r_bin_checksum_omf_ok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>checksum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid record (too short)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ut8p_bw</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid record (too short)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><index>[<expr><name>size</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>size</name></expr>;</condition> <incr><expr><name>size</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid record (too short)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>checksum</name> <operator>+=</operator> <name><name>buf</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>checksum</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>!</operator><name>checksum</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>omf_get_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>ut16</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x100</literal> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>*</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_lname</name><parameter_list>(<parameter><decl><type><name>OMF_multi_datas</name> <modifier>*</modifier></type><name>lname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ct</name> <operator>&lt;</operator> <name><name>lname</name><operator>-&gt;</operator><name>nb_elem</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>lname</name><operator>-&gt;</operator><name>elems</name></name><operator>)</operator><index>[<expr><name>ct</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>lname</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>lname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_omf_lnames</name><parameter_list>(<parameter><decl><type><name>OMF_record</name> <modifier>*</modifier></type><name>record</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>tmp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_multi_datas</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>record</name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>OMF_multi_datas</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>tmp_size</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>nb_elem</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>tmp_size</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp_size</name> <operator>+=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>ret</name><operator>-&gt;</operator><name>nb_elem</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>names</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ret</name><operator>-&gt;</operator><name>elems</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>tmp_size</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ct_name</name> <operator>&gt;=</operator> <name><name>ret</name><operator>-&gt;</operator><name>nb_elem</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"load_omf_lnames: prevent overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>cb</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>tmp_size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>names</name><index>[<expr><name>ct_name</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_size</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>tmp_size</name> <operator>+</operator> <name>cb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Lnames record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>names</name><index>[<expr><name>ct_name</name></expr>]</index></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>cb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_lname</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp_size</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>cb</name><operator>)</operator> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>ct_name</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>tmp_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ct_name</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_size</name> <operator>+=</operator> <name>cb</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_omf_segdef</name><parameter_list>(<parameter><decl><type><name>OMF_record</name> <modifier>*</modifier></type><name>record</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OMF_segment</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off_add</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>OMF_segment</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Segdef record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off_add</name> <operator>=</operator> <ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xe</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_SEGDEF32</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>+</operator> <name>off_add</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Segdef record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>name_idx</name></name> <operator>=</operator> <call><name>omf_get_idx</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>off_add</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <name>off_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>UT32_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>off_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>+</operator> <name>off_add</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Segdef record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>name_idx</name></name> <operator>=</operator> <call><name>omf_get_idx</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>off_add</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <literal type="number">6</literal> <operator>-</operator> <name>off_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>UT16_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>off_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">32</literal></expr></then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OMF_SEGDEF</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>omf_count_symb</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>total_size</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>nb_symb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ct</name> <operator>&lt;</operator> <name>total_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <name><name>buf</name><index>[<expr><name>ct</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ct</name> <operator>&gt;</operator> <name>total_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>nb_symb</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>ct</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nb_symb</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>nb_symb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_omf_symb</name><parameter_list>(<parameter><decl><type><name>OMF_record</name> <modifier>*</modifier></type><name>record</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>seg_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>nb_symb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>str_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_symbol</name> <modifier>*</modifier></type><name>symbol</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>nb_symb</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>OMF_multi_datas</name> <operator>*</operator><operator>)</operator><name><name>record</name><operator>-&gt;</operator><name>content</name></name><operator>)</operator><operator>-&gt;</operator><name>nb_elem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OMF_symbol</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>OMF_multi_datas</name> <operator>*</operator><operator>)</operator><name><name>record</name><operator>-&gt;</operator><name>content</name></name><operator>)</operator><operator>-&gt;</operator><name>elems</name><operator>)</operator> <operator>+</operator> <name>nb_symb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>ct</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Pubdef record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str_size</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>ct</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ct</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>str_size</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name><name>record</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Pubdef record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>symbol</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ct</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ct</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>str_size</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name><name>record</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Pubdef record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>symbol</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ct</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>symbol</name><operator>-&gt;</operator><name>seg_idx</name></name> <operator>=</operator> <name>seg_idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>symbol</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>str_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>symbol</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>str_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>symbol</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>ct</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ct</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name>str_size</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ct</name> <operator>&gt;=</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>ct</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nb_symb</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_omf_pubdef</name><parameter_list>(<parameter><decl><type><name>OMF_record</name> <modifier>*</modifier></type><name>record</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OMF_multi_datas</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>seg_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>base_grp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Pubdef record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>base_grp</name> <operator>=</operator> <call><name>omf_get_idx</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ct</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>ct</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>ct</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Pubdef record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seg_idx</name> <operator>=</operator> <call><name>omf_get_idx</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ct</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>ct</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base_grp</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>seg_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>ct</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Pubdef record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>OMF_multi_datas</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>nb_elem</name></name> <operator>=</operator> <call><name>omf_count_symb</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>-&gt;</operator><name>nb_elem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>OMF_symbol</name></expr></argument>, <argument><expr><name><name>ret</name><operator>-&gt;</operator><name>nb_elem</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_omf_symb</name> <argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>seg_idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>nb_elem</name></name> <operator>=</operator> <call><name>omf_count_symb</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>-&gt;</operator><name>nb_elem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>OMF_symbol</name></expr></argument>, <argument><expr><name><name>ret</name><operator>-&gt;</operator><name>nb_elem</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_omf_symb</name> <argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>seg_idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OMF_PUBDEF</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_omf_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>OMF_record</name> <modifier>*</modifier></type><name>record</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>global_ct</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>seg_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>ct</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_data</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Ledata record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>seg_idx</name> <operator>=</operator> <call><name>omf_get_idx</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seg_idx</name> <operator>&amp;</operator> <literal type="number">0xff00</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Ledata record (bad size)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_LEDATA32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>OMF_data</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>ct</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>global_ct</name> <operator>+</operator> <name>ct</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>seg_idx</name></name> <operator>=</operator> <name>seg_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OMF_LEDATA</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>load_omf_content</name><parameter_list>(<parameter><decl><type><name>OMF_record</name> <modifier>*</modifier></type><name>record</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>global_ct</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_LNAMES</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>load_omf_lnames</name> <argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_SEGDEF</name> <operator>||</operator> <name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_SEGDEF32</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>load_omf_segdef</name> <argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_PUBDEF</name> <operator>||</operator> <name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_PUBDEF32</name> <operator>||</operator> <name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_LPUBDEF</name> <operator>||</operator> <name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_LPUBDEF32</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>load_omf_pubdef</name> <argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_LEDATA</name> <operator>||</operator> <name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OMF_LEDATA32</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>load_omf_data</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>record</name></expr></argument>, <argument><expr><name>global_ct</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>record</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid record (size to short)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>record</name><operator>-&gt;</operator><name>content</name></name><operator>)</operator><index>[<expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OMF_record_handler</name> <modifier>*</modifier></type><name>load_record_omf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>global_ct</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>buf_size</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_valid_omf_type</name> <argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>r_bin_checksum_omf_ok</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>OMF_record_handler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>new</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>=</operator> <operator>*</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>new</name><operator>)</operator><operator>-&gt;</operator><name>size</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>new</name><operator>)</operator><operator>-&gt;</operator><name>size</name> <operator>&gt;</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">3</literal> <operator>||</operator> <name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid record (too short)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>load_omf_content</name> <argument_list>(<argument><expr><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>new</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>global_ct</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>new</name><operator>)</operator><operator>-&gt;</operator><name>checksum</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>new</name><operator>)</operator><operator>-&gt;</operator><name>size</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_all_omf_records</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>new_rec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ct</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new_rec</name> <operator>=</operator> <call><name>load_record_omf</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ct</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>ct</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <name>new_rec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>records</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_rec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>count_omf_record_type</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>records</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ct</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>count_omf_multi_record_type</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>records</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>OMF_multi_datas</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name><operator>)</operator><operator>-&gt;</operator><name>nb_elem</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ct</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OMF_record_handler</name> <modifier>*</modifier></type><name>get_next_omf_record_type</name><parameter_list>(<parameter><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>tmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cpy_omf_names</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>records</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_multi_datas</name> <modifier>*</modifier></type><name>lname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ct_obj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ct_rec</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>get_next_omf_record_type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>OMF_LNAMES</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lname</name> <operator>=</operator> <operator>(</operator><name>OMF_multi_datas</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ct_rec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>++</operator><name>ct_rec</name> <operator>&lt;</operator> <name><name>lname</name><operator>-&gt;</operator><name>nb_elem</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>lname</name><operator>-&gt;</operator><name>elems</name></name><operator>)</operator><index>[<expr><name>ct_rec</name></expr>]</index></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>ct_obj</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>ct_obj</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>lname</name><operator>-&gt;</operator><name>elems</name></name><operator>)</operator><index>[<expr><name>ct_rec</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_omf_section_info</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>records</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct_obj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>get_next_omf_record_type</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>OMF_SEGDEF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct_obj</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ct_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct_obj</name></expr>]</index></name><operator>-&gt;</operator><name>vaddr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct_obj</name></expr>]</index></name><operator>-&gt;</operator><name>vaddr</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct_obj</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>vaddr</name> <operator>+</operator>
<name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct_obj</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ct_obj</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_omf_symbol_info</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>records</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_multi_datas</name> <modifier>*</modifier></type><name>symbols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ct_obj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ct_rec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>get_next_omf_record_type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>OMF_PUBDEF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>symbols</name> <operator>=</operator> <operator>(</operator><name>OMF_multi_datas</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ct_rec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>++</operator><name>ct_rec</name> <operator>&lt;</operator> <name><name>symbols</name><operator>-&gt;</operator><name>nb_elem</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_obj</name></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>OMF_symbol</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_obj</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>OMF_symbol</name> <operator>*</operator><operator>)</operator><name><name>symbols</name><operator>-&gt;</operator><name>elems</name></name><operator>)</operator> <operator>+</operator> <name>ct_rec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_obj</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_obj</name></expr>]</index></name><operator>-&gt;</operator><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>OMF_symbol</name> <operator>*</operator><operator>)</operator><name><name>symbols</name><operator>-&gt;</operator><name>elems</name></name><operator>)</operator><index>[<expr><name>ct_rec</name></expr>]</index><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ct_obj</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_omf_data_info</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>records</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_data</name> <modifier>*</modifier></type><name>tmp_data</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>get_next_omf_record_type</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>OMF_LEDATA</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>OMF_data</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name><operator>)</operator><operator>-&gt;</operator><name>seg_idx</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_section</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid Ledata record (bad segment index)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>OMF_segment</name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><operator>(</operator><operator>(</operator><name>OMF_data</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name><operator>)</operator><operator>-&gt;</operator><name>seg_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>os</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmp_data</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>tmp_data</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp_data</name> <operator>=</operator> <name><name>tmp_data</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>tmp_data</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><operator>(</operator><operator>(</operator><name>OMF_data</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name><operator>)</operator><operator>-&gt;</operator><name>seg_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>content</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_omf_infos</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>nb_name</name></name> <operator>=</operator> <call><name>count_omf_multi_record_type</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>OMF_LNAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>nb_name</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>nb_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpy_omf_names</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>nb_section</name></name> <operator>=</operator> <call><name>count_omf_record_type</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>OMF_SEGDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>nb_section</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>sections</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>OMF_segment</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>nb_section</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>get_omf_section_info</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_omf_data_info</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>nb_symbol</name></name> <operator>=</operator> <call><name>count_omf_multi_record_type</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>OMF_PUBDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>nb_symbol</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>OMF_symbol</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>nb_symbol</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_omf_symbol_info</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_pubdef</name><parameter_list>(<parameter><decl><type><name>OMF_multi_datas</name> <modifier>*</modifier></type><name>datas</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
while (ct_rec &lt; datas-&gt;nb_elem) {
R_FREE (((OMF_symbol *)(datas-&gt;elems + ct_rec++))-&gt;name);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>datas</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>datas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_all_omf_records</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_record_handler</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>records</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>rec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>rec</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>OMF_LNAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_lname</name><argument_list>(<argument><expr><operator>(</operator><name>OMF_multi_datas</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>rec</name><operator>)</operator><operator>-&gt;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>rec</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>OMF_PUBDEF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_pubdef</name><argument_list>(<argument><expr><operator>(</operator><name>OMF_multi_datas</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>rec</name><operator>)</operator><operator>-&gt;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>OMF_record</name> <operator>*</operator><operator>)</operator><name>rec</name><operator>)</operator><operator>-&gt;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_all_omf_sections</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_data</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ct</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_section</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct</name></expr>]</index></name><operator>-&gt;</operator><name>data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_all_omf_symbols</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ct</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_symbol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_all_omf_names</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ct</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>ct</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_bin_free_all_omf_obj</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>records</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_all_omf_records</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_all_omf_sections</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_all_omf_symbols</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_all_omf_names</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>r_bin_internal_omf_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>r_bin_omf_obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_all_omf_records</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_free_all_omf_obj</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>get_omf_infos</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_bin_free_all_omf_obj</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free_all_omf_records</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>r_bin_omf_get_entry</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct_sym</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_data</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>ct_sym</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_symbol</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_sym</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"_start"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_sym</name></expr>]</index></name><operator>-&gt;</operator><name>seg_idx</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_section</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid segment index for symbol _start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_sym</name></expr>]</index></name><operator>-&gt;</operator><name>seg_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>vaddr</name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_sym</name></expr>]</index></name><operator>-&gt;</operator><name>offset</name> <operator>+</operator> <name>OMF_BASE_ADDR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_sym</name></expr>]</index></name><operator>-&gt;</operator><name>seg_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_sym</name></expr>]</index></name><operator>-&gt;</operator><name>offset</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>ct_sym</name></expr>]</index></name><operator>-&gt;</operator><name>offset</name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ct_sym</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>r_bin_omf_get_bits</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct_sec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">32</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>ct_sec</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_section</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>ct_sec</name><operator>++</operator></expr>]</index></name><operator>-&gt;</operator><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">32</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>r_bin_omf_send_sections</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>OMF_segment</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMF_data</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>section</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>ct_name</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>name_idx</name></name> <operator>&amp;&amp;</operator> <name><name>section</name><operator>-&gt;</operator><name>name_idx</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s_%d"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>names</name><index>[<expr><name><name>section</name><operator>-&gt;</operator><name>name_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ct_name</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"no_name_%d"</literal></expr></argument>, <argument><expr><name>ct_name</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>OMF_BASE_ADDR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RWX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ut64</name></type> <name>r_bin_omf_get_paddr_sym</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>OMF_symbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>sections</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>seg_idx</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_section</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sidx</name> <init>= <expr><name><name>sym</name><operator>-&gt;</operator><name>seg_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sidx</name> <operator>&gt;=</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_section</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>OMF_data</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>sidx</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>sym</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ut64</name></type> <name>r_bin_omf_get_vaddr_sym</name><parameter_list>(<parameter><decl><type><name>r_bin_omf_obj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>OMF_symbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>sections</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0LL</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>seg_idx</name></name> <operator>&gt;=</operator> <name><name>obj</name><operator>-&gt;</operator><name>nb_section</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid segment index for symbol %s\n"</literal></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>seg_idx</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name><name>sym</name><operator>-&gt;</operator><name>seg_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>vaddr</name> <operator>+</operator> <name><name>sym</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>OMF_BASE_ADDR</name></expr>;</return>
</block_content>}</block></function>
</unit>
