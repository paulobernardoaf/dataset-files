<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\mach0\mach0_defines.h">















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_SUPPORT_MACHO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_SUPPORT_MACHO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>


<enum>enum <block>{


<decl><name>MH_MAGIC</name> <init>= <expr><literal type="number">0xFEEDFACEu</literal></expr></init></decl>,
<decl><name>MH_CIGAM</name> <init>= <expr><literal type="number">0xCEFAEDFEu</literal></expr></init></decl>,
<decl><name>MH_MAGIC_64</name> <init>= <expr><literal type="number">0xFEEDFACFu</literal></expr></init></decl>,
<decl><name>MH_CIGAM_64</name> <init>= <expr><literal type="number">0xCFFAEDFEu</literal></expr></init></decl>,
<decl><name>FAT_MAGIC</name> <init>= <expr><literal type="number">0xCAFEBABEu</literal></expr></init></decl>,
<decl><name>FAT_CIGAM</name> <init>= <expr><literal type="number">0xBEBAFECAu</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>HeaderFileType</name> <block>{


<decl><name>MH_OBJECT</name> <init>= <expr><literal type="number">0x1u</literal></expr></init></decl>,
<decl><name>MH_EXECUTE</name> <init>= <expr><literal type="number">0x2u</literal></expr></init></decl>,
<decl><name>MH_FVMLIB</name> <init>= <expr><literal type="number">0x3u</literal></expr></init></decl>,
<decl><name>MH_CORE</name> <init>= <expr><literal type="number">0x4u</literal></expr></init></decl>,
<decl><name>MH_PRELOAD</name> <init>= <expr><literal type="number">0x5u</literal></expr></init></decl>,
<decl><name>MH_DYLIB</name> <init>= <expr><literal type="number">0x6u</literal></expr></init></decl>,
<decl><name>MH_DYLINKER</name> <init>= <expr><literal type="number">0x7u</literal></expr></init></decl>,
<decl><name>MH_BUNDLE</name> <init>= <expr><literal type="number">0x8u</literal></expr></init></decl>,
<decl><name>MH_DYLIB_STUB</name> <init>= <expr><literal type="number">0x9u</literal></expr></init></decl>,
<decl><name>MH_DSYM</name> <init>= <expr><literal type="number">0xAu</literal></expr></init></decl>,
<decl><name>MH_KEXT_BUNDLE</name> <init>= <expr><literal type="number">0xBu</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{


<decl><name>MH_NOUNDEFS</name> <init>= <expr><literal type="number">0x00000001u</literal></expr></init></decl>,
<decl><name>MH_INCRLINK</name> <init>= <expr><literal type="number">0x00000002u</literal></expr></init></decl>,
<decl><name>MH_DYLDLINK</name> <init>= <expr><literal type="number">0x00000004u</literal></expr></init></decl>,
<decl><name>MH_BINDATLOAD</name> <init>= <expr><literal type="number">0x00000008u</literal></expr></init></decl>,
<decl><name>MH_PREBOUND</name> <init>= <expr><literal type="number">0x00000010u</literal></expr></init></decl>,
<decl><name>MH_SPLIT_SEGS</name> <init>= <expr><literal type="number">0x00000020u</literal></expr></init></decl>,
<decl><name>MH_LAZY_INIT</name> <init>= <expr><literal type="number">0x00000040u</literal></expr></init></decl>,
<decl><name>MH_TWOLEVEL</name> <init>= <expr><literal type="number">0x00000080u</literal></expr></init></decl>,
<decl><name>MH_FORCE_FLAT</name> <init>= <expr><literal type="number">0x00000100u</literal></expr></init></decl>,
<decl><name>MH_NOMULTIDEFS</name> <init>= <expr><literal type="number">0x00000200u</literal></expr></init></decl>,
<decl><name>MH_NOFIXPREBINDING</name> <init>= <expr><literal type="number">0x00000400u</literal></expr></init></decl>,
<decl><name>MH_PREBINDABLE</name> <init>= <expr><literal type="number">0x00000800u</literal></expr></init></decl>,
<decl><name>MH_ALLMODSBOUND</name> <init>= <expr><literal type="number">0x00001000u</literal></expr></init></decl>,
<decl><name>MH_SUBSECTIONS_VIA_SYMBOLS</name> <init>= <expr><literal type="number">0x00002000u</literal></expr></init></decl>,
<decl><name>MH_CANONICAL</name> <init>= <expr><literal type="number">0x00004000u</literal></expr></init></decl>,
<decl><name>MH_WEAK_DEFINES</name> <init>= <expr><literal type="number">0x00008000u</literal></expr></init></decl>,
<decl><name>MH_BINDS_TO_WEAK</name> <init>= <expr><literal type="number">0x00010000u</literal></expr></init></decl>,
<decl><name>MH_ALLOW_STACK_EXECUTION</name> <init>= <expr><literal type="number">0x00020000u</literal></expr></init></decl>,
<decl><name>MH_ROOT_SAFE</name> <init>= <expr><literal type="number">0x00040000u</literal></expr></init></decl>,
<decl><name>MH_SETUID_SAFE</name> <init>= <expr><literal type="number">0x00080000u</literal></expr></init></decl>,
<decl><name>MH_NO_REEXPORTED_DYLIBS</name> <init>= <expr><literal type="number">0x00100000u</literal></expr></init></decl>,
<decl><name>MH_PIE</name> <init>= <expr><literal type="number">0x00200000u</literal></expr></init></decl>,
<decl><name>MH_DEAD_STRIPPABLE_DYLIB</name> <init>= <expr><literal type="number">0x00400000u</literal></expr></init></decl>,
<decl><name>MH_HAS_TLV_DESCRIPTORS</name> <init>= <expr><literal type="number">0x00800000u</literal></expr></init></decl>,
<decl><name>MH_NO_HEAP_EXECUTION</name> <init>= <expr><literal type="number">0x01000000u</literal></expr></init></decl>,
<decl><name>MH_APP_EXTENSION_SAFE</name> <init>= <expr><literal type="number">0x02000000u</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{

<decl><name>LC_REQ_DYLD</name> <init>= <expr><literal type="number">0x80000000u</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>LoadCommandType</name> <block>{

<decl><name>LC_SEGMENT</name> <init>= <expr><literal type="number">0x00000001u</literal></expr></init></decl>,
<decl><name>LC_SYMTAB</name> <init>= <expr><literal type="number">0x00000002u</literal></expr></init></decl>,
<decl><name>LC_SYMSEG</name> <init>= <expr><literal type="number">0x00000003u</literal></expr></init></decl>,
<decl><name>LC_THREAD</name> <init>= <expr><literal type="number">0x00000004u</literal></expr></init></decl>,
<decl><name>LC_UNIXTHREAD</name> <init>= <expr><literal type="number">0x00000005u</literal></expr></init></decl>,
<decl><name>LC_LOADFVMLIB</name> <init>= <expr><literal type="number">0x00000006u</literal></expr></init></decl>,
<decl><name>LC_IDFVMLIB</name> <init>= <expr><literal type="number">0x00000007u</literal></expr></init></decl>,
<decl><name>LC_IDENT</name> <init>= <expr><literal type="number">0x00000008u</literal></expr></init></decl>,
<decl><name>LC_FVMFILE</name> <init>= <expr><literal type="number">0x00000009u</literal></expr></init></decl>,
<decl><name>LC_PREPAGE</name> <init>= <expr><literal type="number">0x0000000Au</literal></expr></init></decl>,
<decl><name>LC_DYSYMTAB</name> <init>= <expr><literal type="number">0x0000000Bu</literal></expr></init></decl>,
<decl><name>LC_LOAD_DYLIB</name> <init>= <expr><literal type="number">0x0000000Cu</literal></expr></init></decl>,
<decl><name>LC_ID_DYLIB</name> <init>= <expr><literal type="number">0x0000000Du</literal></expr></init></decl>,
<decl><name>LC_LOAD_DYLINKER</name> <init>= <expr><literal type="number">0x0000000Eu</literal></expr></init></decl>,
<decl><name>LC_ID_DYLINKER</name> <init>= <expr><literal type="number">0x0000000Fu</literal></expr></init></decl>,
<decl><name>LC_PREBOUND_DYLIB</name> <init>= <expr><literal type="number">0x00000010u</literal></expr></init></decl>,
<decl><name>LC_ROUTINES</name> <init>= <expr><literal type="number">0x00000011u</literal></expr></init></decl>,
<decl><name>LC_SUB_FRAMEWORK</name> <init>= <expr><literal type="number">0x00000012u</literal></expr></init></decl>,
<decl><name>LC_SUB_UMBRELLA</name> <init>= <expr><literal type="number">0x00000013u</literal></expr></init></decl>,
<decl><name>LC_SUB_CLIENT</name> <init>= <expr><literal type="number">0x00000014u</literal></expr></init></decl>,
<decl><name>LC_SUB_LIBRARY</name> <init>= <expr><literal type="number">0x00000015u</literal></expr></init></decl>,
<decl><name>LC_TWOLEVEL_HINTS</name> <init>= <expr><literal type="number">0x00000016u</literal></expr></init></decl>,
<decl><name>LC_PREBIND_CKSUM</name> <init>= <expr><literal type="number">0x00000017u</literal></expr></init></decl>,
<decl><name>LC_LOAD_WEAK_DYLIB</name> <init>= <expr><literal type="number">0x80000018u</literal></expr></init></decl>,
<decl><name>LC_SEGMENT_64</name> <init>= <expr><literal type="number">0x00000019u</literal></expr></init></decl>,
<decl><name>LC_ROUTINES_64</name> <init>= <expr><literal type="number">0x0000001Au</literal></expr></init></decl>,
<decl><name>LC_UUID</name> <init>= <expr><literal type="number">0x0000001Bu</literal></expr></init></decl>,
<decl><name>LC_RPATH</name> <init>= <expr><literal type="number">0x8000001Cu</literal></expr></init></decl>,
<decl><name>LC_CODE_SIGNATURE</name> <init>= <expr><literal type="number">0x0000001Du</literal></expr></init></decl>,
<decl><name>LC_SEGMENT_SPLIT_INFO</name> <init>= <expr><literal type="number">0x0000001Eu</literal></expr></init></decl>,
<decl><name>LC_REEXPORT_DYLIB</name> <init>= <expr><literal type="number">0x8000001Fu</literal></expr></init></decl>,
<decl><name>LC_LAZY_LOAD_DYLIB</name> <init>= <expr><literal type="number">0x00000020u</literal></expr></init></decl>,
<decl><name>LC_ENCRYPTION_INFO</name> <init>= <expr><literal type="number">0x00000021u</literal></expr></init></decl>,
<decl><name>LC_DYLD_INFO</name> <init>= <expr><literal type="number">0x00000022u</literal></expr></init></decl>,
<decl><name>LC_DYLD_INFO_ONLY</name> <init>= <expr><literal type="number">0x80000022u</literal></expr></init></decl>,
<decl><name>LC_LOAD_UPWARD_DYLIB</name> <init>= <expr><literal type="number">0x80000023u</literal></expr></init></decl>,
<decl><name>LC_VERSION_MIN_MACOSX</name> <init>= <expr><literal type="number">0x00000024u</literal></expr></init></decl>,
<decl><name>LC_VERSION_MIN_IPHONEOS</name> <init>= <expr><literal type="number">0x00000025u</literal></expr></init></decl>,
<decl><name>LC_FUNCTION_STARTS</name> <init>= <expr><literal type="number">0x00000026u</literal></expr></init></decl>,
<decl><name>LC_DYLD_ENVIRONMENT</name> <init>= <expr><literal type="number">0x00000027u</literal></expr></init></decl>,
<decl><name>LC_MAIN</name> <init>= <expr><literal type="number">0x80000028u</literal></expr></init></decl>,
<decl><name>LC_DATA_IN_CODE</name> <init>= <expr><literal type="number">0x00000029u</literal></expr></init></decl>,
<decl><name>LC_SOURCE_VERSION</name> <init>= <expr><literal type="number">0x0000002Au</literal></expr></init></decl>,
<decl><name>LC_DYLIB_CODE_SIGN_DRS</name> <init>= <expr><literal type="number">0x0000002Bu</literal></expr></init></decl>,
<decl><name>LC_ENCRYPTION_INFO_64</name> <init>= <expr><literal type="number">0x0000002Cu</literal></expr></init></decl>,
<decl><name>LC_LINKER_OPTION</name> <init>= <expr><literal type="number">0x0000002Du</literal></expr></init></decl>,
<decl><name>LC_LINKER_OPTIMIZATION_HINT</name> <init>= <expr><literal type="number">0x0000002Eu</literal></expr></init></decl>,
<decl><name>LC_VERSION_MIN_TVOS</name> <init>= <expr><literal type="number">0x0000002Fu</literal></expr></init></decl>,
<decl><name>LC_VERSION_MIN_WATCHOS</name> <init>= <expr><literal type="number">0x00000030u</literal></expr></init></decl>,
<decl><name>LC_NOTE</name> <init>= <expr><literal type="number">0x00000031u</literal></expr></init></decl>,
<decl><name>LC_BUILD_VERSION</name> <init>= <expr><literal type="number">0x00000032u</literal></expr></init></decl>











}</block>;</enum>

<enum>enum <block>{

<decl><name>SG_HIGHVM</name> <init>= <expr><literal type="number">0x1u</literal></expr></init></decl>,
<decl><name>SG_FVMLIB</name> <init>= <expr><literal type="number">0x2u</literal></expr></init></decl>,
<decl><name>SG_NORELOC</name> <init>= <expr><literal type="number">0x4u</literal></expr></init></decl>,
<decl><name>SG_PROTECTED_VERSION_1</name> <init>= <expr><literal type="number">0x8u</literal></expr></init></decl>,




<decl><name>SECTION_TYPE</name> <init>= <expr><literal type="number">0x000000ffu</literal></expr></init></decl>, 
<decl><name>SECTION_ATTRIBUTES</name> <init>= <expr><literal type="number">0xffffff00u</literal></expr></init></decl>, 
<decl><name>SECTION_ATTRIBUTES_USR</name> <init>= <expr><literal type="number">0xff000000u</literal></expr></init></decl>, 
<decl><name>SECTION_ATTRIBUTES_SYS</name> <init>= <expr><literal type="number">0x00ffff00u</literal></expr></init></decl> 
}</block>;</enum>



<enum>enum <name>SectionType</name> <block>{




<decl><name>S_REGULAR</name> <init>= <expr><literal type="number">0x00u</literal></expr></init></decl>,

<decl><name>S_ZEROFILL</name> <init>= <expr><literal type="number">0x01u</literal></expr></init></decl>,

<decl><name>S_CSTRING_LITERALS</name> <init>= <expr><literal type="number">0x02u</literal></expr></init></decl>,

<decl><name>S_4BYTE_LITERALS</name> <init>= <expr><literal type="number">0x03u</literal></expr></init></decl>,

<decl><name>S_8BYTE_LITERALS</name> <init>= <expr><literal type="number">0x04u</literal></expr></init></decl>,

<decl><name>S_LITERAL_POINTERS</name> <init>= <expr><literal type="number">0x05u</literal></expr></init></decl>,

<decl><name>S_NON_LAZY_SYMBOL_POINTERS</name> <init>= <expr><literal type="number">0x06u</literal></expr></init></decl>,

<decl><name>S_LAZY_SYMBOL_POINTERS</name> <init>= <expr><literal type="number">0x07u</literal></expr></init></decl>,


<decl><name>S_SYMBOL_STUBS</name> <init>= <expr><literal type="number">0x08u</literal></expr></init></decl>,


<decl><name>S_MOD_INIT_FUNC_POINTERS</name> <init>= <expr><literal type="number">0x09u</literal></expr></init></decl>,


<decl><name>S_MOD_TERM_FUNC_POINTERS</name> <init>= <expr><literal type="number">0x0au</literal></expr></init></decl>,

<decl><name>S_COALESCED</name> <init>= <expr><literal type="number">0x0bu</literal></expr></init></decl>,


<decl><name>S_GB_ZEROFILL</name> <init>= <expr><literal type="number">0x0cu</literal></expr></init></decl>,


<decl><name>S_INTERPOSING</name> <init>= <expr><literal type="number">0x0du</literal></expr></init></decl>,

<decl><name>S_16BYTE_LITERALS</name> <init>= <expr><literal type="number">0x0eu</literal></expr></init></decl>,

<decl><name>S_DTRACE_DOF</name> <init>= <expr><literal type="number">0x0fu</literal></expr></init></decl>,


<decl><name>S_LAZY_DYLIB_SYMBOL_POINTERS</name> <init>= <expr><literal type="number">0x10u</literal></expr></init></decl>,

<decl><name>S_THREAD_LOCAL_REGULAR</name> <init>= <expr><literal type="number">0x11u</literal></expr></init></decl>,

<decl><name>S_THREAD_LOCAL_ZEROFILL</name> <init>= <expr><literal type="number">0x12u</literal></expr></init></decl>,


<decl><name>S_THREAD_LOCAL_VARIABLES</name> <init>= <expr><literal type="number">0x13u</literal></expr></init></decl>,


<decl><name>S_THREAD_LOCAL_VARIABLE_POINTERS</name> <init>= <expr><literal type="number">0x14u</literal></expr></init></decl>,


<decl><name>S_THREAD_LOCAL_INIT_FUNCTION_POINTERS</name> <init>= <expr><literal type="number">0x15u</literal></expr></init></decl>,

<decl><name>LAST_KNOWN_SECTION_TYPE</name> <init>= <expr><name>S_THREAD_LOCAL_INIT_FUNCTION_POINTERS</name></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{





<decl><name>S_ATTR_PURE_INSTRUCTIONS</name> <init>= <expr><literal type="number">0x80000000u</literal></expr></init></decl>,


<decl><name>S_ATTR_NO_TOC</name> <init>= <expr><literal type="number">0x40000000u</literal></expr></init></decl>,


<decl><name>S_ATTR_STRIP_STATIC_SYMS</name> <init>= <expr><literal type="number">0x20000000u</literal></expr></init></decl>,

<decl><name>S_ATTR_NO_DEAD_STRIP</name> <init>= <expr><literal type="number">0x10000000u</literal></expr></init></decl>,

<decl><name>S_ATTR_LIVE_SUPPORT</name> <init>= <expr><literal type="number">0x08000000u</literal></expr></init></decl>,


<decl><name>S_ATTR_SELF_MODIFYING_CODE</name> <init>= <expr><literal type="number">0x04000000u</literal></expr></init></decl>,

<decl><name>S_ATTR_DEBUG</name> <init>= <expr><literal type="number">0x02000000u</literal></expr></init></decl>,





<decl><name>S_ATTR_SOME_INSTRUCTIONS</name> <init>= <expr><literal type="number">0x00000400u</literal></expr></init></decl>,

<decl><name>S_ATTR_EXT_RELOC</name> <init>= <expr><literal type="number">0x00000200u</literal></expr></init></decl>,

<decl><name>S_ATTR_LOC_RELOC</name> <init>= <expr><literal type="number">0x00000100u</literal></expr></init></decl>,



<decl><name>INDIRECT_SYMBOL_LOCAL</name> <init>= <expr><literal type="number">0x80000000u</literal></expr></init></decl>,
<decl><name>INDIRECT_SYMBOL_ABS</name> <init>= <expr><literal type="number">0x40000000u</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>DataRegionType</name> <block>{

<decl><name>DICE_KIND_DATA</name> <init>= <expr><literal type="number">1u</literal></expr></init></decl>,
<decl><name>DICE_KIND_JUMP_TABLE8</name> <init>= <expr><literal type="number">2u</literal></expr></init></decl>,
<decl><name>DICE_KIND_JUMP_TABLE16</name> <init>= <expr><literal type="number">3u</literal></expr></init></decl>,
<decl><name>DICE_KIND_JUMP_TABLE32</name> <init>= <expr><literal type="number">4u</literal></expr></init></decl>,
<decl><name>DICE_KIND_ABS_JUMP_TABLE32</name> <init>= <expr><literal type="number">5u</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>RebaseType</name> <block>{
<decl><name>REBASE_TYPE_POINTER</name> <init>= <expr><literal type="number">1u</literal></expr></init></decl>,
<decl><name>REBASE_TYPE_TEXT_ABSOLUTE32</name> <init>= <expr><literal type="number">2u</literal></expr></init></decl>,
<decl><name>REBASE_TYPE_TEXT_PCREL32</name> <init>= <expr><literal type="number">3u</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>REBASE_OPCODE_MASK</name> <init>= <expr><literal type="number">0xF0u</literal></expr></init></decl>,
<decl><name>REBASE_IMMEDIATE_MASK</name> <init>= <expr><literal type="number">0x0Fu</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>RebaseOpcode</name> <block>{
<decl><name>REBASE_OPCODE_DONE</name> <init>= <expr><literal type="number">0x00u</literal></expr></init></decl>,
<decl><name>REBASE_OPCODE_SET_TYPE_IMM</name> <init>= <expr><literal type="number">0x10u</literal></expr></init></decl>,
<decl><name>REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB</name> <init>= <expr><literal type="number">0x20u</literal></expr></init></decl>,
<decl><name>REBASE_OPCODE_ADD_ADDR_ULEB</name> <init>= <expr><literal type="number">0x30u</literal></expr></init></decl>,
<decl><name>REBASE_OPCODE_ADD_ADDR_IMM_SCALED</name> <init>= <expr><literal type="number">0x40u</literal></expr></init></decl>,
<decl><name>REBASE_OPCODE_DO_REBASE_IMM_TIMES</name> <init>= <expr><literal type="number">0x50u</literal></expr></init></decl>,
<decl><name>REBASE_OPCODE_DO_REBASE_ULEB_TIMES</name> <init>= <expr><literal type="number">0x60u</literal></expr></init></decl>,
<decl><name>REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB</name> <init>= <expr><literal type="number">0x70u</literal></expr></init></decl>,
<decl><name>REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB</name> <init>= <expr><literal type="number">0x80u</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>BindType</name> <block>{
<decl><name>BIND_TYPE_POINTER</name> <init>= <expr><literal type="number">1u</literal></expr></init></decl>,
<decl><name>BIND_TYPE_TEXT_ABSOLUTE32</name> <init>= <expr><literal type="number">2u</literal></expr></init></decl>,
<decl><name>BIND_TYPE_TEXT_PCREL32</name> <init>= <expr><literal type="number">3u</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>BindSpecialDylib</name> <block>{
<decl><name>BIND_SPECIAL_DYLIB_SELF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>BIND_SPECIAL_DYLIB_FLAT_LOOKUP</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>BIND_SYMBOL_FLAGS_WEAK_IMPORT</name> <init>= <expr><literal type="number">0x1u</literal></expr></init></decl>,
<decl><name>BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION</name> <init>= <expr><literal type="number">0x8u</literal></expr></init></decl>,

<decl><name>BIND_OPCODE_MASK</name> <init>= <expr><literal type="number">0xF0u</literal></expr></init></decl>,
<decl><name>BIND_IMMEDIATE_MASK</name> <init>= <expr><literal type="number">0x0Fu</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>BindOpcode</name> <block>{
<decl><name>BIND_OPCODE_DONE</name> <init>= <expr><literal type="number">0x00u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_SET_DYLIB_ORDINAL_IMM</name> <init>= <expr><literal type="number">0x10u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB</name> <init>= <expr><literal type="number">0x20u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_SET_DYLIB_SPECIAL_IMM</name> <init>= <expr><literal type="number">0x30u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM</name> <init>= <expr><literal type="number">0x40u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_SET_TYPE_IMM</name> <init>= <expr><literal type="number">0x50u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_SET_ADDEND_SLEB</name> <init>= <expr><literal type="number">0x60u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB</name> <init>= <expr><literal type="number">0x70u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_ADD_ADDR_ULEB</name> <init>= <expr><literal type="number">0x80u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_DO_BIND</name> <init>= <expr><literal type="number">0x90u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB</name> <init>= <expr><literal type="number">0xA0u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED</name> <init>= <expr><literal type="number">0xB0u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB</name> <init>= <expr><literal type="number">0xC0u</literal></expr></init></decl>,
<decl><name>BIND_OPCODE_THREADED</name> <init>= <expr><literal type="number">0xD0u</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>BindSubOpcode</name> <block>{
<decl><name>BIND_SUBOPCODE_THREADED_SET_BIND_ORDINAL_TABLE_SIZE_ULEB</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>BIND_SUBOPCODE_THREADED_APPLY</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>EXPORT_SYMBOL_FLAGS_KIND_MASK</name> <init>= <expr><literal type="number">0x03u</literal></expr></init></decl>,
<decl><name>EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION</name> <init>= <expr><literal type="number">0x04u</literal></expr></init></decl>,
<decl><name>EXPORT_SYMBOL_FLAGS_REEXPORT</name> <init>= <expr><literal type="number">0x08u</literal></expr></init></decl>,
<decl><name>EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER</name> <init>= <expr><literal type="number">0x10u</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>ExportSymbolKind</name> <block>{
<decl><name>EXPORT_SYMBOL_FLAGS_KIND_REGULAR</name> <init>= <expr><literal type="number">0x00u</literal></expr></init></decl>,
<decl><name>EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL</name> <init>= <expr><literal type="number">0x01u</literal></expr></init></decl>,
<decl><name>EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE</name> <init>= <expr><literal type="number">0x02u</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <block>{


<decl><name>N_STAB</name> <init>= <expr><literal type="number">0xe0</literal></expr></init></decl>,
<decl><name>N_PEXT</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>N_TYPE</name> <init>= <expr><literal type="number">0x0e</literal></expr></init></decl>,
<decl><name>N_EXT</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>NListType</name> <block>{


<decl><name>N_UNDF</name> <init>= <expr><literal type="number">0x0u</literal></expr></init></decl>,
<decl><name>N_ABS</name> <init>= <expr><literal type="number">0x2u</literal></expr></init></decl>,
<decl><name>N_SECT</name> <init>= <expr><literal type="number">0xeu</literal></expr></init></decl>,
<decl><name>N_PBUD</name> <init>= <expr><literal type="number">0xcu</literal></expr></init></decl>,
<decl><name>N_INDR</name> <init>= <expr><literal type="number">0xau</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>SectionOrdinal</name> <block>{


<decl><name>NO_SECT</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>,
<decl><name>MAX_SECT</name> <init>= <expr><literal type="number">0xffu</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{



<decl><name>REFERENCE_TYPE</name> <init>= <expr><literal type="number">0x7</literal></expr></init></decl>,
<decl><name>REFERENCE_FLAG_UNDEFINED_NON_LAZY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>REFERENCE_FLAG_UNDEFINED_LAZY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>REFERENCE_FLAG_DEFINED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>REFERENCE_FLAG_PRIVATE_DEFINED</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>N_ARM_THUMB_DEF</name> <init>= <expr><literal type="number">0x0008u</literal></expr></init></decl>,
<decl><name>REFERENCED_DYNAMICALLY</name> <init>= <expr><literal type="number">0x0010u</literal></expr></init></decl>,
<decl><name>N_NO_DEAD_STRIP</name> <init>= <expr><literal type="number">0x0020u</literal></expr></init></decl>,
<decl><name>N_WEAK_REF</name> <init>= <expr><literal type="number">0x0040u</literal></expr></init></decl>,
<decl><name>N_WEAK_DEF</name> <init>= <expr><literal type="number">0x0080u</literal></expr></init></decl>,
<decl><name>N_SYMBOL_RESOLVER</name> <init>= <expr><literal type="number">0x0100u</literal></expr></init></decl>,
<decl><name>N_ALT_ENTRY</name> <init>= <expr><literal type="number">0x0200u</literal></expr></init></decl>,


<decl><name>SELF_LIBRARY_ORDINAL</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,
<decl><name>MAX_LIBRARY_ORDINAL</name> <init>= <expr><literal type="number">0xfd</literal></expr></init></decl>,
<decl><name>DYNAMIC_LOOKUP_ORDINAL</name> <init>= <expr><literal type="number">0xfe</literal></expr></init></decl>,
<decl><name>EXECUTABLE_ORDINAL</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>StabType</name> <block>{


<decl><name>N_GSYM</name> <init>= <expr><literal type="number">0x20u</literal></expr></init></decl>,
<decl><name>N_FNAME</name> <init>= <expr><literal type="number">0x22u</literal></expr></init></decl>,
<decl><name>N_FUN</name> <init>= <expr><literal type="number">0x24u</literal></expr></init></decl>,
<decl><name>N_STSYM</name> <init>= <expr><literal type="number">0x26u</literal></expr></init></decl>,
<decl><name>N_LCSYM</name> <init>= <expr><literal type="number">0x28u</literal></expr></init></decl>,
<decl><name>N_BNSYM</name> <init>= <expr><literal type="number">0x2Eu</literal></expr></init></decl>,
<decl><name>N_PC</name> <init>= <expr><literal type="number">0x30u</literal></expr></init></decl>,
<decl><name>N_AST</name> <init>= <expr><literal type="number">0x32u</literal></expr></init></decl>,
<decl><name>N_OPT</name> <init>= <expr><literal type="number">0x3Cu</literal></expr></init></decl>,
<decl><name>N_RSYM</name> <init>= <expr><literal type="number">0x40u</literal></expr></init></decl>,
<decl><name>N_SLINE</name> <init>= <expr><literal type="number">0x44u</literal></expr></init></decl>,
<decl><name>N_ENSYM</name> <init>= <expr><literal type="number">0x4Eu</literal></expr></init></decl>,
<decl><name>N_SSYM</name> <init>= <expr><literal type="number">0x60u</literal></expr></init></decl>,
<decl><name>N_SO</name> <init>= <expr><literal type="number">0x64u</literal></expr></init></decl>,
<decl><name>N_OSO</name> <init>= <expr><literal type="number">0x66u</literal></expr></init></decl>,
<decl><name>N_LSYM</name> <init>= <expr><literal type="number">0x80u</literal></expr></init></decl>,
<decl><name>N_BINCL</name> <init>= <expr><literal type="number">0x82u</literal></expr></init></decl>,
<decl><name>N_SOL</name> <init>= <expr><literal type="number">0x84u</literal></expr></init></decl>,
<decl><name>N_PARAMS</name> <init>= <expr><literal type="number">0x86u</literal></expr></init></decl>,
<decl><name>N_VERSION</name> <init>= <expr><literal type="number">0x88u</literal></expr></init></decl>,
<decl><name>N_OLEVEL</name> <init>= <expr><literal type="number">0x8Au</literal></expr></init></decl>,
<decl><name>N_PSYM</name> <init>= <expr><literal type="number">0xA0u</literal></expr></init></decl>,
<decl><name>N_EINCL</name> <init>= <expr><literal type="number">0xA2u</literal></expr></init></decl>,
<decl><name>N_ENTRY</name> <init>= <expr><literal type="number">0xA4u</literal></expr></init></decl>,
<decl><name>N_LBRAC</name> <init>= <expr><literal type="number">0xC0u</literal></expr></init></decl>,
<decl><name>N_EXCL</name> <init>= <expr><literal type="number">0xC2u</literal></expr></init></decl>,
<decl><name>N_RBRAC</name> <init>= <expr><literal type="number">0xE0u</literal></expr></init></decl>,
<decl><name>N_BCOMM</name> <init>= <expr><literal type="number">0xE2u</literal></expr></init></decl>,
<decl><name>N_ECOMM</name> <init>= <expr><literal type="number">0xE4u</literal></expr></init></decl>,
<decl><name>N_ECOML</name> <init>= <expr><literal type="number">0xE8u</literal></expr></init></decl>,
<decl><name>N_LENG</name> <init>= <expr><literal type="number">0xFEu</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{


<decl><name>R_ABS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,



<decl><name>R_SCATTERED</name> <init>= <expr><literal type="number">0x80000000</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>RelocationInfoType</name> <block>{



<decl><name>GENERIC_RELOC_VANILLA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>GENERIC_RELOC_PAIR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>GENERIC_RELOC_SECTDIFF</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>GENERIC_RELOC_PB_LA_PTR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>GENERIC_RELOC_LOCAL_SECTDIFF</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>GENERIC_RELOC_TLV</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,




<decl><name>PPC_RELOC_VANILLA</name> <init>= <expr><name>GENERIC_RELOC_VANILLA</name></expr></init></decl>,
<decl><name>PPC_RELOC_PAIR</name> <init>= <expr><name>GENERIC_RELOC_PAIR</name></expr></init></decl>,
<decl><name>PPC_RELOC_BR14</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>PPC_RELOC_BR24</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>PPC_RELOC_HI16</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>PPC_RELOC_LO16</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>PPC_RELOC_HA16</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>PPC_RELOC_LO14</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>PPC_RELOC_SECTDIFF</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>PPC_RELOC_PB_LA_PTR</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>PPC_RELOC_HI16_SECTDIFF</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>PPC_RELOC_LO16_SECTDIFF</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>PPC_RELOC_HA16_SECTDIFF</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>PPC_RELOC_JBSR</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>PPC_RELOC_LO14_SECTDIFF</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>PPC_RELOC_LOCAL_SECTDIFF</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,




<decl><name>ARM_RELOC_VANILLA</name> <init>= <expr><name>GENERIC_RELOC_VANILLA</name></expr></init></decl>,
<decl><name>ARM_RELOC_PAIR</name> <init>= <expr><name>GENERIC_RELOC_PAIR</name></expr></init></decl>,
<decl><name>ARM_RELOC_SECTDIFF</name> <init>= <expr><name>GENERIC_RELOC_SECTDIFF</name></expr></init></decl>,
<decl><name>ARM_RELOC_LOCAL_SECTDIFF</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>ARM_RELOC_PB_LA_PTR</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>ARM_RELOC_BR24</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>ARM_THUMB_RELOC_BR22</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>ARM_THUMB_32BIT_BRANCH</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 
<decl><name>ARM_RELOC_HALF</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>ARM_RELOC_HALF_SECTDIFF</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,






<decl><name>ARM64_RELOC_UNSIGNED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ARM64_RELOC_SUBTRACTOR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ARM64_RELOC_BRANCH26</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>ARM64_RELOC_PAGE21</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>ARM64_RELOC_PAGEOFF12</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>ARM64_RELOC_GOT_LOAD_PAGE21</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>ARM64_RELOC_GOT_LOAD_PAGEOFF12</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>ARM64_RELOC_POINTER_TO_GOT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>ARM64_RELOC_TLVP_LOAD_PAGE21</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>ARM64_RELOC_TLVP_LOAD_PAGEOFF12</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>ARM64_RELOC_ADDEND</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,





<decl><name>X86_64_RELOC_UNSIGNED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>X86_64_RELOC_SIGNED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>X86_64_RELOC_BRANCH</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>X86_64_RELOC_GOT_LOAD</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>X86_64_RELOC_GOT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>X86_64_RELOC_SUBTRACTOR</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>X86_64_RELOC_SIGNED_1</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>X86_64_RELOC_SIGNED_2</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>X86_64_RELOC_SIGNED_4</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>X86_64_RELOC_TLV</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>
}</block>;</enum>



<enum>enum <block>{
<decl><name>VM_PROT_READ</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>VM_PROT_WRITE</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>VM_PROT_EXECUTE</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>
}</block>;</enum>




<struct>struct <name>mach_header</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cputype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpusubtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>filetype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ncmds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sizeofcmds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>mach_header_64</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cputype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpusubtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>filetype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ncmds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sizeofcmds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>load_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>segment_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>segname</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vmaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vmsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fileoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>filesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxprot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>initprot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nsects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>segment_command_64</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>segname</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>vmaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>vmsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fileoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>filesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxprot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>initprot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nsects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>section</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>sectname</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>segname</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reloff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nreloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>section_64</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>sectname</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>segname</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reloff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nreloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved3</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fvmlib</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>minor_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>header_addr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fvmlib_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fvmlib</name></name></type> <name>fvmlib</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dylib</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>current_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>compatibility_version</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dylib_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dylib</name></name></type> <name>dylib</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sub_framework_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>umbrella</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sub_client_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>client</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sub_umbrella_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sub_umbrella</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sub_library_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sub_library</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>prebound_dylib_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nmodules</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>linked_modules</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dylinker_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>thread_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>routines_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>init_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>init_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved6</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>routines_command_64</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>init_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>init_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>reserved2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>reserved3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>reserved4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>reserved5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>reserved6</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>symtab_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>symoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nsyms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>stroff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>strsize</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dysymtab_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ilocalsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nlocalsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iextdefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nextdefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iundefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nundefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tocoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ntoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>modtaboff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nmodtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>extrefsymoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nextrefsyms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>indirectsymoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nindirectsyms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>extreloff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nextrel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>locreloff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nlocrel</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dylib_table_of_contents</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>symbol_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>module_index</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dylib_module</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>module_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iextdefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nextdefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>irefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nrefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ilocalsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nlocalsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iextrel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nextrel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iinit_iterm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ninit_nterm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>objc_module_info_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>objc_module_info_size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dylib_module_64</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>module_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iextdefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nextdefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>irefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nrefsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ilocalsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nlocalsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iextrel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nextrel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iinit_iterm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ninit_nterm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>objc_module_info_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>objc_module_info_addr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dylib_reference</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>isym</name><range>:<expr><literal type="number">24</literal></expr></range></decl>,
<decl><type ref="prev"/><name>flags</name><range>:<expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>twolevel_hints_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nhints</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>twolevel_hint</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>isub_image</name><range>:<expr><literal type="number">8</literal></expr></range></decl>,
<decl><type ref="prev"/><name>itoc</name><range>:<expr><literal type="number">24</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>prebind_cksum_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cksum</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>uuid_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>rpath_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>path</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>linkedit_data_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dataoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>datasize</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>data_in_code_entry</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>kind</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>source_version_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>encryption_info_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cryptoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cryptsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cryptid</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>encryption_info_command_64</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cryptoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cryptsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cryptid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pad</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>version_min_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sdk</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>dyld_info_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rebase_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rebase_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bind_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bind_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>weak_bind_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>weak_bind_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lazy_bind_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lazy_bind_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>export_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>export_size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>linker_option_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>symseg_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ident_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fvmfile_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>header_addr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tlv_descriptor_32</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>thunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tlv_descriptor_64</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>thunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tlv_descriptor</name> <block>{
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>thunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>offset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>entry_point_command</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmdsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entryoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>stacksize</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>fat_header</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nfat_arch</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fat_arch</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cputype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpusubtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>align</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>relocation_info</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>r_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r_symbolnum</name><range>:<expr><literal type="number">24</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_pcrel</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_length</name><range>:<expr><literal type="number">2</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_extern</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_type</name><range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>scattered_relocation_info</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYTE_ORDER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>BYTE_ORDER</name> <operator>==</operator> <name>BIG_ENDIAN</name><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r_scattered</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_pcrel</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_length</name><range>:<expr><literal type="number">2</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_type</name><range>:<expr><literal type="number">4</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_address</name><range>:<expr><literal type="number">24</literal></expr></range></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r_address</name><range>:<expr><literal type="number">24</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_type</name><range>:<expr><literal type="number">4</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_length</name><range>:<expr><literal type="number">2</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_pcrel</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>r_scattered</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int32_t</name></type> <name>r_value</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>any_relocation_info</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r_word0</name></decl>, <decl><type ref="prev"/><name>r_word1</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>nlist_base</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_strx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_sect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>n_desc</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>nlist</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_strx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_sect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>n_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_value</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>nlist_64</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_strx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_sect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>n_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>n_value</name></decl>;</decl_stmt>
}</block>;</struct>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>GET_LIBRARY_ORDINAL</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>n_desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>n_desc</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8u</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffu</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SET_LIBRARY_ORDINAL</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>n_desc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ordinal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>n_desc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>n_desc</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00ff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ordinal</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>GET_COMM_ALIGN</name> <parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>n_desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>n_desc</name> <operator>&gt;&gt;</operator> <literal type="number">8u</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0fu</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SET_COMM_ALIGN</name> <parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>n_desc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>align</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>n_desc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>n_desc</name> <operator>&amp;</operator> <literal type="number">0xf0ffu</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>align</name> <operator>&amp;</operator> <literal type="number">0x0fu</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8u</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<enum>enum <block>{

<decl><name>CPU_ARCH_MASK</name> <init>= <expr><literal type="number">0xff000000</literal></expr></init></decl>, 
<decl><name>CPU_ARCH_ABI64</name> <init>= <expr><literal type="number">0x01000000</literal></expr></init></decl>, 
<decl><name>CPU_ARCH_ABI32</name> <init>= <expr><literal type="number">0x02000000</literal></expr></init></decl> 
}</block>;</enum>


<enum>enum <name>CPUType</name> <block>{
<decl><name>CPU_TYPE_ANY</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>CPU_TYPE_VAX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CPU_TYPE_MC680x0</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>CPU_TYPE_X86</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>CPU_TYPE_I386</name> <init>= <expr><name>CPU_TYPE_X86</name></expr></init></decl>,
<decl><name>CPU_TYPE_X86_64</name> <init>= <expr><name>CPU_TYPE_X86</name> <operator>|</operator> <name>CPU_ARCH_ABI64</name></expr></init></decl>,
<decl><name>CPU_TYPE_MIPS</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>CPU_TYPE_MC98000</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 
<decl><name>CPU_TYPE_HPPA</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>CPU_TYPE_ARM</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>CPU_TYPE_ARM64</name> <init>= <expr><name>CPU_TYPE_ARM</name> <operator>|</operator> <name>CPU_ARCH_ABI64</name></expr></init></decl>,
<decl><name>CPU_TYPE_ARM64_32</name> <init>= <expr><name>CPU_TYPE_ARM</name> <operator>|</operator> <name>CPU_ARCH_ABI32</name></expr></init></decl>,
<decl><name>CPU_TYPE_MC88000</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>CPU_TYPE_SPARC</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>CPU_TYPE_I860</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>CPU_TYPE_POWERPC</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<decl><name>CPU_TYPE_POWERPC64</name> <init>= <expr><name>CPU_TYPE_POWERPC</name> <operator>|</operator> <name>CPU_ARCH_ABI64</name></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{

<decl><name>CPU_SUBTYPE_MASK</name> <init>= <expr><literal type="number">0xff000000</literal></expr></init></decl>, 
<decl><name>CPU_SUBTYPE_LIB64</name> <init>= <expr><literal type="number">0x80000000</literal></expr></init></decl>, 


<decl><name>CPU_SUBTYPE_MULTIPLE</name> <init>= <expr><operator>~</operator><literal type="number">0u</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <name>CPUSubTypeX86</name> <block>{
<decl><name>CPU_SUBTYPE_I386_ALL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_386</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_486</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_486SX</name> <init>= <expr><literal type="number">0x84</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_586</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_PENT</name> <init>= <expr><name>CPU_SUBTYPE_586</name></expr></init></decl>,
<decl><name>CPU_SUBTYPE_PENTPRO</name> <init>= <expr><literal type="number">0x16</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_PENTII_M3</name> <init>= <expr><literal type="number">0x36</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_PENTII_M5</name> <init>= <expr><literal type="number">0x56</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_CELERON</name> <init>= <expr><literal type="number">0x67</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_CELERON_MOBILE</name> <init>= <expr><literal type="number">0x77</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_PENTIUM_3</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_PENTIUM_3_M</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_PENTIUM_3_XEON</name> <init>= <expr><literal type="number">0x28</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_PENTIUM_M</name> <init>= <expr><literal type="number">0x09</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_PENTIUM_4</name> <init>= <expr><literal type="number">0x0a</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_PENTIUM_4_M</name> <init>= <expr><literal type="number">0x1a</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ITANIUM</name> <init>= <expr><literal type="number">0x0b</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ITANIUM_2</name> <init>= <expr><literal type="number">0x1b</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_XEON</name> <init>= <expr><literal type="number">0x0c</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_XEON_MP</name> <init>= <expr><literal type="number">0x1c</literal></expr></init></decl>,

<decl><name>CPU_SUBTYPE_X86_ALL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_X86_64_ALL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_X86_ARCH1</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_X86_64_H</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block>;</enum>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>CPU_SUBTYPE_INTEL</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>Family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Model</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Family</name> <operator>|</operator> <operator>(</operator><name>Model</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>CPU_SUBTYPE_INTEL_FAMILY</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CPUSubTypeX86</name></name></type> <name>ST</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>ST</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>CPU_SUBTYPE_INTEL_MODEL</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CPUSubTypeX86</name></name></type> <name>ST</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>ST</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>
<enum>enum <block>{
<decl><name>CPU_SUBTYPE_INTEL_FAMILY_MAX</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_INTEL_MODEL_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CPUSubTypeARM</name> <block>{
<decl><name>CPU_SUBTYPE_ARM_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V4T</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V6</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V5</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V5TEJ</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_XSCALE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V7</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V7F</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V7S</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V7K</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V6M</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V7M</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM_V7EM</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CPUSubTypeARM64</name> <block>{
<decl><name>CPU_SUBTYPE_ARM64_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM64_V8</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_ARM64E</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CPUSubTypeSPARC</name> <block>{
<decl><name>CPU_SUBTYPE_SPARC_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CPUSubTypePowerPC</name> <block>{
<decl><name>CPU_SUBTYPE_POWERPC_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_601</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_602</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_603</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_603e</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_603ev</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_604</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_604e</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_620</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_750</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_7400</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_7450</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_POWERPC_970</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,

<decl><name>CPU_SUBTYPE_MC98000_ALL</name> <init>= <expr><name>CPU_SUBTYPE_POWERPC_ALL</name></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MC98601</name> <init>= <expr><name>CPU_SUBTYPE_POWERPC_601</name></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CPUSubTypeVAX</name> <block>{
<decl><name>CPU_SUBTYPE_VAX_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_VAX780</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_VAX785</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_VAX750</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_VAX730</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_UVAXI</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_UVAXII</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_VAX8200</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_VAX8500</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_VAX8600</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_VAX8650</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_VAX8800</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_UVAXIII</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CPUSubTypeMIPS</name> <block>{
<decl><name>CPU_SUBTYPE_MIPS_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MIPS_R2300</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MIPS_R2600</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MIPS_R2800</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MIPS_R2000a</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MIPS_R2000</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MIPS_R3000a</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MIPS_R3000</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CPUSubTypeMC680x0</name> <block>{
<decl><name>CPU_SUBTYPE_MC680x0_ALL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MC68030</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MC68040</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MC68030_ONLY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CPUSubTypeMC88000</name> <block>{
<decl><name>CPU_SUBTYPE_MC88000_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MC88100</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_MC88110</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CPUSubTypeHPPA</name> <block>{
<decl><name>CPU_SUBTYPE_HPPA_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_HPPA_7100</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_HPPA_7100LC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CPUSubTypeI860</name> <block>{
<decl><name>CPU_SUBTYPE_I860_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CPU_SUBTYPE_I860_860</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>


<struct>struct <name>x86_thread_state64_t</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rbx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rcx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rdx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rdi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rsi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r10</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r12</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r14</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>gs</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>x86_fp_control_precis</name> <block>{
<decl><name>x86_FP_PREC_24B</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>x86_FP_PREC_53B</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>x86_FP_PREC_64B</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>x86_fp_control_rc</name> <block>{
<decl><name>x86_FP_RND_NEAR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>x86_FP_RND_DOWN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>x86_FP_RND_UP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>x86_FP_CHOP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>fp_control_t</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>
<name>invalid</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>denorm</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>zdiv</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>ovrfl</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>undfl</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>precis</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<range>:<expr><literal type="number">2</literal></expr></range>,
<decl><type ref="prev"/><name>pc</name> <range>:<expr><literal type="number">2</literal></expr></range></decl>,
<decl><type ref="prev"/><name>rc</name> <range>:<expr><literal type="number">2</literal></expr></range></decl>,
<range>:<expr><literal type="number">1</literal></expr></range>,
<range>:<expr><literal type="number">3</literal></expr></range>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fp_status_t</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>
<name>invalid</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>denorm</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>zdiv</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>ovrfl</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>undfl</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>precis</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>stkflt</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>errsumm</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>c0</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>c1</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>c2</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>tos</name> <range>:<expr><literal type="number">3</literal></expr></range></decl>,
<decl><type ref="prev"/><name>c3</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>busy</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>mmst_reg_t</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>mmst_reg</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mmst_rsrv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>xmm_reg_t</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>xmm_reg</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>x86_float_state64_t</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>fpu_reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fp_control_t</name></name></type> <name>fpu_fcw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fp_status_t</name></name></type> <name>fpu_fsw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fpu_ftw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fpu_rsrv1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>fpu_fop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fpu_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>fpu_cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>fpu_rsrv2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fpu_dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>fpu_ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>fpu_rsrv3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fpu_mxcsr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fpu_mxcsrmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mmst_reg_t</name></name></type> <name>fpu_stmm0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mmst_reg_t</name></name></type> <name>fpu_stmm1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mmst_reg_t</name></name></type> <name>fpu_stmm2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mmst_reg_t</name></name></type> <name>fpu_stmm3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mmst_reg_t</name></name></type> <name>fpu_stmm4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mmst_reg_t</name></name></type> <name>fpu_stmm5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mmst_reg_t</name></name></type> <name>fpu_stmm6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mmst_reg_t</name></name></type> <name>fpu_stmm7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm10</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm12</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm14</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmm_reg_t</name></name></type> <name>fpu_xmm15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fpu_rsrv4</name><index>[<expr><literal type="number">6</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fpu_reserved1</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>x86_exception_state64_t</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>trapno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>faultvaddr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>x86_state_hdr_t</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flavor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>x86_thread_state_t</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>x86_state_hdr_t</name></name></type> <name>tsh</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>x86_thread_state64_t</name></name></type> <name>ts64</name></decl>;</decl_stmt>
}</block> <decl><name>uts</name></decl>;</union>
}</block>;</struct>

<struct>struct <name>x86_float_state_t</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>x86_state_hdr_t</name></name></type> <name>fsh</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>x86_float_state64_t</name></name></type> <name>fs64</name></decl>;</decl_stmt>
}</block> <decl><name>ufs</name></decl>;</union>
}</block>;</struct>

<struct>struct <name>x86_exception_state_t</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>x86_state_hdr_t</name></name></type> <name>esh</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>x86_exception_state64_t</name></name></type> <name>es64</name></decl>;</decl_stmt>
}</block> <decl><name>ues</name></decl>;</union>
}</block>;</struct>

<enum>enum <name>X86ThreadFlavors</name> <block>{
<decl><name>x86_THREAD_STATE32</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>x86_FLOAT_STATE32</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>x86_EXCEPTION_STATE32</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>x86_THREAD_STATE64</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>x86_FLOAT_STATE64</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>x86_EXCEPTION_STATE64</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>x86_THREAD_STATE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>x86_FLOAT_STATE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>x86_EXCEPTION_STATE</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>x86_DEBUG_STATE32</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>x86_DEBUG_STATE64</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>x86_DEBUG_STATE</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x86_THREAD_STATE64_COUNT</name></cpp:macro> <cpp:value>sizeof(struct x86_thread_state64_t) / sizeof(uint32_t);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x86_FLOAT_STATE64_COUNT</name></cpp:macro> <cpp:value>sizeof(struct x86_float_state64_t) / sizeof(uint32_t);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x86_EXCEPTION_STATE64_COUNT</name></cpp:macro> <cpp:value>sizeof(struct x86_exception_state64_t) / sizeof(uint32_t);</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x86_THREAD_STATE_COUNT</name></cpp:macro> <cpp:value>sizeof(struct x86_thread_state_t) / sizeof(uint32_t);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x86_FLOAT_STATE_COUNT</name></cpp:macro> <cpp:value>sizeof(struct x86_float_state_t) / sizeof(uint32_t);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x86_EXCEPTION_STATE_COUNT</name></cpp:macro> <cpp:value>sizeof(struct x86_exception_state_t) / sizeof(uint32_t);</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL_FLAGS_KIND_MASK</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL_FLAGS_KIND_REGULAR</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL_FLAGS_REEXPORT</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
