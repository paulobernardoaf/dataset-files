<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\mach0\mach064_is_kernelcache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mach0_defines.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_kernelcache_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>length</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>cputype</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cputype</name> <operator>!=</operator> <name>CPU_TYPE_ARM64</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>flags</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MH_PIE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ncmds</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_unixthread</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_negative_vaddr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>cursor</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncmds</name> <operator>&amp;&amp;</operator> <name>cursor</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>cmdtype</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>cmdsize</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>cursor</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cmdtype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LC_UNIXTHREAD</name></expr>:</case>
<expr_stmt><expr><name>has_unixthread</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LC_LOAD_DYLIB</name></expr>:</case>
<case>case <expr><name>LC_LOAD_WEAK_DYLIB</name></expr>:</case>
<case>case <expr><name>LC_LAZY_LOAD_DYLIB</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>LC_SEGMENT_64</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_negative_vaddr</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>st64</name></type> <name>vmaddr</name> <init>= <expr><call><name>r_buf_read_le64_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>cursor</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vmaddr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_negative_vaddr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name>cmdsize</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>has_unixthread</name> <operator>&amp;&amp;</operator> <name>has_negative_vaddr</name></expr>;</return>
</block_content>}</block></function>
</unit>
