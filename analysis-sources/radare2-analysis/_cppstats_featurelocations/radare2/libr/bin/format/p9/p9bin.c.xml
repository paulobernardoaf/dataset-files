<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\p9\p9bin.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"p9bin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>r_bin_p9_get_arch</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>big_endian</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>st32</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>st32</name><operator>)</operator> <call><name>r_buf_read_be32_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>big_endian</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>big_endian</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>I_MAGIC</name></expr>:</case>
<return>return <expr><name>R_ASM_ARCH_X86</name></expr>;</return>
<case>case <expr><name>T_MAGIC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>R_ASM_ARCH_PPC</name></expr>;</return>
<case>case <expr><name>S_MAGIC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>R_ASM_ARCH_X86</name></expr>;</return>
<case>case <expr><name>K_MAGIC</name></expr>:</case>
<return>return <expr><name>R_ASM_ARCH_SPARC</name></expr>;</return>
<case>case <expr><name>U_MAGIC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>R_ASM_ARCH_SPARC</name></expr>;</return>
<case>case <expr><name>V_MAGIC</name></expr>:</case>
<case>case <expr><name>M_MAGIC</name></expr>:</case>
<case>case <expr><name>N_MAGIC</name></expr>:</case>
<case>case <expr><name>P_MAGIC</name></expr>:</case>
<return>return <expr><name>R_ASM_ARCH_MIPS</name></expr>;</return>
<case>case <expr><name>E_MAGIC</name></expr>:</case>
<return>return <expr><name>R_ASM_ARCH_ARM</name></expr>;</return>
<case>case <expr><name>Q_MAGIC</name></expr>:</case>
<return>return <expr><name>R_ASM_ARCH_PPC</name></expr>;</return>

</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
