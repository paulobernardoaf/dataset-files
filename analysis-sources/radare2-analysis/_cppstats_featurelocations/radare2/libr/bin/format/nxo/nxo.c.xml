<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\nxo\nxo.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nxo.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>readString</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>symbol</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>symbol</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>symbol</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"NRO0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"nro0"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"NRR0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"nrr0"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"MOD0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"mod0"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"NSO0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"nso0"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walkSymbols</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>RBinNXOObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>symtab</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>strtab</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>strtab_size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>relplt</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>import</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>imp</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">99999</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_buf_read_le64_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>symtab</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><call><name>r_buf_read_le64_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>symtab</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>ut64</name></type> <name>name</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>symtab</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symName</name> <init>= <expr><call><name>readString</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>strtab</name> <operator>+</operator> <name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symName</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>symName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_FUNC_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>import</name> <operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>pltSym</name> <init>= <expr><call><name>r_buf_read_le64_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>relplt</name> <operator>+</operator> <operator>(</operator><name>import</name> <operator>*</operator> <literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>imp</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinImport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>symName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>symName</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>imp</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_walk_symbol</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"FUNC"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>imp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_walk_symbol</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>imp</name><operator>-&gt;</operator><name>bind</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_walk_symbol</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>imp</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>imports_list</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>imports_list</name></name></expr></argument>, <argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>is_imported</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>symName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out_walk_symbol</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>pltSym</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"f sym.imp.%s = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>symName</name></expr></argument>, <argument><expr><name>pltSym</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>symName</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"f sym.%s %"</literal><name>PFMT64u</name> <literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>symName</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods_list</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return;</return>

<label><name>out_walk_symbol</name>:</label>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parseMod</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>RBinNXOObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>mod0</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>ptr</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mod0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"magic %x at 0x%x\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>mod0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">0x30444f4d</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"is mode0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MODHeader</name></type> <name>mh</name> <init>= <expr><block>{
<expr><operator>.</operator><name>magic</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mod0</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>dynamic</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mod0</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>bss_start</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mod0</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>bss_end</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mod0</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>unwind_start</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mod0</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>unwind_end</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mod0</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mod_object</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mod0</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mh</name><operator>.</operator><name>mod_object</name></name> <operator>+=</operator> <name>mod0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"magic 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>mh</name><operator>.</operator><name>magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"dynamic 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>mh</name><operator>.</operator><name>dynamic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"bss 0x%x 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>mh</name><operator>.</operator><name>bss_start</name></name></expr></argument>, <argument><expr><name><name>mh</name><operator>.</operator><name>bss_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"unwind 0x%x 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>mh</name><operator>.</operator><name>unwind_start</name></name></expr></argument>, <argument><expr><name><name>mh</name><operator>.</operator><name>unwind_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"-------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"mod 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>mh</name><operator>.</operator><name>mod_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MO_</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_read_le64_at(buf, mh.mod_object + r_offsetof(MODObject, x))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>MODObject</name></type> <name>mo</name> <init>= <expr><block>{
<expr><operator>.</operator><name>next</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>prev</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>relplt</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>relplt</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>reldyn</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>reldyn</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>base</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>dynamic</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>dynamic</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>is_rela</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>is_rela</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>relplt_size</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>relplt_size</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>fini</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>fini</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>bucket</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>chain</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>strtab</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>strtab</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>symtab</name> <operator>=</operator> <call><name>MO_</name><argument_list>(<argument><expr><name>symtab</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>strtab_size</name> <operator>=</operator> <macro><name>MO_</name><argument_list>(<argument>strtab_size</argument>)</argument_list></macro></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"next 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"prev 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"base 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"init 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"fini 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>fini</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"relplt 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>relplt</name></name> <operator>-</operator> <name><name>mo</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"symtab = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>symtab</name></name> <operator>-</operator> <name><name>mo</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"strtab = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>strtab</name></name> <operator>-</operator> <name><name>mo</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"strtabsz = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>strtab_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>strtab</name> <init>= <expr><name><name>mo</name><operator>.</operator><name>strtab</name></name> <operator>-</operator> <name><name>mo</name><operator>.</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>symtab</name> <init>= <expr><name><name>mo</name><operator>.</operator><name>symtab</name></name> <operator>-</operator> <name><name>mo</name><operator>.</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>walkSymbols</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><name>symtab</name></expr></argument>, <argument><expr><name>strtab</name></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>strtab_size</name></name></expr></argument>, <argument><expr><name><name>mo</name><operator>.</operator><name>relplt</name></name> <operator>-</operator> <name><name>mo</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
