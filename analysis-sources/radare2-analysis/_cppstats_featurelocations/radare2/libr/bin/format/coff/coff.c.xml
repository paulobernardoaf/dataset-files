<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\coff\coff.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"coff.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bprintf</name></cpp:macro> <cpp:value>if(obj-&gt;verbose)eprintf</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>r_coff_supported_arch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>arch</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>arch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COFF_FILE_MACHINE_AMD64</name></expr>:</case>
<case>case <expr><name>COFF_FILE_MACHINE_I386</name></expr>:</case>
<case>case <expr><name>COFF_FILE_MACHINE_H8300</name></expr>:</case>
<case>case <expr><name>COFF_FILE_TI_COFF</name></expr>:</case>
<case>case <expr><name>COFF_FILE_MACHINE_R4000</name></expr>:</case>
<case>case <expr><name>COFF_FILE_MACHINE_AMD29KBE</name></expr>:</case>
<case>case <expr><name>COFF_FILE_MACHINE_AMD29KLE</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>r_coff_symbol_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>n</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<union>union <block>{ 
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<struct>struct <block>{ 
<decl_stmt><decl><type><name>ut32</name></type> <name>zero</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt> 
}</block>;</struct> 
}</block> <decl><modifier>*</modifier><name>p</name> <init>= <expr><name>ptr</name></expr></init></decl>;</union>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>zero</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_symptr</name></name> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_nsyms</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>coff_symbol</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>n</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_coff_rebase_sym</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coff_symbol</name></name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>n_scnum</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>sym</name><operator>-&gt;</operator><name>n_scnum</name></name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_nscns</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>scn_hdrs</name><index>[<expr><name><name>sym</name><operator>-&gt;</operator><name>n_scnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s_scnptr</name> <operator>+</operator> <name><name>sym</name><operator>-&gt;</operator><name>n_value</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>RBinAddr</name> <modifier>*</modifier></type><name>r_coff_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_opthdr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>opt_hdr</name><operator>.</operator><name>entry</name></name></expr>;</expr_stmt>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_nsyms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n_name</name></expr></argument>, <argument><expr><literal type="string">"_start"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n_name</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>r_coff_rebase_sym</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_nsyms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n_name</name></expr></argument>, <argument><expr><literal type="string">"_main"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n_name</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>r_coff_rebase_sym</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (obj-&gt;scn_hdrs) {
for (i = 0; i &lt; obj-&gt;hdr.f_nscns; i++) {

if (obj-&gt;scn_hdrs[i].s_flags &amp; COFF_SCN_MEM_EXECUTE) {
addr-&gt;paddr = obj-&gt;scn_hdrs[i].s_scnptr;
return addr;
}
}
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_bin_coff_init_hdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut16</name></type> <name>magic</name> <init>= <expr><call><name>r_buf_read_ble16_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COFF_IS_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>magic</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COFF_FILE_MACHINE_H8300</name></expr>:</case>
<case>case <expr><name>COFF_FILE_MACHINE_AMD29KBE</name></expr>:</case>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>endian</name></name> <operator>=</operator> <name>COFF_IS_BIG_ENDIAN</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>endian</name></name> <operator>=</operator> <name>COFF_IS_LITTLE_ENDIAN</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>endian</name></name></expr>?</condition><then> <expr><literal type="string">"2S3I2S"</literal></expr></then><else>: <expr><literal type="string">"2s3i2s"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>coff_hdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_magic</name></name> <operator>==</operator> <name>COFF_FILE_TI_COFF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_fread</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>target_id</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>endian</name></name></expr>?</condition><then> <expr><literal type="string">"S"</literal></expr></then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_bin_coff_init_opt_hdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_opthdr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>coff_hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>opt_hdr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>endian</name></name></expr>?</condition><then> <expr><literal type="string">"2S6I"</literal></expr></then><else>: <expr><literal type="string">"2s6i"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>coff_opt_hdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_bin_coff_init_scn_hdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>coff_hdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_opthdr</name></name></expr> ?</condition><then> <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>coff_opt_hdr</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_magic</name></name> <operator>==</operator> <name>COFF_FILE_TI_COFF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_nscns</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>coff_scn_hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>offset</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>scn_hdrs</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>coff_scn_hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>scn_hdrs</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>scn_hdrs</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>endian</name></name></expr>?</condition><then> <expr><literal type="string">"8c6I2S1I"</literal></expr></then><else>: <expr><literal type="string">"8c6i2s1i"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_nscns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>scn_hdrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_bin_coff_init_symtable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_symptr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_nsyms</name></name> <operator>&gt;=</operator> <literal type="number">0xffff</literal> <operator>||</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_nsyms</name></name></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_nsyms</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>coff_symbol</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator>
<name>size</name></expr></argument> &gt;</argument_list></name> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator>
<name>offset</name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator>
<name>offset</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt> 
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>coff_symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>endian</name></name></expr>?</condition><then> <expr><literal type="string">"8c1I2S2c"</literal></expr></then><else>: <expr><literal type="string">"8c1i2s2c"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>f_nsyms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_coff_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_ref</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>verbose</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_coff_init_hdr</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: failed to init hdr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_bin_coff_init_opt_hdr</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_coff_init_scn_hdr</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: failed to init section header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_coff_init_symtable</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: failed to init symtable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_bin_coff_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>scn_hdrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_coff_obj</name></name><modifier>*</modifier></type> <name>r_bin_coff_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name><modifier>*</modifier></type> <name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_coff_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_bin_coff_init</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bin</name></expr>;</return>
</block_content>}</block></function>
</unit>
