<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bin\format\coff\coff.h">

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COFF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COFF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COFF_IS_BIG_ENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COFF_IS_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"coff_specs.h"</cpp:file></cpp:include>

<struct>struct <name>r_bin_coff_obj</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>coff_hdr</name></name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>coff_opt_hdr</name></name></type> <name>opt_hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>coff_scn_hdr</name></name> <modifier>*</modifier></type><name>scn_hdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>coff_symbol</name></name> <modifier>*</modifier></type><name>symbols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>target_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name></type> <name>endian</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>bool</name></type> <name>r_coff_supported_arch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name><modifier>*</modifier></type> <name>r_bin_coff_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>r_bin_coff_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>r_coff_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>r_coff_symbol_name</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_coff_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
