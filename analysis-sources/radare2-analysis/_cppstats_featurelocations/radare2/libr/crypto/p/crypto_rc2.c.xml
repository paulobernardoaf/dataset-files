<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\crypto\p\crypto_rc2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_crypto.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC2_KEY_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name></type> <name><name>PITABLE</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x9D</literal></expr>,
<expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xA2</literal></expr>,
<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x32</literal></expr>,
<expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x82</literal></expr>,
<expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xDC</literal></expr>,
<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
<expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xD7</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x2A</literal></expr>,
<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xEC</literal></expr>,
<expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
<expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xC9</literal></expr>,
<expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xA9</literal></expr>,
<expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x2E</literal></expr>,
<expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xAD</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>rc2_state</name> <block>{
<decl_stmt><decl><type><name>ut16</name></type> <name><name>ekey</name><index>[<expr><name>RC2_KEY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key_size</name></decl>;</decl_stmt>
}</block>;</struct>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>rc2_expandKey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rc2_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>key_len</name></expr></argument> &gt;</argument_list></name> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>key_len</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>PITABLE</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>-</operator> <name>key_len</name></expr>]</index> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>ekey_len</name> <init>= <expr><operator>(</operator><name>BITS</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">128</literal> <operator>-</operator> <name>ekey_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>PITABLE</name><index>[<expr><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&amp;</operator> <operator>(</operator><literal type="number">255</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>&amp;</operator> <operator>-</operator><name>BITS</name><operator>)</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>


<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>PITABLE</name><index>[<expr><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>^</operator> <operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <name>ekey_len</name></expr>]</index></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>RC2_KEY_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rc2_crypt8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rc2_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>x76</name></decl>, <decl><type ref="prev"/><name>x54</name></decl>, <decl><type ref="prev"/><name>x32</name></decl>, <decl><type ref="prev"/><name>x10</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><name><name>inbuf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>inbuf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><name><name>inbuf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>inbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>inbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x10</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>x32</name> <operator>&amp;</operator> <operator>~</operator><name>x76</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x54</name> <operator>&amp;</operator> <name>x76</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><name>x10</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x10</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x32</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>x54</name> <operator>&amp;</operator> <operator>~</operator><name>x10</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x76</name> <operator>&amp;</operator> <name>x10</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><name>x32</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x32</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x54</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>x76</name> <operator>&amp;</operator> <operator>~</operator><name>x32</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x10</name> <operator>&amp;</operator> <name>x32</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><name>x54</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x54</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x76</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>x10</name> <operator>&amp;</operator> <operator>~</operator><name>x54</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x32</name> <operator>&amp;</operator> <name>x54</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><name>x76</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x76</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x10</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><name>x76</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x32</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><name>x10</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x54</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><name>x32</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x76</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><name>x54</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>x10</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>x10</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>x32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>x32</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>x54</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>x54</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>x76</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>x76</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>rc2_dcrypt8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rc2_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut16</name></type> <name>x76</name></decl>, <decl><type ref="prev"/><name>x54</name></decl>, <decl><type ref="prev"/><name>x32</name></decl>, <decl><type ref="prev"/><name>x10</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><name><name>inbuf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>inbuf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><name><name>inbuf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>inbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>inbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x76</name> <operator>&amp;=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><name>x76</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x76</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x76</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>x10</name> <operator>&amp;</operator> <operator>~</operator><name>x54</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x32</name> <operator>&amp;</operator> <name>x54</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x76</name> <operator>&amp;=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><name>x54</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x54</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x54</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>x76</name> <operator>&amp;</operator> <operator>~</operator><name>x32</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x10</name> <operator>&amp;</operator> <name>x32</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x32</name> <operator>&amp;=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><name>x32</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x32</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x32</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>x54</name> <operator>&amp;</operator> <operator>~</operator><name>x10</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x76</name> <operator>&amp;</operator> <name>x10</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x10</name> <operator>&amp;=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><name>x10</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x10</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x10</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>x32</name> <operator>&amp;</operator> <operator>~</operator><name>x76</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x54</name> <operator>&amp;</operator> <name>x76</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">5</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x76</name> <operator>-=</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><name>x54</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x54</name> <operator>-=</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><name>x32</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x32</name> <operator>-=</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><name>x10</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x10</name> <operator>-=</operator> <name><name>state</name><operator>-&gt;</operator><name>ekey</name><index>[<expr><name>x76</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>x10</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>x10</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>x32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>x32</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>x54</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>x54</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>x76</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>x76</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rc2_dcrypt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rc2_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>data_block</name><index>[<expr><name>BLOCK_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dcrypted_block</name><index>[<expr><name>BLOCK_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>outbuf</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data_block</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>inbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>%</operator> <name>BLOCK_SIZE</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rc2_dcrypt8</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>data_block</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>dcrypted_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>dcrypted_block</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>BLOCK_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rc2_crypt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rc2_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>data_block</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>crypted_block</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>outbuf</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data_block</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>inbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>%</operator> <name>BLOCK_SIZE</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rc2_crypt8</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>data_block</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>crypted_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>crypted_block</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>BLOCK_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>idx</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data_block</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>rc2_crypt8</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>data_block</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>crypted_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>crypted_block</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>rc2_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rc2_set_key</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>direction</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>key_size</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<return>return <expr><call><name>rc2_expandKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rc2_get_key_size</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>state</name><operator>.</operator><name>key_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rc2_use</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>algo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>algo</name></expr></argument>, <argument><expr><literal type="string">"rc2"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>obuf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obuf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rc2_crypt</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rc2_dcrypt</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_crypto_append</name><argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>final</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>update</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RCryptoPlugin</name></type> <name>r_crypto_plugin_rc2</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rc2"</literal></expr>,
<expr><operator>.</operator><name>set_key</name> <operator>=</operator> <name>rc2_set_key</name></expr>,
<expr><operator>.</operator><name>get_key_size</name> <operator>=</operator> <name>rc2_get_key_size</name></expr>,
<expr><operator>.</operator><name>use</name> <operator>=</operator> <name>rc2_use</name></expr>,
<expr><operator>.</operator><name>update</name> <operator>=</operator> <name>update</name></expr>,
<expr><operator>.</operator><name>final</name> <operator>=</operator> <name>final</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_CRYPTO</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_crypto_plugin_rc2</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MAIN</name></expr></cpp:if>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut8</name></type> <name><name>out</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rc2_state</name></name></type> <name>st</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>st</name><operator>.</operator><name>key_size</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc2_expandKey</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><literal type="string">"key"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>BITS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rc2_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"12345678abc"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rc2_dcrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
