<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\bp\bp.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>r_bp_plugin_t</name></name> <modifier>*</modifier></type><name><name>bp_static_plugins</name><index>[]</index></name> <init>=
<expr><block>{ <expr><name>R_BP_STATIC_PLUGINS</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bp_item_free</name> <parameter_list>(<parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>bbytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>obytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>module_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBreakpoint</name> <modifier>*</modifier></type><name>r_bp_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpointPlugin</name> <modifier>*</modifier></type><name>static_plugin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBreakpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>RBreakpointItem</name><operator>*</operator></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>stepcont</name></name> <operator>=</operator> <name>R_BP_CONT_NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>traces</name></name> <operator>=</operator> <call><name>r_bp_traptrace_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <operator>(</operator><name>PrintfCallback</name><operator>)</operator><name>printf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bp_item_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>plugins</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>nhwbps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bp_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>static_plugin</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>RBreakpointPlugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>static_plugin</name></expr></argument>, <argument><expr><name><name>bp_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBreakpointPlugin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_bp_plugin_add</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>static_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>iob</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBreakpoint</name> <modifier>*</modifier></type><name>r_bp_free</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>traces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_get_bytes</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_bp_arch_t</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>

<label><name>repeat</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>nbps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>bps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>bps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <name><name>bp</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>bps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>bps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>bp</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>bps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endian</name> <operator>==</operator> <name>endian</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<goto>goto <name>repeat</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>bps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>%</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No matching bpsize\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_get_at</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name><argument_list>(<argument>bp-&gt;bps</argument>, <argument>iter</argument>, <argument>b</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>inRange</name><parameter_list>(<parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>addr</name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>matchProt</name><parameter_list>(<parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>!</operator><name>perm</name> <operator>||</operator> <operator>(</operator><name>perm</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>perm</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_get_in</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bp-&gt;bps</argument>, <argument>iter</argument>, <argument>b</argument>)</argument_list></macro> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>inRange</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>matchProt</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_enable</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>r_bp_get_in</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>togglehits</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_enable_all</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bp-&gt;bps</argument>, <argument>iter</argument>, <argument>b</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_stepy_continuation</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>bp</name><operator>-&gt;</operator><name>stepcont</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unlinkBreakpoint</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_add</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>obytes</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>r_bp_get_in</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Breakpoint already set at this address.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_bp_item_new</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>bp</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>baddr</name></name> <operator>&gt;</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"base addr should not be larger than the breakpoint address.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>addr</name> <operator>-</operator> <name><name>bp</name><operator>-&gt;</operator><name>baddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>hw</name></name> <operator>=</operator> <name>hw</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bbytes</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>bbytes</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>obytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>obytes</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>obytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>bbytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>obytes</name></name></expr></argument>, <argument><expr><name>obytes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>obytes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_bp_get_bytes</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bbytes</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>endian</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot get breakpoint bytes. No architecture selected?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlinkBreakpoint</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>recoil</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>nbps</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_add_fault</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBreakpointItem</name><modifier>*</modifier></type> <name>r_bp_add_sw</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bytes</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>bp</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>r_bp_add</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>R_BP_TYPE_SW</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBreakpointItem</name><modifier>*</modifier></type> <name>r_bp_add_hw</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>r_bp_add</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>R_BP_TYPE_HW</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_del_all</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_del</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bp-&gt;bps</argument>, <argument>iter</argument>, <argument>b</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlinkBreakpoint</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_set_trace</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>r_bp_get_in</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>trace</name></name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_set_trace_all</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<macro><name>r_list_foreach</name> <argument_list>(<argument>bp-&gt;bps</argument>, <argument>iter</argument>, <argument>b</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>trace</name></name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_list</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>bp</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bp-&gt;bps</argument>, <argument>iter</argument>, <argument>b</argument>)</argument_list></macro> <block>{<block_content>
<switch>switch <condition>(<expr><name>rad</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name><name>bp</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" - 0x%08"</literal><name>PFMT64x</name> \
<literal type="string">" %d %c%c%c %s %s %s %s cmd=\"%s\" cond=\"%s\" "</literal> \
<literal type="string">"name=\"%s\" module=\"%s\"\n"</literal></expr></argument>,
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_BP_PROT_READ</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_BP_PROT_ACCESS</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'r'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_BP_PROT_WRITE</name><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_BP_PROT_ACCESS</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_BP_PROT_EXEC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'x'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>hw</name></name></expr> ?</condition><then> <expr><literal type="string">"hw"</literal></expr></then><else>: <expr><literal type="string">"sw"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>trace</name></name></expr> ?</condition><then> <expr><literal type="string">"trace"</literal></expr> </then><else>: <expr><literal type="string">"break"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>enabled</name></name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>: <expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>r_bp_is_valid</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"valid"</literal></expr> </then><else>: <expr><literal type="string">"invalid"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>r_str_get2</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>r_str_get2</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>r_str_get2</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>r_str_get2</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>module_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>module_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>bp</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"dbm %s %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>module_name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>module_delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>bp</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"db 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>bp</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s{\"addr\":%"</literal><name>PFMT64d</name><literal type="string">",\"size\":%d,"</literal>
<literal type="string">"\"prot\":\"%c%c%c\",\"hw\":%s,"</literal>
<literal type="string">"\"trace\":%s,\"enabled\":%s,"</literal>
<literal type="string">"\"valid\":%s,\"data\":\"%s\","</literal>
<literal type="string">"\"cond\":\"%s\"}"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>iter</name><operator>-&gt;</operator><name>p</name></name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_BP_PROT_READ</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'r'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_BP_PROT_WRITE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_BP_PROT_EXEC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'x'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>hw</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>trace</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>enabled</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>r_bp_is_valid</name> <argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>r_str_get2</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>r_str_get2</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>bp</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_item_new</name> <parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>return_slot</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier><modifier>*</modifier></type><name>newbps</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RBreakpointItem</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newbps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name></name> <operator>=</operator> <name>newbps</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<label><name>return_slot</name>:</label>

<return>return <expr><operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBreakpointItem</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBreakpointItem</name> <modifier>*</modifier></type><name>r_bp_get_index</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_get_index_at</name> <parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>addr</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_del_index</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>bps_idx_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>bps_idx</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bp_size</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RBreakpointArch</name> <modifier>*</modifier></type><name>bpa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bpsize</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bp</name> <operator>||</operator> <operator>!</operator><name><name>bp</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bp</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>bps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bpa</name> <operator>=</operator> <operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>bps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bpa</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;&amp;</operator> <name><name>bpa</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <name><name>bp</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bpa</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <name>bpsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bpsize</name> <operator>=</operator> <name><name>bpa</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>bpsize</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>R_API</name> <name>bool</name></type> <name>r_bp_is_valid</name><parameter_list>(<parameter><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bp</name><operator>-&gt;</operator><name>bpinmaps</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>bp</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>isMapped</name></name> <argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>corebind</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
