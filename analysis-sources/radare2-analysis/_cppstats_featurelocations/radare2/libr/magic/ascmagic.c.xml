<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\magic\ascmagic.c">





































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_LIB_MAGIC</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"names.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXLINELEN</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSPC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == ' ' || (x) == '\t' || (x) == '\r' || (x) == '\n' || (x) == 0x85 || (x) == '\f')</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>looks_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>looks_utf8_with_BOM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>file_looks_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>looks_ucs16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>looks_latin1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>looks_extended</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>from_ebcdic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ascmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unichar</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>encode_utf8</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>file_ascmagic</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>nbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>utf8_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>utf8_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unichar</name> <modifier>*</modifier></type><name>ubuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>ulen</name></decl>, <decl><type ref="prev"/><name>mlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>names</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mime</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_MIME</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code_mime</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subtype</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subtype_mime</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_escapes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_backspace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_cr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_crlf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_lf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_cr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_nel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>last_line_end</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_long_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<while>while <condition>(<expr><name>nbytes</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>nbytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nbytes</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>nbuf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>nbytes</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>nbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ubuf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>nbytes</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>looks_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"ASCII"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code_mime</name> <operator>=</operator> <literal type="string">"us-ascii"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>looks_utf8_with_BOM</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulen</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"UTF-8 Unicode (with BOM)"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code_mime</name> <operator>=</operator> <literal type="string">"utf-8"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>file_looks_utf8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulen</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"UTF-8 Unicode"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code_mime</name> <operator>=</operator> <literal type="string">"utf-8"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>looks_ucs16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"Little-endian UTF-16 Unicode"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"Big-endian UTF-16 Unicode"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"character data"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code_mime</name> <operator>=</operator> <literal type="string">"utf-16"</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>looks_latin1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\xff\xff\xff\xff"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"ISO-8859"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code_mime</name> <operator>=</operator> <literal type="string">"iso-8859-1"</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>looks_extended</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"Non-ISO extended-ASCII"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code_mime</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>from_ebcdic</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>looks_ascii</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"EBCDIC"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"character data"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code_mime</name> <operator>=</operator> <literal type="string">"ebcdic"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>looks_latin1</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"International EBCDIC"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"character data"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code_mime</name> <operator>=</operator> <literal type="string">"ebcdic"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>mlen</name> <operator>=</operator> <name>ulen</name> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>utf8_buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>mlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>utf8_end</name> <operator>=</operator> <call><name>encode_utf8</name> <argument_list>(<argument><expr><name>utf8_buf</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_softmagic</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>utf8_buf</name></expr></argument>, <argument><expr><name>utf8_end</name> <operator>-</operator> <name>utf8_buf</name></expr></argument>, <argument><expr><name>TEXTTEST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_NO_CHECK_TOKENS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>subtype_identified</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ulen</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>end</name></decl>;</decl_stmt>


<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ulen</name> <operator>&amp;&amp;</operator> <call><name>ISSPC</name> <argument_list>(<argument><expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>ulen</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>end</name> <operator>&lt;</operator> <name>nbytes</name></expr>;</condition> <incr><expr><name>end</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ISSPC</name> <argument_list>(<argument><expr><name><name>ubuf</name><index>[<expr><name>end</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>names</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>names</name> <operator>+</operator> <name>NNAMES</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ascmatch</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ubuf</name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><name>end</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>subtype</name> <operator>=</operator> <name><name>types</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>human</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subtype_mime</name> <operator>=</operator> <name><name>types</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>mime</name></expr>;</expr_stmt>
<goto>goto <name>subtype_identified</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>subtype_identified</name>:</label>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ulen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seen_cr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_crlf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n_lf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>last_line_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>seen_cr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_cr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seen_cr</name> <operator>=</operator> <operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seen_cr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_line_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x85</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>n_nel</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>last_line_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>last_line_end</name> <operator>+</operator> <name>MAXLINELEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_long_lines</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\033'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_escapes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_backspace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name>seen_cr</name> <operator>&amp;&amp;</operator> <name>nbytes</name> <operator>&lt;</operator> <name>HOWMANY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_cr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mime</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mime</name> <operator>&amp;</operator> <name>R_MAGIC_MIME_TYPE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>subtype_mime</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>subtype_mime</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mime</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mime</name> <operator>==</operator> <name>R_MAGIC_MIME</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>code_mime</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mime</name> <operator>&amp;</operator> <name>R_MAGIC_MIME_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" charset="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>code_mime</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mime</name> <operator>==</operator> <name>R_MAGIC_MIME_ENCODING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"binary"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subtype</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_long_lines</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", with very long lines"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n_crlf</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n_cr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n_nel</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n_lf</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>n_crlf</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>n_cr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>n_nel</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", with"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_crlf</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n_cr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n_nel</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n_lf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" no"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n_crlf</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" CRLF"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_cr</name> <operator>||</operator> <name>n_lf</name> <operator>||</operator> <name>n_nel</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_cr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" CR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_lf</name> <operator>||</operator> <name>n_nel</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_lf</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" LF"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_nel</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_nel</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" NEL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" line terminators"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_escapes</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", with escape sequences"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_backspace</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", with overstriking"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ubuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>utf8_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ascmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unichar</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ulen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ulen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>us</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>text_chars</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>F</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, 

<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>T</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, 
<expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, 
<expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, 
<expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, 
<expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, 
<expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, 
<expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>F</name></expr>, 

<expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>T</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, 
<expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, <expr><name>X</name></expr>, 
<expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, 
<expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, 
<expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, 
<expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, 
<expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, 
<expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr>, <expr><name>I</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>looks_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type><name>ubuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ulen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ulen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>text_chars</name><index>[<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>T</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ubuf</name><index>[<expr><operator>(</operator><operator>*</operator><name>ulen</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>looks_latin1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type><name>ubuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ulen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ulen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>text_chars</name><index>[<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>T</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <name>I</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ubuf</name><index>[<expr><operator>(</operator><operator>*</operator><name>ulen</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>looks_extended</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type><name>ubuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ulen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ulen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>text_chars</name><index>[<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>T</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <name>I</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <name>X</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ubuf</name><index>[<expr><operator>(</operator><operator>*</operator><name>ulen</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type>
<name>encode_utf8</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type><name>ubuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ulen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ulen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>buf</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x7ff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>buf</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xc0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>buf</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xe0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x1fffff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>buf</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xf0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x3ffffff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>buf</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xf8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x7fffffff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>buf</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xfc</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>file_looks_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type><name>ubuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ulen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unichar</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gotone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ctrl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ubuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ulen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 





<if_stmt><if>if <condition>(<expr><name><name>text_chars</name><index>[<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name>T</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ctrl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ubuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ubuf</name><index>[<expr><operator>(</operator><operator>*</operator><name>ulen</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>following</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>following</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>following</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>following</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>following</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>following</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>following</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>nbytes</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ubuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ubuf</name><index>[<expr><operator>(</operator><operator>*</operator><name>ulen</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>gotone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<label><name>done</name>:</label>
<return>return <expr><ternary><condition><expr><name>ctrl</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>gotone</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>looks_utf8_with_BOM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type><name>ubuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ulen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xef</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbb</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbf</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>file_looks_utf8</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>nbytes</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>ubuf</name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>looks_ucs16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>unichar</name> <modifier>*</modifier></type><name>ubuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ulen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bigend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfe</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bigend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfe</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bigend</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ulen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>nbytes</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>bigend</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ubuf</name><index>[<expr><operator>(</operator><operator>*</operator><name>ulen</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ubuf</name><index>[<expr><operator>(</operator><operator>*</operator><name>ulen</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ubuf</name><index>[<expr><operator>*</operator><name>ulen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfffe</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ubuf</name><index>[<expr><operator>*</operator><name>ulen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name><name>text_chars</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ubuf</name><index>[<expr><operator>*</operator><name>ulen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name>T</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>bigend</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>I</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>























<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>ebcdic_to_ascii</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>,
<expr><literal type="number">128</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">144</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">26</literal></expr>,
<expr><literal type="char">' '</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">164</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'&lt;'</literal></expr>, <expr><literal type="char">'('</literal></expr>, <expr><literal type="char">'+'</literal></expr>, <expr><literal type="char">'|'</literal></expr>,
<expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">177</literal></expr>, <expr><literal type="char">'!'</literal></expr>, <expr><literal type="char">'$'</literal></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">')'</literal></expr>, <expr><literal type="char">';'</literal></expr>, <expr><literal type="char">'~'</literal></expr>,
<expr><literal type="char">'-'</literal></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="char">','</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><literal type="char">'&gt;'</literal></expr>, <expr><literal type="char">'?'</literal></expr>,
<expr><literal type="number">186</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="char">'`'</literal></expr>, <expr><literal type="char">':'</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'\''</literal></expr>,<expr><literal type="char">'='</literal></expr>, <expr><literal type="char">'"'</literal></expr>,
<expr><literal type="number">195</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">199</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">201</literal></expr>,
<expr><literal type="number">202</literal></expr>, <expr><literal type="char">'j'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'^'</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="number">208</literal></expr>,
<expr><literal type="number">209</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="char">'['</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">215</literal></expr>,
<expr><literal type="number">216</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">220</literal></expr>, <expr><literal type="number">221</literal></expr>, <expr><literal type="number">222</literal></expr>, <expr><literal type="number">223</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">226</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">228</literal></expr>, <expr><literal type="char">']'</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">231</literal></expr>,
<expr><literal type="char">'{'</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">233</literal></expr>, <expr><literal type="number">234</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">236</literal></expr>, <expr><literal type="number">237</literal></expr>,
<expr><literal type="char">'}'</literal></expr>, <expr><literal type="char">'J'</literal></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">243</literal></expr>,
<expr><literal type="char">'\\'</literal></expr>,<expr><literal type="number">159</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">246</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">249</literal></expr>,
<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'5'</literal></expr>, <expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">252</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">254</literal></expr>, <expr><literal type="number">255</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notdef</name></expr></argument>)</argument_list></call></expr></cpp:if>














<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>ebcdic_1047_to_8859</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x7F</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x8D</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x0F</literal></expr>,
<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x9D</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0x8F</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x1D</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x1F</literal></expr>,
<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x1B</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0x8A</literal></expr>,<expr><literal type="number">0x8B</literal></expr>,<expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x90</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0x9A</literal></expr>,<expr><literal type="number">0x9B</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x9E</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,
<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0xE2</literal></expr>,<expr><literal type="number">0xE4</literal></expr>,<expr><literal type="number">0xE0</literal></expr>,<expr><literal type="number">0xE1</literal></expr>,<expr><literal type="number">0xE3</literal></expr>,<expr><literal type="number">0xE5</literal></expr>,<expr><literal type="number">0xE7</literal></expr>,<expr><literal type="number">0xF1</literal></expr>,<expr><literal type="number">0xA2</literal></expr>,<expr><literal type="number">0x2E</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x7C</literal></expr>,
<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0xE9</literal></expr>,<expr><literal type="number">0xEA</literal></expr>,<expr><literal type="number">0xEB</literal></expr>,<expr><literal type="number">0xE8</literal></expr>,<expr><literal type="number">0xED</literal></expr>,<expr><literal type="number">0xEE</literal></expr>,<expr><literal type="number">0xEF</literal></expr>,<expr><literal type="number">0xEC</literal></expr>,<expr><literal type="number">0xDF</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x2A</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,
<expr><literal type="number">0x2D</literal></expr>,<expr><literal type="number">0x2F</literal></expr>,<expr><literal type="number">0xC2</literal></expr>,<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0xC1</literal></expr>,<expr><literal type="number">0xC3</literal></expr>,<expr><literal type="number">0xC5</literal></expr>,<expr><literal type="number">0xC7</literal></expr>,<expr><literal type="number">0xD1</literal></expr>,<expr><literal type="number">0xA6</literal></expr>,<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x5F</literal></expr>,<expr><literal type="number">0x3E</literal></expr>,<expr><literal type="number">0x3F</literal></expr>,
<expr><literal type="number">0xF8</literal></expr>,<expr><literal type="number">0xC9</literal></expr>,<expr><literal type="number">0xCA</literal></expr>,<expr><literal type="number">0xCB</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0xCD</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x3A</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0x22</literal></expr>,
<expr><literal type="number">0xD8</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0xFE</literal></expr>,<expr><literal type="number">0xB1</literal></expr>,
<expr><literal type="number">0xB0</literal></expr>,<expr><literal type="number">0x6A</literal></expr>,<expr><literal type="number">0x6B</literal></expr>,<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0x6F</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0xAA</literal></expr>,<expr><literal type="number">0xBA</literal></expr>,<expr><literal type="number">0xE6</literal></expr>,<expr><literal type="number">0xB8</literal></expr>,<expr><literal type="number">0xC6</literal></expr>,<expr><literal type="number">0xA4</literal></expr>,
<expr><literal type="number">0xB5</literal></expr>,<expr><literal type="number">0x7E</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x7A</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0xD0</literal></expr>,<expr><literal type="number">0x5B</literal></expr>,<expr><literal type="number">0xDE</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,
<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0xA3</literal></expr>,<expr><literal type="number">0xA5</literal></expr>,<expr><literal type="number">0xB7</literal></expr>,<expr><literal type="number">0xA9</literal></expr>,<expr><literal type="number">0xA7</literal></expr>,<expr><literal type="number">0xB6</literal></expr>,<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0xBD</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0xDD</literal></expr>,<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0xD7</literal></expr>,
<expr><literal type="number">0x7B</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xAD</literal></expr>,<expr><literal type="number">0xF4</literal></expr>,<expr><literal type="number">0xF6</literal></expr>,<expr><literal type="number">0xF2</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0xF5</literal></expr>,
<expr><literal type="number">0x7D</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0x4D</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xB9</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0x5C</literal></expr>,<expr><literal type="number">0xF7</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0xB2</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0xD6</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0xD5</literal></expr>,
<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x35</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x37</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0xB3</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0xDC</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x9F</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type> <name>from_ebcdic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ebcdic_to_ascii</name><index>[<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
