<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\magic\magic.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_magic.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys\stat.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISREG</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFMT) == S_IFREG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISDIR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFMT) == S_IFDIR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFIFO</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISFIFO</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFIFO) == S_IFIFO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPATHLEN</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_LIB_MAGIC</name></expr></cpp:if>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;magic.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_API</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API</name></cpp:macro></cpp:define>

<function><type><name>R_API</name> <name>RMagic</name><modifier>*</modifier></type> <name>r_magic_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>magic_open</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>R_API</name> <name>void</name></type> <name>r_magic_free</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>magic_close</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt> </block_content>}</block></function>
<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_magic_file</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>magic_file</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function> 
<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_magic_descriptor</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>magic_descriptor</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_magic_buffer</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>magic_buffer</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_magic_error</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>magic_error</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>R_API</name> <name>void</name></type> <name>r_magic_setflags</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>magic_setflags</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>R_API</name> <name>bool</name></type> <name>r_magic_load</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>magic_load</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>R_API</name> <name>bool</name></type> <name>r_magic_compile</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>magic_compile</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>R_API</name> <name>bool</name></type> <name>r_magic_check</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>magic_check</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>R_API</name> <name>int</name></type> <name>r_magic_errno</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>magic_errno</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PIPE_BUF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_PC_PIPE_BUF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIPE_BUF</name></cpp:macro> <cpp:value>pathconf(".", _PC_PIPE_BUF)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIPE_BUF</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_mlist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>mlist</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mlist</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>mlist</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>ml</name> <operator>!=</operator> <name>mlist</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>ml</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>mg</name> <init>= <expr><name><name>ml</name><operator>-&gt;</operator><name>magic</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>file_delmagic</name> <argument_list>(<argument><expr><name>mg</name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>nmagic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ml</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>info_from_stat</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>md</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>md</name> <operator>&amp;</operator> <literal type="number">0222</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"writable, "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>md</name> <operator>&amp;</operator> <literal type="number">0111</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"executable, "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"regular file, "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"no read permission"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_and_restore</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_or_fd</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ispipe</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOP</name></cpp:macro> <cpp:value>(1 + sizeof(union VALUETYPE))</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>HOWMANY</name> <operator>+</operator> <name>SLOP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_reset</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>file_fsmagic</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>inname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> <goto>goto <name>done</name>;</goto> 
<case>case <expr><literal type="number">0</literal></expr>:</case> <break>break;</break> 
<default>default:</default> <expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <goto>goto <name>done</name>;</goto> 
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inname</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fstat</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISFIFO</name> <argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ispipe</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>O_RDONLY</name><operator>|</operator><name>O_BINARY</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name> <argument_list>(<argument><expr><name>inname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISFIFO</name> <argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>O_NONBLOCK</name></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ispipe</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name> <argument_list>(<argument><expr><name>inname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"couldn't open file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>info_from_stat</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>O_NONBLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ispipe</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>nbytes</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>HOWMANY</name> <operator>-</operator> <name>nbytes</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nbytes</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>PIPE_BUF</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>info_from_stat</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nbytes</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>HOWMANY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"cannot read `%s'"</literal></expr></argument>, <argument><expr><name>inname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nbytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>file_buffer</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>inname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nbytes</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_and_restore</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>inname</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>file_getbuffer</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>R_API</name> <name>RMagic</name><modifier>*</modifier></type> <name>r_magic_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RMagic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ms</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_magic_setflags</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>o</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>o</name><operator>.</operator><name>pbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>file_reset</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ms</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_magic_free</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ms</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_mlist</name> <argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>o</name><operator>.</operator><name>pbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>o</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_magic_load_buffer</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>magicdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>magicdata</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name> <init>= <expr><call><name>file_apprentice</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>magicdata</name></expr></argument>, <argument><expr><name>FILE_LOAD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ml</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_mlist</name> <argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name></name> <operator>=</operator> <name>ml</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Magic buffers should start with #\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_magic_load</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type> <name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>magicfile</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name> <init>= <expr><call><name>file_apprentice</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>magicfile</name></expr></argument>, <argument><expr><name>FILE_LOAD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ml</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_mlist</name> <argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name></name> <operator>=</operator> <name>ml</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_magic_compile</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>magicfile</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name> <init>= <expr><call><name>file_apprentice</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>magicfile</name></expr></argument>, <argument><expr><name>FILE_COMPILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free_mlist</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_magic_check</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>magicfile</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name> <init>= <expr><call><name>file_apprentice</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>magicfile</name></expr></argument>, <argument><expr><name>FILE_CHECK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free_mlist</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>r_magic_descriptor</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>file_or_fd</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_magic_file</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>file_or_fd</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>inname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_magic_buffer</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_reset</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_buffer</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>file_getbuffer</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_magic_error</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&amp;&amp;</operator> <name><name>ms</name><operator>-&gt;</operator><name>haderr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>ms</name><operator>-&gt;</operator><name>o</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_magic_errno</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&amp;&amp;</operator> <name><name>ms</name><operator>-&gt;</operator><name>haderr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>ms</name><operator>-&gt;</operator><name>error</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_magic_setflags</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ms</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
