<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\magic\softmagic.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_LIB_MAGIC</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut32</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mget</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>magiccheck</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>st32</name></type> <name>mprint</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mdebug</name><parameter_list>(<parameter><decl><type><name>ut32</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mcopy</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut32</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mconvert</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>print_sep</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cvt_8</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cvt_16</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cvt_32</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cvt_64</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_DESC</name></cpp:macro> <cpp:value>((ms-&gt;flags &amp; R_MAGIC_MIME) ? m-&gt;mimetype : m-&gt;desc)</cpp:value></cpp:define>






<function><type><name>int</name></type> <name>file_softmagic</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>mlist</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>ml</name> <operator>!=</operator> <name><name>ms</name><operator>-&gt;</operator><name>mlist</name></name></expr>;</condition> <incr><expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>nmagic</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




























<function><type><specifier>static</specifier> <name>int</name></type> <name>match</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>magic</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>nmagic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>magindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cont_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_separator</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>returnval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>firstline</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>printed_something</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_check_mem</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>magindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>magindex</name> <operator>&lt;</operator> <name>nmagic</name></expr>;</condition> <incr><expr><name>magindex</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>magic</name><index>[<expr><name>magindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>BINTEST</name><operator>)</operator> <operator>!=</operator> <name>mode</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>magic</name><index>[<expr><name>magindex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cont_level</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>magindex</name> <operator>&lt;</operator> <name>nmagic</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></while>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>lineno</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>flush</name> <operator>=</operator> <operator>!</operator><call><name>mget</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>magiccheck</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flush</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition> <block>{<block_content>




<while>while <condition>(<expr><name>magindex</name> <operator>&lt;</operator> <name>nmagic</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>magic</name><index>[<expr><name>magindex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cont_level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>magindex</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>R_MAGIC_DESC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_separator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>printed_something</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>print_sep</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>=</operator> <call><name>mprint</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>file_check_mem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>++</operator><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>++</operator><name>magindex</name> <operator>&lt;</operator> <name>nmagic</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>magic</name><index>[<expr><name>magindex</name></expr>]</index></name><operator>.</operator><name>cont_level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>magic</name><index>[<expr><name>magindex</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>lineno</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>cont_level</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>OFFADD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>cond</name></name> <operator>==</operator> <name>COND_ELSE</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>cond</name></name> <operator>==</operator> <name>COND_ELIF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>last_match</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <operator>!</operator><call><name>mget</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><ternary><condition><expr><name>flush</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>magiccheck</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>last_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>last_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_DEFAULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>got_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>got_match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>got_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>R_MAGIC_DESC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>printed_something</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>print_sep</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>need_separator</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>NOSPACE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><name>R_MAGIC_DESC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>need_separator</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>=</operator> <call><name>mprint</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>R_MAGIC_DESC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_separator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>file_check_mem</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>++</operator><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>printed_something</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>firstline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>returnval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CONTINUE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>printed_something</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>returnval</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_fmt</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RRegex</name></type> <name>rx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name> <argument_list>(<argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_regex_comp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><literal type="string">"%[-0-9\\.]*s"</literal></expr></argument>, <argument><expr><name>R_REGEX_EXTENDED</name><operator>|</operator><name>R_REGEX_NOSUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsg</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_regex_error</name> <argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_magerror</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"regex error %d, (%s)"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_regex_exec</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_regex_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><name>rc</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>strdupn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>copy</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name> <argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>copy</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>mprint</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>vd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_signextend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>check_fmt</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_signextend</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>check_fmt</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%hu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_signextend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>check_fmt</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>st32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_signextend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><call><name>strcspn</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_PSTRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><call><name>file_fmttime</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><call><name>file_fmttime</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><call><name>file_fmttime</name> <argument_list>(<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><call><name>file_fmttime</name> <argument_list>(<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<expr_stmt><expr><name>vf</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>check_fmt</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><name>vf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name>vf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<expr_stmt><expr><name>vd</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>check_fmt</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><name>vd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name>vd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_REGEX</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strdupn</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_OFFSET_START</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_OFFSET_START</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>R_MAGIC_DESC</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"invalid m-&gt;type (%d) in mprint()"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_CVT</name><parameter_list>(<parameter><type><name>fld</name></type></parameter>, <parameter><type><name>cast</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (m-&gt;num_mask) switch (m-&gt;mask_op &amp; FILE_OPS_MASK) { case FILE_OPAND: p-&gt;fld &amp;= cast m-&gt;num_mask; break; case FILE_OPOR: p-&gt;fld |= cast m-&gt;num_mask; break; case FILE_OPXOR: p-&gt;fld ^= cast m-&gt;num_mask; break; case FILE_OPADD: p-&gt;fld += cast m-&gt;num_mask; break; case FILE_OPMINUS: p-&gt;fld -= cast m-&gt;num_mask; break; case FILE_OPMULTIPLY: p-&gt;fld *= cast m-&gt;num_mask; break; case FILE_OPDIVIDE: p-&gt;fld /= cast m-&gt;num_mask; break; case FILE_OPMODULO: p-&gt;fld %= cast m-&gt;num_mask; break; } if (m-&gt;mask_op &amp; FILE_OPINVERSE) p-&gt;fld = ~p-&gt;fld</cpp:value></cpp:define> 






























<function><type><specifier>static</specifier> <name>void</name></type> <name>cvt_8</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cvt_16</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>ut16</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cvt_32</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cvt_64</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_CVT2</name><parameter_list>(<parameter><type><name>fld</name></type></parameter>, <parameter><type><name>cast</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (m-&gt;num_mask) switch (m-&gt;mask_op &amp; FILE_OPS_MASK) { case FILE_OPADD: p-&gt;fld += cast m-&gt;num_mask; break; case FILE_OPMINUS: p-&gt;fld -= cast m-&gt;num_mask; break; case FILE_OPMULTIPLY: p-&gt;fld *= cast m-&gt;num_mask; break; case FILE_OPDIVIDE: p-&gt;fld /= cast m-&gt;num_mask; break; }</cpp:value></cpp:define> 
















<function><type><specifier>static</specifier> <name>void</name></type> <name>cvt_float</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT2</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cvt_double</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT2</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>mconvert</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<expr_stmt><expr><call><name>cvt_8</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<expr_stmt><expr><call><name>cvt_16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<expr_stmt><expr><call><name>cvt_32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<expr_stmt><expr><call><name>cvt_64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name><operator>--</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr1</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name> <init>= <expr><name>ptr1</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>ptr1</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name><operator>--</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator> <call><name>r_read_be32</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">56</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">48</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">40</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">56</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">48</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">40</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<expr_stmt><expr><call><name>cvt_float</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_float</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_float</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<expr_stmt><expr><call><name>cvt_double</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">56</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">48</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">40</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_double</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">56</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">48</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">40</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_double</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"invalid type %d in mconvert()"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>mdebug</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"mget @%d: "</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_showstr</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mcopy</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>linecnt</name></decl></parameter>)</parameter_list> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>indir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>=</operator> <name>nbytes</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILE_REGEX</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>lines</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name> <operator>+</operator> <name>nbytes</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lines</name> <operator>=</operator> <name>linecnt</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>buf</name></expr>;</init>
<condition><expr><name>lines</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>c</name> <operator>=</operator> <name>b</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</condition>
<incr><expr><name>lines</name><operator>--</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name> <operator>+</operator> <name>nbytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>s</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>esrc</name> <init>= <expr><name>s</name> <operator>+</operator> <name>nbytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>edst</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FILE_BESTRING16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"invalid offset %u in mcopy()"</literal></expr></argument>,
<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>src</name> <operator>&lt;</operator> <name>esrc</name></expr>;</condition> <incr><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>dst</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&lt;</operator> <name>edst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dst</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>FILE_BESTRING16</name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr> </then><else>: <expr><operator>*</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr></else></ternary></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>edst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>FILE_STRING</name></expr>:</case> 
<case>case <expr><name>FILE_PSTRING</name></expr>:</case> 
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>nbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nbytes</name> <operator>-</operator> <name>offset</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>?</condition><then>
<expr><name>nbytes</name> <operator>-</operator> <name>offset</name></expr></then><else>: <expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator> <operator>+</operator> <name>nbytes</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mget</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>cont_level</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>count</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mcopy</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>INDIR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mdebug</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>VALUETYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_mdump</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>INDIR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINDIRECT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>q</name> <init>=
<expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>off</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_OPAND</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>&amp;</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPOR</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>|</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPXOR</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>^</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPADD</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMINUS</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>-</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMULTIPLY</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>*</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPDIVIDE</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>/</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMODULO</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>%</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>~</operator><name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_OPAND</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPOR</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPXOR</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>^</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPADD</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMINUS</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMULTIPLY</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPDIVIDE</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMODULO</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>~</operator><name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_OPAND</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPOR</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPXOR</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>^</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPADD</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMINUS</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMULTIPLY</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPDIVIDE</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMODULO</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>~</operator><name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_OPAND</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPOR</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>|</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPXOR</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>^</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPADD</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMINUS</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMULTIPLY</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPDIVIDE</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMODULO</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>%</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>~</operator><name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_OPAND</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPOR</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPXOR</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>^</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPADD</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMINUS</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMULTIPLY</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPDIVIDE</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMODULO</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>~</operator><name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_OPAND</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPOR</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPXOR</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>^</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPADD</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMINUS</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMULTIPLY</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPDIVIDE</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMODULO</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>~</operator><name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_OPAND</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPOR</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPXOR</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>^</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPADD</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMINUS</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMULTIPLY</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPDIVIDE</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMODULO</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>~</operator><name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_OPAND</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>&amp;</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPOR</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>|</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPXOR</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>^</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPADD</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMINUS</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMULTIPLY</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>*</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPDIVIDE</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>/</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FILE_OPMODULO</name></expr>:</case> <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>%</operator> <name>off</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>~</operator><name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>INDIROFFADD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mcopy</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mdebug</name> <argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>union <name>VALUETYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_mdump</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case> 
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>mconvert</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>file_strncmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>






<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>s1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>s2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>v</name></decl>;</decl_stmt>





<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0L</literal> <operator>==</operator> <name>flags</name></expr>)</condition> <block>{<block_content> 
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <operator>*</operator><name>b</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>a</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content> 
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STRING_IGNORE_LOWERCASE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>islower</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><operator>*</operator><name>b</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><name>a</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STRING_IGNORE_UPPERCASE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isupper</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>toupper</name> <argument_list>(<argument><expr><operator>*</operator><name>b</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><name>a</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STRING_COMPACT_BLANK</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>b</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STRING_COMPACT_OPTIONAL_BLANK</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <operator>*</operator><name>b</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>a</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>file_strncmp16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>





<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>file_strncmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>magiccheck</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>l</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fl</name></decl>, <decl><type ref="prev"/><name>fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dl</name></decl>, <decl><type ref="prev"/><name>dv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>q</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<expr_stmt><expr><name>fl</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fv</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case> <expr_stmt><expr><name>matched</name> <operator>=</operator> <name>fv</name> <operator>!=</operator> <name>fl</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <expr_stmt><expr><name>matched</name> <operator>=</operator> <name>fv</name> <operator>==</operator> <name>fl</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <expr_stmt><expr><name>matched</name> <operator>=</operator> <name>fv</name> <operator>&gt;</operator> <name>fl</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <expr_stmt><expr><name>matched</name> <operator>=</operator> <name>fv</name> <operator>&lt;</operator> <name>fl</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"cannot happen with float: invalid relation `%c'"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>matched</name></expr>;</return>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<expr_stmt><expr><name>dl</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dv</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case> <expr_stmt><expr><name>matched</name> <operator>=</operator> <name>dv</name> <operator>!=</operator> <name>dl</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <expr_stmt><expr><name>matched</name> <operator>=</operator> <name>dv</name> <operator>==</operator> <name>dl</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <expr_stmt><expr><name>matched</name> <operator>=</operator> <name>dv</name> <operator>&gt;</operator> <name>dl</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <expr_stmt><expr><name>matched</name> <operator>=</operator> <name>dv</name> <operator>&lt;</operator> <name>dl</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"cannot happen with double: invalid relation `%c'"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>matched</name></expr>;</return>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_strncmp</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_strncmp16</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case> <block>{<block_content> 
<decl_stmt><decl><type><name>size_t</name></type> <name>slen</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>+</operator> <name>idx</name> <operator>&gt;</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_strncmp</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>+=</operator> <name>idx</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>FILE_REGEX</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RRegex</name></type> <name>rx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsg</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_regex_comp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><name>R_REGEX_EXTENDED</name><operator>|</operator><name>R_REGEX_NEWLINE</name><operator>|</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_IGNORE_CASE</name><operator>)</operator></expr> ?</condition><then> <expr><name>R_REGEX_ICASE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_regex_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"regex error %d, (%s)"</literal></expr></argument>,
<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RRegexMatch</name></type> <name><name>pmatch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_REGEX_STARTEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REGEX_STARTEND</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name><operator>)</operator><index>[<expr><name>l</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_regex_exec</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>R_REGEX_STARTEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_REGEX_STARTEND</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name><operator>)</operator><index>[<expr><name>l</name></expr>]</index> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>-</operator> <name><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_REGEX_NOMATCH</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_regex_error</name> <argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_magerror</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"regexec error %d, (%s)"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>r_regex_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <operator>(</operator><name>ut64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"invalid type %d in magiccheck()"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_signextend</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PFMT64u</name> <literal type="string">" == *any* = 1\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>v</name> <operator>!=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PFMT64u</name> <literal type="string">" != %"</literal> <name>PFMT64u</name> <literal type="string">" = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>l</name></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>v</name> <operator>==</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PFMT64u</name> <literal type="string">" == %"</literal> <name>PFMT64u</name> <literal type="string">" = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>l</name></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>UNSIGNED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>v</name> <operator>&gt;</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PFMT64u</name> <literal type="string">" &gt; %"</literal> <name>PFMT64u</name> <literal type="string">" = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>l</name></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <name>v</name> <operator>&gt;</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PFMT64u</name> <literal type="string">" &gt; %"</literal> <name>PFMT64u</name> <literal type="string">" = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name>l</name></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>UNSIGNED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>v</name> <operator>&lt;</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PFMT64u</name> <literal type="string">" &lt; %"</literal> <name>PFMT64u</name> <literal type="string">" = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>l</name></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <name>v</name> <operator>&lt;</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PFMT64d</name> <literal type="string">" &lt; %"</literal> <name>PFMT64d</name> <literal type="string">" = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>st64</name><operator>)</operator><name>l</name></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"((%"</literal> <name>PFMT64x</name> <literal type="string">" &amp; %"</literal> <name>PFMT64x</name> <literal type="string">") == %"</literal> <name>PFMT64x</name> <literal type="string">") = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>l</name></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"((%"</literal> <name>PFMT64x</name> <literal type="string">" &amp; %"</literal> <name>PFMT64x</name> <literal type="string">") != %"</literal> <name>PFMT64x</name> <literal type="string">") = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>l</name></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"cannot happen: invalid relation `%c'"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>matched</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_sep</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstline</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>firstline</name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><call><name>file_printf</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"\n- "</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
