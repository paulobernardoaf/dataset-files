<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\egg\emit_trace.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_egg.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>attsyntax</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_NAME</name></cpp:macro> <cpp:value>emit_trace</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARCH</name></cpp:macro> <cpp:value>"trace"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SZ</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SP</name></cpp:macro> <cpp:value>"sp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BP</name></cpp:macro> <cpp:value>"bp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_AX</name></cpp:macro> <cpp:value>"a0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_GP</name></cpp:macro> <cpp:value>{ "a0", "a1", "a2", "a3", "a4" }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_TMP</name></cpp:macro> <cpp:value>"t0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NGP</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs</name><index>[]</index></name> <init>= <expr><name>R_GP</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_init</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>emit_syscall</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"syscall (%d)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_frame</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"frame (%d)\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_frame_end</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"frame_end (%d, %d)\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_comment</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"#%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_equ</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"equ (%s, %s)\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_syscall_args</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"syscall_args (%d)\n"</literal></expr></argument>, <argument><expr><name>nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_set_string</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dstvar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"set (\"%s\", \"%s\", %d)\n"</literal></expr></argument>, <argument><expr><name>dstvar</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_call</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>atr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>atr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"call ([%s])\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"call (%s)\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_jmp</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>atr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>atr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"goto ([%s])\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"goto (%s)\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_arg</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"arg.%d.%d=%s\n"</literal></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_get_result</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ocn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"get_result (%s)\n"</literal></expr></argument>, <argument><expr><name>ocn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_restore_stack</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"restore_stack (%d)\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_get_while_end</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctxpush</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"get_while_end (%s, %s, %s)\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ctxpush</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_while_end</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>labelback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"while_end (%s)\n"</literal></expr></argument>, <argument><expr><name>labelback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_get_var</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"fp,$%d"</literal></expr></argument>, <argument><expr><operator>-</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"sp,$%d"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break> 
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_trap</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"trap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_load_ptr</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"loadptr (%s)\n"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_branch</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name><name>str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><literal type="string">"beq"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>e</name></expr>?</condition><then><expr><literal type="string">"bge"</literal></expr></then><else>:<expr><literal type="string">"bgt"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>b</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>e</name></expr>?</condition><then><expr><literal type="string">"ble"</literal></expr></then><else>:<expr><literal type="string">"blt"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>g</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>e</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"bne"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>n</name></expr>?</condition><then><expr><literal type="string">"bne"</literal></expr></then><else>:<expr><literal type="string">"beq"</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"%s (%s) =&gt; (%s)\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_load</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"load (\"%s\", %c)\n"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_mathop</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'^'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"eor"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"and"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'|'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"orr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"sub"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"add"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"mul"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'/'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"div"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"mov"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eq</name> <operator>=</operator> <name>R_AX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>R_AX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

eprintf ("TYPE = %c\n", type);
eprintf (" %s%c %c%s, %s\n", op, vs, type, eq, p);
eprintf (" %s %s, [%s]\n", op, p, eq);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"%s (%s, [%s])\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"%s (%s, %s)\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>emit_regs</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>regs</name><index>[<expr><name>idx</name><operator>%</operator><name>R_NGP</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>REggEmit</name></type> <name>EMIT_NAME</name> <init>= <expr><block>{
<expr><operator>.</operator><name>retvar</name> <operator>=</operator> <literal type="string">"a0"</literal></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <name>R_ARCH</name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>R_SZ</name></expr>,
<expr><operator>.</operator><name>jmp</name> <operator>=</operator> <name>emit_jmp</name></expr>,
<expr><operator>.</operator><name>call</name> <operator>=</operator> <name>emit_call</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>emit_init</name></expr>,
<expr><operator>.</operator><name>equ</name> <operator>=</operator> <name>emit_equ</name></expr>,
<expr><operator>.</operator><name>regs</name> <operator>=</operator> <name>emit_regs</name></expr>,

<expr><operator>.</operator><name>trap</name> <operator>=</operator> <name>emit_trap</name></expr>,
<expr><operator>.</operator><name>frame</name> <operator>=</operator> <name>emit_frame</name></expr>,
<expr><operator>.</operator><name>frame_end</name> <operator>=</operator> <name>emit_frame_end</name></expr>,
<expr><operator>.</operator><name>comment</name> <operator>=</operator> <name>emit_comment</name></expr>,
<expr><operator>.</operator><name>push_arg</name> <operator>=</operator> <name>emit_arg</name></expr>,
<expr><operator>.</operator><name>restore_stack</name> <operator>=</operator> <name>emit_restore_stack</name></expr>,
<expr><operator>.</operator><name>get_result</name> <operator>=</operator> <name>emit_get_result</name></expr>,
<expr><operator>.</operator><name>syscall_args</name> <operator>=</operator> <name>emit_syscall_args</name></expr>,
<expr><operator>.</operator><name>set_string</name> <operator>=</operator> <name>emit_set_string</name></expr>,
<expr><operator>.</operator><name>get_var</name> <operator>=</operator> <name>emit_get_var</name></expr>,
<expr><operator>.</operator><name>while_end</name> <operator>=</operator> <name>emit_while_end</name></expr>,
<expr><operator>.</operator><name>get_while_end</name> <operator>=</operator> <name>emit_get_while_end</name></expr>,
<expr><operator>.</operator><name>branch</name> <operator>=</operator> <name>emit_branch</name></expr>,
<expr><operator>.</operator><name>load</name> <operator>=</operator> <name>emit_load</name></expr>,
<expr><operator>.</operator><name>load_ptr</name> <operator>=</operator> <name>emit_load_ptr</name></expr>,
<expr><operator>.</operator><name>mathop</name> <operator>=</operator> <name>emit_mathop</name></expr>,
<expr><operator>.</operator><name>syscall</name> <operator>=</operator> <name>emit_syscall</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
