<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\libr\egg\emit_x86.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_egg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>attsyntax</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_NAME</name></cpp:macro> <cpp:value>emit_x64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARCH</name></cpp:macro> <cpp:value>"x64"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SZ</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SP</name></cpp:macro> <cpp:value>"rsp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BP</name></cpp:macro> <cpp:value>"rbp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_AX</name></cpp:macro> <cpp:value>"rax"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSCALL_ATT</name></cpp:macro> <cpp:value>"syscall"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSCALL_INTEL</name></cpp:macro> <cpp:value>"syscall"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_AR_OFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"rax"</literal></expr>, <expr><literal type="string">"rdi"</literal></expr>, <expr><literal type="string">"rsi"</literal></expr>, <expr><literal type="string">"rdx"</literal></expr>, <expr><literal type="string">"r10"</literal></expr>, <expr><literal type="string">"r8"</literal></expr>, <expr><literal type="string">"r9"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_NAME</name></cpp:macro> <cpp:value>emit_x86</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_ARCH</name></cpp:macro> <cpp:value>"x86"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SZ</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SP</name></cpp:macro> <cpp:value>"esp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BP</name></cpp:macro> <cpp:value>"ebp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_AX</name></cpp:macro> <cpp:value>"eax"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSCALL_ATT</name></cpp:macro> <cpp:value>"int $0x80"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSCALL_INTEL</name></cpp:macro> <cpp:value>"int 0x80"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REG_AR_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"eax"</literal></expr>, <expr><literal type="string">"ebx"</literal></expr>, <expr><literal type="string">"ecx"</literal></expr>, <expr><literal type="string">"edx"</literal></expr>, <expr><literal type="string">"esi"</literal></expr>, <expr><literal type="string">"edi"</literal></expr>, <expr><literal type="string">"ebp"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_NGP</name></cpp:macro> <cpp:value>(sizeof (regs)/sizeof (char *))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_init</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"mov %%"</literal> <name>R_SP</name> <literal type="string">", %%"</literal> <name>R_BP</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"mov "</literal> <name>R_BP</name> <literal type="string">", "</literal> <name>R_SP</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>emit_syscall</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>p</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">": mov $`.arg`, %"</literal> <name>R_AX</name> <literal type="string">"\n: "</literal> <name>SYSCALL_ATT</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>os</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>R_EGG_OS_LINUX</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\n : mov "</literal><name>R_AX</name><literal type="string">", `.arg`\n : "</literal><name>SYSCALL_INTEL</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_EGG_OS_OSX</name></expr>:</case>
<case>case <expr><name>R_EGG_OS_MACOS</name></expr>:</case>
<case>case <expr><name>R_EGG_OS_DARWIN</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\n"</literal>
<literal type="string">" : mov rax, `.arg`\n"</literal>
<literal type="string">" : syscall\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\n"</literal>
<literal type="string">" : mov eax, `.arg`\n"</literal>
<literal type="string">" : push eax\n"</literal>
<literal type="string">" : int 0x80\n"</literal>
<literal type="string">" : add esp, %d\n"</literal></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_frame</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>,
<argument><expr><literal type="string">" push %%"</literal><name>R_BP</name><literal type="string">"\n"</literal>
<literal type="string">" mov %%"</literal><name>R_SP</name><literal type="string">", %%"</literal><name>R_BP</name><literal type="string">"\n"</literal>
<literal type="string">" sub $%d, %%"</literal><name>R_SP</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>,
<argument><expr><literal type="string">" push "</literal> <name>R_BP</name> <literal type="string">"\n"</literal>
<literal type="string">" mov "</literal> <name>R_BP</name> <literal type="string">", "</literal> <name>R_SP</name> <literal type="string">"\n"</literal>
<literal type="string">" sub "</literal> <name>R_SP</name> <literal type="string">", %d\n"</literal></expr></argument>,
<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_frame_end</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sz</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" add $%d, %%"</literal><name>R_SP</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" pop %%"</literal><name>R_BP</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" add "</literal><name>R_SP</name><literal type="string">", %d\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" pop "</literal><name>R_BP</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" ret\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_comment</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" /* %s */\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"#%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_equ</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">".equ %s,%s\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getreg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>R_NGP</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_syscall_args</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name> <operator>*</operator> <name>R_SZ</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find gpr %d\n"</literal></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov %d(%%"</literal><name>R_SP</name><literal type="string">"), %%%s\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov %s, ["</literal><name>R_SP</name><literal type="string">"+%d]\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov %s, ["</literal><name>R_SP</name><literal type="string">"%d]\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov %s, ["</literal><name>R_SP</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_string</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dstvar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name><name>str2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>oj</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BPOFF</name></cpp:macro> <cpp:value>(R_SZ-4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned int)((x) &amp; 0xffffffff)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>oj</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s</name><operator>+</operator><name>i</name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>dstvar</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>BPOFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" movl $0x%x, %s\n"</literal></expr></argument>, <argument><expr><call><name>M32</name> <argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov dword %s, 0x%x\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>M32</name> <argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M32</name></cpp:undef>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>dstvar</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>BPOFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" movl $0, %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov dword %s, 0\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>dstvar</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">4</literal><operator>+</operator><name>BPOFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" lea %s, %%"</literal> <name>R_AX</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" lea "</literal> <name>R_AX</name> <literal type="string">", %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>dstvar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov %%"</literal> <name>R_AX</name> <literal type="string">", %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov %s, "</literal> <name>R_AX</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BPOFF</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
char *p, str2[64];
int i, oj = j;
for (i=0; i&lt;oj; i+=4) {

int *n = (int *)(str+i);
p = r_egg_mkvar (egg, str2, dstvar, j);
if (attsyntax) r_egg_printf (egg, " movl $0x%x, %s\n", *n, p);
else r_egg_printf (egg, " mov %s, 0x%x\n", p, *n);
j -= 4;
}
p = r_egg_mkvar (egg, str2, dstvar, oj);
if (attsyntax) r_egg_printf (egg, " lea %s, %%"R_AX"\n", p);
else r_egg_printf (egg, " lea "R_AX", %s\n", p);
p = r_egg_mkvar (egg, str2, dstvar, 0);
if (attsyntax) r_egg_printf (egg, " mov %%"R_AX", %s\n", p);
else r_egg_printf (egg, " mov %s, "R_AX"\n", p);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_call</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>atr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>atr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" call *%s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" call [%s]\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" call %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_jmp</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>atr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>atr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" jmp *%s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" jmp [%s]\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" jmp %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Jump without destination\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_arg</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attsyntax</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'$'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>xs</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov %s, %%"</literal><name>R_AX</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" push %%"</literal><name>R_AX</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov "</literal><name>R_AX</name> <literal type="string">", %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" push "</literal><name>R_AX</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" push %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" push (%s)\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" push [%s]\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" addl $%d, %%"</literal> <name>R_BP</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" pushl %%"</literal><name>R_BP</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" subl $%d, %%"</literal> <name>R_BP</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" add "</literal> <name>R_BP</name> <literal type="string">", %d\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" push "</literal><name>R_BP</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" sub "</literal> <name>R_BP</name> <literal type="string">", %d\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_get_result</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ocn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov %%"</literal> <name>R_AX</name> <literal type="string">", %s\n"</literal></expr></argument>, <argument><expr><name>ocn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov %s, "</literal> <name>R_AX</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ocn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_restore_stack</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" add $%d, %%"</literal> <name>R_SP</name> <literal type="string">" /* args */\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" add "</literal> <name>R_SP</name> <literal type="string">", %d\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_get_while_end</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctxpush</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" push %s\n jmp %s\n"</literal></expr></argument>, <argument><expr><name>ctxpush</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_while_end</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>labelback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (attsyntax) {
r_egg_printf (egg, " pop %%"R_AX"\n");
r_egg_printf (egg, " cmp $0, %%"R_AX"\n"); 
r_egg_printf (egg, " jnz %s\n", labelback);
} else {
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" pop "</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" test "</literal><name>R_AX</name><literal type="string">", "</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" jnz %s\n"</literal></expr></argument>, <argument><expr><name>labelback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_get_var</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>R_BP</name> <literal type="string">"+%d]"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>R_BP</name> <literal type="string">"%d]"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>R_BP</name> <literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: Using stack vars in naked functions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>R_SP</name> <literal type="string">"+%d]"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>R_SP</name> <literal type="string">"%d]"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>R_SP</name> <literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>R_BP</name> <literal type="string">"+%d]"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>R_BP</name> <literal type="string">"%d]"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"["</literal> <name>R_BP</name> <literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_trap</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" int3\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_load_ptr</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" leal %d(%%"</literal><name>R_BP</name><literal type="string">"), %%"</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" lea "</literal><name>R_AX</name><literal type="string">", ["</literal><name>R_BP</name><literal type="string">"+%d]\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_branch</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name><name>str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><literal type="string">"jz"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>signed_value</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>signed_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>e</name></expr>?</condition><then> <expr><literal type="string">"jge"</literal></expr></then><else>: <expr><literal type="string">"jg"</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>e</name></expr>?</condition><then> <expr><literal type="string">"jae"</literal></expr></then><else>: <expr><literal type="string">"ja"</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>b</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>signed_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>e</name></expr>?</condition><then> <expr><literal type="string">"jle"</literal></expr></then><else>: <expr><literal type="string">"jl"</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>e</name></expr>?</condition><then> <expr><literal type="string">"jbe"</literal></expr></then><else>: <expr><literal type="string">"jb"</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>g</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>e</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jne"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <ternary><condition><expr><name>attsyntax</name></expr>?</condition><then> <expr><literal type="string">"$0"</literal></expr></then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jnz"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"jz"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" pop %%"</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" cmp%c %s, %%"</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" pop "</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" cmp "</literal><name>R_AX</name><literal type="string">", %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" %s %s\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_load</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>sz</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" movl %s, %%"</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" movl (%%"</literal><name>R_AX</name><literal type="string">"), %%"</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" movl %s, %%"</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" movzb (%%"</literal><name>R_AX</name><literal type="string">"), %%"</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov%c %s, %%"</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov%c (%%"</literal><name>R_AX</name><literal type="string">"), %%"</literal><name>R_AX</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>sz</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov "</literal><name>R_AX</name><literal type="string">", %s\n"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov "</literal><name>R_AX</name><literal type="string">", ["</literal><name>R_AX</name><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov "</literal><name>R_AX</name><literal type="string">", %s\n"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" movz "</literal><name>R_AX</name><literal type="string">", ["</literal><name>R_AX</name><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov "</literal><name>R_AX</name><literal type="string">", %s\n"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" mov "</literal><name>R_AX</name><literal type="string">", ["</literal><name>R_AX</name><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_mathop</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'^'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"xor"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"and"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'|'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"or"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"sub"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"add"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"mul"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'/'</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"div"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"mov"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>attsyntax</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eq</name> <operator>=</operator> <literal type="string">"%"</literal> <name>R_AX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"%"</literal> <name>R_AX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" %s%c %c%s, %s\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>eq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eq</name> <operator>=</operator> <name>R_AX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>R_AX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
eprintf ("TYPE = %c\n", type);
eprintf (" %s%c %c%s, %s\n", op, vs, type, eq, p);
eprintf (" %s %s, [%s]\n", op, p, eq);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" %s %s, [%s]\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" %s %s, %s\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>emit_regs</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>regs</name><index>[<expr><name>idx</name><operator>%</operator><name>R_NGP</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_get_ar</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>emit_regs</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>R_REG_AR_OFF</name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>REggEmit</name></type> <name>EMIT_NAME</name> <init>= <expr><block>{
<expr><operator>.</operator><name>retvar</name> <operator>=</operator> <name>R_AX</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <name>R_ARCH</name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>R_SZ</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>emit_init</name></expr>,
<expr><operator>.</operator><name>jmp</name> <operator>=</operator> <name>emit_jmp</name></expr>,
<expr><operator>.</operator><name>call</name> <operator>=</operator> <name>emit_call</name></expr>,
<expr><operator>.</operator><name>equ</name> <operator>=</operator> <name>emit_equ</name></expr>,
<expr><operator>.</operator><name>regs</name> <operator>=</operator> <name>emit_regs</name></expr>,

<expr><operator>.</operator><name>trap</name> <operator>=</operator> <name>emit_trap</name></expr>,
<expr><operator>.</operator><name>frame</name> <operator>=</operator> <name>emit_frame</name></expr>,
<expr><operator>.</operator><name>frame_end</name> <operator>=</operator> <name>emit_frame_end</name></expr>,
<expr><operator>.</operator><name>comment</name> <operator>=</operator> <name>emit_comment</name></expr>,
<expr><operator>.</operator><name>push_arg</name> <operator>=</operator> <name>emit_arg</name></expr>,
<expr><operator>.</operator><name>restore_stack</name> <operator>=</operator> <name>emit_restore_stack</name></expr>,
<expr><operator>.</operator><name>get_result</name> <operator>=</operator> <name>emit_get_result</name></expr>,
<expr><operator>.</operator><name>syscall_args</name> <operator>=</operator> <name>emit_syscall_args</name></expr>,
<expr><operator>.</operator><name>set_string</name> <operator>=</operator> <name>emit_string</name></expr>,
<expr><operator>.</operator><name>get_ar</name> <operator>=</operator> <name>emit_get_ar</name></expr>,
<expr><operator>.</operator><name>get_var</name> <operator>=</operator> <name>emit_get_var</name></expr>,
<expr><operator>.</operator><name>while_end</name> <operator>=</operator> <name>emit_while_end</name></expr>,
<expr><operator>.</operator><name>get_while_end</name> <operator>=</operator> <name>emit_get_while_end</name></expr>,
<expr><operator>.</operator><name>branch</name> <operator>=</operator> <name>emit_branch</name></expr>,
<expr><operator>.</operator><name>load</name> <operator>=</operator> <name>emit_load</name></expr>,
<expr><operator>.</operator><name>load_ptr</name> <operator>=</operator> <name>emit_load_ptr</name></expr>,
<expr><operator>.</operator><name>mathop</name> <operator>=</operator> <name>emit_mathop</name></expr>,
<expr><operator>.</operator><name>syscall</name> <operator>=</operator> <name>emit_syscall</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
