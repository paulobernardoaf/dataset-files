<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\sys\ui\r2-install.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib-object.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_MAIN</name></cpp:macro> <cpp:value>(main_get_type ())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAIN</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN, Main))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAIN_CLASS</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN, MainClass))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MAIN</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MAIN_CLASS</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAIN_GET_CLASS</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN, MainClass))</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>_Main</name></name></type> <name>Main</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_MainClass</name></name></type> <name>MainClass</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_MainPrivate</name></name></type> <name>MainPrivate</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_g_object_unref0</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))</cpp:value></cpp:define>

<struct>struct <name>_Main</name> <block>{
<decl_stmt><decl><type><name>GtkWindow</name></type> <name>parent_instance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MainPrivate</name> <modifier>*</modifier></type> <name>priv</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>_MainClass</name> <block>{
<decl_stmt><decl><type><name>GtkWindowClass</name></type> <name>parent_class</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><specifier>static</specifier> <name>gpointer</name></type> <name>main_parent_class</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GType</name></type> <name>main_get_type</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>G_GNUC_CONST</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>MAIN_DUMMY_PROPERTY</name></decl>
}</block>;</enum>
<function_decl><type><name>void</name></type> <name>main_main</name> <parameter_list>(<parameter><decl><type><name>gchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>args_length1</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Main</name><modifier>*</modifier></type> <name>main_new</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Main</name><modifier>*</modifier></type> <name>main_construct</name> <parameter_list>(<parameter><decl><type><name>GType</name></type> <name>object_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GObject</name> <modifier>*</modifier></type> <name>main_constructor</name> <parameter_list>(<parameter><decl><type><name>GType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>n_construct_properties</name></decl></parameter>, <parameter><decl><type><name>GObjectConstructParam</name> <modifier>*</modifier></type> <name>construct_properties</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>main_main</name> <parameter_list>(<parameter><decl><type><name>gchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>args_length1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Main</name><modifier>*</modifier></type> <name>_tmp0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Main</name><modifier>*</modifier></type> <name>_tmp1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Main</name><modifier>*</modifier></type> <name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gtk_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args_length1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp0_</name> <operator>=</operator> <call><name>main_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp1_</name> <operator>=</operator> <call><name>g_object_ref_sink</name> <argument_list>(<argument><expr><name>_tmp0_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>_tmp1_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show_all</name> <argument_list>(<argument><expr><operator>(</operator><name>GtkWidget</name><operator>*</operator><operator>)</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_main</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>g_type_init</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>main_main</name> <argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>Main</name><modifier>*</modifier></type> <name>main_construct</name> <parameter_list>(<parameter><decl><type><name>GType</name></type> <name>object_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Main</name> <modifier>*</modifier></type> <name>self</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> <operator>=</operator> <operator>(</operator><name>Main</name><operator>*</operator><operator>)</operator> <call><name>g_object_new</name> <argument_list>(<argument><expr><name>object_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Main</name><modifier>*</modifier></type> <name>main_new</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>main_construct</name> <argument_list>(<argument><expr><name>TYPE_MAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>GObject</name> <modifier>*</modifier></type> <name>main_constructor</name> <parameter_list>(<parameter><decl><type><name>GType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>n_construct_properties</name></decl></parameter>, <parameter><decl><type><name>GObjectConstructParam</name> <modifier>*</modifier></type> <name>construct_properties</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>GObject</name> <modifier>*</modifier></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GObjectClass</name> <modifier>*</modifier></type> <name>parent_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Main</name> <modifier>*</modifier></type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkVBox</name><modifier>*</modifier></type> <name>_vbox0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkLabel</name><modifier>*</modifier></type> <name>_label0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkHBox</name><modifier>*</modifier></type> <name>_hbox0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_button0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_button1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_button2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkVBox</name><modifier>*</modifier></type> <name>_tmp0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkVBox</name><modifier>*</modifier></type> <name>_tmp1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkLabel</name><modifier>*</modifier></type> <name>_tmp2_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkLabel</name><modifier>*</modifier></type> <name>_tmp3_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkHBox</name><modifier>*</modifier></type> <name>_tmp4_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkHBox</name><modifier>*</modifier></type> <name>_tmp5_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_tmp6_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_tmp7_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_tmp8_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_tmp9_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_tmp10_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_tmp11_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkVBox</name><modifier>*</modifier></type> <name>_tmp12_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkLabel</name><modifier>*</modifier></type> <name>_tmp13_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkHBox</name><modifier>*</modifier></type> <name>_tmp14_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_tmp15_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkHBox</name><modifier>*</modifier></type> <name>_tmp16_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_tmp17_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkHBox</name><modifier>*</modifier></type> <name>_tmp18_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkButton</name><modifier>*</modifier></type> <name>_tmp19_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkVBox</name><modifier>*</modifier></type> <name>_tmp20_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkHBox</name><modifier>*</modifier></type> <name>_tmp21_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkVBox</name><modifier>*</modifier></type> <name>_tmp22_</name></decl>;</decl_stmt>
<expr_stmt><expr><name>parent_class</name> <operator>=</operator> <call><name>G_OBJECT_CLASS</name> <argument_list>(<argument><expr><name>main_parent_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>parent_class</name><operator>-&gt;</operator><name>constructor</name></name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>n_construct_properties</name></expr></argument>, <argument><expr><name>construct_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>MAIN</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp0_</name> <operator>=</operator> <operator>(</operator><name>GtkVBox</name><operator>*</operator><operator>)</operator> <call><name>gtk_vbox_new</name> <argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp1_</name> <operator>=</operator> <call><name>g_object_ref_sink</name> <argument_list>(<argument><expr><name>_tmp0_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_vbox0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_vbox0</name> <operator>=</operator> <name>_tmp1_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp2_</name> <operator>=</operator> <operator>(</operator><name>GtkLabel</name><operator>*</operator><operator>)</operator> <call><name>gtk_label_new</name> <argument_list>(<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp3_</name> <operator>=</operator> <call><name>g_object_ref_sink</name> <argument_list>(<argument><expr><name>_tmp2_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_label0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_label0</name> <operator>=</operator> <name>_tmp3_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp4_</name> <operator>=</operator> <operator>(</operator><name>GtkHBox</name><operator>*</operator><operator>)</operator> <call><name>gtk_hbox_new</name> <argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp5_</name> <operator>=</operator> <call><name>g_object_ref_sink</name> <argument_list>(<argument><expr><name>_tmp4_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_hbox0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_hbox0</name> <operator>=</operator> <name>_tmp5_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp6_</name> <operator>=</operator> <operator>(</operator><name>GtkButton</name><operator>*</operator><operator>)</operator> <call><name>gtk_button_new_with_label</name> <argument_list>(<argument><expr><literal type="string">"Install"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp7_</name> <operator>=</operator> <call><name>g_object_ref_sink</name> <argument_list>(<argument><expr><name>_tmp6_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_button0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_button0</name> <operator>=</operator> <name>_tmp7_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp8_</name> <operator>=</operator> <operator>(</operator><name>GtkButton</name><operator>*</operator><operator>)</operator> <call><name>gtk_button_new_with_label</name> <argument_list>(<argument><expr><literal type="string">"Update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp9_</name> <operator>=</operator> <call><name>g_object_ref_sink</name> <argument_list>(<argument><expr><name>_tmp8_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_button1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_button1</name> <operator>=</operator> <name>_tmp9_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp10_</name> <operator>=</operator> <operator>(</operator><name>GtkButton</name><operator>*</operator><operator>)</operator> <call><name>gtk_button_new_with_label</name> <argument_list>(<argument><expr><literal type="string">"Deinstall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp11_</name> <operator>=</operator> <call><name>g_object_ref_sink</name> <argument_list>(<argument><expr><name>_tmp10_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_button2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_button2</name> <operator>=</operator> <name>_tmp11_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_set</name> <argument_list>(<argument><expr><operator>(</operator><name>GtkWindow</name><operator>*</operator><operator>)</operator> <name>self</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>GTK_WINDOW_TOPLEVEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp12_</name> <operator>=</operator> <name>_vbox0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp13_</name> <operator>=</operator> <name>_label0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name> <argument_list>(<argument><expr><operator>(</operator><name>GtkContainer</name><operator>*</operator><operator>)</operator> <name>_tmp12_</name></expr></argument>, <argument><expr><operator>(</operator><name>GtkWidget</name><operator>*</operator><operator>)</operator> <name>_tmp13_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp14_</name> <operator>=</operator> <name>_hbox0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp15_</name> <operator>=</operator> <name>_button0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name> <argument_list>(<argument><expr><operator>(</operator><name>GtkContainer</name><operator>*</operator><operator>)</operator> <name>_tmp14_</name></expr></argument>, <argument><expr><operator>(</operator><name>GtkWidget</name><operator>*</operator><operator>)</operator> <name>_tmp15_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp16_</name> <operator>=</operator> <name>_hbox0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp17_</name> <operator>=</operator> <name>_button1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name> <argument_list>(<argument><expr><operator>(</operator><name>GtkContainer</name><operator>*</operator><operator>)</operator> <name>_tmp16_</name></expr></argument>, <argument><expr><operator>(</operator><name>GtkWidget</name><operator>*</operator><operator>)</operator> <name>_tmp17_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp18_</name> <operator>=</operator> <name>_hbox0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp19_</name> <operator>=</operator> <name>_button2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name> <argument_list>(<argument><expr><operator>(</operator><name>GtkContainer</name><operator>*</operator><operator>)</operator> <name>_tmp18_</name></expr></argument>, <argument><expr><operator>(</operator><name>GtkWidget</name><operator>*</operator><operator>)</operator> <name>_tmp19_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp20_</name> <operator>=</operator> <name>_vbox0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp21_</name> <operator>=</operator> <name>_hbox0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name> <argument_list>(<argument><expr><operator>(</operator><name>GtkContainer</name><operator>*</operator><operator>)</operator> <name>_tmp20_</name></expr></argument>, <argument><expr><operator>(</operator><name>GtkWidget</name><operator>*</operator><operator>)</operator> <name>_tmp21_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_tmp22_</name> <operator>=</operator> <name>_vbox0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name> <argument_list>(<argument><expr><operator>(</operator><name>GtkContainer</name><operator>*</operator><operator>)</operator> <name>self</name></expr></argument>, <argument><expr><operator>(</operator><name>GtkWidget</name><operator>*</operator><operator>)</operator> <name>_tmp22_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_button2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_button1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_button0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_hbox0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_label0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_g_object_unref0</name> <argument_list>(<argument><expr><name>_vbox0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>main_class_init</name> <parameter_list>(<parameter><decl><type><name>MainClass</name> <modifier>*</modifier></type> <name>klass</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>main_parent_class</name> <operator>=</operator> <call><name>g_type_class_peek_parent</name> <argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>G_OBJECT_CLASS</name> <argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>constructor</name> <operator>=</operator> <name>main_constructor</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>main_instance_init</name> <parameter_list>(<parameter><decl><type><name>Main</name> <modifier>*</modifier></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>


<function><type><name>GType</name></type> <name>main_get_type</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>gsize</name></type> <name>main_type_id__volatile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>g_once_init_enter</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>main_type_id__volatile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GTypeInfo</name></type> <name>g_define_type_info</name> <init>= <expr><block>{ <expr><sizeof>sizeof <argument_list>(<argument><expr><name>MainClass</name></expr></argument>)</argument_list></sizeof></expr>, <expr><operator>(</operator><name>GBaseInitFunc</name><operator>)</operator> <name>NULL</name></expr>, <expr><operator>(</operator><name>GBaseFinalizeFunc</name><operator>)</operator> <name>NULL</name></expr>, <expr><operator>(</operator><name>GClassInitFunc</name><operator>)</operator> <name>main_class_init</name></expr>, <expr><operator>(</operator><name>GClassFinalizeFunc</name><operator>)</operator> <name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><sizeof>sizeof <argument_list>(<argument><expr><name>Main</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>(</operator><name>GInstanceInitFunc</name><operator>)</operator> <name>main_instance_init</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GType</name></type> <name>main_type_id</name></decl>;</decl_stmt>
<expr_stmt><expr><name>main_type_id</name> <operator>=</operator> <call><name>g_type_register_static</name> <argument_list>(<argument><expr><name>GTK_TYPE_WINDOW</name></expr></argument>, <argument><expr><literal type="string">"Main"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_define_type_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_once_init_leave</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>main_type_id__volatile</name></expr></argument>, <argument><expr><name>main_type_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>main_type_id__volatile</name></expr>;</return>
</block_content>}</block></function>



</unit>
