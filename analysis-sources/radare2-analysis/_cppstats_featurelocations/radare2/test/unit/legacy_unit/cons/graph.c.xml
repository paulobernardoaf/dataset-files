<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\test\unit\legacy_unit\cons\graph.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
}</block></struct></type> <name>Node</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>;</decl_stmt>
}</block></struct></type> <name>Edge</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>curnode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Node</name></type> <name><name>nodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">4</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0x8048320</literal></expr>, <expr><literal type="string">"push ebp\nmov esp, ebp\njz 0x8048332"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0x8048332</literal></expr>, <expr><literal type="string">"xor eax, eax\nint 0x80\n"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">30</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0x8048324</literal></expr>, <expr><literal type="string">"pop ebp\nret"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Edge</name></type> <name><name>edges</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_canvas_gotoxy (can, x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_canvas_write (can, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_canvas_box(can, x,y,w,h)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_canvas_line(can, x,y,x2,y2,0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_canvas_fill(can, x,y,x2,y2,c,0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Node_print</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>title</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>r_str_bounds</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>w</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>h</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>R_MAX</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>F</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>x</name></name></expr></argument>,<argument><expr><name><name>n</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"-[ 0x%08"</literal><name>PFMT64x</name><literal type="string">" ]-"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>G</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>x</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>y</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>G</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>x</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>y</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>G</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>x</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>y</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Edge_print</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xinc</name> <init>= <expr><literal type="number">3</literal><operator>+</operator><operator>(</operator><name>nth</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name><operator>+</operator><name>xinc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>y</name></name><operator>+</operator><name><name>a</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name><operator>+</operator><name>xinc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>L</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_cons_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>can</name> <operator>=</operator> <call><name>r_cons_canvas_new</name> <argument_list>(<argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>repeat</name>:</label>
<expr_stmt><expr><call><name>r_cons_canvas_clear</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nth</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Edge_print</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>Node_print</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>==</operator><name>curnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>r_cons_canvas_print</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>nodes[curnode]</cpp:value></cpp:define>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>curnode</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodes</name><index>[<expr><name>curnode</name></expr>]</index></name><operator>.</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curnode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case> <expr_stmt><expr><name><name>N</name><operator>.</operator><name>y</name></name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'k'</literal></expr>:</case> <expr_stmt><expr><name><name>N</name><operator>.</operator><name>y</name></name><operator>--</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> <expr_stmt><expr><name><name>N</name><operator>.</operator><name>x</name></name><operator>--</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name><name>N</name><operator>.</operator><name>x</name></name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'J'</literal></expr>:</case> <expr_stmt><expr><name><name>N</name><operator>.</operator><name>y</name></name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'K'</literal></expr>:</case> <expr_stmt><expr><name><name>N</name><operator>.</operator><name>y</name></name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case> <expr_stmt><expr><name><name>N</name><operator>.</operator><name>x</name></name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><name><name>N</name><operator>.</operator><name>x</name></name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">27</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">91</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">90</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curnode</name><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>curnode</name> <operator>=</operator> <name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>curnode</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Key %d\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sleep</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<goto>goto <name>repeat</name>;</goto>
<expr_stmt><expr><call><name>r_cons_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
