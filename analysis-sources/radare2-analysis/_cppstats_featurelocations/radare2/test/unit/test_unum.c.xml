<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\test\unit\test_unum.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>RNum</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>test_r_num_units</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>humansz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<struct><specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected_res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>num</name></decl>;</decl_stmt>
}</block> <decl><name><name>test_cases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="number">0ULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="number">512ULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1K"</literal></expr>, <expr><literal type="string">"K"</literal></expr>, <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1M"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1G"</literal></expr>, <expr><literal type="string">"G"</literal></expr>, <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1T"</literal></expr>, <expr><literal type="string">"T"</literal></expr>, <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1P"</literal></expr>, <expr><literal type="string">"P"</literal></expr>, <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">50</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1E"</literal></expr>, <expr><literal type="string">"E"</literal></expr>, <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.0K"</literal></expr>, <expr><literal type="string">"K"</literal></expr>, <expr><literal type="number">1025</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"994K"</literal></expr>, <expr><literal type="string">"K"</literal></expr>, <expr><literal type="number">994</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"999K"</literal></expr>, <expr><literal type="string">"K"</literal></expr>, <expr><literal type="number">999</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1.0M"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="number">1025</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1.5M"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="number">1536</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1.9M"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="number">1996</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2.0M"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="number">1997</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2.0M"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="number">2047</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2M"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="number">2048</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2.0M"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="number">2099</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2.1M"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="number">2100</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"9.9G"</literal></expr>, <expr><literal type="string">"G"</literal></expr>, <expr><literal type="number">10188</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"82P"</literal></expr>, <expr><literal type="string">"P"</literal></expr>, <expr><literal type="number">82</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">50</literal><operator>)</operator></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"16E"</literal></expr>, <expr><literal type="string">"E"</literal></expr>, <expr><name>UT64_MAX</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>size_t</name></type> <name>nitems</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>test_cases</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>test_cases</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>humansz</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>humansz</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>test_cases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>humansz</name></expr></argument>, <argument><expr><name><name>test_cases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expected_res</name></expr></argument>, <argument><expr><name><name>test_cases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_num_minmax_swap_i</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_num_minmax_swap_i</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"a &lt; b -&gt; a &lt; b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_num_minmax_swap_i</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"b &lt; a -&gt; a &lt; b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_num_minmax_swap</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>a</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_num_minmax_swap</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>a</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"a &lt; b -&gt; a &lt; b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_num_minmax_swap</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>a</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"b &lt; a -&gt; a &lt; b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_num_between</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_between</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="string">"1 2 3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1 &lt;= 2 &lt;= 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_between</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="string">"3 2 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"3 &lt;= 2 &lt;= 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_between</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="string">"1 1 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1 &lt;= 1 &lt;= 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_between</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="string">"2 1 3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"2 &lt;= 1 &lt;= 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_between</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="string">"1 2 1+2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1 &lt;= 2 &lt;= 1+2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_between</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="string">"2 3 1+2+3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"2 &lt;= 3 &lt;= 1+2+3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_between</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="string">"1+2 2 1+1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"1+2 &lt;= 2 &lt;= 1+1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_between</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="string">"1 + 2 2 1 + 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"1 + 2 &lt;= 2 &lt;= 1 + 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_num_str_len</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"\"1\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"1+1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"\"1+1\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"1 + 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"\"1 + 1\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"1 + 1 "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"\"1 + 1 \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"1 + 1 "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"\"1 + 1 \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"1 + 1 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"\"1 + 1 1\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"1 + 1 1 + 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"\"1 + 1 1 + 1\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"1 + (1 + 1) 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"\"1 + (1 + 1) 1\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"1 + (1 + (1 + 1)) 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="string">"\"1 + (1 + (1 + 1)) 1\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"1+(1+(1+1)) 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"\"1+(1+(1+1)) 1\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"(1 + 1) + (1 + 1) 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="string">"\"(1 + 1) + (1 + 1) 1\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_num_str_len</name> <argument_list>(<argument><expr><literal type="string">"(1+1)+(1+1) 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"\"(1+1)+(1+1) 1\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_num_str_split</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"1 1 + 2 1 + (2 + 3) 4 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>r_num_str_split</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"r_num_str_split (str) == 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"1 + 2"</literal></expr></argument>, <argument><expr><literal type="string">"1 + 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"1 + (2 + 3)"</literal></expr></argument>, <argument><expr><literal type="string">"1 + (2 + 3)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_num_str_split_list</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"1 1 + 2 1 + (2 + 3) 4 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_num_str_split_list</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"r_list_length (list) == 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_list_pop_head</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_list_pop_head</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"1 + 2"</literal></expr></argument>, <argument><expr><literal type="string">"1 + 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_list_pop_head</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"1 + (2 + 3)"</literal></expr></argument>, <argument><expr><literal type="string">"1 + (2 + 3)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_list_pop_head</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_num_units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_num_minmax_swap_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_num_minmax_swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_num_between</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_num_str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_num_str_split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_num_str_split_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>r_num_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>all_tests</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
