<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\test\unit\test_contrbtree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>simple_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>incoming</name></expr>, <expr><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>in</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_rbtree_cont_insert</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>r_rbtree_cont_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut32</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>)</operator><call><name>r_num_rand</name><argument_list>(<argument><expr><name>UT32_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_insert</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><name>simple_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBIter</name></type> <name>ator</name></decl>;</decl_stmt>
<macro><name>r_rbtree_cont_foreach</name><argument_list>(<argument>tree</argument>, <argument>ator</argument>, <argument>v</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>next</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <operator>(</operator><name>i</name> <operator>&lt;=</operator> <name>next</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_rbtree_cont_free</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert</name><argument_list>(<argument><expr><literal type="string">"rbtree_cont_insert"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>strbuf_num_cmp0</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>r_num_get</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name><argument_list>(<argument><expr><operator>(</operator><name>RStrBuf</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>r_num_get</name><argument_list>(<argument>NULL</argument>, <argument>r_strbuf_get((RStrBuf *)in)</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>strbuf_num_cmp1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><name>incoming</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>, <macro><name>r_num_get</name><argument_list>(<argument>NULL</argument>, <argument>r_strbuf_get((RStrBuf *)in)</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_rbtree_cont_delete</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>r_rbtree_cont_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RContRBFree</name><operator>)</operator><name>r_strbuf_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_insert</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><call><name>r_strbuf_new</name><argument_list>(<argument><expr><literal type="string">"13"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strbuf_num_cmp0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_insert</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><call><name>r_strbuf_new</name><argument_list>(<argument><expr><literal type="string">"0x9090"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strbuf_num_cmp0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_insert</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><call><name>r_strbuf_new</name><argument_list>(<argument><expr><literal type="string">"42"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strbuf_num_cmp0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_insert</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><call><name>r_strbuf_new</name><argument_list>(<argument><expr><literal type="string">"23"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strbuf_num_cmp0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_insert</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><call><name>r_strbuf_new</name><argument_list>(<argument><expr><literal type="string">"0x13373"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strbuf_num_cmp0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>del_me</name> <init>= <expr><literal type="number">0x9090</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_rbtree_cont_delete</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del_me</name></expr></argument>, <argument><expr><name>strbuf_num_cmp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RBIter</name></type> <name>ator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<macro><name>r_rbtree_cont_foreach_prev</name><argument_list>(<argument>tree</argument>, <argument>ator</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>v</name> <init>= <expr><call><name>r_num_get</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <operator>(</operator><name>v</name> <operator>!=</operator> <literal type="number">0x9090</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_rbtree_cont_free</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert</name><argument_list>(<argument><expr><literal type="string">"rbtree_cont_delete"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_rbtree_cont_insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_rbtree_cont_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tests_run</name> <operator>!=</operator> <name>tests_passed</name></expr>;</return>
</block_content>}</block></function>
</unit>
