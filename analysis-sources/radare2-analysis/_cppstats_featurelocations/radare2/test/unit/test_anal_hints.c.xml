<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\test\unit\test_anal_hints.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>RAnalHint</name></type> <name>empty_hint</name> <init>= <expr><block>{
<expr><operator>.</operator><name>addr</name> <operator>=</operator> <name>UT64_MAX</name></expr>,
<expr><operator>.</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>val</name> <operator>=</operator> <name>UT64_MAX</name></expr>,
<expr><operator>.</operator><name>jump</name> <operator>=</operator> <name>UT64_MAX</name></expr>,
<expr><operator>.</operator><name>fail</name> <operator>=</operator> <name>UT64_MAX</name></expr>,
<expr><operator>.</operator><name>ret</name> <operator>=</operator> <name>UT64_MAX</name></expr>,
<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>opcode</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>offset</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>new_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>immbase</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>high</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>nword</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>stackframe</name> <operator>=</operator> <name>UT64_MAX</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>hint_equals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnalHint</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RAnalHint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EQ</name><parameter_list>(<parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mu_assert_eq (a-&gt;member, b-&gt;member, "hint member " #member)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>new_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>immbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>nword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name> <argument_list>(<argument><expr><name>stackframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_EQ</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_STREQ</name><parameter_list>(<parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mu_assert_nullable_streq (a-&gt;member, b-&gt;member, "hint member " #member)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>CHECK_STREQ</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STREQ</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STREQ</name> <argument_list>(<argument><expr><name>syntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STREQ</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_STREQ</name> <argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_STREQ</name></cpp:undef>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_hint_eq</name><parameter_list>(<parameter><type><name>actual</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (actual == NULL) mu_assert ("hint", expected == &amp;empty_hint); else mu_assert ("hint", hint_equals (actual, expected)); } while (0)</cpp:value></cpp:define>






<function><type><name>bool</name></type> <name>test_r_anal_addr_hints</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><call><name>r_anal_hint_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert_hint_eq</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalHint</name></type> <name>cur</name> <init>= <expr><name>empty_hint</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name></cpp:macro> <cpp:value>hint = r_anal_hint_get (anal, 0x1337); assert_hint_eq (hint, &amp;cur); r_anal_hint_free (hint);</cpp:value></cpp:define>



<expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>r_anal_hint_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1338</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> \
<expr_stmt><expr><call><name>assert_hint_eq</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> \
<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>r_anal_hint_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1336</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> \
<expr_stmt><expr><call><name>assert_hint_eq</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> \
<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>r_anal_hint_set_syntax</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"mysyntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>syntax</name></name> <operator>=</operator> <literal type="string">"mysyntax"</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_type</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><name>R_ANAL_OP_TYPE_RET</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_jump</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0xdeadbeef</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0xdeadbeef</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_fail</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0xc0ffee</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>fail</name></name> <operator>=</operator> <literal type="number">0xc0ffee</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_nword</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>nword</name></name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_offset</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"mytypeoff"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="string">"mytypeoff"</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_immbase</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>immbase</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_size</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0x123</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0x123</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_opcode</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"myopcode"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <literal type="string">"myopcode"</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_esil</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"/,-rf,rm"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>esil</name></name> <operator>=</operator> <literal type="string">"/,-rf,rm"</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_pointer</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0x4242</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0x4242</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_ret</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0xf00d</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>ret</name></name> <operator>=</operator> <literal type="number">0xf00d</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_high</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_stackframe</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0x4321</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>stackframe</name></name> <operator>=</operator> <literal type="number">0x4321</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_val</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0x112358d</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>val</name></name> <operator>=</operator> <literal type="number">0x112358d</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_set_newbits</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>new_bits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>



<name>r_anal_hint_unset_syntax</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>syntax</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_type</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_jump</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_fail</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_nword</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>nword</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_offset</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_immbase</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>immbase</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_size</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_opcode</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_esil</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>esil</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_pointer</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_ret</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>ret</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_high</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_stackframe</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>stackframe</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_val</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CHECK</name></type>

<name>r_anal_hint_unset_newbits</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>new_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>r_anal_hint_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_hint_eq</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK</name></cpp:undef>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGED_TEST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>resetval</name></type></parameter>, <parameter><type><name>assert_val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bool test_r_anal_hints_##name() { RAnal *anal = r_anal_new (); ut64 hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0x1337, &amp;hint_addr), resetval, "no " #name ""); mu_assert_eq (hint_addr, UT64_MAX, "hint addr"); r_anal_hint_##name##_at (anal, 0x1337, NULL); r_anal_hint_set_##name (anal, 0x1337, val); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0x1337, &amp;hint_addr), val, #name " at addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0x1338, &amp;hint_addr), val, #name " after addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, UT64_MAX, &amp;hint_addr), val, #name " after addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0x1336, &amp;hint_addr), resetval, "no " #name " before addr"); mu_assert_eq (hint_addr, UT64_MAX, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0, &amp;hint_addr), resetval, "no " #name " before addr"); mu_assert_eq (hint_addr, UT64_MAX, "hint addr"); r_anal_hint_##name##_at (anal, 0x1337, NULL); RAnalHint cur = empty_hint; cur.name = val; RAnalHint *hint = r_anal_hint_get (anal, 0x1337); assert_hint_eq (hint, &amp;cur); r_anal_hint_free (hint); hint = r_anal_hint_get (anal, 0x1338); assert_hint_eq (hint, &amp;cur); r_anal_hint_free (hint); hint = r_anal_hint_get (anal, 0x1336); assert_hint_eq (hint, &amp;empty_hint); r_anal_hint_free (hint); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0xdeadbeef, &amp;hint_addr), val, "before reset " #name " at addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); r_anal_hint_set_##name (anal, 0xdeadbeef, resetval); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0xdeadbeef, &amp;hint_addr), resetval, "reset " #name " at addr"); mu_assert_eq (hint_addr, 0xdeadbeef, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0xdeadbeef + 1, &amp;hint_addr), resetval, "reset " #name " after addr"); mu_assert_eq (hint_addr, 0xdeadbeef, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, UT64_MAX, &amp;hint_addr), resetval, "reset " #name " after addr"); mu_assert_eq (hint_addr, 0xdeadbeef, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0xdeadbeef - 1, &amp;hint_addr), val, "" #name " before addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); r_anal_hint_unset_##name (anal, 0xdeadbeef); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0x1337, &amp;hint_addr), val, #name " at addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0x1338, &amp;hint_addr), val, #name " after addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, UT64_MAX, &amp;hint_addr), val, #name " after addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0x1336, &amp;hint_addr), resetval, "no " #name " before addr"); mu_assert_eq (hint_addr, UT64_MAX, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0, &amp;hint_addr), resetval, "no " #name " before addr"); mu_assert_eq (hint_addr, UT64_MAX, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0xdeadbeef, &amp;hint_addr), val, "unset reset " #name " at addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0xdeadbeef + 1, &amp;hint_addr), val, "unset reset " #name " after addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, UT64_MAX, &amp;hint_addr), val, "unset reset " #name " after addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0xdeadbeef - 1, &amp;hint_addr), val, #name " before addr"); mu_assert_eq (hint_addr, 0x1337, "hint addr"); r_anal_hint_unset_##name (anal, 0x1337); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0x1336, &amp;hint_addr), resetval, "unset " #name ""); mu_assert_eq (hint_addr, UT64_MAX, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0, &amp;hint_addr), resetval, "unset " #name ""); mu_assert_eq (hint_addr, UT64_MAX, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0x1337, &amp;hint_addr), resetval, "unset " #name ""); mu_assert_eq (hint_addr, UT64_MAX, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, 0x1338, &amp;hint_addr), resetval, "unset " #name ""); mu_assert_eq (hint_addr, UT64_MAX, "hint addr"); hint_addr = 0xdead; assert_val (r_anal_hint_##name##_at (anal, UT64_MAX, &amp;hint_addr), resetval, "unset " #name ""); mu_assert_eq (hint_addr, UT64_MAX, "hint addr"); hint_addr = 0xdead; r_anal_free (anal); mu_end; }</cpp:value></cpp:define>

















































































































<macro><name>RANGED_TEST</name><argument_list>(<argument>arch</argument>, <argument><literal type="string">"6502"</literal></argument>, <argument>NULL</argument>, <argument>mu_assert_nullable_streq</argument>)</argument_list></macro>
<macro><name>RANGED_TEST</name><argument_list>(<argument>bits</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>mu_assert_eq</argument>)</argument_list></macro>

<function><type><name>bool</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_anal_addr_hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_anal_hints_arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_anal_hints_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
