<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\test\unit\test_util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>Sdb</name> <modifier>*</modifier></type><name>setup_sdb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"ExitProcess"</literal></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"ReadFile"</literal></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"memcpy"</literal></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"strchr"</literal></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"__stack_chk_fail"</literal></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"WSAStartup"</literal></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_dll_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>TDB</name> <init>= <expr><call><name>setup_sdb</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sub.KERNEL32.dll_ExitProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"dll_ should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ExitProcess"</literal></expr></argument>, <argument><expr><literal type="string">"dll_ should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sub.dll_ExitProcess_32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"number should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ExitProcess"</literal></expr></argument>, <argument><expr><literal type="string">"number should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sym.imp.KERNEL32.dll_ReadFile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"dll_ and number should be ignored case 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ReadFile"</literal></expr></argument>, <argument><expr><literal type="string">"dll_ and number should be ignored case 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sub.VCRUNTIME14.dll_memcpy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"dll_ and number should be ignored case 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"memcpy"</literal></expr></argument>, <argument><expr><literal type="string">"dll_ and number should be ignored case 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sub.KERNEL32.dll_ExitProcess_32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"dll_ and number should be ignored case 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ExitProcess"</literal></expr></argument>, <argument><expr><literal type="string">"dll_ and number should be ignored case 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"WS2_32.dll_WSAStartup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"dll_ and number should be ignored case 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"WSAStartup"</literal></expr></argument>, <argument><expr><literal type="string">"dll_ and number should be ignored case 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_ignore_prefixes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>TDB</name> <init>= <expr><call><name>setup_sdb</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"fcn.KERNEL32.dll_ExitProcess_32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"fcn. names should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"loc.KERNEL32.dll_ExitProcess_32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"loc. names should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_remove_r2_prefixes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>TDB</name> <init>= <expr><call><name>setup_sdb</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sym.imp.ExitProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"sym.imp should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ExitProcess"</literal></expr></argument>, <argument><expr><literal type="string">"sym.imp should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sym.imp.fcn.ExitProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"sym.imp.fcn should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ExitProcess"</literal></expr></argument>, <argument><expr><literal type="string">"sym.imp.fcn should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"longprefix.ExitProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"prefixes longer than 3 should not be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_autonames</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>TDB</name> <init>= <expr><call><name>setup_sdb</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sub.strchr_123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"function that calls common fcns shouldn't be identified as such"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sub.__strchr_123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"initial _ should not confuse the api"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sub.__stack_chk_fail_740"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"initial _ should not confuse the api"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sym.imp.strchr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"sym.imp. should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"strchr"</literal></expr></argument>, <argument><expr><literal type="string">"strchr should be identified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_initial_underscore</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>TDB</name> <init>= <expr><call><name>setup_sdb</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_type_func_guess</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>, <argument><expr><literal type="string">"sym._strchr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"sym._ should be ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"strchr"</literal></expr></argument>, <argument><expr><literal type="string">"strchr should be identified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>TDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_ignore_prefixes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_remove_r2_prefixes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_dll_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_autonames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_initial_underscore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
