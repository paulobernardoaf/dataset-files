<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\test\unit\test_table.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_LENGTH</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>



<function><type><name>bool</name></type> <name>test_r_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>r_table_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>RTableColumnType</name> <modifier>*</modifier></type><name>typeString</name> <init>= <expr><call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumnType</name> <modifier>*</modifier></type><name>typeNumber</name> <init>= <expr><call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>typeString</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>typeNumber</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_table_add_row</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_add_row</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"namings"</literal></expr></argument>, <argument><expr><literal type="string">"20000"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>r_table_sort</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>r_table_tojson</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>jOK</name> <init>= <expr><literal type="string">"[{\"name\":\"namings\",\"address\":20000},{\"name\":\"hello\",\"address\":100}]"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>jOK</name></expr></argument>, <argument><expr><literal type="string">"r_table_get_sections"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>r_table_free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>RTable</name> <modifier>*</modifier></type><name>__table_test_data1</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>r_table_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ascii"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_add_column</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"code"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_table_add_row</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"97"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_add_row</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"98"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_add_row</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"99"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_table_column_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>__table_test_data1</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTableColumn</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>r_table_type</name> <argument_list>(<argument><expr><literal type="string">"NUMBER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_sort</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_table_tostring</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><literal type="string">"ascii code\n"</literal>
<literal type="string">"----------\n"</literal>
<literal type="string">"a 97\n"</literal>
<literal type="string">"b 98\n"</literal>
<literal type="string">"c 99\n"</literal></expr></argument>, <argument><expr><literal type="string">"not sorted by second column due to undefined type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_table_tostring</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>__table_test_data1</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUF_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_table_tostring</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUF_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"%d-th call to r_table_tostring"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><literal type="string">"ascii code\n"</literal>
<literal type="string">"----------\n"</literal>
<literal type="string">"a 97\n"</literal>
<literal type="string">"b 98\n"</literal>
<literal type="string">"c 99\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_table_free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_table_sort1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>__table_test_data1</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_table_sort</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strd</name> <init>= <expr><call><name>r_table_tostring</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>strd</name></expr></argument>,
<argument><expr><literal type="string">"ascii code\n"</literal>
<literal type="string">"----------\n"</literal>
<literal type="string">"c 99\n"</literal>
<literal type="string">"b 98\n"</literal>
<literal type="string">"a 97\n"</literal></expr></argument>, <argument><expr><literal type="string">"sort decreasing second column using number type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>strd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_table_sort</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stri</name> <init>= <expr><call><name>r_table_tostring</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>stri</name></expr></argument>,
<argument><expr><literal type="string">"ascii code\n"</literal>
<literal type="string">"----------\n"</literal>
<literal type="string">"a 97\n"</literal>
<literal type="string">"b 98\n"</literal>
<literal type="string">"c 99\n"</literal></expr></argument>, <argument><expr><literal type="string">"sort increasing second column using number type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_table_columns</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_TABLE</name></cpp:macro> <cpp:value>r_table_free (t); t = r_table_new (); r_table_add_column (t, r_table_type ("number"), "name", 0); r_table_add_column (t, r_table_type ("number"), "address", 0); r_table_add_row (t, "hello", "100", NULL); r_table_add_row (t, "namings", "20000", NULL);</cpp:value></cpp:define> 







<decl_stmt><decl><type><name>CREATE_TABLE</name>
<name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_table_tocsv</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><literal type="string">"name,address\n"</literal>
<literal type="string">"hello,100\n"</literal>
<literal type="string">"namings,20000\n"</literal></expr></argument>, <argument><expr><literal type="string">"original"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>newcols</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_table_columns</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>newcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_table_tocsv</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><literal type="string">"\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="string">"no cols"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CREATE_TABLE</name></type>
<name>r_list_push</name> <argument_list>(<argument><expr><name>newcols</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_table_columns</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>newcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_table_tocsv</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><literal type="string">"address\n"</literal>
<literal type="string">"100\n"</literal>
<literal type="string">"20000\n"</literal></expr></argument>, <argument><expr><literal type="string">"select"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CREATE_TABLE</name></type>
<name>r_list_push</name> <argument_list>(<argument><expr><name>newcols</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_table_columns</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>newcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_table_tocsv</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><literal type="string">"address,name\n"</literal>
<literal type="string">"100,hello\n"</literal>
<literal type="string">"20000,namings\n"</literal></expr></argument>, <argument><expr><literal type="string">"reorder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CREATE_TABLE</name></type>
<name>r_list_push</name> <argument_list>(<argument><expr><name>newcols</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>newcols</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_columns</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>newcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_table_tocsv</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><literal type="string">"address,name,name,address\n"</literal>
<literal type="string">"100,hello,hello,100\n"</literal>
<literal type="string">"20000,namings,namings,20000\n"</literal></expr></argument>, <argument><expr><literal type="string">"replicate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>newcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_table_free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CREATE_TABLE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_table_column_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_table_tostring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_table_sort1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_table_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
