<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\test\unit\test_debug.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>offsetof</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>offsetof</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t) &amp;((type *)0)-&gt;field)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>bool</name></type> <name>test_r_debug_use</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RDebug</name> <modifier>*</modifier></type><name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <call><name>r_debug_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">"r_debug_new () failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_debug_use</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"r_debug_use () failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_debug_free</name> <argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_debug_reg_offset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPREGS</name></cpp:macro> <cpp:value>struct user_fpregs_struct</cpp:value></cpp:define>
<decl_stmt><decl><type><name>FPREGS</name></type> <name>regs</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>regs</name><operator>.</operator><name>cwd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"cwd size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>FPREGS</name></expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"cwd offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>regs</name><operator>.</operator><name>rip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"rip size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>FPREGS</name></expr></argument>, <argument><expr><name>rip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"rip offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>regs</name><operator>.</operator><name>mxcsr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"mxcsr size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>FPREGS</name></expr></argument>, <argument><expr><name>mxcsr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="string">"mxcsr offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>regs</name><operator>.</operator><name>mxcr_mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"mxcr_mask size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>FPREGS</name></expr></argument>, <argument><expr><name>mxcr_mask</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="string">"mxcr_mask offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>regs</name><operator>.</operator><name>st_space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"st0 size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>FPREGS</name></expr></argument>, <argument><expr><name><name>st_space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"st0 offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>regs</name><operator>.</operator><name>xmm_space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"xmm0 size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>FPREGS</name></expr></argument>, <argument><expr><name><name>xmm_space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><literal type="string">"xmm0 offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>FPREGS</name></expr></argument>, <argument><expr><name><name>padding</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">416</literal></expr></argument>, <argument><expr><literal type="string">"x64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_debug_use</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_debug_reg_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>all_tests</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
