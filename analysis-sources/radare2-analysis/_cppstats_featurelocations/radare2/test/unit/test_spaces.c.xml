<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\test\unit\test_spaces.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>test_space_basic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><call><name>r_spaces_new</name> <argument_list>(<argument><expr><literal type="string">"spacename"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"spacename"</literal></expr></argument>, <argument><expr><literal type="string">"spacename should be the name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>r_spaces_get</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"notexisting"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"NULL should be returned if not existing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"the current flagspace should not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>r_spaces_set</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"firstspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"a flagspace should be created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"firstspace"</literal></expr></argument>, <argument><expr><literal type="string">"right flag space name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"the current flagspace should exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"firstspace"</literal></expr></argument>, <argument><expr><literal type="string">"right flag space name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>r_spaces_get</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"firstspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"a flagspace should be created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"firstspace"</literal></expr></argument>, <argument><expr><literal type="string">"right flag space name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_spaces_free</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_space_stack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><call><name>r_spaces_new</name> <argument_list>(<argument><expr><literal type="string">"spacename"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name>r_spaces_set</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"firstspace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_spaces_set</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"secondspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>third</name> <init>= <expr><call><name>r_spaces_set</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"thirdspace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_spaces_set</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_spaces_push</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"firstspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_spaces_push</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_spaces_push</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"thirdspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_spaces_current</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>third</name></expr></argument>, <argument><expr><literal type="string">"third now set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_spaces_pop</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"all set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_spaces_pop</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="string">"first now set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_spaces_pop</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"nothing set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_spaces_push</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"fourthspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"fourthspace"</literal></expr></argument>, <argument><expr><literal type="string">"fourth created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_spaces_get</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"fourthspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"fourth should exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_spaces_free</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>count_event</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSpaceEvent</name> <modifier>*</modifier></type><name>spev</name> <init>= <expr><operator>(</operator><name>RSpaceEvent</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>spev</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>count</name><operator>.</operator><name>space</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"firstspace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spev</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>spev</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>count</name><operator>.</operator><name>space</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"secondspace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spev</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>spev</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>count</name><operator>.</operator><name>space</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"thirdspace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spev</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>test_event_called</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_event</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>test_event_called</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_space_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><call><name>r_spaces_new</name> <argument_list>(<argument><expr><literal type="string">"spacename"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_spaces_add</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"firstspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_spaces_add</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"secondspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>third</name> <init>= <expr><call><name>r_spaces_add</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"thirdspace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>R_SPACE_EVENT_COUNT</name></expr></argument>, <argument><expr><name>count_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>R_SPACE_EVENT_UNSET</name></expr></argument>, <argument><expr><name>test_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>R_SPACE_EVENT_RENAME</name></expr></argument>, <argument><expr><name>test_event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>r_spaces_count</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"firstspace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"first contain 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_spaces_count</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"thirdspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"third contain 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_event_called</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_spaces_rename</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"thirdspace"</literal></expr></argument>, <argument><expr><literal type="string">"mynewname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"rename_event has been called"</literal></expr></argument>, <argument><expr><name>test_event_called</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_spaces_get</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"thirdspace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"thirdspace should not exist anymore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_spaces_get</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"mynewname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"mynewname should exist now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>third</name></expr></argument>, <argument><expr><literal type="string">"and it should be equal to thirdspace ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_event_called</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_spaces_unset</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="string">"mynewname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"unset_event has been called"</literal></expr></argument>, <argument><expr><name>test_event_called</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_spaces_free</name> <argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_space_basic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_space_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_space_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
