<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\test\unit\test_intervaltree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>check_invariants</name><parameter_list>(<parameter><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>max</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>RIntervalNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>max_end</name></name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>max_end</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_invariants</name> <argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"left &lt;= this"</literal></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"right &gt;= this"</literal></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>max_end</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="string">"max_end invariant"</literal></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_interval_tree_insert_at</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIntervalTree</name></type> <name>tree</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_interval_tree_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x1337</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_invariants</name> <argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_interval_tree_node_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"at not null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"at node data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"at node start"</literal></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"at node end"</literal></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>direct</name> <init>= <expr><call><name>r_interval_tree_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>direct</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"at data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_interval_tree_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXVAL</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ut64</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>freed</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestEntry</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>random_entries</name><parameter_list>(<parameter><decl><type><name>TestEntry</name></type> <name><name>entries</name><index>[<expr><name>N</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>MAXVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>+</operator> <call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>MAXVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>probe_cb</name><parameter_list>(<parameter><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TestEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>counter</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>end</name></name> <operator>!=</operator> <name><name>node</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <operator>-</operator><literal type="number">99999</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TestEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>freed</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_interval_tree_in</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>end_inclusive</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>intervals</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIntervalTree</name></type> <name>tree</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_interval_tree_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TestEntry</name></type> <name><name>entries</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>random_entries</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><name>entries</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_invariants</name> <argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>start</name> <init>= <expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MAXVAL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ut64</name></type> <name>end</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>intervals</name></expr> ?</condition><then> <expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>MAXVAL</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>intervals</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>r_interval_tree_all_intersect</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>end_inclusive</name></expr></argument>, <argument><expr><name>probe_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>r_interval_tree_all_in</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end_inclusive</name></expr></argument>, <argument><expr><name>probe_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TestEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>entries</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>intervals</name></expr>
?</condition><then> <expr><operator>(</operator> <operator>(</operator><ternary><condition><expr><name>end_inclusive</name></expr> ?</condition><then> <expr><name>end</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>start</name></name></expr> </then><else>: <expr><name>end</name> <operator>&lt;=</operator> <name><name>entry</name><operator>-&gt;</operator><name>start</name></name></expr></else></ternary><operator>)</operator>
<operator>||</operator> <operator>(</operator><ternary><condition><expr><name>end_inclusive</name></expr> ?</condition><then> <expr><name>start</name> <operator>&gt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>end</name></name></expr> </then><else>: <expr><name>start</name> <operator>&gt;=</operator> <name><name>entry</name><operator>-&gt;</operator><name>end</name></name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator> <name>start</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>start</name></name>
<operator>||</operator> <operator>(</operator><ternary><condition><expr><name>end_inclusive</name></expr> ?</condition><then> <expr><name>start</name> <operator>&gt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>end</name></name></expr> </then><else>: <expr><name>start</name> <operator>&gt;=</operator> <name><name>entry</name><operator>-&gt;</operator><name>end</name></name></expr></else></ternary><operator>)</operator><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>counter</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>counter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"[%"</literal><name>PFMT64u</name><literal type="string">"; %"</literal><name>PFMT64u</name><literal type="string">"%c intersect "</literal></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><ternary><condition><expr><name>end_inclusive</name></expr> ?</condition><then> <expr><literal type="char">']'</literal></expr> </then><else>: <expr><literal type="char">'['</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>intervals</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"[%"</literal><name>PFMT64u</name><literal type="string">"; %"</literal><name>PFMT64u</name><literal type="string">"%c "</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><ternary><condition><expr><name>end_inclusive</name></expr> ?</condition><then> <expr><literal type="char">']'</literal></expr> </then><else>: <expr><literal type="char">'['</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64u</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" =&gt; %d\n"</literal></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"counter 0 after reference check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>r_interval_tree_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_IN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bool name() { if(!test_r_interval_tree_in (args)) return false; mu_end; }</cpp:value></cpp:define>
<macro><name>TEST_IN</name> <argument_list>(<argument>test_r_interval_tree_in_end_exclusive_point</argument>, <argument>false</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>TEST_IN</name> <argument_list>(<argument>test_r_interval_tree_in_end_inclusive_point</argument>, <argument>true</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>TEST_IN</name> <argument_list>(<argument>test_r_interval_tree_in_end_exclusive_interval</argument>, <argument>false</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>TEST_IN</name> <argument_list>(<argument>test_r_interval_tree_in_end_inclusive_interval</argument>, <argument>true</argument>, <argument>true</argument>)</argument_list></macro>

<function><type><name>bool</name></type> <name>test_r_interval_tree_all_at</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIntervalTree</name></type> <name>tree</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_interval_tree_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TestEntry</name></type> <name><name>entries</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>random_entries</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><name>entries</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_invariants</name> <argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ut64</name></type> <name>start</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>entries</name><index>[<expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>MAXVAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>r_interval_tree_all_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>probe_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>==</operator> <name>start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>counter</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"counter 0 after reference check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>r_interval_tree_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_interval_tree_node_at_data</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIntervalTree</name></type> <name>tree</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_interval_tree_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TestEntry</name></type> <name><name>entries</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>random_entries</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><name>entries</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_invariants</name> <argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TestEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>entries</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_interval_tree_node_at_data</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"node not null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="string">"node at data contains correct data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>r_interval_tree_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_interval_tree_delete</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIntervalTree</name></type> <name>tree</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_interval_tree_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>free_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TestEntry</name></type> <name><name>entries</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>random_entries</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RPVector</name></type> <name>contained_entries</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>contained_entries</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><name>entries</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>contained_entries</name></expr></argument>, <argument><expr><name>entries</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_invariants</name> <argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_pvector_empty</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>contained_entries</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TestEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>r_pvector_remove_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>contained_entries</name></expr></argument>, <argument><expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>contained_entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_interval_tree_node_at_data</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"node not null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>freed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"entry not freed before delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>s</name> <init>= <expr><call><name>r_interval_tree_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"delete success"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>freed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"entry not freed after delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBIter</name></type> <name>it</name></decl>;</decl_stmt>
<macro><name>r_interval_tree_foreach</name> <argument_list>(<argument>&amp;tree</argument>, <argument>it</argument>, <argument>entry</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>counter</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pit</name></decl>;</decl_stmt>
<macro><name>r_pvector_foreach</name> <argument_list>(<argument>&amp;contained_entries</argument>, <argument>pit</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>*</operator><name>pit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>counter</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"contents after delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="string">"root null after deleting all entries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_interval_tree_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>contained_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_interval_tree_resize</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>end_only</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RIntervalTree</name></type> <name>tree</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_interval_tree_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>free_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TestEntry</name></type> <name><name>entries</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>random_entries</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><name>entries</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_invariants</name> <argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TestEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>entries</name> <operator>+</operator> <operator>(</operator><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>N</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_interval_tree_node_at_data</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end_only</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>MAXVAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>MAXVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"node not null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>s</name> <init>= <expr><call><name>r_interval_tree_resize</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"resize success"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_invariants</name> <argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>RBIter</name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>intervalnode</name></decl>;</decl_stmt>
<macro><name>r_rbtree_foreach</name> <argument_list>(<argument>&amp;tree.root-&gt;node</argument>, <argument>it</argument>, <argument>intervalnode</argument>, <argument>RIntervalNode</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>TestEntry</name> <operator>*</operator><operator>)</operator><name><name>intervalnode</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>counter</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>intervalnode</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"correct start"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq_fmt</name> <argument_list>(<argument><expr><name><name>intervalnode</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><literal type="string">"correct end"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>counter</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"counter 0 after reference check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>r_interval_tree_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_interval_tree_resize_start_and_end</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>test_r_interval_tree_resize</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_interval_tree_resize_end_only</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>test_r_interval_tree_resize</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_interval_tree_insert_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_interval_tree_in_end_exclusive_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_interval_tree_in_end_inclusive_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_interval_tree_in_end_exclusive_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_interval_tree_in_end_inclusive_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_interval_tree_all_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_interval_tree_node_at_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_interval_tree_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_interval_tree_resize_start_and_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_interval_tree_resize_end_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gettimeofday</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name> <init>= <expr><ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>strtoul</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"seed for test_intervaltree: %u\n"</literal></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>srand</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>all_tests</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
