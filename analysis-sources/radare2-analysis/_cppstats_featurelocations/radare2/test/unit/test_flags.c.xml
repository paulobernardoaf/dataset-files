<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats_featurelocations\radare2\test\unit\test_flags.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>test_r_flag_get_set</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>r_flag_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"r_flag_new () failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"cannot find 'foo' flag at 1024"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">300LL</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"found a flag at 0 while there is none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">300LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"cannot find 'foo' flag at 300LL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"cannot find 'foo' flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_flag_free</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_flag_by_spaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>r_flag_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_space_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"sp1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"foo1"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"foo2"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_space_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"sp2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"foo3"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"foo4"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_space_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"sp3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"foo5"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"foo6"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_space_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"sp4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"foo7"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"sp2"</literal></expr></argument>, <argument><expr><literal type="string">"sp4"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"should be retrieved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"foo3"</literal></expr></argument>, <argument><expr><literal type="string">"first defined in sp2 should be get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"something should be retrieved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"foo1"</literal></expr></argument>, <argument><expr><literal type="string">"a random one should be get (the first)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"sp5"</literal></expr></argument>, <argument><expr><literal type="string">"sp8"</literal></expr></argument>, <argument><expr><literal type="string">"sp1"</literal></expr></argument>, <argument><expr><literal type="string">"sp3"</literal></expr></argument>, <argument><expr><literal type="string">"sp10"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"something should be retrieved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"foo1"</literal></expr></argument>, <argument><expr><literal type="string">"first defined in sp1 should be get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_flag_free</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_flag_get_at</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><call><name>r_flag_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_flag_space_set</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"sp1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>foo</name> <init>= <expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="string">"flag at exact"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"no flag at -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1025</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"no flag at +1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="string">"flag at exact"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"no flag at -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1025</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="string">"flag at +1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="string">"flag at +more"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_flag_space_set</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"sp2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"space mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"space mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1025</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"space mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"space mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"space mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1025</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"space mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"space mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>oof</name> <init>= <expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"oof"</literal></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>oof</name></expr></argument>, <argument><expr><literal type="string">"other space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_flag_space_set</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="string">"sp1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="string">"non-interference of spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"non-interference of spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1025</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"non-interference of spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="string">"non-interference of spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_null</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="string">"non-interference of spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1025</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="string">"non-interference of spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="string">"non-interference of spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="string">"non-interference of spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_flag_get_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_flag_by_spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_flag_get_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
