<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\thread_win32.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_THREAD_WIN32_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_THREAD_WIN32_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WIN32</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>WINBASEAPI</name> <name>BOOL</name> <name>WINAPI</name></type>
<name>TryEnterCriticalSection</name><parameter_list>(<parameter><decl><type><name>IN</name> <name>OUT</name> <name>LPCRITICAL_SECTION</name></type> <name>lpCriticalSection</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>rb_thread_cond_struct</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>cond_event_entry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cond_event_entry</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_nativethread_cond_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>native_thread_data_struct</name> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>interrupt_event</name></decl>;</decl_stmt>
}</block></struct></type> <name>native_thread_data_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>rb_global_vm_lock_struct</name> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>lock</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_global_vm_lock_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
