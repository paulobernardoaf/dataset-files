<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\spec\ruby\optional\capi\ext\array_spec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubyspec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_Array</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_Array</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_RARRAY_PTR_iterate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>RARRAY_PTR</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_RARRAY_PTR_assign</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>RARRAY_PTR</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_RARRAY_PTR_memcpy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ptr1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>array1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>RARRAY_PTR</name><argument_list>(<argument><expr><name>array1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>RARRAY_PTR</name><argument_list>(<argument><expr><name>array2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ptr2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>ptr1</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_RARRAY_LEN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_RARRAY_AREF</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_RARRAY_ASET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_aref</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>, <decl><type ref="prev"/><name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1*"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ary</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ary_aref</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RARRAY_PTR</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_clear</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_clear</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_delete</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_delete</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_delete_at</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_delete_at</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_dup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_dup</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_entry</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_includes</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_includes</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_join</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_join</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><name>array2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_to_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_to_s</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_new2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_new_capa</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_new_capa</name><argument_list>(<argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_new3</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>second</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>third</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>third</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_new_from_args</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>second</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>third</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>third</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_new4</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>second</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>third</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>second</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>third</name></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ary_new4</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_new_from_values</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>second</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>third</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>second</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>third</name></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ary_new_from_values</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_pop</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_pop</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_push</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_cat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>, <decl><type ref="prev"/><name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1*"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ary</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ary_cat</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>RARRAY_PTR</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_reverse</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_reverse</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_rotate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_rotate</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_shift</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_shift</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_store</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_concat</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_concat</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><name>array2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_plus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_plus</name><argument_list>(<argument><expr><name>array1</name></expr></argument>, <argument><expr><name>array2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_unshift</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_unshift</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_assoc_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>second</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>copy_ary</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>new_ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>new_ary</name></expr></argument>, <argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_iterate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new_ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_iterate</name><argument_list>(<argument><expr><name>rb_each</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>, <argument><expr><name>copy_ary</name></expr></argument>, <argument><expr><name>new_ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_ary</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>sub_pair</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>holder</name></expr></argument>, <argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>each_pair</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"each_pair"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_iterate_each_pair</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new_ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_iterate</name><argument_list>(<argument><expr><name>each_pair</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sub_pair</name></expr></argument>, <argument><expr><name>new_ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_ary</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>iter_yield</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_iterate_then_yield</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rb_iterate</name><argument_list>(<argument><expr><name>rb_each</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>iter_yield</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_mem_clear</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>ary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_mem_clear</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_freeze</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_freeze</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_to_ary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_to_ary</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>array_spec_rb_ary_subseq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_ary_subseq</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_array_spec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cls</name> <init>= <expr><call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"CApiArraySpecs"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_Array"</literal></expr></argument>, <argument><expr><name>array_spec_rb_Array</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"RARRAY_LEN"</literal></expr></argument>, <argument><expr><name>array_spec_RARRAY_LEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"RARRAY_PTR_iterate"</literal></expr></argument>, <argument><expr><name>array_spec_RARRAY_PTR_iterate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"RARRAY_PTR_assign"</literal></expr></argument>, <argument><expr><name>array_spec_RARRAY_PTR_assign</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"RARRAY_PTR_memcpy"</literal></expr></argument>, <argument><expr><name>array_spec_RARRAY_PTR_memcpy</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"RARRAY_AREF"</literal></expr></argument>, <argument><expr><name>array_spec_RARRAY_AREF</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"RARRAY_ASET"</literal></expr></argument>, <argument><expr><name>array_spec_RARRAY_ASET</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_aref"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_aref</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_clear"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_clear</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_delete"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_delete</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_delete_at"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_delete_at</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_dup"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_dup</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_entry"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_entry</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_includes"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_includes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_join"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_join</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_to_s"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_to_s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_new"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_new2"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_new2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_new_capa"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_new_capa</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_new3"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_new3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_new_from_args"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_new_from_args</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_new4"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_new4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_new_from_values"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_new_from_values</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_pop"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_pop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_push"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_push</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_cat"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_cat</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_reverse"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_reverse</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_rotate"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_rotate</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_shift"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_shift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_store"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_store</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_concat"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_concat</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_plus"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_plus</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_unshift"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_unshift</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_assoc_new"</literal></expr></argument>, <argument><expr><name>array_spec_rb_assoc_new</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_iterate"</literal></expr></argument>, <argument><expr><name>array_spec_rb_iterate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_iterate_each_pair"</literal></expr></argument>, <argument><expr><name>array_spec_rb_iterate_each_pair</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_iterate_then_yield"</literal></expr></argument>, <argument><expr><name>array_spec_rb_iterate_then_yield</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mem_clear"</literal></expr></argument>, <argument><expr><name>array_spec_rb_mem_clear</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_freeze"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_freeze</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_to_ary"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_to_ary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_ary_subseq"</literal></expr></argument>, <argument><expr><name>array_spec_rb_ary_subseq</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
