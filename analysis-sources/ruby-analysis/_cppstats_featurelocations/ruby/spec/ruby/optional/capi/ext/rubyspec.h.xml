<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\spec\ruby\optional\capi\ext\rubyspec.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBYSPEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBYSPEC_H</name></cpp:macro></cpp:define>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RUBY_VERSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby/version.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;version.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VERSION_MAJOR</name></cpp:macro> <cpp:value>RUBY_API_VERSION_MAJOR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VERSION_MINOR</name></cpp:macro> <cpp:value>RUBY_API_VERSION_MINOR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VERSION_TEENY</name></cpp:macro> <cpp:value>RUBY_API_VERSION_TEENY</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VERSION_BEFORE</name><parameter_list>(<parameter><type><name>major</name></type></parameter>,<parameter><type><name>minor</name></type></parameter>,<parameter><type><name>teeny</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RUBY_VERSION_MAJOR &lt; (major)) || (RUBY_VERSION_MAJOR == (major) &amp;&amp; RUBY_VERSION_MINOR &lt; (minor)) || (RUBY_VERSION_MAJOR == (major) &amp;&amp; RUBY_VERSION_MINOR == (minor) &amp;&amp; RUBY_VERSION_TEENY &lt; (teeny)))</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>RUBY_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>RUBY_VERSION_MINOR</name> <operator>&gt;=</operator> <literal type="number">7</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VERSION_IS_2_7</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>RUBY_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>RUBY_VERSION_MINOR</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VERSION_IS_2_6</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>RUBY_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>RUBY_VERSION_MINOR</name> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VERSION_IS_2_5</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>RUBY_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>RUBY_VERSION_MINOR</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VERSION_IS_2_4</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_VERSION_IS_2_7</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method</name><parameter_list>(<parameter><type><name>mod</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method(mod, name, RUBY_METHOD_FUNC(func), argc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method</name><parameter_list>(<parameter><type><name>mod</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_protected_method(mod, name, RUBY_METHOD_FUNC(func), argc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method</name><parameter_list>(<parameter><type><name>mod</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_private_method(mod, name, RUBY_METHOD_FUNC(func), argc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method</name><parameter_list>(<parameter><type><name>mod</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_singleton_method(mod, name, RUBY_METHOD_FUNC(func), argc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function</name><parameter_list>(<parameter><type><name>mod</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_module_function(mod, name, RUBY_METHOD_FUNC(func), argc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_global_function(name, RUBY_METHOD_FUNC(func), argc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_iterate</name><parameter_list>(<parameter><type><name>function</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>block</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_iterate(function, arg1, RUBY_METHOD_FUNC(block), arg2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_hash_foreach</name><parameter_list>(<parameter><type><name>hash</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>farg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_foreach(hash, (int (*)(...))func, farg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_foreach</name><parameter_list>(<parameter><type><name>tab</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>st_foreach(tab, (int (*)(...))func, arg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_block_call</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args_count</name></type></parameter>, <parameter><type><name>args</name></type></parameter>, <parameter><type><name>block_call_func</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_block_call(object, name, args_count, args, RUBY_METHOD_FUNC(block_call_func), data)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_ensure</name><parameter_list>(<parameter><type><name>b_proc</name></type></parameter>, <parameter><type><name>data1</name></type></parameter>, <parameter><type><name>e_proc</name></type></parameter>, <parameter><type><name>data2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_ensure(RUBY_METHOD_FUNC(b_proc), data1, RUBY_METHOD_FUNC(e_proc), data2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_rescue</name><parameter_list>(<parameter><type><name>b_proc</name></type></parameter>, <parameter><type><name>data1</name></type></parameter>, <parameter><type><name>e_proc</name></type></parameter>, <parameter><type><name>data2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_rescue(RUBY_METHOD_FUNC(b_proc), data1, RUBY_METHOD_FUNC(e_proc), data2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_rescue2</name><parameter_list>(<parameter><type><name>b_proc</name></type></parameter>, <parameter><type><name>data1</name></type></parameter>, <parameter><type><name>e_proc</name></type></parameter>, <parameter><type><name>data2</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_rescue2(RUBY_METHOD_FUNC(b_proc), data1, RUBY_METHOD_FUNC(e_proc), data2, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_catch</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_catch(tag, RUBY_METHOD_FUNC(func), data)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_catch_obj</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_catch_obj(tag, RUBY_METHOD_FUNC(func), data)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_proc_new</name><parameter_list>(<parameter><type><name>fn</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_proc_new(RUBY_METHOD_FUNC(fn), arg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_thread_create</name><parameter_list>(<parameter><type><name>fn</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_thread_create(RUBY_METHOD_FUNC(fn), arg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_hooked_variable</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>getter</name></type></parameter>, <parameter><type><name>setter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_hooked_variable(name, var, RUBY_METHOD_FUNC(getter), (void (*)(...))setter)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
