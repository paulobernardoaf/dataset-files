<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\spec\ruby\optional\capi\ext\io_spec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubyspec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_non_blocking</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIOBIO</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIOBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_NON_BLOCKING_FAILS_ALWAYS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>io_spec_get_fd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name><modifier>*</modifier></type> <name>fp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_GetOpenFile_fd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>io_spec_get_fd</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_addstr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_io_addstr</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_printf</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>argc</name> <init>= <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>*</operator><operator>)</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>rb_io_printf</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_print</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>argc</name> <init>= <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>*</operator><operator>)</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>rb_io_print</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_puts</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>argc</name> <init>= <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>*</operator><operator>)</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>rb_io_puts</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_write</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_io_write</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_check_io</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_io_check_io</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_check_readable</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name><modifier>*</modifier></type> <name>fp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_io_check_readable</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_check_writable</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name><modifier>*</modifier></type> <name>fp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_io_check_writable</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_check_closed</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name><modifier>*</modifier></type> <name>fp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_io_check_closed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_taint_check</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><call><name>rb_io_taint_check</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>io</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_IO_WAIT_READABLE_BUF</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_NON_BLOCKING_FAILS_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>NORETURN</name><argument_list>(<argument>VALUE io_spec_rb_io_wait_readable(VALUE self, VALUE io, VALUE read_p)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_wait_readable</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>read_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>io_spec_get_fd</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SET_NON_BLOCKING_FAILS_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>RB_IO_WAIT_READABLE_BUF</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>saved_errno</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>set_non_blocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"set_non_blocking failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SET_NON_BLOCKING_FAILS_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>read_p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>RB_IO_WAIT_READABLE_BUF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>saved_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@write_data"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_io_wait_readable</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>read_p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>RB_IO_WAIT_READABLE_BUF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>RB_IO_WAIT_READABLE_BUF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@read_data"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>RB_IO_WAIT_READABLE_BUF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_wait_writable</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>rb_io_wait_writable</name><argument_list>(<argument><expr><call><name>io_spec_get_fd</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_thread_wait_fd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_wait_fd</name><argument_list>(<argument><expr><call><name>io_spec_get_fd</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_wait_for_single_fd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>secs</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>usecs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>io_spec_get_fd</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>usecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>rb_wait_for_single_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>tv</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_thread_fd_writable</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_fd_writable</name><argument_list>(<argument><expr><call><name>io_spec_get_fd</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_binmode</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_io_binmode</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_fd_fix_cloexec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fd_fix_cloexec</name><argument_list>(<argument><expr><call><name>io_spec_get_fd</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_cloexec_open</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name> <init>= <expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>rb_cloexec_open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>rb_cIO</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"for_fd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_close</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_io_close</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>io_spec_rb_io_set_nonblock</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name><modifier>*</modifier></type> <name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_io_set_nonblock</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>O_NONBLOCK</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>Qfalse</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>io_spec_errno_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_io_spec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cls</name> <init>= <expr><call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"CApiIOSpecs"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"GetOpenFile_fd"</literal></expr></argument>, <argument><expr><name>io_spec_GetOpenFile_fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_addstr"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_addstr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_printf"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_printf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_print"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_print</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_puts"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_puts</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_write"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_write</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_close"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_close</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_check_io"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_check_io</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_check_readable"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_check_readable</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_check_writable"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_check_writable</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_check_closed"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_check_closed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_set_nonblock"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_set_nonblock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_taint_check"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_taint_check</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_wait_readable"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_wait_readable</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_wait_writable"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_wait_writable</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_thread_wait_fd"</literal></expr></argument>, <argument><expr><name>io_spec_rb_thread_wait_fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_thread_fd_writable"</literal></expr></argument>, <argument><expr><name>io_spec_rb_thread_fd_writable</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_wait_for_single_fd"</literal></expr></argument>, <argument><expr><name>io_spec_rb_wait_for_single_fd</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_io_binmode"</literal></expr></argument>, <argument><expr><name>io_spec_rb_io_binmode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_fd_fix_cloexec"</literal></expr></argument>, <argument><expr><name>io_spec_rb_fd_fix_cloexec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cloexec_open"</literal></expr></argument>, <argument><expr><name>io_spec_rb_cloexec_open</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"errno="</literal></expr></argument>, <argument><expr><name>io_spec_errno_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
