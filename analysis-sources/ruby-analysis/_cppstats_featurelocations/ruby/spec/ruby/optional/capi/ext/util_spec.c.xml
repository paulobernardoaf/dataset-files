<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\spec\ruby\optional\capi\ext\util_spec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubyspec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>VALUE</name></type> <name>util_spec_rb_scan_args</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>acc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>result</name></decl>, <decl><type ref="prev"/><name>argc</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>failed</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>a4</name></decl>, <decl><type ref="prev"/><name>a5</name></decl>, <decl><type ref="prev"/><name>a6</name></decl>;</decl_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a2</name> <operator>=</operator> <name>a3</name> <operator>=</operator> <name>a4</name> <operator>=</operator> <name>a5</name> <operator>=</operator> <name>a6</name> <operator>=</operator> <name>failed</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RB_SCAN_ARGS_KEYWORDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'k'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_scan_args_kw</name><argument_list>(<argument><expr><name>RB_SCAN_ARGS_KEYWORDS</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RB_SCAN_ARGS_KEYWORDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_unshift</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_unshift</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_unshift</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_unshift</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_unshift</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_unshift</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eException</name></expr></argument>, <argument><expr><literal type="string">"unexpected number of arguments returned by rb_scan_args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>util_spec_rb_get_kwargs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keyword_hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keys</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>required</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>optional</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>req</name> <init>= <expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>required</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>values_len</name> <init>= <expr><name>req</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>opt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>opt</name></expr> </then><else>: <expr><name>opt</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name> <modifier>*</modifier></type><name>ids</name> <init>= <expr><operator>(</operator><name>ID</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>results</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>values_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extracted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><name>Qundef</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SYM2ID</name><argument_list>(<argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>extracted</name> <operator>=</operator> <call><name>rb_get_kwargs</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new_from_values</name><argument_list>(<argument><expr><name>extracted</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>util_spec_rb_long2int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>rb_long2int</name><argument_list>(<argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>util_spec_rb_iter_break</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>util_spec_rb_sourcefile</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>rb_sourcefile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>util_spec_rb_sourceline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>rb_sourceline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_util_spec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cls</name> <init>= <expr><call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"CApiUtilSpecs"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_scan_args"</literal></expr></argument>, <argument><expr><name>util_spec_rb_scan_args</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_get_kwargs"</literal></expr></argument>, <argument><expr><name>util_spec_rb_get_kwargs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_long2int"</literal></expr></argument>, <argument><expr><name>util_spec_rb_long2int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_iter_break"</literal></expr></argument>, <argument><expr><name>util_spec_rb_iter_break</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_sourcefile"</literal></expr></argument>, <argument><expr><name>util_spec_rb_sourcefile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_sourceline"</literal></expr></argument>, <argument><expr><name>util_spec_rb_sourceline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
