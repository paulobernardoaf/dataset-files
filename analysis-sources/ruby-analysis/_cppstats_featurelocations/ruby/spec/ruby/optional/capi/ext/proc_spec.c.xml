<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\spec\ruby\optional\capi\ext\proc_spec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubyspec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>VALUE</name></type> <name>proc_spec_rb_proc_new_function</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"inspect"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>VALUE</name></type> <name>proc_spec_rb_proc_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_proc_new</name><argument_list>(<argument><expr><name>proc_spec_rb_proc_new_function</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>proc_spec_rb_proc_arity</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>prc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>rb_proc_arity</name><argument_list>(<argument><expr><name>prc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>proc_spec_rb_proc_call</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>prc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_proc_call</name><argument_list>(<argument><expr><name>prc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>proc_spec_rb_obj_is_proc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>prc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_obj_is_proc</name><argument_list>(<argument><expr><name>prc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>VALUE</name></type> <name>proc_spec_rb_Proc_new_helper</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>rb_cProc</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>proc_spec_rb_Proc_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>scenario</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>scenario</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><call><name>proc_spec_rb_Proc_new_helper</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"call_nothing"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>proc_spec_rb_Proc_new_helper</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"call_Proc_new"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"call_rb_Proc_new"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"call_rb_Proc_new_with_block"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"call_rb_Proc_new_with_block"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>proc_spec_rb_Proc_new_helper</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"call_block_given?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eException</name></expr></argument>, <argument><expr><literal type="string">"invalid scenario"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_proc_spec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cls</name> <init>= <expr><call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"CApiProcSpecs"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_proc_new"</literal></expr></argument>, <argument><expr><name>proc_spec_rb_proc_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_proc_arity"</literal></expr></argument>, <argument><expr><name>proc_spec_rb_proc_arity</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_proc_call"</literal></expr></argument>, <argument><expr><name>proc_spec_rb_proc_call</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_Proc_new"</literal></expr></argument>, <argument><expr><name>proc_spec_rb_Proc_new</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_obj_is_proc"</literal></expr></argument>, <argument><expr><name>proc_spec_rb_obj_is_proc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
