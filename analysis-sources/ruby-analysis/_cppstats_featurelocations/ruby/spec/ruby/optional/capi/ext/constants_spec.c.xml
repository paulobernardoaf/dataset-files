<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\spec\ruby\optional\capi\ext\constants_spec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubyspec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>defconstfunc</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE constants_spec_##name(VALUE self) { return name; }</cpp:value></cpp:define>


<macro><name>defconstfunc</name><argument_list>(<argument>rb_cArray</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cBasicObject</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cBinding</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cClass</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cComplex</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_mComparable</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cData</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cDir</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cEncoding</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_mEnumerable</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cEnumerator</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cFalseClass</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cFile</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_mFileTest</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cFloat</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_mGC</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cHash</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cInteger</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cIO</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_mKernel</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_mMath</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cMatch</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cMethod</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cModule</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cNilClass</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cNumeric</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cObject</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cProc</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_mProcess</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cRandom</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cRange</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cRational</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cRegexp</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cStat</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cString</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cStruct</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cSymbol</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cTime</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cThread</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cTrueClass</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_cUnboundMethod</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eArgError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eEncodingError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eEncCompatError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eEOFError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_mErrno</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eException</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eFatal</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eFloatDomainError</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_VERSION_IS_2_5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eFrozenError</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eIndexError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eInterrupt</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eIOError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eKeyError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eLoadError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eLocalJumpError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eMathDomainError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eNameError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eNoMemError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eNoMethodError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eNotImpError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eRangeError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eRegexpError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eRuntimeError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eScriptError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eSecurityError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eSignal</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eStandardError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eStopIteration</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eSyntaxError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eSystemCallError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eSystemExit</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eSysStackError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eTypeError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eThreadError</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_mWaitReadable</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_mWaitWritable</argument>)</argument_list></macro>
<macro><name>defconstfunc</name><argument_list>(<argument>rb_eZeroDivError</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>Init_constants_spec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cls</name> <init>= <expr><call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"CApiConstantsSpecs"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cArray"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cBasicObject"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cBasicObject</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cBinding"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cBinding</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cClass"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cClass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cComplex"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cComplex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mComparable"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_mComparable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cData"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cDir"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cDir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cEncoding"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cEncoding</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mEnumerable"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cEnumerator"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cEnumerator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cFalseClass"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cFalseClass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cFile"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mFileTest"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_mFileTest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cFloat"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cFloat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mGC"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_mGC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cHash"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cHash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cInteger"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cInteger</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cIO"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cIO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mKernel"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_mKernel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mMath"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_mMath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cMatch"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cMatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cMethod"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cMethod</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cModule"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cModule</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cNilClass"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cNilClass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cNumeric"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cNumeric</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cObject"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cObject</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cProc"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cProc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mProcess"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_mProcess</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cRandom"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cRandom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cRange"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cRange</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cRational"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cRational</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cRegexp"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cRegexp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cStat"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cStat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cString"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cString</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cStruct"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cStruct</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cSymbol"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cSymbol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cTime"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cTime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cThread"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cThread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cTrueClass"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cTrueClass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_cUnboundMethod"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_cUnboundMethod</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eArgError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eArgError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eEncodingError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eEncodingError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eEncCompatError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eEncCompatError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eEOFError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eEOFError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mErrno"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_mErrno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eException"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eException</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eFatal"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eFatal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eFloatDomainError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eFloatDomainError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_VERSION_IS_2_5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eFrozenError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eFrozenError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eIndexError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eIndexError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eInterrupt"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eInterrupt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eIOError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eIOError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eKeyError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eKeyError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eLoadError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eLoadError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eLocalJumpError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eLocalJumpError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eMathDomainError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eMathDomainError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eNameError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eNameError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eNoMemError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eNoMemError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eNoMethodError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eNoMethodError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eNotImpError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eNotImpError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eRangeError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eRangeError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eRegexpError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eRegexpError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eRuntimeError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eScriptError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eScriptError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eSecurityError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eSecurityError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eSignal"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eSignal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eStandardError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eStandardError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eStopIteration"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eStopIteration</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eSyntaxError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eSyntaxError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eSystemCallError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eSystemCallError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eSystemExit"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eSystemExit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eSysStackError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eSysStackError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eTypeError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eTypeError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eThreadError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eThreadError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mWaitReadable"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_mWaitReadable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_mWaitWritable"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_mWaitWritable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"rb_eZeroDivError"</literal></expr></argument>, <argument><expr><name>constants_spec_rb_eZeroDivError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
