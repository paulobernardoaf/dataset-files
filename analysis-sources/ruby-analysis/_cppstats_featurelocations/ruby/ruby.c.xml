<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ruby.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cygwin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/pstat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOAD_RELATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLADDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dln.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval_intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/inits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/load.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/loadpath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/missing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/variable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/version.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPATHLEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_ACCMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_ACCMODE</name></cpp:macro> <cpp:value>(O_RDONLY | O_WRONLY | O_RDWR)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>Init_ruby_description</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>getenv</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_RUBYGEMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISABLE_RUBYGEMS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DISABLE_RUBYGEMS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_RUBYGEMS_ENABLED</name></cpp:macro> <cpp:value>"disabled"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_RUBYGEMS_ENABLED</name></cpp:macro> <cpp:value>"enabled"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>rb_warning_category_update</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMA</name></cpp:macro> <cpp:value>,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEATURE_BIT</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1U &lt;&lt; feature_##bit)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EACH_FEATURES</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>SEP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X(gems) SEP X(did_you_mean) SEP X(rubyopt) SEP X(frozen_string_literal) SEP X(jit)</cpp:value></cpp:define> 










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EACH_DEBUG_FEATURES</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>SEP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X(frozen_string_literal)</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMBIGUOUS_FEATURE_NAMES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_FEATURE</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>feature_##bit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DEBUG_FEATURE</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>feature_debug_##bit</cpp:value></cpp:define>
<enum>enum <name>feature_flag_bits</name> <block>{
<decl><name>EACH_FEATURES</name><argument_list>(<argument><expr><name>DEFINE_FEATURE</name></expr></argument>, <argument><expr><name>COMMA</name></expr></argument>)</argument_list></decl>,
<decl><name>feature_debug_flag_first</name></decl>,
<decl><name>feature_debug_flag_begin</name> <init>= <expr><name>feature_debug_flag_first</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>EACH_DEBUG_FEATURES</name><argument_list>(<argument><expr><name>DEFINE_DEBUG_FEATURE</name></expr></argument>, <argument><expr><name>COMMA</name></expr></argument>)</argument_list></decl>,
<decl><name>feature_flag_count</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_BIT</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1U &lt;&lt; feature_debug_##bit)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP_BIT</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1U &lt;&lt; dump_##bit)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUMP</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dump_##bit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EACH_DUMPS</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>SEP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X(version) SEP X(copyright) SEP X(usage) SEP X(help) SEP X(yydebug) SEP X(syntax) SEP X(parsetree) SEP X(parsetree_with_comment) SEP X(insns)</cpp:value></cpp:define> 


















<enum>enum <name>dump_flag_bits</name> <block>{
<decl><name>dump_version_v</name></decl>,
<decl><name>EACH_DUMPS</name><argument_list>(<argument><expr><name>DEFINE_DUMP</name></expr></argument>, <argument><expr><name>COMMA</name></expr></argument>)</argument_list></decl>,
<decl><name>dump_exit_bits</name> <init>= <expr><operator>(</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>yydebug</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>syntax</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>parsetree</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>parsetree_with_comment</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>insns</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><name><name>struct</name> <name>ruby_cmdline_options</name></name></type> <name>ruby_cmdline_options_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>set</name></decl>;</decl_stmt>
}</block></struct></type> <name>ruby_features_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rb_feature_set_to</name><parameter_list>(<parameter><decl><type><name>ruby_features_t</name> <modifier>*</modifier></type><name>feat</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bit_mask</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bit_set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>feat</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>bit_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>feat</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <operator>(</operator><name><name>feat</name><operator>-&gt;</operator><name>set</name></name> <operator>&amp;</operator> <operator>~</operator><name>bit_mask</name><operator>)</operator> <operator>|</operator> <name>bit_set</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEATURE_SET_TO</name><parameter_list>(<parameter><type><name>feat</name></type></parameter>, <parameter><type><name>bit_mask</name></type></parameter>, <parameter><type><name>bit_set</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_feature_set_to(&amp;(feat), bit_mask, bit_set)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEATURE_SET</name><parameter_list>(<parameter><type><name>feat</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FEATURE_SET_TO(feat, bits, bits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEATURE_SET_RESTORE</name><parameter_list>(<parameter><type><name>feat</name></type></parameter>, <parameter><type><name>save</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FEATURE_SET_TO(feat, (save).mask, (save).set &amp; (save).mask)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEATURE_SET_P</name><parameter_list>(<parameter><type><name>feat</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((feat).set &amp; (bits))</cpp:value></cpp:define>

<struct>struct <name>ruby_cmdline_options</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>script_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e_script</name></decl>;</decl_stmt>
<struct>struct <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
}</block> <decl><name>enc</name></decl>;</struct>
}</block> <decl><name>src</name></decl>, <decl><type ref="prev"/><name>ext</name></decl>, <decl><type ref="prev"/><name>intern</name></decl>;</struct>
<decl_stmt><decl><type><name>VALUE</name></type> <name>req_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ruby_features_t</name></type> <name>features</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ruby_features_t</name></type> <name>warn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dump</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MJIT</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>mjit_options</name></name></type> <name>mjit</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>sflag</name></decl>, <decl><type ref="prev"/><name>xflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>warning</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>verbose</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>do_loop</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>do_print</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>do_line</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>do_split</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>do_search</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>setids</name><range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_ids</name><parameter_list>(<parameter><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>src_encoding_index</name></cpp:macro> <cpp:value>GET_VM()-&gt;src_encoding_index</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>COMPILATION_FEATURES</name> <init>= <expr><operator>(</operator>
<literal type="number">0</literal>
<operator>|</operator> <call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>frozen_string_literal</name></expr></argument>)</argument_list></call>
<operator>|</operator> <call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>debug_frozen_string_literal</name></expr></argument>)</argument_list></call>
<operator>)</operator></expr></init></decl>,
<decl><name>DEFAULT_FEATURES</name> <init>= <expr><operator>(</operator>
<operator>(</operator><call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>debug_flag_first</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DISABLE_RUBYGEMS</name></expr></cpp:if>
<operator>&amp;</operator> <operator>~</operator><call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>gems</name></expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;</operator> <operator>~</operator><call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>frozen_string_literal</name></expr></argument>)</argument_list></call>
<operator>&amp;</operator> <operator>~</operator><call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>jit</name></expr></argument>)</argument_list></call>
<operator>)</operator></expr></init></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>ruby_cmdline_options_t</name> <modifier>*</modifier></type>
<name>cmdline_options_init</name><parameter_list>(<parameter><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MEMZERO</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>*</operator><name>opt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_ids</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>src_encoding_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>set</name></name> <operator>=</operator> <name>DEFAULT_FEATURES</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MJIT_FORCE_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>set</name></name> <operator>|=</operator> <call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>jit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>opt</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>rb_ast_t</name> <modifier>*</modifier></type><name>load_file</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>parser</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>script</name></decl></parameter>,
<parameter><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>open_load_file</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fname_v</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xflag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>forbid_setid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ruby_cmdline_options_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forbid_setid</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>forbid_setid((s), opt)</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
}</block> <decl><name>origarg</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_usage_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>namelen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>secondlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>help</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>w</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>wrap</name> <init>= <expr><name>help</name> <operator>&amp;&amp;</operator> <name>namelen</name> <operator>+</operator> <name>secondlen</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>w</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %.*s%-*.*s%-*s%s\n"</literal></expr></argument>, <argument><expr><name>namelen</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>wrap</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>w</name> <operator>-</operator> <name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>help</name></expr> ?</condition><then> <expr><name>secondlen</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>namelen</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>wrap</name></expr> ?</condition><then> <expr><name>w</name> <operator>+</operator> <literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>wrap</name></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>str</name> <operator>+</operator> <name>namelen</name> <operator>+</operator> <name>secondlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>help</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<struct>struct <name>message</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>namelen</name></decl>, <decl><type ref="prev"/><name>secondlen</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name><parameter_list>(<parameter><type><name>shortopt</name></type></parameter>, <parameter><type><name>longopt</name></type></parameter>, <parameter><type><name>desc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ shortopt " " longopt " " desc, (unsigned short)sizeof(shortopt), (unsigned short)sizeof(longopt), }</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>message</name></name></type> <name><name>usage_msg</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-0[octal]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"specify record separator (\\0, if no argument)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-a"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"autosplit mode with -n or -p (splits $_ into $F)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"check syntax only"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-Cdirectory"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"cd to directory before executing your script"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-d"</literal></expr></argument>, <argument><expr><literal type="string">", --debug"</literal></expr></argument>, <argument><expr><literal type="string">"set debugging flags (set $DEBUG to true)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-e 'command'"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"one line of script. Several -e's allowed. Omit [programfile]"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-Eex[:in]"</literal></expr></argument>, <argument><expr><literal type="string">", --encoding=ex[:in]"</literal></expr></argument>, <argument><expr><literal type="string">"specify the default external and internal character encodings"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-Fpattern"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"split() pattern for autosplit (-a)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-i[extension]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"edit ARGV files in place (make backup if extension supplied)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-Idirectory"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"specify $LOAD_PATH directory (may be used more than once)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-l"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"enable line ending processing"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-n"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"assume 'while gets(); ... end' loop around your script"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-p"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"assume loop like -n but print line also like sed"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-rlibrary"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"require the library before executing your script"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"enable some switch parsing for switches after script name"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-S"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"look for the script using PATH environment variable"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-v"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"print the version number, then turn on verbose mode"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-w"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"turn warnings on for your script"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-W[level=2|:category]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"set warning level; 0=silence, 1=medium, 2=verbose"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-x[directory]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"strip off text before #!ruby line and perhaps cd to directory"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--jit"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"enable JIT with default options (experimental)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--jit-[option]"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"enable JIT with an option (experimental)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"-h"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"show this message, --help for more info"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>message</name></name></type> <name><name>help_msg</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--copyright"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"print the copyright"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--dump={insns|parsetree|...}[,...]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><literal type="string">"dump debug information. see below for available dump list"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--enable={gems|rubyopt|...}[,...]"</literal></expr></argument>, <argument><expr><literal type="string">", --disable={gems|rubyopt|...}[,...]"</literal></expr></argument>,
<argument><expr><literal type="string">"enable or disable features. see below for available features"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--external-encoding=encoding"</literal></expr></argument>, <argument><expr><literal type="string">", --internal-encoding=encoding"</literal></expr></argument>,
<argument><expr><literal type="string">"specify the default external or internal character encoding"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--verbose"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"turn on verbose mode and disable script from stdin"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--version"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"print the version number, then exit"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--help"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"show this message, -h for short message"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>message</name></name></type> <name><name>dumps</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"insns"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"instruction sequences"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"yydebug"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"yydebug of yacc parser generator"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"parsetree"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"AST"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"parsetree_with_comment"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"AST with comments"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>message</name></name></type> <name><name>features</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"gems"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"rubygems (default: "</literal><name>DEFAULT_RUBYGEMS_ENABLED</name><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"did_you_mean"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"did_you_mean (default: "</literal><name>DEFAULT_RUBYGEMS_ENABLED</name><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"rubyopt"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"RUBYOPT environment variable (default: enabled)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"frozen-string-literal"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"freeze all string literals (default: disabled)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"jit"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"JIT compiler (default: disabled)"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>message</name></name></type> <name><name>warn_categories</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"deprecated"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"deprecated features"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"experimental"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"experimental features"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>message</name></name></type> <name><name>mjit_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--jit-warnings"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Enable printing JIT warnings"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--jit-debug"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Enable JIT debugging (very slow), or add cflags if specified"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--jit-wait"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Wait until JIT compilation finishes every time (for testing)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--jit-save-temps"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Save JIT temporary files in $TMP or /tmp (for testing)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--jit-verbose=num"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Print JIT logs of level num or less to stderr (default: 0)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--jit-max-cache=num"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Max number of methods to be JIT-ed in a cache (default: 100)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M</name><argument_list>(<argument><expr><literal type="string">"--jit-min-calls=num"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Number of calls to trigger JIT (for testing, default: 10000)"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num</name> <init>= <expr><call><name>numberof</name><argument_list>(<argument><expr><name>usage_msg</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>help</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>show_usage_line((m).str, (m).namelen, (m).secondlen, help)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s [switches] [--] [programfile] [arguments]\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SHOW</name><argument_list>(<argument><expr><name><name>usage_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>help</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>help_msg</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SHOW</name><argument_list>(<argument><expr><name><name>help_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Dump List:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>dumps</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SHOW</name><argument_list>(<argument><expr><name><name>dumps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Features:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>features</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SHOW</name><argument_list>(<argument><expr><name><name>features</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Warning categories:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>warn_categories</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SHOW</name><argument_list>(<argument><expr><name><name>warn_categories</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"JIT options (experimental):"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>mjit_options</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SHOW</name><argument_list>(<argument><expr><name><name>mjit_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rubylib_path_new</name></cpp:macro> <cpp:value>rb_str_new</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>push_include</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>sep</name> <init>= <expr><name>PATH_SEP_CHAR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>load_path</name> <init>= <expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>load_path</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>sep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <name>sep</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <call><name>CharNext</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>load_path</name></expr></argument>, <argument><expr><call>(<modifier>*</modifier><name>filter</name>)<argument_list>(<argument><expr><call><name>rubylib_path_new</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>push_include_cygwin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>rubylib</name><index>[<expr><name>FILENAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">';'</literal></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <call><name>CharNext</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strncpy</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CYGWIN_CONV_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_TO_POSIX_PATH</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>lib</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cygwin_conv_path(CCP_WIN_A_TO_POSIX|CCP_RELATIVE, (p), (lib), sizeof(lib))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> no cygwin_conv_path</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>CONV_TO_POSIX_PATH</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>rubylib</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>rubylib</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>push_include</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>push_include</name></cpp:macro> <cpp:value>push_include_cygwin</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>ruby_push_include</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>push_include</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>identical_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>locale_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>rb_locale_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ruby_incpush</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ruby_push_include</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>locale_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>expand_include_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_file_expand_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ruby_incpush_expand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ruby_push_include</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>expand_include_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UTF8_PATH</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>libruby</name></decl>;</decl_stmt>

<function><type><name>BOOL</name> <name>WINAPI</name></type>
<name>DllMain</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>dll</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>reserved</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name>DLL_PROCESS_ATTACH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>libruby</name> <operator>=</operator> <name>dll</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HANDLE</name></type>
<name>rb_libruby_handle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>libruby</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>translit_char_bin</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8_PATH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8_PATH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UTF8_PATH</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF_UTF8_PATH</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF_UTF8_PATH</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UTF8_PATH</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>str_conv_enc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_str_conv_enc_opts</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name>ECONV_UNDEF_REPLACE</name><operator>|</operator><name>ECONV_INVALID_REPLACE</name></expr></argument>,
<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str_conv_enc</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(str)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>ruby_init_loadpath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOAD_RELATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>runtime_libruby_path</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><name>RSTRING_EMBED_LEN_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>wsopath</name> <init>= <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wlibpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libpath</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>wlibpath</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>wsopath</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><name>ret</name> <operator>=</operator> <call><name>GetModuleFileNameW</name><argument_list>(<argument><expr><name>libruby</name></expr></argument>, <argument><expr><name>wlibpath</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>len</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_str_modify_expand</name><argument_list>(<argument><expr><name>wsopath</name></expr></argument>, <argument><expr><name>len</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>wsopath</name></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>+=</operator> <name>len</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>||</operator> <name>ret</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"failed to get module file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>win_to_posix</name> <init>= <expr><name>CCP_WIN_W_TO_POSIX</name> <operator>|</operator> <name>CCP_RELATIVE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><call><name>cygwin_conv_path</name><argument_list>(<argument><expr><name>win_to_posix</name></expr></argument>, <argument><expr><name>wlibpath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newsize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"failed to convert module path to cygwin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libpath</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cygwin_conv_path</name><argument_list>(<argument><expr><name>win_to_posix</name></expr></argument>, <argument><expr><name>wlibpath</name></expr></argument>, <argument><expr><name>libpath</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <name>ret</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wlibpath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wlibpath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wlibpath</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_utf8_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libpath</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wlibpath</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>libpath</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>wsopath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLADDR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>Dl_info</name></type> <name>dli</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>fname</name></decl>, <decl><type ref="prev"/><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>addr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><name>expand_include_path</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dladdr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dli</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>origarg</name><operator>.</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>origarg</name><operator>.</operator><name>argv</name></name> <operator>&amp;&amp;</operator> <name><name>dli</name><operator>.</operator><name>dli_fname</name></name> <operator>==</operator> <name><name>origarg</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"/proc/self/exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_readlink</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{<block_content>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name><name>dli</name><operator>.</operator><name>dli_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_realpath_internal</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> relative load path is not supported on this platform.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_LOAD_PATH_MARK</name></cpp:macro> <cpp:value>rb_intern_const("@gem_prelude_index")</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ruby_archlibdir_path</name></decl>, <decl><type ref="prev"/><name>ruby_prefix_path</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>ruby_init_loadpath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>load_path</name></decl>, <decl><type ref="prev"/><name>archlibdir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id_initial_load_path_mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>paths</name> <init>= <expr><name>ruby_initial_load_paths</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>LOAD_RELATIVE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>ENABLE_MULTIARCH</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_ARCH_PATH</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>RUBY_ARCH</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_ARCH_PATH</name></cpp:macro> <cpp:value>"/"RUBY_ARCH</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_ARCH_PATH</name></cpp:macro> <cpp:value>"/"RUBY_PLATFORM</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sopath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>baselen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sopath</name> <operator>=</operator> <call><name>runtime_libruby_path</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libpath</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>sopath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>libpath</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>libdir</name><index>[]</index></name> <init>= <expr><literal type="string">"/"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBDIR_BASENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>LIBDIR_BASENAME</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"lib"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>RUBY_ARCH_PATH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>libdir_len</name> <init>= <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>libdir</name></expr></argument>)</argument_list></sizeof>
<operator>-</operator> <call><name>rb_strlen_lit</name><argument_list>(<argument><expr><name>RUBY_ARCH_PATH</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bindir</name><index>[]</index></name> <init>= <expr><literal type="string">"/bin"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>bindir_len</name> <init>= <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>bindir</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_MULTIARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>multiarch</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>libpath</name> <operator>&gt;=</operator> <name>bindir_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRNCASECMP</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>bindir_len</name></expr></argument>, <argument><expr><name>bindir</name></expr></argument>, <argument><expr><name>bindir_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>-=</operator> <name>bindir_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>archlibdir</name> <operator>=</operator> <call><name>rb_str_subseq</name><argument_list>(<argument><expr><name>sopath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>libpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>archlibdir</name></expr></argument>, <argument><expr><name>libdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>archlibdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>p</name> <operator>-</operator> <name>libpath</name> <operator>&gt;=</operator> <name>libdir_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>libdir_len</name></expr></argument>, <argument><expr><name>libdir</name></expr></argument>, <argument><expr><name>libdir_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>archlibdir</name> <operator>=</operator> <call><name>rb_str_subseq</name><argument_list>(<argument><expr><name>sopath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>p2</name></expr> ?</condition><then> <expr><name>p2</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>libpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>archlibdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>-=</operator> <name>libdir_len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_MULTIARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>p2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>rb_enc_path_last_separator</name><argument_list>(<argument><expr><name>libpath</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>rb_ascii8bit_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>multiarch</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>baselen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>libpath</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>sopath</name></expr></argument>, <argument><expr><name>baselen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>libpath</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>sopath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_PATH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>sopath</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASEPATH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rb_str_buf_cat(rb_str_buf_new(baselen+len), libpath, baselen)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_RELATIVE</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_str_buf_cat(BASEPATH(), (path), (len))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>exec_prefix_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>ruby_exec_prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_RELATIVE</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rubylib_path_new((path), (len))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_PATH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>RUBY_RELATIVE(ruby_exec_prefix, exec_prefix_len)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_gc_register_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ruby_prefix_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ruby_prefix_path</name> <operator>=</operator> <call><name>PREFIX_PATH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>ruby_prefix_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>archlibdir</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>archlibdir</name> <operator>=</operator> <name>ruby_prefix_path</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_gc_register_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ruby_archlibdir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ruby_archlibdir_path</name> <operator>=</operator> <name>archlibdir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>load_path</name> <operator>=</operator> <call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>load_path</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ruby_push_include</name><argument_list>(<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"RUBYLIB"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>identical_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_initial_load_path_mark</name> <operator>=</operator> <name>INITIAL_LOAD_PATH_MARK</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>paths</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name> <init>= <expr><call><name>RUBY_RELATIVE</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>id_initial_load_path_mark</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>load_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>paths</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>rb_const_set</name><argument_list>(<argument><expr><name>rb_cObject</name></expr></argument>, <argument><expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"TMP_RUBY_PREFIX"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ruby_prefix_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_modules</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>req_list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>list</name> <init>= <expr><operator>*</operator><name>req_list</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>feature</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>req_list</name> <operator>=</operator> <name>list</name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>feature</name> <operator>=</operator> <call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><call><name>rb_str_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>feature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>require_libraries</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>req_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>list</name> <init>= <expr><operator>*</operator><name>req_list</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>self</name> <init>= <expr><call><name>rb_vm_top_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>require</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>extenc</name> <init>= <expr><call><name>rb_default_external_encoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CONST_ID</name><argument_list>(<argument><expr><name>require</name></expr></argument>, <argument><expr><literal type="string">"require"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>feature</name> <init>= <expr><call><name>rb_ary_shift</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>extenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC_SET_CLASS_RAW</name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>rb_cString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>feature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>require</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>feature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>req_list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>rb_block</name></name><modifier>*</modifier></type>
<name>toplevel_context</name><parameter_list>(<parameter><decl><type><name>rb_binding_t</name> <modifier>*</modifier></type><name>bind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>bind</name><operator>-&gt;</operator><name>block</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_sflag</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sflag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sflag</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>argv</name> <init>= <expr><name>rb_argv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>RARRAY_CONST_PTR</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><operator>*</operator><name>args</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hyphen</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hyphen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>name_error</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>name_error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"invalid name for global variable - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name><name>name_error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name><name>name_error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>name_error</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>args</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><call><name>rb_class_new_instance</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>name_error</name></expr></argument>, <argument><expr><name>rb_eNameError</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hyphen</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_gv_set</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_shift</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>sflag</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>proc_options</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envopt</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>moreswitches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envopt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>argc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>argstr</name></decl>, <decl><type ref="prev"/><name>argary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argstr</name> <operator>=</operator> <call><name>rb_str_tmp_new</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <operator>(</operator><name>envopt</name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argary</name> <operator>=</operator> <call><name>rb_str_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>argstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>argary</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>argary</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></while>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>argary</name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>argary</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMMOVE</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>argary</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>proc_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>envopt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>envopt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>argc</name> <operator>-=</operator> <name>i</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>argv</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><operator>*</operator><name>argv</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>argv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>argary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>argstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>name_match_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>TOLOWER</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>len</name> <operator>||</operator> <operator>!</operator><operator>*</operator><operator>++</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>name</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_MATCH_P</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((len) &lt; (int)sizeof(name) &amp;&amp; name_match_p((name), (str), (len)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNSET_WHEN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>bit</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (NAME_MATCH_P((name), (str), (len))) { *(unsigned int *)arg &amp;= ~(bit); return; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_WHEN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>bit</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (NAME_MATCH_P((name), (str), (len))) { *(unsigned int *)arg |= (bit); return; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITERAL_NAME_ELEMENT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#name</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>feature_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>list</name><index>[]</index></name> <init>= <expr><call><name>EACH_FEATURES</name><argument_list>(<argument><expr><name>LITERAL_NAME_ELEMENT</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ruby_features_t</name> <modifier>*</modifier></type><name>argp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><operator>~</operator><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>set</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AMBIGUOUS_FEATURE_NAMES</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>matched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEATURE_FOUND</name></cpp:macro> <cpp:value>++matched</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEATURE_FOUND</name></cpp:macro> <cpp:value>goto found</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FEATURE</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (NAME_MATCH_P(#bit, str, len)) {set |= mask = FEATURE_BIT(bit); FEATURE_FOUND;}</cpp:value></cpp:define>

<macro><name>EACH_FEATURES</name><argument_list>(<argument>SET_FEATURE</argument>, <argument>;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NAME_MATCH_P</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>found</name>:</label>
<expr_stmt><expr><call><name>FEATURE_SET_TO</name><argument_list>(<argument><expr><operator>*</operator><name>argp</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>enable</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AMBIGUOUS_FEATURE_NAMES</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>matched</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>matched</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mesg</name> <init>= <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"ambiguous feature: `%.*s' ("</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_FEATURE_NAME</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (FEATURE_BIT(bit) &amp; set) { rb_str_cat_cstr(mesg, #bit); if (--matched) rb_str_cat_cstr(mesg, ", "); }</cpp:value></cpp:define>




<macro><name>EACH_FEATURES</name><argument_list>(<argument>ADD_FEATURE_NAME</argument>, <argument>;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><call><name>rb_exc_new_str</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_FEATURE_NAME</name></cpp:undef>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"unknown argument for --%s: `%.*s'"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>enable</name></expr> ?</condition><then> <expr><literal type="string">"enable"</literal></expr> </then><else>: <expr><literal type="string">"disable"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"features are [%.*s]."</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>enable_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>feature_option</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>disable_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>feature_option</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>int</name></type> <name>ruby_patchlevel</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> <name>ruby_env_debug_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>debug_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>list</name><index>[]</index></name> <init>= <expr><call><name>EACH_DEBUG_FEATURES</name><argument_list>(<argument><expr><name>LITERAL_NAME_ELEMENT</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ruby_features_t</name> <modifier>*</modifier></type><name>argp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_WHEN_DEBUG</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (NAME_MATCH_P(#bit, str, len)) { FEATURE_SET(*argp, DEBUG_BIT(bit)); return; }</cpp:value></cpp:define>




<macro><name>EACH_DEBUG_FEATURES</name><argument_list>(<argument>SET_WHEN_DEBUG</argument>, <argument>;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_DEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ruby_patchlevel</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ruby_env_debug_option</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"unknown argument for --debug: `%.*s'"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"debug features are [%.*s]."</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>list</name><index>[]</index></name> <init>= <expr><call><name>EACH_DUMPS</name><argument_list>(<argument><expr><name>LITERAL_NAME_ELEMENT</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_WHEN_DUMP</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SET_WHEN(#bit, DUMP_BIT(bit), str, len)</cpp:value></cpp:define>
<macro><name>EACH_DUMPS</name><argument_list>(<argument>SET_WHEN_DUMP</argument>, <argument>;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"don't know how to dump `%.*s',"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"but only [%.*s]."</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_option_encoding_once</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>elen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ename</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>elen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>elen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ename</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>&amp;&amp;</operator>
<call><name>rb_funcall</name><argument_list>(<argument><expr><name>ename</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"casecmp"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>,
<argument><expr><literal type="string">"%s already set to %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name>ename</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_internal_encoding_once</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>elen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>set_option_encoding_once("default_internal", &amp;(opt)-&gt;intern.enc.name, (e), (elen))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_external_encoding_once</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>elen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>set_option_encoding_once("default_external", &amp;(opt)-&gt;ext.enc.name, (e), (elen))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_source_encoding_once</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>elen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>set_option_encoding_once("source", &amp;(opt)-&gt;src.enc.name, (e), (elen))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MJIT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_mjit_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mjit_options</name></name> <modifier>*</modifier></type><name>mjit_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"-warnings"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mjit_opt</name><operator>-&gt;</operator><name>warnings</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"-debug="</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mjit_opt</name><operator>-&gt;</operator><name>debug_flags</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"-debug"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mjit_opt</name><operator>-&gt;</operator><name>debug</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"-wait"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mjit_opt</name><operator>-&gt;</operator><name>wait</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"-save-temps"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mjit_opt</name><operator>-&gt;</operator><name>save_temps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"-verbose="</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mjit_opt</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"-max-cache="</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mjit_opt</name><operator>-&gt;</operator><name>max_cache_size</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"-min-calls="</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mjit_opt</name><operator>-&gt;</operator><name>min_calls</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>,
<argument><expr><literal type="string">"invalid MJIT option `%s' (--help will show valid MJIT options)"</literal></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>proc_options</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envopt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>argc0</name> <init>= <expr><name>argc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>warning</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>warning</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>argv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr>;</init> <condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>!</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>reswitch</name>:</label>
<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>do_split</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>do_print</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>do_loop</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>ruby_debug</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ruby_verbose</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>|=</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>yydebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>|=</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>version_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>warning</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>warning</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ruby_verbose</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>no_prefix</name><index>[]</index></name> <init>= <expr><literal type="string">"no-"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enable</name> <init>= <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>no_prefix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>no_prefix</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enable</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>no_prefix</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NAME_MATCH_P</name><argument_list>(<argument><expr><literal type="string">"deprecated"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>RB_WARN_CATEGORY_DEPRECATED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>NAME_MATCH_P</name><argument_list>(<argument><expr><literal type="string">"experimental"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>RB_WARN_CATEGORY_EXPERIMENTAL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"unknown warning category: `%s'"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FEATURE_SET_TO</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>warn</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><ternary><condition><expr><name>enable</name></expr> ?</condition><then> <expr><name>bits</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>numlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>scan_oct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>numlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>numlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>warning</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>ruby_verbose</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>ruby_verbose</name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ruby_verbose</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>warning</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>|=</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>syntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>forbid_setid</name><argument_list>(<argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>sflag</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>sflag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>|=</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>switch_end</name>;</goto>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>do_line</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_output_rs</name> <operator>=</operator> <name>rb_rs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>forbid_setid</name><argument_list>(<argument><expr><literal type="string">"-S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>do_search</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>forbid_setid</name><argument_list>(<argument><expr><literal type="string">"-e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"no code specified for -e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>argv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <literal type="string">"-e"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><call><name>forbid_setid</name><argument_list>(<argument><expr><literal type="string">"-r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_modules</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_modules</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>forbid_setid</name><argument_list>(<argument><expr><literal type="string">"-i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ruby_set_inplace_mode</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>forbid_setid</name><argument_list>(<argument><expr><literal type="string">"-x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>xflag</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <call><name>chdir</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"Can't chdir to %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>++</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>--</operator><name>argc</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>argv</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>*</operator><name>s</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"Can't chdir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"Can't chdir to %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rb_fs</name> <operator>=</operator> <call><name>rb_reg_new</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>++</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>--</operator><name>argc</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>argv</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"missing argument for -E"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>encoding</name>;</goto>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_internal_encoding_once</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enc_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><name>enc_name</name> <operator>=</operator> <literal type="string">"EUC-JP"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>enc_name</name> <operator>=</operator> <literal type="string">"Windows-31J"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case> <case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><name>enc_name</name> <operator>=</operator> <literal type="string">"UTF-8"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'N'</literal></expr>:</case> <case>case <expr><literal type="char">'n'</literal></expr>:</case> <case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>enc_name</name> <operator>=</operator> <literal type="string">"ASCII-8BIT"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>enc_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>enc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>numlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scan_oct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>numlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"ruby -T will be removed in Ruby 3.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><call><name>forbid_setid</name><argument_list>(<argument><expr><literal type="string">"-I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ruby_incpush_expand</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_incpush_expand</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt</name>;</goto></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>numlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>scan_oct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>numlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">0377</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rb_rs</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>numlen</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rb_rs</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_rs</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<goto>goto <name>reswitch</name>;</goto>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>switch_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_option_end</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>allow_hyphen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(c) || ((allow_hyphen) &amp;&amp; (c) == '-') || (c) == '=')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_envopt</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>allow_envopt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((allow_envopt) || !envopt) ? (void)0 : rb_raise(rb_eRuntimeError, "invalid switch in RUBYOPT: --" name))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>need_argument</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>needs_arg</name></type></parameter>, <parameter><type><name>next_arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*(s) ? !*++(s) : (next_arg) &amp;&amp; (!argc || !((s) = argv[1]) || (--argc, ++argv, 0))) &amp;&amp; (needs_arg) ? rb_raise(rb_eRuntimeError, "missing argument for --" name) : (void)0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_option_with_arg</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>allow_hyphen</name></type></parameter>, <parameter><type><name>allow_envopt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>is_option_with_optarg(name, allow_hyphen, allow_envopt, Qtrue, Qtrue)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_option_with_optarg</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>allow_hyphen</name></type></parameter>, <parameter><type><name>allow_envopt</name></type></parameter>, <parameter><type><name>needs_arg</name></type></parameter>, <parameter><type><name>next_arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strncmp((name), s, n = sizeof(name) - 1) == 0 &amp;&amp; is_option_end(s[n], (allow_hyphen)) ? (check_envopt(name, (allow_envopt)), s += n, need_argument(name, s, needs_arg, next_arg), 1) : 0)</cpp:value></cpp:define>




<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"copyright"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt_long</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>|=</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>copyright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_option_with_optarg</name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_each_words</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>debug_option</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ruby_debug</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ruby_verbose</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_option_with_arg</name><argument_list>(<argument><expr><literal type="string">"enable"</literal></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_each_words</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>enable_option</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_option_with_arg</name><argument_list>(<argument><expr><literal type="string">"disable"</literal></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_each_words</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>disable_option</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_option_with_arg</name><argument_list>(<argument><expr><literal type="string">"encoding"</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<label><name>encoding</name>:</label>
<do>do <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_encoding_part</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!(p = strchr(s, ':'))) { set_##type##_encoding_once(opt, s, 0); break; } else if (p &gt; s) { set_##type##_encoding_once(opt, s, p-s); }</cpp:value></cpp:define>







<expr_stmt><expr><call><name>set_encoding_part</name><argument_list>(<argument><expr><name>external</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>(</operator><name>s</name> <operator>=</operator> <operator>++</operator><name>p</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_encoding_part</name><argument_list>(<argument><expr><name>internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>(</operator><name>s</name> <operator>=</operator> <operator>++</operator><name>p</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLOW_DEFAULT_SOURCE_ENCODING</name> <operator>&amp;&amp;</operator> <name>ALLOW_DEFAULT_SOURCE_ENCODING</name></expr></cpp:if>
<expr_stmt><expr><call><name>set_encoding_part</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>(</operator><name>s</name> <operator>=</operator> <operator>++</operator><name>p</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"extra argument for %s: %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><literal type="string">"--encoding"</literal></expr> </then><else>: <expr><literal type="string">"-E"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>set_encoding_part</name></cpp:undef>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_option_with_arg</name><argument_list>(<argument><expr><literal type="string">"internal-encoding"</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_internal_encoding_once</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_option_with_arg</name><argument_list>(<argument><expr><literal type="string">"external-encoding"</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_external_encoding_once</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALLOW_DEFAULT_SOURCE_ENCODING</name> <operator>&amp;&amp;</operator> <name>ALLOW_DEFAULT_SOURCE_ENCODING</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>is_option_with_arg</name><argument_list>(<argument><expr><literal type="string">"source-encoding"</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_source_encoding_once</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt_long</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>|=</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"verbose"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ruby_verbose</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"jit"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MJIT</name></expr></cpp:if>
<expr_stmt><expr><call><name>FEATURE_SET</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>features</name></name></expr></argument>, <argument><expr><call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>jit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_mjit_options</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>mjit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"MJIT support is disabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"yydebug"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt_long</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>|=</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>yydebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_option_with_arg</name><argument_list>(<argument><expr><literal type="string">"dump"</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_each_words</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dump_option</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"help"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>envopt</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>noenvopt_long</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>|=</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>switch_end</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>,
<argument><expr><literal type="string">"invalid option --%s (-h will show valid options)"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<default>default:</default>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>,
<argument><expr><literal type="string">"invalid option -%c (-h will show valid options)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>switch_end</name>;</goto>

<label><name>noenvopt</name>:</label>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"invalid switch in RUBYOPT: -%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<label><name>noenvopt_long</name>:</label>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"invalid switch in RUBYOPT: --%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>is_option_end</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>check_envopt</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>need_argument</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>is_option_with_arg</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>is_option_with_optarg</name></cpp:undef>
</block_content>}</block></switch>
</block_content>}</block></for>

<label><name>switch_end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>warning</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>warning</name></name> <operator>=</operator> <name>warning</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>argc0</name> <operator>-</operator> <name>argc</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>Init_builtin_features</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ruby_init_prelude</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Init_builtin_features</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_const_remove</name><argument_list>(<argument><expr><name>rb_cObject</name></expr></argument>, <argument><expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"TMP_RUBY_PREFIX"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>opt_enc_index</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>enc_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>enc_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>rb_enc_find_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"unknown encoding name - %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>rb_enc_dummy_p</name><argument_list>(<argument><expr><call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"dummy encoding is not acceptable - %s "</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_progname</name></cpp:macro> <cpp:value>(GET_VM()-&gt;progname)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_orig_progname</name></cpp:macro> <cpp:value>(GET_VM()-&gt;orig_progname)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_argv0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_e_script</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>false_value</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>_x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>true_value</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>_x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_readonly_boolean</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_virtual_variable((name), (val) ? true_value : false_value, 0)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>uscore_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>line</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>rb_lastline_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"$_ value need to be String (%s given)"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"nil"</literal></expr> </then><else>: <expr><call><name>rb_obj_classname</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>line</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_f_sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_funcall_passing_block</name><argument_list>(<argument><expr><call><name>uscore_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"sub"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_lastline_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_f_gsub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_funcall_passing_block</name><argument_list>(<argument><expr><call><name>uscore_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"gsub"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_lastline_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_f_chop</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_funcall_passing_block</name><argument_list>(<argument><expr><call><name>uscore_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"chop"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_lastline_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_f_chomp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_funcall_passing_block</name><argument_list>(<argument><expr><call><name>uscore_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"chomp"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_lastline_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>process_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>script_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lenc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UTF8_PATH</name></expr></cpp:if>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>uenc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ienc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fbuf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>proc_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dump</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>&amp;</operator> <name>dump_exit_bits</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>&amp;</operator> <operator>(</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>usage</name></expr></argument>)</argument_list></call><operator>|</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>help</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>progname</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argv</name> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>:
<expr><ternary><condition><expr><name><name>origarg</name><operator>.</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>origarg</name><operator>.</operator><name>argv</name></name> <operator>&amp;&amp;</operator> <name><name>origarg</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>origarg</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>:
<expr><name>ruby_engine</name></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>progname</name></expr></argument>, <argument><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>&amp;</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>help</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>set</name></name> <operator>&amp;</operator> <call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>rubyopt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"RUBYOPT"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>src_enc_name</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ext_enc_name</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>int_enc_name</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ruby_features_t</name></type> <name>feat</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>features</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ruby_features_t</name></type> <name>warn</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>warn</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moreswitches</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_enc_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>src_enc_name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_enc_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>ext_enc_name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>int_enc_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>int_enc_name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FEATURE_SET_RESTORE</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>features</name></name></expr></argument>, <argument><expr><name>feat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FEATURE_SET_RESTORE</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>warn</name></name></expr></argument>, <argument><expr><name>warn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"-K is specified; it is for 1.8 compatibility and may cause odd behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MJIT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>set</name></name> <operator>&amp;</operator> <call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>jit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>mjit</name><operator>.</operator><name>on</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>&amp;</operator> <operator>(</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>version_v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MJIT</name></expr></cpp:if>
<expr_stmt><expr><name><name>mjit_opts</name><operator>.</operator><name>on</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>mjit</name><operator>.</operator><name>on</name></name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ruby_show_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>&amp;</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>&amp;</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>copyright</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_show_copyright</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>do_search</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"RUBYPATH"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <call><name>dln_find_file_r</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <call><name>dln_find_file_r</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><name>PATH_ENV</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>forbid_setid</name><argument_list>(<argument><expr><literal type="string">"program input from stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name> <operator>=</operator> <call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN32</name></expr></cpp:if>
<expr_stmt><expr><call><name>translit_char_bin</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>DOSISH</name></expr></cpp:elif>
<expr_stmt><expr><call><name>translit_char</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ruby_gc_set_params</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ruby_init_loadpath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MJIT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>mjit</name><operator>.</operator><name>on</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mjit_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>mjit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Init_ruby_description</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Init_enc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lenc</name> <operator>=</operator> <call><name>rb_locale_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>rb_progname</name></expr></argument>, <argument><expr><name>lenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_obj_freeze</name><argument_list>(<argument><expr><name>rb_progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parser</name> <operator>=</operator> <call><name>rb_parser_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>&amp;</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>yydebug</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_parser_set_yydebug</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>opt_enc_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>opt_enc_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>opt_enc_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_encoding_index</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <name>lenc</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_enc_set_default_external</name><argument_list>(<argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_enc_set_default_internal</name><argument_list>(<argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UTF8_PATH</name></expr></cpp:if>
<expr_stmt><expr><name>ienc</name> <operator>=</operator> <name>enc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>script_name</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>,
<argument><expr><call><name>IF_UTF8_PATH</name><argument_list>(<argument><expr><name>uenc</name> <operator>=</operator> <call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lenc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UTF8_PATH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>uenc</name> <operator>!=</operator> <name>lenc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name> <operator>=</operator> <call><name>str_conv_enc</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>, <argument><expr><name>uenc</name></expr></argument>, <argument><expr><name>lenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_obj_freeze</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IF_UTF8_PATH</name><argument_list>(<argument><expr><name>uenc</name> <operator>!=</operator> <name>lenc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>GET_VM</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>load_path</name> <init>= <expr><name><name>vm</name><operator>-&gt;</operator><name>load_path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ID</name></type> <name>id_initial_load_path_mark</name> <init>= <expr><name>INITIAL_LOAD_PATH_MARK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modifiable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_get_expanded_load_path</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>load_path</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>load_path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mark</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>id_initial_load_path_mark</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>path</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UTF8_PATH</name></expr></cpp:if>
<decl_stmt><decl><type><name>VALUE</name></type> <name>newpath</name> <init>= <expr><call><name>rb_str_conv_enc</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>uenc</name></expr></argument>, <argument><expr><name>lenc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newpath</name> <operator>==</operator> <name>path</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>newpath</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_enc_associate</name><argument_list>(<argument><expr><call><name>rb_str_dup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>mark</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>id_initial_load_path_mark</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>modifiable</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_modify</name><argument_list>(<argument><expr><name>load_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>modifiable</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>load_path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>modifiable</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_replace</name><argument_list>(<argument><expr><name><name>vm</name><operator>-&gt;</operator><name>load_path_snapshot</name></name></expr></argument>, <argument><expr><name>load_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Init_ext</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>set</name></name> <operator>&amp;</operator> <call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>gems</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"Gem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>set</name></name> <operator>&amp;</operator> <call><name>FEATURE_BIT</name><argument_list>(<argument><expr><name>did_you_mean</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"DidYouMean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ruby_init_prelude</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>mask</name></name> <operator>&amp;</operator> <name>COMPILATION_FEATURES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>option</name> <init>= <expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_COMPILE_OPTION</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_aset((h), ID2SYM(rb_intern_const(#name)), (FEATURE_SET_P(o-&gt;features, FEATURE_BIT(name)) ? Qtrue : Qfalse));</cpp:value></cpp:define>


<expr_stmt><expr><call><name>SET_COMPILE_OPTION</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>frozen_string_literal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_COMPILE_OPTION</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>debug_frozen_string_literal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>rb_cISeq</name></expr></argument>, <argument><expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"compile_option="</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_COMPILE_OPTION</name></cpp:undef>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ruby_set_argv</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_sflag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_parser_set_context</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>progname</name> <init>= <expr><name>rb_progname</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>eenc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eenc</name> <operator>=</operator> <call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>eenc</name> <operator>=</operator> <name>lenc</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UTF8_PATH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ienc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eenc</name> <operator>=</operator> <name>ienc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UTF8_PATH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>eenc</name> <operator>!=</operator> <name>uenc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name> <operator>=</operator> <call><name>str_conv_enc</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr></argument>, <argument><expr><name>uenc</name></expr></argument>, <argument><expr><name>eenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr></argument>, <argument><expr><name>eenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>&amp;</operator> <operator>~</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>version_v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_set_script_name</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>require_libraries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ruby_set_script_name</name><argument_list>(<argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_parser_set_options</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_print</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_loop</name></name></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_line</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warning_category_update</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>warn</name><operator>.</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>warn</name><operator>.</operator><name>set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ast</name> <operator>=</operator> <call><name>rb_parser_compile_string</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>open_load_file</name><argument_list>(<argument><expr><name>script_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>xflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ast</name> <operator>=</operator> <call><name>load_file</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ruby_set_script_name</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dump</name> <operator>&amp;</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>yydebug</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dump</name> <operator>&amp;=</operator> <operator>~</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>yydebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dump</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <name>lenc</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_enc_set_default_external</name><argument_list>(<argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_enc_set_default_internal</name><argument_list>(<argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>rb_default_internal_encoding</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_enc_set_default_internal</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_stdio_set_default_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ast</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ast_dispose</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>process_sflag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>sflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>xflag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dump</name> <operator>&amp;</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>syntax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Syntax OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dump</name> <operator>&amp;=</operator> <operator>~</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>syntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dump</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>do_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"sub"</literal></expr></argument>, <argument><expr><name>rb_f_sub</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"gsub"</literal></expr></argument>, <argument><expr><name>rb_f_gsub</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"chop"</literal></expr></argument>, <argument><expr><name>rb_f_chop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"chomp"</literal></expr></argument>, <argument><expr><name>rb_f_chomp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dump</name> <operator>&amp;</operator> <operator>(</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>parsetree</name></expr></argument>)</argument_list></call><operator>|</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>parsetree_with_comment</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_io_write</name><argument_list>(<argument><expr><name>rb_stdout</name></expr></argument>, <argument><expr><call><name>rb_parser_dump_tree</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>root</name></name></expr></argument>, <argument><expr><name>dump</name> <operator>&amp;</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>parsetree_with_comment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_io_flush</name><argument_list>(<argument><expr><name>rb_stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dump</name> <operator>&amp;=</operator> <operator>~</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>parsetree</name></expr></argument>)</argument_list></call><operator>&amp;</operator><operator>~</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>parsetree_with_comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ast_dispose</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_realpath_internal</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>script_name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UTF8_PATH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>uenc</name> <operator>!=</operator> <name>lenc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>str_conv_enc</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>uenc</name></expr></argument>, <argument><expr><name>lenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENCODING_GET</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>rb_enc_copy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>rb_binding_t</name> <modifier>*</modifier></type><name>toplevel_binding</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetBindingPtr</name><argument_list>(<argument><expr><call><name>rb_const_get</name><argument_list>(<argument><expr><name>rb_cObject</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"TOPLEVEL_BINDING"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>toplevel_binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_block</name></name> <modifier>*</modifier></type><name>base_block</name> <init>= <expr><call><name>toplevel_context</name><argument_list>(<argument><expr><name>toplevel_binding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>iseq</name> <operator>=</operator> <call><name>rb_iseq_new_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ast</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>vm_block_iseq</name><argument_list>(<argument><expr><name>base_block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ast_dispose</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>dump</name> <operator>&amp;</operator> <call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>insns</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_io_write</name><argument_list>(<argument><expr><name>rb_stdout</name></expr></argument>, <argument><expr><call><name>rb_iseq_disasm</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>rb_iseq_t</name> <operator>*</operator><operator>)</operator><name>iseq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_io_flush</name><argument_list>(<argument><expr><name>rb_stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dump</name> <operator>&amp;=</operator> <operator>~</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dump</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>&amp;</operator> <name>dump_exit_bits</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_define_readonly_boolean</name><argument_list>(<argument><expr><literal type="string">"$-p"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_print</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_readonly_boolean</name><argument_list>(<argument><expr><literal type="string">"$-l"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_readonly_boolean</name><argument_list>(<argument><expr><literal type="string">"$-a"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rb_e_script</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_exec_event_hook_script_compiled</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>e_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_exec_event_hook_script_compiled</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>iseq</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DOSISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>warn_cr_in_shebang</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"shebang line ending with \\r may cause problems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn_cr_in_shebang</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>load_file_arg</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>load_file_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>argp_v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>load_file_arg</name></name> <modifier>*</modifier></type><name>argp</name> <init>= <expr><operator>(</operator>struct <name>load_file_arg</name> <operator>*</operator><operator>)</operator><name>argp_v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>parser</name> <init>= <expr><name><name>argp</name><operator>-&gt;</operator><name>parser</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>orig_fname</name> <init>= <expr><name><name>argp</name><operator>-&gt;</operator><name>fname</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>script</name> <init>= <expr><name><name>argp</name><operator>-&gt;</operator><name>script</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>argp</name><operator>-&gt;</operator><name>opt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name> <init>= <expr><name><name>argp</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>set_encoding</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CONST_ID</name><argument_list>(<argument><expr><name>set_encoding</name></expr></argument>, <argument><expr><literal type="string">"set_encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>script</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VALUE</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_src_enc</name> <init>= <expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_ext_enc</name> <init>= <expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_int_enc</name> <init>= <expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_ascii8bit_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>set_encoding</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>xflag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_start</name><operator>--</operator></expr>;</expr_stmt>
<label><name>search_shebang</name>:</label>
<while>while <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>line</name> <operator>=</operator> <call><name>rb_io_gets</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_start</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRING_GETMEM</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line_start</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>warn_cr_in_shebang</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>ruby_engine</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>start_read</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>rb_loaderror</name><argument_list>(<argument><expr><literal type="string">"no Ruby script found in input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>rb_io_getbyte</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>rb_io_getbyte</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>line</name> <operator>=</operator> <call><name>rb_io_gets</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RSTRING_GETMEM</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>warn_cr_in_shebang</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>ruby_engine</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>search_shebang</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>start_read</name>:</label>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>str</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>str</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" -"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>warning</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moreswitches</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rb_io_ungetbyte</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"!\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_io_ungetbyte</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_io_ungetbyte</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>no_src_enc</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>opt_enc_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_encoding_index</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>no_ext_enc</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>opt_enc_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>no_int_enc</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>opt_enc_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>intern</name><operator>.</operator><name>enc</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_io_ungetbyte</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argp</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>f</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>dump</name></name> <operator>&amp;</operator> <operator>~</operator><call><name>DUMP_BIT</name><argument_list>(<argument><expr><name>version_v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_set_script_name</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>script_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>require_libraries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>enc</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>f</name> <operator>==</operator> <name>rb_stdin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_locale_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_parser_set_options</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_print</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_loop</name></name></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_line</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>do_split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warning_category_update</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>warn</name><operator>.</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>warn</name><operator>.</operator><name>set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>rb_parser_compile_string_path</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>orig_fname</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>line_start</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>set_encoding</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ast</name> <operator>=</operator> <call><name>rb_parser_compile_file_path</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>orig_fname</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>line_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>set_encoding</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>rb_parser_encoding</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>script</name> <operator>&amp;&amp;</operator> <call><name>rb_parser_end_seen_p</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>












<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argp</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>ast</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>open_load_file</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fname_v</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xflag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><operator>(</operator><name>fname_v</name> <operator>=</operator> <call><name>rb_str_encode_ospath</name><argument_list>(<argument><expr><name>fname_v</name></expr></argument>)</argument_list></call>,
<call><name>StringValueCStr</name><argument_list>(<argument><expr><name>fname_v</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flen</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>fname_v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>rb_stdin</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>O_NONBLOCK</name> <operator>&amp;&amp;</operator> <name>HAVE_FCNTL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>O_NONBLOCK</name> <operator>&amp;</operator> <name>O_ACCMODE</name><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_TO_LOAD</name></cpp:macro> <cpp:value>(O_RDONLY | O_NONBLOCK)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>O_NDELAY</name> <operator>&amp;&amp;</operator> <name>HAVE_FCNTL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>O_NDELAY</name> <operator>&amp;</operator> <name>O_ACCMODE</name><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_TO_LOAD</name></cpp:macro> <cpp:value>(O_RDONLY | O_NDELAY)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_TO_LOAD</name></cpp:macro> <cpp:value>(O_RDONLY)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><name>MODE_TO_LOAD</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>DOSISH</name> <operator>||</operator> <name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isdirsep</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == '/' || (x) == '\\')</cpp:value></cpp:define>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>exeext</name><index>[]</index></name> <init>= <expr><literal type="string">".exe"</literal></expr></init></decl>;</decl_stmt>
<enum>enum <block>{<decl><name>extlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>exeext</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></init></decl>}</block>;</enum>
<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>&gt;</operator> <name>extlen</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdirsep</name><argument_list>(<argument><expr><name><name>fname</name><index>[<expr><name>flen</name><operator>-</operator><name>extlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>STRNCASECMP</name><argument_list>(<argument><expr><name>fname</name><operator>+</operator><name>flen</name><operator>-</operator><name>extlen</name></expr></argument>, <argument><expr><name>exeext</name></expr></argument>, <argument><expr><name>extlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>O_BINARY</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>rb_cloexec_open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_gc_for_fd</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_load_fail</name><argument_list>(<argument><expr><name>fname_v</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>rb_cloexec_open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_load_fail</name><argument_list>(<argument><expr><name>fname_v</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_FCNTL</name> <operator>&amp;&amp;</operator> <name>MODE_TO_LOAD</name> <operator>!=</operator> <name>O_RDONLY</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_load_fail</name><argument_list>(<argument><expr><name>fname_v</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>ruby_is_fd_loadable</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_load_fail</name><argument_list>(<argument><expr><name>fname_v</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rb_io_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>rb_thread_wait_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>restore_load_file</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>load_file_arg</name></name> <modifier>*</modifier></type><name>argp</name> <init>= <expr><operator>(</operator>struct <name>load_file_arg</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name> <init>= <expr><name><name>argp</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>f</name> <operator>!=</operator> <name>rb_stdin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_io_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_ast_t</name> <modifier>*</modifier></type>
<name>load_file</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>parser</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>load_file_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>parser</name></name> <operator>=</operator> <name>parser</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>fname</name></name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>script</name></name> <operator>=</operator> <name>script</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>opt</name></name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rb_ast_t</name> <operator>*</operator><operator>)</operator><call><name>rb_ensure</name><argument_list>(<argument><expr><name>load_file_internal</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>,
<argument><expr><name>restore_load_file</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>rb_load_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>fname_v</name> <init>= <expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_load_file_str</name><argument_list>(<argument><expr><name>fname_v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>rb_load_file_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fname_v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_parser_load_file</name><argument_list>(<argument><expr><call><name>rb_parser_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fname_v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>rb_parser_load_file</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>parser</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fname_v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ruby_cmdline_options_t</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name> <init>= <expr><call><name>open_load_file</name><argument_list>(<argument><expr><name>fname_v</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>cmdline_options_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>xflag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>load_file</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>fname_v</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>proc_argv0</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>process</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>rb_orig_progname</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ruby_setproctitle</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>title</name></decl></parameter>)</parameter_list>;</function_decl>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>proc_setproctitle</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ruby_setproctitle</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ruby_setproctitle</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setproctitle</name><argument_list>(<argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>title</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_arg0</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>origarg</name><operator>.</operator><name>argv</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"$0 not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rb_progname</name> <operator>=</operator> <call><name>rb_str_new_frozen</name><argument_list>(<argument><expr><call><name>ruby_setproctitle</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>external_str_new_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UTF8_PATH</name></expr></cpp:if>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_utf8_str_new_cstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>str_conv_enc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>rb_default_external_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>rb_external_str_new_cstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>ruby_script</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rb_orig_progname</name> <operator>=</operator> <name>rb_progname</name> <operator>=</operator> <call><name>external_str_new_cstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_vm_set_progname</name><argument_list>(<argument><expr><name>rb_progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>ruby_set_script_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>rb_orig_progname</name> <operator>=</operator> <name>rb_progname</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_vm_set_progname</name><argument_list>(<argument><expr><name>rb_progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_ids</name><parameter_list>(<parameter><decl><type><name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_uid_t</name></type> <name>uid</name> <init>= <expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_uid_t</name></type> <name>euid</name> <init>= <expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_gid_t</name></type> <name>gid</name> <init>= <expr><call><name>getgid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_gid_t</name></type> <name>egid</name> <init>= <expr><call><name>getegid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uid</name> <operator>!=</operator> <name>euid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>setids</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>egid</name> <operator>!=</operator> <name>gid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>setids</name></name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>forbid_setid</name></cpp:undef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>forbid_setid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ruby_cmdline_options_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>setids</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSecurityError</name></expr></argument>, <argument><expr><literal type="string">"no %s allowed while running setuid"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>setids</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSecurityError</name></expr></argument>, <argument><expr><literal type="string">"no %s allowed while running setgid"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>verbose_setter</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>variable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>variable</name> <operator>=</operator> <ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>opt_W_getter</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>variable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>variable</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Qnil</name></expr>:</case>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>Qfalse</name></expr>:</case>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>Qtrue</name></expr>:</case>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ruby_prog_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_define_hooked_variable</name><argument_list>(<argument><expr><literal type="string">"$VERBOSE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ruby_verbose</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>verbose_setter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_hooked_variable</name><argument_list>(<argument><expr><literal type="string">"$-v"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ruby_verbose</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>verbose_setter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_hooked_variable</name><argument_list>(<argument><expr><literal type="string">"$-w"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ruby_verbose</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>verbose_setter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_hooked_variable</name><argument_list>(<argument><expr><literal type="string">"$-W"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ruby_verbose</name></expr></argument>, <argument><expr><name>opt_W_getter</name></expr></argument>, <argument><expr><name>rb_gvar_readonly_setter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_variable</name><argument_list>(<argument><expr><literal type="string">"$DEBUG"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ruby_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_variable</name><argument_list>(<argument><expr><literal type="string">"$-d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ruby_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_hooked_variable</name><argument_list>(<argument><expr><literal type="string">"$0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_progname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>set_arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_hooked_variable</name><argument_list>(<argument><expr><literal type="string">"$PROGRAM_NAME"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_progname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>set_arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>rb_mProcess</name></expr></argument>, <argument><expr><literal type="string">"argv0"</literal></expr></argument>, <argument><expr><name>proc_argv0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>rb_mProcess</name></expr></argument>, <argument><expr><literal type="string">"setproctitle"</literal></expr></argument>, <argument><expr><name>proc_setproctitle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"ARGV"</literal></expr></argument>, <argument><expr><name>rb_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ruby_set_argv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>av</name> <init>= <expr><name>rb_argv</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DLN_A_OUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>origarg</name><operator>.</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>origarg</name><operator>.</operator><name>argv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dln_argv0</name> <operator>=</operator> <name><name>origarg</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dln_argv0</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_ary_clear</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name> <init>= <expr><call><name>external_str_new_cstr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ruby_process_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ruby_cmdline_options_t</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>iseq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>script_name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>ruby_engine</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>origarg</name><operator>.</operator><name>argv</name></name> <operator>||</operator> <name><name>origarg</name><operator>.</operator><name>argc</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>origarg</name><operator>.</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>origarg</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ruby_script</name><argument_list>(<argument><expr><name>script_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>rb_argv0</name> <operator>=</operator> <call><name>rb_str_new4</name><argument_list>(<argument><expr><name>rb_progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>rb_argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iseq</name> <operator>=</operator> <call><name>process_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>cmdline_options_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETPROCTITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ruby_init_setproctitle</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator>struct <name>RData</name><operator>*</operator><operator>)</operator><name>iseq</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_standard_fds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>f0</name></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>, <decl><type ref="prev"/><name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>f0</name> <operator>=</operator> <call><name>fstat</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EBADF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>fstat</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EBADF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>fstat</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EBADF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f0</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f1</name> <operator>||</operator> <name>f2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f1</name> <operator>&amp;&amp;</operator> <name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f2</name> <operator>&amp;&amp;</operator> <name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>ruby_sysinit</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_w32_sysinit</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argc</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>origarg</name><operator>.</operator><name>argc</name></name> <operator>=</operator> <operator>*</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>origarg</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <operator>*</operator><name>argv</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DLN_A_OUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dln_argv0</name> <operator>=</operator> <name><name>origarg</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fill_standard_fds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
