<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\vm_exec.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VM_COLLECT_USAGE_DETAILS</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vm_analysis_insn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>insn</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_INSNS_COUNTER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name><name>rb_insns_counter</name><index>[<expr><name>VM_INSTRUCTION_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vm_insns_counter_count_insn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>insn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rb_insns_counter</name><index>[<expr><name>insn</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>__attribute__</name><argument_list>(<argument>(destructor)</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>vm_insns_counter_show_results_at_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>insn_end</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ruby_vm_event_enabled_global_flags</name> <operator>&amp;</operator> <name>ISEQ_TRACE_EVENTS</name><operator>)</operator></expr>
?</condition><then> <expr><name>VM_INSTRUCTION_SIZE</name></expr> </then><else>: <expr><name>VM_INSTRUCTION_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>insn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>insn</name> <operator>&lt;</operator> <name>insn_end</name></expr>;</condition> <incr><expr><name>insn</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>rb_insns_counter</name><index>[<expr><name>insn</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>insn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>insn</name> <operator>&lt;</operator> <name>insn_end</name></expr>;</condition> <incr><expr><name>insn</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"[RUBY_INSNS_COUNTER]\t%-32s%'12"</literal><name>PRIuSIZE</name><literal type="string">" (%4.1f%%)\n"</literal></expr></argument>,
<argument><expr><call><name>insn_name</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rb_insns_counter</name><index>[<expr><name>insn</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">100.0</literal> <operator>*</operator> <name><name>rb_insns_counter</name><index>[<expr><name>insn</name></expr>]</index></name> <operator>/</operator> <name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vm_insns_counter_count_insn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VMDEBUG</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_SC_REG</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register type reg_##r</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_SC_REG</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register type reg_##r __asm__("r" reg)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_SC_REG</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register type reg_##r __asm__("e" reg)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_SC_REG</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register type reg_##r __asm__("r" reg)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_SC_REG</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register type reg_##r</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VM_DEBUG_STACKOVERFLOW</name></expr></cpp:if>
<macro><name>NORETURN</name><argument_list>(<argument>static void vm_stack_overflow_for_insn(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>vm_stack_overflow_for_insn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"CHECK_VM_STACK_OVERFLOW_FOR_INSN: should not overflow here. "</literal>
<literal type="string">"Please contact ruby-core/dev with your (a part of) script. "</literal>
<literal type="string">"This check will be removed soon."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>OPT_CALL_THREADED_CODE</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>vm_exec_core</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>initial</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_STACK_CACHING</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__GNUC__</name> <operator>&amp;&amp;</operator> <name>__x86_64__</name></expr></cpp:elif>
<expr_stmt><expr><call><name>DECL_SC_REG</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECL_SC_REG</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"13"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>register</specifier> <name>VALUE</name></type> <name>reg_a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>VALUE</name></type> <name>reg_b</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DECL_SC_REG</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VALUE</name> <operator>*</operator></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><literal type="string">"di"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECL_SC_REG</name><argument_list>(<argument><expr><name>rb_control_frame_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"si"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MACHINE_REGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>DECL_SC_REG</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VALUE</name> <operator>*</operator></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><literal type="string">"14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECL_SC_REG</name><argument_list>(<argument><expr><name>rb_control_frame_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MACHINE_REGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>DECL_SC_REG</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VALUE</name> <operator>*</operator></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><literal type="string">"14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECL_SC_REG</name><argument_list>(<argument><expr><name>rb_control_frame_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>cfp</name></expr></argument>, <argument><expr><literal type="string">"15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MACHINE_REGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>register</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>reg_cfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>reg_pc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MACHINE_REGS</name></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RESTORE_REGS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTORE_REGS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ VM_REG_CFP = ec-&gt;cfp; reg_pc = reg_cfp-&gt;pc; }</cpp:value></cpp:define>





<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VM_REG_PC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VM_REG_PC</name></cpp:macro> <cpp:value>reg_pc</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_PC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(reg_pc)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_PC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_PC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_cfp-&gt;pc = VM_REG_PC = (x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOKEN_THREADED_CODE</name> <operator>||</operator> <name>OPT_DIRECT_THREADED_CODE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vmtc.inc"</cpp:file></cpp:include>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>ec</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>insns_address_table</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>reg_cfp</name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_pc</name> <operator>=</operator> <name><name>reg_cfp</name><operator>-&gt;</operator><name>pc</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_STACK_CACHING</name></expr></cpp:if>
<expr_stmt><expr><name>reg_a</name> <operator>=</operator> <name>initial</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>first</name>:</label>
<expr_stmt><expr><call><name>INSN_DISPATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm.inc"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>END_INSNS_DISPATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"vm_eval: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>first</name>;</goto>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>rb_vm_get_insns_address_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>vm_exec_core</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm.inc"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vmtc.inc"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>rb_vm_get_insns_address_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>insns_address_table</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>vm_exec_core</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>initial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>reg_cfp</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reg_cfp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rb_insn_func_t</name><operator>)</operator> <operator>(</operator><operator>*</operator><call><name>GET_PC</name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator><operator>(</operator><name>ec</name><operator>,</operator> <name>reg_cfp</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>reg_cfp</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>th</name> <operator>=</operator> <call><name>rb_ec_thread_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>retval</name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>retval</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>retval</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>err</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
