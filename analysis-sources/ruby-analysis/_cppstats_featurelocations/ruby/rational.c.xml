<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\rational.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IEEEFP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ieeefp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBGMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_GMP</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gmp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDEBUG</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/complex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/rational.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby_assert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO</name></cpp:macro> <cpp:value>INT2FIX(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE</name></cpp:macro> <cpp:value>INT2FIX(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWO</name></cpp:macro> <cpp:value>INT2FIX(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMP_GCD_DIGITS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_ZERO_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FIXNUM_P(x) ? FIXNUM_ZERO_P(x) : rb_bigzero_p(x))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_cRational</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_abs</name></decl>, <decl><type ref="prev"/><name>id_integer_p</name></decl>,
<decl><type ref="prev"/><name>id_i_num</name></decl>, <decl><type ref="prev"/><name>id_i_den</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_idiv</name></cpp:macro> <cpp:value>idDiv</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_to_i</name></cpp:macro> <cpp:value>idTo_i</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_boolcast</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) ? Qtrue : Qfalse)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_inspect</name></cpp:macro> <cpp:value>rb_inspect</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_to_s</name></cpp:macro> <cpp:value>rb_obj_as_string</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>nurat_to_f</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_add</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>y</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_div</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>ONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_int_div</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>f_lt_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>y</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_mod</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_int_modulo</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_mul</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ZERO</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>ONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ZERO</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>ONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>y</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_int_mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_sub</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_abs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_int_abs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_abs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_integer_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_to_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_str_to_inum</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_eqeq_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name> <operator>==</operator> <name>y</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_equal</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_idiv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_idiv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_expt10</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_int_pow(INT2FIX(10), x)</cpp:value></cpp:define>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>f_zero_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name> <init>= <expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_equal</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_nonzero_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!f_zero_p(x))</cpp:value></cpp:define>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>f_one_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x</name> <operator>==</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name> <init>= <expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>den</name> <init>= <expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>den</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>num</name> <operator>==</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_equal</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>f_minus_one_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x</name> <operator>==</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name> <init>= <expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>den</name> <init>= <expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>den</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>num</name> <operator>==</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_equal</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>f_kind_of_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>k_numeric_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_kind_of_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>rb_cNumeric</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>k_integer_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>k_float_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>k_rational_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k_exact_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!k_float_p(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k_inexact_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>k_float_p(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k_exact_zero_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(k_exact_p(x) &amp;&amp; f_zero_p(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k_exact_one_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(k_exact_p(x) &amp;&amp; f_one_p(x))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>VALUE</name></type>
<name>rb_gcd_gmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nails</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>SIZEOF_BDIGIT</name><operator>)</operator><operator>*</operator><name>CHAR_BIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpz_t</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>mz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>zn</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>mz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><call><name>BIGNUM_LEN</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nails</name></expr></argument>, <argument><expr><call><name>BIGNUM_DIGITS</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name>my</name></expr></argument>, <argument><expr><call><name>BIGNUM_LEN</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nails</name></expr></argument>, <argument><expr><call><name>BIGNUM_DIGITS</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpz_gcd</name><argument_list>(<argument><expr><name>mz</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpz_clear</name><argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_clear</name><argument_list>(<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zn</name> <operator>=</operator> <operator>(</operator><call><name>mpz_sizeinbase</name><argument_list>(<argument><expr><name>mz</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>SIZEOF_BDIGIT</name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>SIZEOF_BDIGIT</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>rb_big_new</name><argument_list>(<argument><expr><name>zn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_export</name><argument_list>(<argument><expr><call><name>BIGNUM_DIGITS</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nails</name></expr></argument>, <argument><expr><name>mz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpz_clear</name><argument_list>(<argument><expr><name>mz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_big_norm</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_gcd</name></cpp:macro> <cpp:value>f_gcd_orig</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>long</name></type>
<name>i_gcd</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>y</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><operator>(</operator><name>u</name> <operator>|</operator> <name>v</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>shift</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>u</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><operator>(</operator><name>u</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>u</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<do>do <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>u</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>u</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_gcd_normal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>z</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>i_gcd</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INT_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>y</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INT_ZERO_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>y</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>i_gcd</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rb_int_modulo</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_gcd_normal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_gcd_normal</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_gcd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>xn</name> <init>= <expr><call><name>BIGNUM_LEN</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>yn</name> <init>= <expr><call><name>BIGNUM_LEN</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>GMP_GCD_DIGITS</name> <operator>&lt;=</operator> <name>xn</name> <operator>||</operator> <name>GMP_GCD_DIGITS</name> <operator>&lt;=</operator> <name>yn</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_gcd_gmp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>f_gcd_normal</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>f_gcd</name></cpp:undef>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_gcd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name> <init>= <expr><call><name>f_gcd_orig</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_nonzero_p</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>f_zero_p</name><argument_list>(<argument><expr><call><name>f_mod</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>f_zero_p</name><argument_list>(<argument><expr><call><name>f_mod</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_lcm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>INT_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>INT_ZERO_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ZERO</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_abs</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><call><name>f_div</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>f_gcd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_dat1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct RRational *dat = RRATIONAL(x)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_dat2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct RRational *adat = RRATIONAL(x), *bdat = RRATIONAL(y)</cpp:value></cpp:define>


<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_s_new_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>NEWOBJ_OF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>RRational</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_RATIONAL</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>RGENGC_WB_PROTECTED_RATIONAL</name></expr> ?</condition><then> <expr><name>FL_WB_PROTECTED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RATIONAL_SET_NUM</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RATIONAL_SET_DEN</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_s_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>nurat_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_rational_new_bang1</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>nurat_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CANONICALIZATION_FOR_MATHN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>canonicalization</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>RUBY_FUNC_EXPORTED</name> <name>void</name></type>
<name>nurat_canonicalization</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>canonicalization</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>canonicalization</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>nurat_int_check</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>f_integer_p</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"not an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_int_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>nurat_int_check</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_integer_p</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>f_to_i</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nurat_canonicalize</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><operator>*</operator><name>den</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><operator>*</operator><name>den</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>den</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><operator>*</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>INT_ZERO_P</name><argument_list>(<argument><expr><operator>*</operator><name>den</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_num_zerodiv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nurat_reduce</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>gcd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x</name> <operator>==</operator> <name>ONE</name> <operator>||</operator> <operator>*</operator><name>y</name> <operator>==</operator> <name>ONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gcd</name> <operator>=</operator> <call><name>f_gcd</name><argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><name>gcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><operator>*</operator><name>y</name></expr></argument>, <argument><expr><name>gcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_s_canonicalize_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>nurat_canonicalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nurat_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>canonicalization</name> <operator>&amp;&amp;</operator> <call><name>f_one_p</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>num</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>nurat_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_s_canonicalize_internal_no_reduce</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>nurat_canonicalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>canonicalization</name> <operator>&amp;&amp;</operator> <call><name>f_one_p</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>num</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>nurat_s_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_rational_new2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>k_rational_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>k_rational_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>nurat_s_canonicalize_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_rational_new_no_reduce2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>k_rational_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>k_rational_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>nurat_s_canonicalize_internal_no_reduce</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>nurat_convert</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>numv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>denv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raise</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>nurat_s_convert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>






































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_f_rational</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>opts</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>raise</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>raise</name> <operator>=</operator> <call><name>rb_opts_exception_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>raise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>nurat_convert</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>raise</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_numerator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_denominator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>VALUE</name></type>
<name>rb_rational_uminus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>unused</name> <init>= <expr><operator>(</operator><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>unused</name></expr>;</expr_stmt>
<return>return <expr><call><name>f_rational_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_int_uminus</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_imul</name></cpp:macro> <cpp:value>f_imul_orig</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_imul</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ZERO</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MUL_OVERFLOW_LONG_P</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rb_big_mul</name><argument_list>(<argument><expr><call><name>rb_int2big</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_int2big</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>LONG2NUM</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>f_imul</name></cpp:undef>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_imul</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name> <init>= <expr><call><name>f_imul_orig</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_addsub</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>anum</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>aden</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>bnum</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>bden</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>aden</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>an</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ad</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>aden</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bn</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bd</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ig</name> <init>= <expr><call><name>i_gcd</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>g</name> <init>= <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>ig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name> <init>= <expr><call><name>f_imul</name><argument_list>(<argument><expr><name>an</name></expr></argument>, <argument><expr><name>bd</name> <operator>/</operator> <name>ig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>b</name> <init>= <expr><call><name>f_imul</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>ad</name> <operator>/</operator> <name>ig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>rb_int_plus</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>rb_int_minus</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>aden</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>f_gcd</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>bden</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>aden</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>g</name> <init>= <expr><call><name>f_gcd</name><argument_list>(<argument><expr><name>aden</name></expr></argument>, <argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name> <init>= <expr><call><name>rb_int_mul</name><argument_list>(<argument><expr><name>anum</name></expr></argument>, <argument><expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>bden</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>b</name> <init>= <expr><call><name>rb_int_mul</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>, <argument><expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>aden</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>rb_int_plus</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>rb_int_minus</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>aden</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>f_gcd</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>bden</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name>aden</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="char">'+'</literal></expr> ?</condition><then> <expr><name>a</name> <operator>+</operator> <name>b</name></expr> </then><else>: <expr><name>a</name> <operator>-</operator> <name>b</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>f_rational_new_no_reduce2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>nurat_to_double</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>












<function><type><name>VALUE</name></type>
<name>rb_rational_plus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_rational_new_no_reduce2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_int_plus</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><call><name>rb_int_mul</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>nurat_to_double</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_addsub</name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>adat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_num_coerce_bin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_sub</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_rational_new_no_reduce2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_int_minus</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><call><name>rb_int_mul</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>nurat_to_double</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_addsub</name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>adat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_num_coerce_bin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_muldiv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>anum</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>aden</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>bnum</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>bden</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>aden</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>an</name> <init>= <expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ad</name> <init>= <expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>aden</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>bn</name> <init>= <expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>bd</name> <init>= <expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>an</name> <operator>*</operator> <name>bn</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>ad</name> <operator>*</operator> <name>bd</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>aden</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>anum</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bnum</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>bnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bnum</name> <operator>=</operator> <name>bden</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bden</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>aden</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>an</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ad</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>aden</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bn</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bd</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>g1</name> <init>= <expr><call><name>i_gcd</name><argument_list>(<argument><expr><name>an</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>g2</name> <init>= <expr><call><name>i_gcd</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>f_imul</name><argument_list>(<argument><expr><name>an</name> <operator>/</operator> <name>g1</name></expr></argument>, <argument><expr><name>bn</name> <operator>/</operator> <name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>f_imul</name><argument_list>(<argument><expr><name>ad</name> <operator>/</operator> <name>g2</name></expr></argument>, <argument><expr><name>bd</name> <operator>/</operator> <name>g1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>g1</name> <init>= <expr><call><name>f_gcd</name><argument_list>(<argument><expr><name>anum</name></expr></argument>, <argument><expr><name>bden</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>g2</name> <init>= <expr><call><name>f_gcd</name><argument_list>(<argument><expr><name>aden</name></expr></argument>, <argument><expr><name>bnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>anum</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>bnum</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>aden</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>bden</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>f_rational_new_no_reduce2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>VALUE</name></type>
<name>rb_rational_mul</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_muldiv</name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>,
<argument><expr><name>other</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>nurat_to_double</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_muldiv</name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>adat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_num_coerce_bin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_div</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_num_zerodiv</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>f_muldiv</name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>,
<argument><expr><name>other</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>nurat_to_f</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_flo_div_flo</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_num_zerodiv</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_one_p</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_rational_new_no_reduce2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>f_muldiv</name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>adat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_num_coerce_bin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_fdiv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>div</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>nurat_div</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_float_new</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>other</name> <operator>==</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>nurat_to_f</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>div</name> <operator>=</operator> <call><name>nurat_div</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>nurat_to_f</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>div</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><name>idTo_f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_odd_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>integer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>integer</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>VALUE</name></type>
<name>rb_rational_pow</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>k_exact_zero_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_rational_new_bang1</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_rational_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_one_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>other</name> <operator>=</operator> <name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>k_exact_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_one_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_one_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>f_rational_new_bang1</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_minus_one_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>f_rational_new_bang1</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>f_odd_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>INT_ZERO_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_num_negative_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_num_zerodiv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>f_rational_new_bang1</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INT_POSITIVE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_pow</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_pow</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_pow</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_pow</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name>ONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <name>ONE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>nan</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>num</name> <operator>=</operator> <name>ZERO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <name>ONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>f_rational_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"in a**b, b may be too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_float_pow</name><argument_list>(<argument><expr><call><name>nurat_to_f</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_float_pow</name><argument_list>(<argument><expr><call><name>nurat_to_f</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_num_coerce_bin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"**"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nurat_expt</name></cpp:macro> <cpp:value>rb_rational_pow</cpp:value></cpp:define>


















<function><type><name>VALUE</name></type>
<name>rb_rational_cmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name> <operator>==</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_int_cmp</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>f_rational_new_bang1</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>other_is_rational</name>;</goto>
</block_content>}</block>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_dbl_cmp</name><argument_list>(<argument><expr><call><name>nurat_to_double</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>other_is_rational</name>:</label>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num1</name></decl>, <decl><type ref="prev"/><name>num2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>FIXNUM_P</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num1</name> <operator>=</operator> <call><name>f_imul</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num2</name> <operator>=</operator> <call><name>f_imul</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>num1</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num2</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>adat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>rb_int_cmp</name><argument_list>(<argument><expr><call><name>rb_int_minus</name><argument_list>(<argument><expr><name>num1</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_num_coerce_cmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"&lt;=&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_eqeq_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>INT_ZERO_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>INT_ZERO_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_int_equal</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>d</name> <init>= <expr><call><name>nurat_to_double</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><call><name>rb_dbl_cmp</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>d</name> <init>= <expr><call><name>nurat_to_double</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><call><name>rb_dbl_cmp</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INT_ZERO_P</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>INT_ZERO_P</name><argument_list>(<argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>rb_int_equal</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>rb_int_equal</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_equal</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_coerce</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>f_rational_new_bang1</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><call><name>nurat_to_f</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><call><name>RCOMPLEX</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>imag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>f_rational_new_bang1</name>
<argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RCOMPLEX</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>real</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><call><name>rb_Complex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"%s can't be coerced into %s"</literal></expr></argument>,
<argument><expr><call><name>rb_obj_classname</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_obj_classname</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_positive_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>INT_POSITIVE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_negative_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><name>VALUE</name></type>
<name>rb_rational_abs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name> <init>= <expr><call><name>rb_int_abs</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>nurat_s_canonicalize_internal_no_reduce</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_floor</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_ceil</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_int_uminus</name><argument_list>(<argument><expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><call><name>rb_int_uminus</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_truncate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_int_uminus</name><argument_list>(<argument><expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><call><name>rb_int_uminus</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_round_half_up</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>, <decl><type ref="prev"/><name>neg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_plus</name><argument_list>(<argument><expr><call><name>rb_int_mul</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>TWO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name>den</name></expr></argument>, <argument><expr><name>TWO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_round_half_down</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>, <decl><type ref="prev"/><name>neg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_plus</name><argument_list>(<argument><expr><call><name>rb_int_mul</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>TWO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_minus</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name>den</name></expr></argument>, <argument><expr><name>TWO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_round_half_even</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>, <decl><type ref="prev"/><name>neg</name></decl>, <decl><type ref="prev"/><name>qr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_plus</name><argument_list>(<argument><expr><call><name>rb_int_mul</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>TWO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name>den</name></expr></argument>, <argument><expr><name>TWO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qr</name> <operator>=</operator> <call><name>rb_int_divmod</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>qr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INT_ZERO_P</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>qr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_and</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>~</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>f_round_common</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_integer_p</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"not an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>f_expt10</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_rational_mul</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_float_p</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ZERO</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_rational_p</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>f_rational_new_bang1</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>nurat_div</name><argument_list>(<argument><expr><call><name>f_rational_new_bang1</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>rb_int_cmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>nurat_truncate</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_floor_n</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_round_common</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>nurat_floor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_ceil_n</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_round_common</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>nurat_ceil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_truncate_n</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_round_common</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>nurat_truncate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_round_n</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_num_rounding_mode</name></name></type> <name>mode</name> <init>= <expr><operator>(</operator>
<name>argc</name> <operator>=</operator> <call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"*:"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call>,
<call><name>rb_num_get_rounding_option</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>round_func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list> <init>= <expr><call><name>ROUND_FUNC</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <name>nurat_round</name>)</argument_list></call></expr></init>;</function_decl>
<return>return <expr><call><name>f_round_common</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>round_func</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>nurat_to_double</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_int_fdiv_double</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_to_f</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>nurat_to_double</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_to_r</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_ceil</name></cpp:macro> <cpp:value>rb_intern("ceil")</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>f_ceil</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_float_ceil</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_ceil</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_quo</name></cpp:macro> <cpp:value>idQuo</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>f_quo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_int_div</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_quo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_reciprocal</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f_quo(ONE, (x))</cpp:value></cpp:define>




























































<function><type><specifier>static</specifier> <name>void</name></type>
<name>nurat_rationalize_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>ZERO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>ONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q0</name> <operator>=</operator> <name>ONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q1</name> <operator>=</operator> <name>ZERO</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>f_ceil</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_lt_p</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_reciprocal</name><argument_list>(<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>f_reciprocal</name><argument_list>(<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q0</name> <operator>=</operator> <name>q1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q1</name> <operator>=</operator> <name>q2</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_rationalize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nurat_negative_p</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_uminus</name><argument_list>(<argument><expr><call><name>nurat_rationalize</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>rb_rational_uminus</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>f_abs</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nurat_rationalize_internal</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_rational_new2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_hash</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_index_t</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_hash</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_hash</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_memhash</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ST2FIX</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>f_format</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_to_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_format</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>f_to_s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_usascii_str_new2</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>f_format</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>f_inspect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_dumper</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_loader</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>id_i_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>id_i_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nurat_int_check</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nurat_int_check</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nurat_canonicalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RATIONAL_SET_NUM</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>dat</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RATIONAL_SET_DEN</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>dat</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_marshal_dump</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_copy_generic_ivar</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_marshal_load</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_frozen</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"marshaled rational must have an array whose length is 2 but %ld"</literal></expr></argument>, <argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nurat_int_check</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nurat_int_check</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nurat_canonicalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_i_num</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_i_den</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>VALUE</name></type>
<name>rb_rational_reciprocal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_rational_new_no_reduce2</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>VALUE</name></type>
<name>rb_gcd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>nurat_int_value</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_gcd</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>VALUE</name></type>
<name>rb_lcm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>nurat_int_value</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_lcm</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>VALUE</name></type>
<name>rb_gcdlcm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>nurat_int_value</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>f_gcd</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>f_lcm</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_rational_raw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rb_to_int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_to_int</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>nurat_s_new_internal</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_rational_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>nurat_s_canonicalize_internal</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_Rational</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<return>return <expr><call><name>nurat_s_convert</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>rb_cRational</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_rational_num</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>rat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>nurat_numerator</name><argument_list>(<argument><expr><name>rat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_rational_den</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>rat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>nurat_denominator</name><argument_list>(<argument><expr><name>rat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_numerator</name></cpp:macro> <cpp:value>rb_intern("numerator")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_numerator</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall((x), id_numerator, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_denominator</name></cpp:macro> <cpp:value>rb_intern("denominator")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_denominator</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall((x), id_denominator, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_to_r</name></cpp:macro> <cpp:value>idTo_r</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_to_r</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall((x), id_to_r, 0)</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>numeric_numerator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_numerator</name><argument_list>(<argument><expr><call><name>f_to_r</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>numeric_denominator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_denominator</name><argument_list>(<argument><expr><call><name>f_to_r</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><name>VALUE</name></type>
<name>rb_numeric_quo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_complex_div</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>idFdiv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>canonicalization</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rb_rational_raw1</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rb_convert_type</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>, <argument><expr><literal type="string">"Rational"</literal></expr></argument>, <argument><expr><literal type="string">"to_r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>nurat_div</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_rational_canonicalize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_dat1</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_one_p</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>dat</name><operator>-&gt;</operator><name>num</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>integer_numerator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>integer_denominator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>float_to_r</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>












<function><type><name>VALUE</name></type>
<name>rb_float_numerator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>float_to_r</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>canonicalization</name> <operator>&amp;&amp;</operator> <call><name>k_integer_p</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>nurat_numerator</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><name>VALUE</name></type>
<name>rb_float_denominator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>float_to_r</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>canonicalization</name> <operator>&amp;&amp;</operator> <call><name>k_integer_p</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>nurat_denominator</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nilclass_to_r</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_rational_new1</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nilclass_rationalize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>nilclass_to_r</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>integer_to_r</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_rational_new1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>integer_rationalize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>integer_to_r</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>float_decode_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>rf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>frexp</name><argument_list>(<argument><expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>ldexp</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>DBL_MANT_DIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>n</name> <operator>-=</operator> <name>DBL_MANT_DIG</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rf</name> <operator>=</operator> <call><name>rb_dbl2big</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>float_to_r</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>float_decode_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FLT_RADIX</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_new1</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_new1</name><argument_list>(<argument><expr><call><name>rb_int_lshift</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt>
<return>return <expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>rb_int_lshift</name><argument_list>(<argument><expr><name>ONE</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>rb_int_pow</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>FLT_RADIX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>f</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_rational_new1</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_flt_rationalize_with_prec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>flt</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>prec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>f_abs</name><argument_list>(<argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><name>flt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>flt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>float_to_r</name><argument_list>(<argument><expr><name>flt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nurat_rationalize_internal</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_flt_rationalize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>flt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>float_decode_internal</name><argument_list>(<argument><expr><name>flt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INT_ZERO_P</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_new1</name><argument_list>(<argument><expr><call><name>rb_int_lshift</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>radix_times_f</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><name>radix_times_f</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>FLT_RADIX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FLT_RADIX</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_lshift</name><argument_list>(<argument><expr><name>ONE</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_positive_pow</name><argument_list>(<argument><expr><name>FLT_RADIX</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>-</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>rb_int_minus</name><argument_list>(<argument><expr><name>radix_times_f</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>FLT_RADIX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>rb_int_plus</name><argument_list>(<argument><expr><name>radix_times_f</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>FLT_RADIX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><call><name>nurat_eqeq_p</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>float_to_r</name><argument_list>(<argument><expr><name>flt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nurat_rationalize_internal</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>float_rationalize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_uminus</name><argument_list>(<argument><expr><call><name>float_rationalize</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><operator>-</operator><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_flt_rationalize_with_prec</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_flt_rationalize</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>issign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_sign</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="char">'?'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>&lt;</operator> <name>e</name> <operator>&amp;&amp;</operator> <call><name>issign</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sign</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>islettere</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>negate_num</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_int_uminus</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>BIGNUM_NEGATE</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_big_norm</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nexp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>fp</name> <init>= <expr><name>ONE</name></expr></init></decl>, <decl><type ref="prev"/><name>exp</name></decl>, <decl><type ref="prev"/><name>fn</name> <init>= <expr><name>ZERO</name></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name>ZERO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expsign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>nexp</name> <operator>=</operator> <name>ZERO</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>ZERO</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_int_parse_cstr</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>end</name><operator>-</operator><operator>*</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>RB_INT_PARSE_UNDERSCORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>rb_int_parse_cstr</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>end</name><operator>-</operator><operator>*</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>,
<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>RB_INT_PARSE_UNDERSCORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>l</name> <init>= <expr><call><name>f_expt10</name><argument_list>(<argument><expr><operator>*</operator><name>nexp</name> <operator>=</operator> <call><name>SIZET2NUM</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>==</operator> <name>ZERO</name></expr> ?</condition><then> <expr><name>fp</name></expr> </then><else>: <expr><call><name>rb_int_plus</name><argument_list>(<argument><expr><call><name>rb_int_mul</name><argument_list>(<argument><expr><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>SIZET2NUM</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <call><name>islettere</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>expsign</name> <operator>=</operator> <call><name>read_sign</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>rb_int_parse_cstr</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>end</name><operator>-</operator><operator>*</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>RB_INT_PARSE_UNDERSCORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>!=</operator> <name>ZERO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>expsign</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fn</name> <operator>!=</operator> <name>ZERO</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>rb_int_plus</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fn</name> <operator>!=</operator> <name>ZERO</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>rb_int_minus</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>negate_num</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>nexp</name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>skip_ws</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>e</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>parse_rat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raise</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>, <decl><type ref="prev"/><name>nexp</name></decl>, <decl><type ref="prev"/><name>dexp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skip_ws</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>read_sign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>canonicalization</name></expr> ?</condition><then> <expr><name>ZERO</name></expr> </then><else>: <expr><call><name>nurat_s_alloc</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <name>ONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>e</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <name>ONE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>den</name> <operator>==</operator> <name>ZERO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_num_zerodiv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <call><name>skip_ws</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>nexp</name> <operator>=</operator> <call><name>rb_int_minus</name><argument_list>(<argument><expr><name>nexp</name></expr></argument>, <argument><expr><name>dexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nurat_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <call><name>skip_ws</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nexp</name> <operator>!=</operator> <name>ZERO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>INT_NEGATIVE_P</name><argument_list>(<argument><expr><name>nexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mul</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>nexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>overflow</name>:</label>
<return>return <expr><ternary><condition><expr><name>sign</name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><operator>-</operator><name>HUGE_VAL</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>HUGE_VAL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mul</name> <operator>=</operator> <call><name>f_expt10</name><argument_list>(<argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><operator>-</operator><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>nexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>mul</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>mul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>div</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>nexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>underflow</name>:</label>
<return>return <expr><ternary><condition><expr><name>sign</name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>div</name> <operator>=</operator> <call><name>f_expt10</name><argument_list>(<argument><expr><name>nexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>underflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name>den</name></expr></argument>, <argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>nurat_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>negate_num</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>canonicalization</name> <operator>||</operator> <name>den</name> <operator>!=</operator> <name>ONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_rational_raw</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>string_to_r_strict</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raise</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_must_asciicompat</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>parse_rat</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_END</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>raise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid value for convert(): %+"</literal><name>PRIsVALUE</name></expr></argument>,
<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FLOAT_ZERO_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFloatDomainError</name></expr></argument>, <argument><expr><literal type="string">"Infinity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>





























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>string_to_r</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_must_asciicompat</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>parse_rat</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_END</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FLOAT_ZERO_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFloatDomainError</name></expr></argument>, <argument><expr><literal type="string">"Infinity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_cstr_to_rat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>parse_rat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FLOAT_ZERO_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFloatDomainError</name></expr></argument>, <argument><expr><literal type="string">"Infinity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>to_rational</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_convert_type_with_id</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>, <argument><expr><literal type="string">"Rational"</literal></expr></argument>, <argument><expr><name>idTo_r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_convert</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>numv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>denv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raise</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a1</name> <init>= <expr><name>numv</name></expr></init></decl>, <decl><type ref="prev"/><name>a2</name> <init>= <expr><name>denv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert nil into Rational"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><call><name>RCOMPLEX</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>imag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>RCOMPLEX</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>real</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>T_COMPLEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>k_exact_zero_p</name><argument_list>(<argument><expr><call><name>RCOMPLEX</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>imag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>RCOMPLEX</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>real</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>float_to_r</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>string_to_r_strict</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>raise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name> <operator>&amp;&amp;</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>float_to_r</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>string_to_r_strict</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>raise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name> <operator>&amp;&amp;</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a2</name> <operator>==</operator> <name>Qundef</name> <operator>||</operator> <operator>(</operator><call><name>k_exact_one_p</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a1</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a2</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_integer_p</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>to_rational</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_set_errinfo</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>to_rational</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><name>to_rational</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_set_errinfo</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>rb_check_convert_type_with_id</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>, <argument><expr><literal type="string">"Rational"</literal></expr></argument>, <argument><expr><name>idTo_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raise</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><name>to_rational</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_set_errinfo</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>rb_check_convert_type_with_id</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>, <argument><expr><literal type="string">"Rational"</literal></expr></argument>, <argument><expr><name>idTo_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>k_numeric_p</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>f_integer_p</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>f_integer_p</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_div</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>nurat_int_value</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a2</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>ONE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>k_integer_p</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>raise</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>nurat_int_value</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<return>return <expr><call><name>nurat_s_canonicalize_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nurat_s_convert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>nurat_convert</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











































<function><type><name>void</name></type>
<name>Init_Rational</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>compat</name></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_intern</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_intern_const(str)</cpp:value></cpp:define>

<expr_stmt><expr><name>id_abs</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"abs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_integer_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"integer?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_i_num</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@numerator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_i_den</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@denominator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_cRational</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Rational"</literal></expr></argument>, <argument><expr><name>rb_cNumeric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><name>nurat_s_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"allocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"Rational"</literal></expr></argument>, <argument><expr><name>nurat_f_rational</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"numerator"</literal></expr></argument>, <argument><expr><name>nurat_numerator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"denominator"</literal></expr></argument>, <argument><expr><name>nurat_denominator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"-@"</literal></expr></argument>, <argument><expr><name>rb_rational_uminus</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>rb_rational_plus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>nurat_sub</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>rb_rational_mul</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>nurat_div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"quo"</literal></expr></argument>, <argument><expr><name>nurat_div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"fdiv"</literal></expr></argument>, <argument><expr><name>nurat_fdiv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>, <argument><expr><name>nurat_expt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"&lt;=&gt;"</literal></expr></argument>, <argument><expr><name>rb_rational_cmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><name>nurat_eqeq_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"coerce"</literal></expr></argument>, <argument><expr><name>nurat_coerce</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"positive?"</literal></expr></argument>, <argument><expr><name>nurat_positive_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"negative?"</literal></expr></argument>, <argument><expr><name>nurat_negative_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"abs"</literal></expr></argument>, <argument><expr><name>rb_rational_abs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"magnitude"</literal></expr></argument>, <argument><expr><name>rb_rational_abs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"floor"</literal></expr></argument>, <argument><expr><name>nurat_floor_n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"ceil"</literal></expr></argument>, <argument><expr><name>nurat_ceil_n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"truncate"</literal></expr></argument>, <argument><expr><name>nurat_truncate_n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"round"</literal></expr></argument>, <argument><expr><name>nurat_round_n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"to_i"</literal></expr></argument>, <argument><expr><name>nurat_truncate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"to_f"</literal></expr></argument>, <argument><expr><name>nurat_to_f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"to_r"</literal></expr></argument>, <argument><expr><name>nurat_to_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"rationalize"</literal></expr></argument>, <argument><expr><name>nurat_rationalize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><name>nurat_hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>nurat_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>nurat_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"marshal_dump"</literal></expr></argument>, <argument><expr><name>nurat_marshal_dump</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compat</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><literal type="string">"compatible"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>compat</name></expr></argument>, <argument><expr><literal type="string">"marshal_load"</literal></expr></argument>, <argument><expr><name>nurat_marshal_load</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_marshal_define_compat</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>nurat_dumper</name></expr></argument>, <argument><expr><name>nurat_loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"gcd"</literal></expr></argument>, <argument><expr><name>rb_gcd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"lcm"</literal></expr></argument>, <argument><expr><name>rb_lcm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"gcdlcm"</literal></expr></argument>, <argument><expr><name>rb_gcdlcm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"numerator"</literal></expr></argument>, <argument><expr><name>numeric_numerator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"denominator"</literal></expr></argument>, <argument><expr><name>numeric_denominator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNumeric</name></expr></argument>, <argument><expr><literal type="string">"quo"</literal></expr></argument>, <argument><expr><name>rb_numeric_quo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"numerator"</literal></expr></argument>, <argument><expr><name>integer_numerator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"denominator"</literal></expr></argument>, <argument><expr><name>integer_denominator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFloat</name></expr></argument>, <argument><expr><literal type="string">"numerator"</literal></expr></argument>, <argument><expr><name>rb_float_numerator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFloat</name></expr></argument>, <argument><expr><literal type="string">"denominator"</literal></expr></argument>, <argument><expr><name>rb_float_denominator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNilClass</name></expr></argument>, <argument><expr><literal type="string">"to_r"</literal></expr></argument>, <argument><expr><name>nilclass_to_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cNilClass</name></expr></argument>, <argument><expr><literal type="string">"rationalize"</literal></expr></argument>, <argument><expr><name>nilclass_rationalize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"to_r"</literal></expr></argument>, <argument><expr><name>integer_to_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"rationalize"</literal></expr></argument>, <argument><expr><name>integer_rationalize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFloat</name></expr></argument>, <argument><expr><literal type="string">"to_r"</literal></expr></argument>, <argument><expr><name>float_to_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFloat</name></expr></argument>, <argument><expr><literal type="string">"rationalize"</literal></expr></argument>, <argument><expr><name>float_rationalize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cString</name></expr></argument>, <argument><expr><literal type="string">"to_r"</literal></expr></argument>, <argument><expr><name>string_to_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cRational</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"convert"</literal></expr></argument>, <argument><expr><name>nurat_s_convert</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_provide</name><argument_list>(<argument><expr><literal type="string">"rational.so"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>
</unit>
