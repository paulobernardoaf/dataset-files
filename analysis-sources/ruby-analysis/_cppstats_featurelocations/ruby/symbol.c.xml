<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\symbol.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/symbol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/vm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"probes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/st.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"symbol.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYMBOL_GC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SYMBOL_GC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYMBOL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOL_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_ID_SERIAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ID_SERIAL</name></cpp:macro> <cpp:value>SYMBOL_DEBUG</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOL_PINNED_P</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RSYMBOL(sym)-&gt;id&amp;~ID_SCOPE_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC_SYM2ID</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RSHIFT((unsigned long)(sym), RUBY_SPECIAL_SHIFT)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>ID</name></type> <name>register_static_symid</name><parameter_list>(<parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ID</name></type> <name>register_static_symid_str</name><parameter_list>(<parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_SYMID</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register_static_symid((id), (name), strlen(name), enc)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_identchar</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISALNUM((unsigned char)*(p)) || (*(p)) == '_' || !ISASCII(*(p)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_tbl_count</name></cpp:macro> <cpp:value>numberof(op_tbl)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><name>op_tbl_name_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>op_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_tbl_len</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!op_tbl[i].name[1] ? 1 : !op_tbl[i].name[2] ? 2 : 3)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Init_op_tbl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier><specifier>const</specifier></type> <name>enc</name> <init>= <expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="char">'!'</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="char">'~'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISALNUM</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>register_static_symid</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>op_tbl_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>register_static_symid</name><argument_list>(<argument><expr><name><name>op_tbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>token</name></expr></argument>, <argument><expr><name><name>op_tbl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>op_tbl_len</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>ID_ENTRY_UNIT</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>

<enum>enum <name>id_entry_type</name> <block>{
<decl><name>ID_ENTRY_STR</name></decl>,
<decl><name>ID_ENTRY_SYM</name></decl>,
<decl><name>ID_ENTRY_SIZE</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>rb_symbols_t</name></type> <name>ruby_global_symbols</name> <init>= <expr><block>{<expr><name>tNEXT_ID</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>global_symbols</name></cpp:macro> <cpp:value>ruby_global_symbols</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>st_hash_type</name></name></type> <name>symhash</name> <init>= <expr><block>{
<expr><name>rb_str_hash_cmp</name></expr>,
<expr><name>rb_str_hash</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>Init_sym</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dsym_fstrs</name> <init>= <expr><call><name>rb_ident_hash_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>global_symbols</name><operator>.</operator><name>dsymbol_fstr_hash</name></name> <operator>=</operator> <name>dsym_fstrs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>dsym_fstrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_obj_hide</name><argument_list>(<argument><expr><name>dsym_fstrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>global_symbols</name><operator>.</operator><name>str_sym</name></name> <operator>=</operator> <call><name>st_init_table_with_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>symhash</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>global_symbols</name><operator>.</operator><name>ids</name></name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_op_tbl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Init_id</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>WARN_UNUSED_RESULT</name><argument_list>(<argument>static VALUE dsymbol_alloc(const VALUE klass, const VALUE str, rb_encoding *const enc, const ID type)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>WARN_UNUSED_RESULT</name><argument_list>(<argument>static VALUE dsymbol_check(const VALUE sym)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>WARN_UNUSED_RESULT</name><argument_list>(<argument>static ID lookup_str_id(VALUE str)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>WARN_UNUSED_RESULT</name><argument_list>(<argument>static VALUE lookup_str_sym(const VALUE str)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>WARN_UNUSED_RESULT</name><argument_list>(<argument>static VALUE lookup_id_str(ID id)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>WARN_UNUSED_RESULT</name><argument_list>(<argument>static ID intern_str(VALUE str, int mutable)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><name>ID</name></type>
<name>rb_id_attrset</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scope</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_notop_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>tAREF</name></expr>:</case> <case>case <expr><name>tASET</name></expr>:</case>
<return>return <expr><name>tASET</name></expr>;</return> 
</block_content>}</block></switch>
<expr_stmt><expr><call><name>rb_name_error</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"cannot make operator ID :%"</literal><name>PRIsVALUE</name><literal type="string">" attrset"</literal></expr></argument>,
<argument><expr><call><name>rb_id2str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>scope</name> <operator>=</operator> <call><name>id_type</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>scope</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ID_LOCAL</name></expr>:</case> <case>case <expr><name>ID_INSTANCE</name></expr>:</case> <case>case <expr><name>ID_GLOBAL</name></expr>:</case>
<case>case <expr><name>ID_CONST</name></expr>:</case> <case>case <expr><name>ID_CLASS</name></expr>:</case> <case>case <expr><name>ID_JUNK</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>ID_ATTRSET</name></expr>:</case>
<return>return <expr><name>id</name></expr>;</return>
<default>default:</default>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>=</operator> <call><name>lookup_id_str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_name_error</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"cannot make unknown type ID %d:%"</literal><name>PRIsVALUE</name><literal type="string">" attrset"</literal></expr></argument>,
<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_name_error_str</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>, <argument><expr><literal type="string">"cannot make unknown type anonymous ID %d:%"</literal><name>PRIxVALUE</name><literal type="string">" attrset"</literal></expr></argument>,
<argument><expr><name>scope</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>str</name> <operator>=</operator> <call><name>lookup_id_str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>id_types</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"local"</literal></expr>,
<expr><literal type="string">"instance"</literal></expr>,
<expr><literal type="string">"invalid"</literal></expr>,
<expr><literal type="string">"global"</literal></expr>,
<expr><literal type="string">"attrset"</literal></expr>,
<expr><literal type="string">"const"</literal></expr>,
<expr><literal type="string">"class"</literal></expr>,
<expr><literal type="string">"junk"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_name_error</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"cannot make anonymous %.*s ID %"</literal><name>PRIxVALUE</name><literal type="string">" attrset"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>id_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>id_types</name><index>[<expr><name>scope</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>lookup_str_sym</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <ternary><condition><expr><name>sym</name></expr> ?</condition><then> <expr><call><name>rb_sym2id</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>intern_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_special_global_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;=</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_global_name_punct</name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>m</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>m</name> <operator>&gt;=</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_identchar</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISASCII</name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <call><name>rb_enc_mbclen</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISASCII</name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>m</name> <operator>&lt;</operator> <name>e</name> <operator>&amp;&amp;</operator> <call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><name>m</name> <operator>==</operator> <name>e</name></expr> ?</condition><then> <expr><name>mb</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_symname_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_enc_symname_p</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>rb_ascii8bit_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_enc_symname_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_enc_symname2_p</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_sym_constant_char_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nlen</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>name</name> <operator>+</operator> <name>nlen</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISASCII</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ISUPPER</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>rb_enc_precise_mbclen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MBCLEN_CHARFOUND_P</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MBCLEN_CHARFOUND_LEN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>rb_enc_mbc_to_codepoint</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_UNICODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ctype_titlecase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_enc_isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_enc_islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctype_titlecase</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UChar</name></type> <name><name>cname</name><index>[]</index></name> <init>= <expr><literal type="string">"titlecaseletter"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UChar</name> <modifier>*</modifier><specifier>const</specifier></type> <name>end</name> <init>= <expr><name>cname</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ctype_titlecase</name> <operator>=</operator> <call><name>ONIGENC_PROPERTY_NAME_TO_CTYPE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>cname</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_enc_isctype</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ctype_titlecase</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>OnigUChar</name></type> <name><name>fold</name><index>[<expr><name>ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>OnigUChar</name> <modifier>*</modifier></type><name>beg</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>OnigUChar</name> <operator>*</operator><operator>)</operator><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>enc</name><operator>-&gt;</operator><name>mbc_case_fold</name></name><argument_list>(<argument><expr><name>ONIGENC_CASE_FOLD</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>beg</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>OnigUChar</name> <operator>*</operator><operator>)</operator><name>end</name></expr></argument>,
<argument><expr><name>fold</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>r</name> <operator>!=</operator> <name>len</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>fold</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDSET_ATTRSET_FOR_SYNTAX</name></cpp:macro> <cpp:value>((1U&lt;&lt;ID_LOCAL)|(1U&lt;&lt;ID_CONST))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDSET_ATTRSET_FOR_INTERN</name></cpp:macro> <cpp:value>(~(~0U&lt;&lt;(1&lt;&lt;ID_SCOPE_SHIFT)) &amp; ~(1U&lt;&lt;ID_ATTRSET))</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>rb_enc_symname_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>allowed_attrset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>m</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>ID_JUNK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_enc_asciicompat</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name> <operator>||</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>m</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ID_GLOBAL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_special_global_name</name><argument_list>(<argument><expr><operator>++</operator><name>m</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>type</name></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>id</name>;</goto>

<case>case <expr><literal type="char">'@'</literal></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ID_INSTANCE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>m</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ID_CLASS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>id</name>;</goto>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>m</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>m</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>m</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <case>case <expr><literal type="char">'='</literal></expr>:</case> <expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>m</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'~'</literal></expr>:</case> <expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>m</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>m</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case> <case>case <expr><literal type="char">'-'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>m</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'|'</literal></expr>:</case> <case>case <expr><literal type="char">'^'</literal></expr>:</case> <case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> <case>case <expr><literal type="char">'/'</literal></expr>:</case> <case>case <expr><literal type="char">'%'</literal></expr>:</case> <case>case <expr><literal type="char">'~'</literal></expr>:</case> <case>case <expr><literal type="char">'`'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>id</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>m</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ID_JUNK</name></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>m</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <case>case <expr><literal type="char">'~'</literal></expr>:</case> <expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>allowed_attrset</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>ID_JUNK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>id</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><call><name>rb_sym_constant_char_p</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>e</name><operator>-</operator><name>m</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ID_CONST</name></expr> </then><else>: <expr><name>ID_LOCAL</name></expr></else></ternary></expr>;</expr_stmt>
<label><name>id</name>:</label>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;=</operator> <name>e</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>m</name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ISASCII</name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>e</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_enc_symname_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>allowed_attrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>ID_ATTRSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ID_ATTRSET</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>m</name> <operator>&lt;</operator> <name>e</name> <operator>&amp;&amp;</operator> <call><name>is_identchar</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>+=</operator> <call><name>rb_enc_mbclen</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;=</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>m</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'!'</literal></expr>:</case> <case>case <expr><literal type="char">'?'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ID_GLOBAL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>ID_CLASS</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>ID_INSTANCE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ID_JUNK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>e</name> <operator>||</operator> <operator>*</operator><name>m</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'='</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>allowed_attrset</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>type</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ID_ATTRSET</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><ternary><condition><expr><name>m</name> <operator>==</operator> <name>e</name></expr> ?</condition><then> <expr><name>type</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_enc_symname2_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_enc_symname_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>IDSET_ATTRSET_FOR_SYNTAX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_str_symname_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>allowed_attrset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>rb_enc_symname_type</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>allowed_attrset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_id_entry</name><parameter_list>(<parameter><decl><type><name>rb_id_serial_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name>num</name> <operator>/</operator> <name>ID_ENTRY_UNIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>, <decl><type ref="prev"/><name>ids</name> <init>= <expr><name><name>global_symbols</name><operator>.</operator><name>ids</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><name>ID_ENTRY_UNIT</name> <operator>*</operator> <name>ID_ENTRY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>idx</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>num</name> <operator>%</operator> <name>ID_ENTRY_UNIT</name><operator>)</operator> <operator>*</operator> <name>ID_ENTRY_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>idx</name> <operator>+</operator> <name>ID_ENTRY_STR</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>idx</name> <operator>+</operator> <name>ID_ENTRY_SYM</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>get_id_serial_entry</name><parameter_list>(<parameter><decl><type><name>rb_id_serial_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>id_entry_type</name></name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&amp;&amp;</operator> <name>num</name> <operator>&lt;=</operator> <name><name>global_symbols</name><operator>.</operator><name>last_id</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name>num</name> <operator>/</operator> <name>ID_ENTRY_UNIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ids</name> <init>= <expr><name><name>global_symbols</name><operator>.</operator><name>ids</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>num</name> <operator>%</operator> <name>ID_ENTRY_UNIT</name><operator>)</operator> <operator>*</operator> <name>ID_ENTRY_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CHECK_ID_SERIAL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><name>result</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>ID_ENTRY_SYM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>ID_ENTRY_SYM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STATIC_SYM_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STATIC_SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name> <operator>!=</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>get_id_entry</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>id_entry_type</name></name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_id_serial_entry</name><argument_list>(<argument><expr><call><name>rb_id_to_serial</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ID</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>rb_id_serial_to_id</name><argument_list>(<argument><expr><name>rb_id_serial_t</name> <name>num</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_notop_id</name><argument_list>(<argument><expr><operator>(</operator><name>ID</name><operator>)</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><call><name>get_id_serial_entry</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ID_ENTRY_SYM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>ID</name><operator>)</operator><name>num</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SYMBOL_DEBUG</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>register_sym_update_callback</name><parameter_list>(<parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>existing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"symbol :% "</literal><name>PRIsVALUE</name><literal type="string">" is already registered with %"</literal><name>PRIxVALUE</name></expr></argument>,
<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>*</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>register_sym</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SYMBOL_DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>st_update</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>str_sym</name></name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>str</name></expr></argument>,
<argument><expr><name>register_sym_update_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>st_add_direct</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>str_sym</name></name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unregister_sym</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_data_t</name></type> <name>str_data</name> <init>= <expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>str</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>st_delete</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>str_sym</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"%p can't remove str from str_id (%s)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sym</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ID</name></type>
<name>register_static_symid</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_enc_str_new</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>register_static_symid_str</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ID</name></type>
<name>register_static_symid_str</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_id_serial_t</name></type> <name>num</name> <init>= <expr><call><name>rb_id_to_serial</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><call><name>STATIC_ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_fstring</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RUBY_DTRACE_CREATE_HOOK</name><argument_list>(<argument><expr><name>SYMBOL</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>register_sym</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_id_entry</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sym_check_asciionly</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_enc_asciicompat</name><argument_list>(<argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>rb_enc_str_coderange</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENC_CODERANGE_BROKEN</name></expr>:</case>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eEncodingError</name></expr></argument>, <argument><expr><literal type="string">"invalid symbol in encoding %s :%+"</literal><name>PRIsVALUE</name></expr></argument>,
<argument><expr><call><name>rb_enc_name</name><argument_list>(<argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>ENC_CODERANGE_7BIT</name></expr>:</case>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>






static inline void
must_be_dynamic_symbol(VALUE x)
{
if (UNLIKELY(!DYNAMIC_SYM_P(x))) {
if (STATIC_SYM_P(x)) {
VALUE str = lookup_id_str(RSHIFT((unsigned long)(x),RUBY_SPECIAL_SHIFT));

if (str) {
rb_bug("wrong argument: %s (inappropriate Symbol)", RSTRING_PTR(str));
}
else {
rb_bug("wrong argument: inappropriate Symbol (%p)", (void *)x);
}
}
else {
rb_bug("wrong argument type %s (expected Symbol)", rb_builtin_class_name(x));
}
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dsymbol_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ID</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>dsym</name> <init>= <expr><call><name>rb_newobj_of</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_SYMBOL</name> <operator>|</operator> <name>FL_WB_PROTECTED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hashval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_enc_set_index</name><argument_list>(<argument><expr><name>dsym</name></expr></argument>, <argument><expr><call><name>rb_enc_to_index</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>dsym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>dsym</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>dsym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fstr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>dsym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>


<expr_stmt><expr><name>hashval</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>rb_str_hash</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>dsym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hashval</name> <operator>=</operator> <call><name>RSHIFT</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>hashval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>register_sym</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>dsym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>dsymbol_fstr_hash</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RUBY_DTRACE_CREATE_HOOK</name><argument_list>(<argument><expr><name>SYMBOL</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>dsym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dsym</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>dsymbol_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name>rb_objspace_garbage_object_p</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>fstr</name> <init>= <expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fstr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ID</name></type> <name>type</name> <init>= <expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name> <operator>&amp;</operator> <name>ID_SCOPE_MASK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unregister_sym</name><argument_list>(<argument><expr><name>fstr</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dsymbol_alloc</name><argument_list>(<argument><expr><name>rb_cSymbol</name></expr></argument>, <argument><expr><name>fstr</name></expr></argument>, <argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>fstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ID</name></type>
<name>lookup_str_id</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_data_t</name></type> <name>sym_data</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>st_lookup</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>str_sym</name></name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>sym</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>sym_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STATIC_SYM_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>STATIC_SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>DYNAMIC_SYM_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&amp;</operator> <operator>~</operator><name>ID_SCOPE_MASK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>id</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"non-symbol object %s:%"</literal><name>PRIxVALUE</name><literal type="string">" for %"</literal><name>PRIsVALUE</name><literal type="string">" in symbol table"</literal></expr></argument>,
<argument><expr><call><name>rb_builtin_class_name</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ID</name><operator>)</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>lookup_str_sym</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_data_t</name></type> <name>sym_data</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>st_lookup</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>str_sym</name></name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>sym_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DYNAMIC_SYM_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>dsymbol_check</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>lookup_id_str</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_id_entry</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>ID_ENTRY_STR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ID</name></type>
<name>rb_intern3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>RString</name></name></type> <name>fake_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_setup_fake_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_str</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>lookup_str_sym</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_sym2id</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_enc_str_new</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><call><name>intern_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ID</name></type>
<name>next_id_base</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_id_serial_t</name></type> <name>next_serial</name> <init>= <expr><name><name>global_symbols</name><operator>.</operator><name>last_id</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next_serial</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>ID</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num</name> <init>= <expr><operator>++</operator><name><name>global_symbols</name><operator>.</operator><name>last_id</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>num</name> <operator>&lt;&lt;</operator> <name>ID_SCOPE_SHIFT</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ID</name></type>
<name>intern_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mutable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>nid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rb_str_symname_type</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>IDSET_ATTRSET_FOR_INTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <operator>(</operator><name>ID</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>id</name> <operator>=</operator> <name>ID_JUNK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sym_check_asciionly</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mutable</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nid</name> <operator>=</operator> <call><name>next_id_base</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>(</operator><name>ID</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_ellipsize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"symbol table overflow (symbol %"</literal><name>PRIsVALUE</name><literal type="string">")"</literal></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>id</name> <operator>|=</operator> <name>nid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>|=</operator> <name>ID_STATIC_SYM</name></expr>;</expr_stmt>
<return>return <expr><call><name>register_static_symid_str</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ID</name></type>
<name>rb_intern2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_intern3</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<function><type><name>ID</name></type>
<name>rb_intern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_intern2</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ID</name></type>
<name>rb_intern_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><call><name>lookup_str_sym</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>intern_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_gc_free_dsymbol</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fstr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_sym</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_delete_entry</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>dsymbol_fstr_hash</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





















<function><type><name>VALUE</name></type>
<name>rb_str_intern</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_SYMBOL_GC</name></expr></cpp:if>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ascii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><call><name>lookup_str_sym</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_SYMBOL_GC</name></expr></cpp:if>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_enc_get</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ascii</name> <operator>=</operator> <call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc</name> <operator>!=</operator> <name>ascii</name> <operator>&amp;&amp;</operator> <call><name>sym_check_asciionly</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>ascii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <name>ascii</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_fstring</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_symname_type</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>IDSET_ATTRSET_FOR_INTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>ID_JUNK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>dsymbol_alloc</name><argument_list>(<argument><expr><name>rb_cSymbol</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>intern_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ID</name></type>
<name>rb_sym2id</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STATIC_SYM_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>STATIC_SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>DYNAMIC_SYM_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>dsymbol_check</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>id</name> <operator>&amp;</operator> <operator>~</operator><name>ID_SCOPE_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>fstr</name> <init>= <expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fstr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>num</name> <init>= <expr><call><name>next_id_base</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name>id</name> <operator>|=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_id_entry</name><argument_list>(<argument><expr><call><name>rb_id_to_serial</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fstr</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_delete_entry</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>dsymbol_fstr_hash</name></name></expr></argument>, <argument><expr><name>fstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"wrong argument type %s (expected Symbol)"</literal></expr></argument>,
<argument><expr><call><name>rb_builtin_class_name</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_id2sym</name></cpp:undef>
<function><type><name>VALUE</name></type>
<name>rb_id2sym</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DYNAMIC_ID_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>STATIC_ID2SYM</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>get_id_entry</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ID_ENTRY_SYM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VALUE</name></type>
<name>rb_sym2str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>DYNAMIC_SYM_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fstr</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_id2str</name><argument_list>(<argument><expr><call><name>STATIC_SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_id2str</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lookup_id_str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>rb_id2name</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_id2str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ID</name></type>
<name>rb_make_internal_id</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>next_id_base</name><argument_list>()</argument_list></call> <operator>|</operator> <name>ID_INTERNAL</name> <operator>|</operator> <name>ID_STATIC_SYM</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>symbols_i</name><parameter_list>(<parameter><decl><type><name>st_data_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>value</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STATIC_SYM_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>DYNAMIC_SYM_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"invalid symbol: %s"</literal></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>SYMBOL_PINNED_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rb_objspace_garbage_object_p</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ST_DELETE</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_sym_all_symbols</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>str_sym</name><operator>-&gt;</operator><name>num_entries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>st_foreach</name><argument_list>(<argument><expr><name><name>global_symbols</name><operator>.</operator><name>str_sym</name></name></expr></argument>, <argument><expr><name>symbols_i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>rb_sym_immortal_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>global_symbols</name><operator>.</operator><name>last_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_const_id</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_const_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_class_id</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_class_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_global_id</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_global_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_instance_id</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_instance_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_attrset_id</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_attrset_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_local_id</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_local_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_junk_id</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_junk_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_const_sym</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_const_sym</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_attrset_sym</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_attrset_sym</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><name>ID</name></type>
<name>rb_check_id</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>namep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name> <init>= <expr><operator>*</operator><name>namep</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STATIC_SYM_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>STATIC_SYM2ID</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>DYNAMIC_SYM_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>SYMBOL_PINNED_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>RSYMBOL</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <call><name>RSYMBOL</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fstr</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_check_string_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"%+"</literal><name>PRIsVALUE</name><literal type="string">" is not a symbol nor a string"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sym_check_asciionly</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lookup_str_id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_check_symbol</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>namep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name> <init>= <expr><operator>*</operator><name>namep</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STATIC_SYM_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>DYNAMIC_SYM_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SYMBOL_PINNED_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>dsymbol_check</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_check_string_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"%+"</literal><name>PRIsVALUE</name><literal type="string">" is not a symbol nor a string"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sym_check_asciionly</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sym</name> <operator>=</operator> <call><name>lookup_str_sym</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ID</name></type>
<name>rb_check_id_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RString</name></name></type> <name>fake_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>name</name> <init>= <expr><call><name>rb_setup_fake_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_str</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sym_check_asciionly</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lookup_str_id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_check_symbol_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>RString</name></name></type> <name>fake_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>name</name> <init>= <expr><call><name>rb_setup_fake_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_str</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sym_check_asciionly</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sym</name> <operator>=</operator> <call><name>lookup_str_sym</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_sym_intern_ascii_cstr</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>NOINLINE</name><argument_list>(<argument>VALUE rb_sym_intern(const char *ptr, long len, rb_encoding *enc)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>FUNC_MINIMIZED</name><argument_list>(<argument>VALUE rb_sym_intern(const char *ptr, long len, rb_encoding *enc)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>FUNC_MINIMIZED</name><argument_list>(<argument>VALUE rb_sym_intern_ascii(const char *ptr, long len)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>FUNC_MINIMIZED</name><argument_list>(<argument>VALUE rb_sym_intern_ascii_cstr(const char *ptr)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>VALUE</name></type>
<name>rb_sym_intern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>RString</name></name></type> <name>fake_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>name</name> <init>= <expr><call><name>rb_setup_fake_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_str</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_str_intern</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_sym_intern_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_sym_intern</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_sym_intern_ascii_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_sym_intern_ascii</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_to_symbol_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_convert_type_with_id</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>, <argument><expr><literal type="string">"Symbol"</literal></expr></argument>, <argument><expr><name>idTo_sym</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_const_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_str_symname_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ID_CONST</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_class_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_str_symname_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ID_CLASS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_instance_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_str_symname_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ID_INSTANCE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_is_local_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_str_symname_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ID_LOCAL</name></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id_table.c"</cpp:file></cpp:include>
</unit>
