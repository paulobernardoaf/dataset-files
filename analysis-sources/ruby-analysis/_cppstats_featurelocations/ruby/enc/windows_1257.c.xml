<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\enc\windows_1257.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regenc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iso_8859.h"</cpp:file></cpp:include>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CP1252_TO_LOWER_CASE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EncCP1252_ToLowerCaseTable[c]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_IS_CP1252_CTYPE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>,<parameter><type><name>ctype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((EncCP1252_CtypeTable[code] &amp; CTYPE_TO_BIT(ctype)) != 0)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UChar</name></type> <name><name>EncCP1252_ToLowerCaseTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="char">'\000'</literal></expr>, <expr><literal type="char">'\001'</literal></expr>, <expr><literal type="char">'\002'</literal></expr>, <expr><literal type="char">'\003'</literal></expr>, <expr><literal type="char">'\004'</literal></expr>, <expr><literal type="char">'\005'</literal></expr>, <expr><literal type="char">'\006'</literal></expr>, <expr><literal type="char">'\007'</literal></expr>,
<expr><literal type="char">'\010'</literal></expr>, <expr><literal type="char">'\011'</literal></expr>, <expr><literal type="char">'\012'</literal></expr>, <expr><literal type="char">'\013'</literal></expr>, <expr><literal type="char">'\014'</literal></expr>, <expr><literal type="char">'\015'</literal></expr>, <expr><literal type="char">'\016'</literal></expr>, <expr><literal type="char">'\017'</literal></expr>,
<expr><literal type="char">'\020'</literal></expr>, <expr><literal type="char">'\021'</literal></expr>, <expr><literal type="char">'\022'</literal></expr>, <expr><literal type="char">'\023'</literal></expr>, <expr><literal type="char">'\024'</literal></expr>, <expr><literal type="char">'\025'</literal></expr>, <expr><literal type="char">'\026'</literal></expr>, <expr><literal type="char">'\027'</literal></expr>,
<expr><literal type="char">'\030'</literal></expr>, <expr><literal type="char">'\031'</literal></expr>, <expr><literal type="char">'\032'</literal></expr>, <expr><literal type="char">'\033'</literal></expr>, <expr><literal type="char">'\034'</literal></expr>, <expr><literal type="char">'\035'</literal></expr>, <expr><literal type="char">'\036'</literal></expr>, <expr><literal type="char">'\037'</literal></expr>,
<expr><literal type="char">'\040'</literal></expr>, <expr><literal type="char">'\041'</literal></expr>, <expr><literal type="char">'\042'</literal></expr>, <expr><literal type="char">'\043'</literal></expr>, <expr><literal type="char">'\044'</literal></expr>, <expr><literal type="char">'\045'</literal></expr>, <expr><literal type="char">'\046'</literal></expr>, <expr><literal type="char">'\047'</literal></expr>,
<expr><literal type="char">'\050'</literal></expr>, <expr><literal type="char">'\051'</literal></expr>, <expr><literal type="char">'\052'</literal></expr>, <expr><literal type="char">'\053'</literal></expr>, <expr><literal type="char">'\054'</literal></expr>, <expr><literal type="char">'\055'</literal></expr>, <expr><literal type="char">'\056'</literal></expr>, <expr><literal type="char">'\057'</literal></expr>,
<expr><literal type="char">'\060'</literal></expr>, <expr><literal type="char">'\061'</literal></expr>, <expr><literal type="char">'\062'</literal></expr>, <expr><literal type="char">'\063'</literal></expr>, <expr><literal type="char">'\064'</literal></expr>, <expr><literal type="char">'\065'</literal></expr>, <expr><literal type="char">'\066'</literal></expr>, <expr><literal type="char">'\067'</literal></expr>,
<expr><literal type="char">'\070'</literal></expr>, <expr><literal type="char">'\071'</literal></expr>, <expr><literal type="char">'\072'</literal></expr>, <expr><literal type="char">'\073'</literal></expr>, <expr><literal type="char">'\074'</literal></expr>, <expr><literal type="char">'\075'</literal></expr>, <expr><literal type="char">'\076'</literal></expr>, <expr><literal type="char">'\077'</literal></expr>,
<expr><literal type="char">'\100'</literal></expr>, <expr><literal type="char">'\141'</literal></expr>, <expr><literal type="char">'\142'</literal></expr>, <expr><literal type="char">'\143'</literal></expr>, <expr><literal type="char">'\144'</literal></expr>, <expr><literal type="char">'\145'</literal></expr>, <expr><literal type="char">'\146'</literal></expr>, <expr><literal type="char">'\147'</literal></expr>,
<expr><literal type="char">'\150'</literal></expr>, <expr><literal type="char">'\151'</literal></expr>, <expr><literal type="char">'\152'</literal></expr>, <expr><literal type="char">'\153'</literal></expr>, <expr><literal type="char">'\154'</literal></expr>, <expr><literal type="char">'\155'</literal></expr>, <expr><literal type="char">'\156'</literal></expr>, <expr><literal type="char">'\157'</literal></expr>,
<expr><literal type="char">'\160'</literal></expr>, <expr><literal type="char">'\161'</literal></expr>, <expr><literal type="char">'\162'</literal></expr>, <expr><literal type="char">'\163'</literal></expr>, <expr><literal type="char">'\164'</literal></expr>, <expr><literal type="char">'\165'</literal></expr>, <expr><literal type="char">'\166'</literal></expr>, <expr><literal type="char">'\167'</literal></expr>,
<expr><literal type="char">'\170'</literal></expr>, <expr><literal type="char">'\171'</literal></expr>, <expr><literal type="char">'\172'</literal></expr>, <expr><literal type="char">'\133'</literal></expr>, <expr><literal type="char">'\134'</literal></expr>, <expr><literal type="char">'\135'</literal></expr>, <expr><literal type="char">'\136'</literal></expr>, <expr><literal type="char">'\137'</literal></expr>,
<expr><literal type="char">'\140'</literal></expr>, <expr><literal type="char">'\141'</literal></expr>, <expr><literal type="char">'\142'</literal></expr>, <expr><literal type="char">'\143'</literal></expr>, <expr><literal type="char">'\144'</literal></expr>, <expr><literal type="char">'\145'</literal></expr>, <expr><literal type="char">'\146'</literal></expr>, <expr><literal type="char">'\147'</literal></expr>,
<expr><literal type="char">'\150'</literal></expr>, <expr><literal type="char">'\151'</literal></expr>, <expr><literal type="char">'\152'</literal></expr>, <expr><literal type="char">'\153'</literal></expr>, <expr><literal type="char">'\154'</literal></expr>, <expr><literal type="char">'\155'</literal></expr>, <expr><literal type="char">'\156'</literal></expr>, <expr><literal type="char">'\157'</literal></expr>,
<expr><literal type="char">'\160'</literal></expr>, <expr><literal type="char">'\161'</literal></expr>, <expr><literal type="char">'\162'</literal></expr>, <expr><literal type="char">'\163'</literal></expr>, <expr><literal type="char">'\164'</literal></expr>, <expr><literal type="char">'\165'</literal></expr>, <expr><literal type="char">'\166'</literal></expr>, <expr><literal type="char">'\167'</literal></expr>,
<expr><literal type="char">'\170'</literal></expr>, <expr><literal type="char">'\171'</literal></expr>, <expr><literal type="char">'\172'</literal></expr>, <expr><literal type="char">'\173'</literal></expr>, <expr><literal type="char">'\174'</literal></expr>, <expr><literal type="char">'\175'</literal></expr>, <expr><literal type="char">'\176'</literal></expr>, <expr><literal type="char">'\177'</literal></expr>,
<expr><literal type="char">'\200'</literal></expr>, <expr><literal type="char">'\201'</literal></expr>, <expr><literal type="char">'\202'</literal></expr>, <expr><literal type="char">'\203'</literal></expr>, <expr><literal type="char">'\204'</literal></expr>, <expr><literal type="char">'\205'</literal></expr>, <expr><literal type="char">'\206'</literal></expr>, <expr><literal type="char">'\207'</literal></expr>,
<expr><literal type="char">'\210'</literal></expr>, <expr><literal type="char">'\211'</literal></expr>, <expr><literal type="char">'\212'</literal></expr>, <expr><literal type="char">'\213'</literal></expr>, <expr><literal type="char">'\214'</literal></expr>, <expr><literal type="char">'\215'</literal></expr>, <expr><literal type="char">'\216'</literal></expr>, <expr><literal type="char">'\217'</literal></expr>,
<expr><literal type="char">'\220'</literal></expr>, <expr><literal type="char">'\221'</literal></expr>, <expr><literal type="char">'\222'</literal></expr>, <expr><literal type="char">'\223'</literal></expr>, <expr><literal type="char">'\224'</literal></expr>, <expr><literal type="char">'\225'</literal></expr>, <expr><literal type="char">'\226'</literal></expr>, <expr><literal type="char">'\227'</literal></expr>,
<expr><literal type="char">'\230'</literal></expr>, <expr><literal type="char">'\231'</literal></expr>, <expr><literal type="char">'\232'</literal></expr>, <expr><literal type="char">'\233'</literal></expr>, <expr><literal type="char">'\234'</literal></expr>, <expr><literal type="char">'\235'</literal></expr>, <expr><literal type="char">'\236'</literal></expr>, <expr><literal type="char">'\237'</literal></expr>,
<expr><literal type="char">'\240'</literal></expr>, <expr><literal type="char">'\241'</literal></expr>, <expr><literal type="char">'\242'</literal></expr>, <expr><literal type="char">'\243'</literal></expr>, <expr><literal type="char">'\244'</literal></expr>, <expr><literal type="char">'\245'</literal></expr>, <expr><literal type="char">'\246'</literal></expr>, <expr><literal type="char">'\247'</literal></expr>,
<expr><literal type="char">'\270'</literal></expr>, <expr><literal type="char">'\251'</literal></expr>, <expr><literal type="char">'\272'</literal></expr>, <expr><literal type="char">'\253'</literal></expr>, <expr><literal type="char">'\254'</literal></expr>, <expr><literal type="char">'\255'</literal></expr>, <expr><literal type="char">'\256'</literal></expr>, <expr><literal type="char">'\277'</literal></expr>,
<expr><literal type="char">'\260'</literal></expr>, <expr><literal type="char">'\261'</literal></expr>, <expr><literal type="char">'\262'</literal></expr>, <expr><literal type="char">'\263'</literal></expr>, <expr><literal type="char">'\264'</literal></expr>, <expr><literal type="char">'\265'</literal></expr>, <expr><literal type="char">'\266'</literal></expr>, <expr><literal type="char">'\267'</literal></expr>,
<expr><literal type="char">'\270'</literal></expr>, <expr><literal type="char">'\271'</literal></expr>, <expr><literal type="char">'\272'</literal></expr>, <expr><literal type="char">'\273'</literal></expr>, <expr><literal type="char">'\274'</literal></expr>, <expr><literal type="char">'\275'</literal></expr>, <expr><literal type="char">'\276'</literal></expr>, <expr><literal type="char">'\277'</literal></expr>,
<expr><literal type="char">'\340'</literal></expr>, <expr><literal type="char">'\341'</literal></expr>, <expr><literal type="char">'\342'</literal></expr>, <expr><literal type="char">'\343'</literal></expr>, <expr><literal type="char">'\344'</literal></expr>, <expr><literal type="char">'\345'</literal></expr>, <expr><literal type="char">'\346'</literal></expr>, <expr><literal type="char">'\347'</literal></expr>,
<expr><literal type="char">'\350'</literal></expr>, <expr><literal type="char">'\351'</literal></expr>, <expr><literal type="char">'\352'</literal></expr>, <expr><literal type="char">'\353'</literal></expr>, <expr><literal type="char">'\354'</literal></expr>, <expr><literal type="char">'\355'</literal></expr>, <expr><literal type="char">'\356'</literal></expr>, <expr><literal type="char">'\357'</literal></expr>,
<expr><literal type="char">'\360'</literal></expr>, <expr><literal type="char">'\361'</literal></expr>, <expr><literal type="char">'\362'</literal></expr>, <expr><literal type="char">'\363'</literal></expr>, <expr><literal type="char">'\364'</literal></expr>, <expr><literal type="char">'\365'</literal></expr>, <expr><literal type="char">'\366'</literal></expr>, <expr><literal type="char">'\327'</literal></expr>,
<expr><literal type="char">'\370'</literal></expr>, <expr><literal type="char">'\371'</literal></expr>, <expr><literal type="char">'\372'</literal></expr>, <expr><literal type="char">'\373'</literal></expr>, <expr><literal type="char">'\374'</literal></expr>, <expr><literal type="char">'\375'</literal></expr>, <expr><literal type="char">'\376'</literal></expr>, <expr><literal type="char">'\337'</literal></expr>,
<expr><literal type="char">'\340'</literal></expr>, <expr><literal type="char">'\341'</literal></expr>, <expr><literal type="char">'\342'</literal></expr>, <expr><literal type="char">'\343'</literal></expr>, <expr><literal type="char">'\344'</literal></expr>, <expr><literal type="char">'\345'</literal></expr>, <expr><literal type="char">'\346'</literal></expr>, <expr><literal type="char">'\347'</literal></expr>,
<expr><literal type="char">'\350'</literal></expr>, <expr><literal type="char">'\351'</literal></expr>, <expr><literal type="char">'\352'</literal></expr>, <expr><literal type="char">'\353'</literal></expr>, <expr><literal type="char">'\354'</literal></expr>, <expr><literal type="char">'\355'</literal></expr>, <expr><literal type="char">'\356'</literal></expr>, <expr><literal type="char">'\357'</literal></expr>,
<expr><literal type="char">'\360'</literal></expr>, <expr><literal type="char">'\361'</literal></expr>, <expr><literal type="char">'\362'</literal></expr>, <expr><literal type="char">'\363'</literal></expr>, <expr><literal type="char">'\364'</literal></expr>, <expr><literal type="char">'\365'</literal></expr>, <expr><literal type="char">'\366'</literal></expr>, <expr><literal type="char">'\367'</literal></expr>,
<expr><literal type="char">'\370'</literal></expr>, <expr><literal type="char">'\371'</literal></expr>, <expr><literal type="char">'\372'</literal></expr>, <expr><literal type="char">'\373'</literal></expr>, <expr><literal type="char">'\374'</literal></expr>, <expr><literal type="char">'\375'</literal></expr>, <expr><literal type="char">'\376'</literal></expr>, <expr><literal type="char">'\377'</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>EncCP1252_CtypeTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x420c</literal></expr>, <expr><literal type="number">0x4209</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4284</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,
<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,
<expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>,
<expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,
<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,
<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,
<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,
<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x51a0</literal></expr>,
<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,
<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,
<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,
<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0284</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>,
<expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>end</name></type> <name>ARG_UNUSED</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>lower</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>SHARP_s</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lower</name><operator>++</operator> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lower</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lower</name> <operator>=</operator> <call><name>ENC_CP1252_TO_LOWER_CASE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int
is_mbc_ambiguous(OnigCaseFoldType flag, const UChar** pp, const UChar* end)
{
int v;
const UChar* p = *pp;

if (*p == SHARP_s &amp;&amp; (flag &amp; INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR) != 0) {
(*pp)++;
return TRUE;
}

(*pp)++;
v = (EncCP1252_CtypeTable[*p] &amp; (BIT_CTYPE_UPPER | BIT_CTYPE_LOWER));
if ((v | BIT_CTYPE_LOWER) != 0) {

if (*p == 0xb5)
return FALSE;
else
return TRUE;
}

return (v != 0 ? TRUE : FALSE);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ENC_IS_CP1252_CTYPE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigPairCaseFoldCodes</name></type> <name><name>CaseFoldMap</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xb8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xba</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xbf</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xe0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xe1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xe2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xe3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xe4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xe5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xe6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0xe7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xe8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xe9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xea</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xeb</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xec</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xed</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xee</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xef</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xf0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xf1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xf2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xf3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xf4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xf5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xf6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xf8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xf9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xfa</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xfb</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xfc</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xfd</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xfe</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>apply_all_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>onigenc_apply_all_case_fold_with_map</name><argument_list>(
<argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>CaseFoldMap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CaseFoldMap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_case_fold_codes_by_str</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>onigenc_get_case_fold_codes_by_str_with_map</name><argument_list>(
<argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>CaseFoldMap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CaseFoldMap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOTLESS_i</name></cpp:macro> <cpp:value>(0xB9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_WITH_DOT_ABOVE</name></cpp:macro> <cpp:value>(0xA9)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>case_map</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name><modifier>*</modifier></type> <name>flagP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>OnigEncodingTypeST</name></name><modifier>*</modifier></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigUChar</name> <modifier>*</modifier></type><name>to_start</name> <init>= <expr><name>to</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCaseFoldType</name></type> <name>flags</name> <init>= <expr><operator>*</operator><name>flagP</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>pp</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>to</name> <operator>&lt;</operator> <name>to_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>SHARP_s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_UPCASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'s'</literal></expr> </then><else>: <expr><literal type="char">'S'</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0xB5</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>EncCP1252_CtypeTable</name><index>[<expr><name>code</name></expr>]</index></name> <operator>&amp;</operator> <name>BIT_CTYPE_UPPER</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_FOLD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name></expr> ?</condition><then> <expr><name>DOTLESS_i</name></expr> </then><else>: <expr><literal type="char">'i'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ENC_CP1252_TO_LOWER_CASE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>EncCP1252_CtypeTable</name><index>[<expr><name>code</name></expr>]</index></name><operator>&amp;</operator><name>BIT_CTYPE_LOWER</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_UPCASE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name></expr> ?</condition><then> <expr><name>I_WITH_DOT_ABOVE</name></expr> </then><else>: <expr><literal type="char">'I'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>DOTLESS_i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0xB0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <literal type="number">0xBF</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>-=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>-=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>flags</name> <operator>^=</operator> <operator>(</operator><name>ONIGENC_CASE_UPCASE</name> <operator>|</operator> <name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_TITLECASE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>flagP</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>to</name> <operator>-</operator> <name>to_start</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>OnigEncodingDefine</name><argument_list>(<argument><expr><name>windows_1257</name></expr></argument>, <argument><expr><name>Windows_1257</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{
<expr><name>onigenc_single_byte_mbc_enc_len</name></expr>,
<expr><literal type="string">"Windows-1257"</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><name>onigenc_is_mbc_newline_0x0a</name></expr>,
<expr><name>onigenc_single_byte_mbc_to_code</name></expr>,
<expr><name>onigenc_single_byte_code_to_mbclen</name></expr>,
<expr><name>onigenc_single_byte_code_to_mbc</name></expr>,
<expr><name>mbc_case_fold</name></expr>,
<expr><name>apply_all_case_fold</name></expr>,
<expr><name>get_case_fold_codes_by_str</name></expr>,
<expr><name>onigenc_minimum_property_name_to_ctype</name></expr>,
<expr><name>is_code_ctype</name></expr>,
<expr><name>onigenc_not_support_get_ctype_code_range</name></expr>,
<expr><name>onigenc_single_byte_left_adjust_char_head</name></expr>,
<expr><name>onigenc_always_true_is_allowed_reverse_match</name></expr>,
<expr><name>case_map</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>ONIGENC_FLAG_NONE</name></expr>,
}</block></expr>;</expr_stmt>
<macro><name>ENC_ALIAS</name><argument_list>(<argument><literal type="string">"CP1257"</literal></argument>, <argument><literal type="string">"Windows-1257"</literal></argument>)</argument_list></macro>
</unit>
