<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\enc\utf_32be.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regenc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iso_8859.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>OnigCodePoint</name></type> <name>utf32be_mbc_to_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf32be_mbc_enc_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>p</name></type> <name>ARG_UNUSED</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>e</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>e</name><operator>-</operator><name>p</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>e</name><operator>-</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>c</name> <init>= <expr><call><name>utf32be_mbc_to_code</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UNICODE_VALID_CODEPOINT_P</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf32be_is_mbc_newline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0a</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_ALL_LINE_TERMINATORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0b</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0c</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0d</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x85</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x29</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x28</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnigCodePoint</name></type>
<name>utf32be_mbc_to_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>end</name></type> <name>ARG_UNUSED</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf32be_code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name> <name>code</name></type> <name>ARG_UNUSED</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf32be_code_to_mbc</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf32be_mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>fold</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_ASCII_CODE</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fold</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fold</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_CASE_FOLD_TURKISH_AZERI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x49</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fold</name><operator>++</operator> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fold</name> <operator>=</operator> <literal type="number">0x31</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>fold</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fold</name> <operator>=</operator> <call><name>ONIGENC_ASCII_CODE_TO_LOWER_CASE</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>onigenc_unicode_mbc_case_fold</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>,
<argument><expr><name>end</name></expr></argument>, <argument><expr><name>fold</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int
utf32be_is_mbc_ambiguous(OnigCaseFoldType flag, const UChar** pp, const UChar* end)
{
const UChar* p = *pp;

(*pp) += 4;

if (*(p+2) == 0 &amp;&amp; *(p+1) == 0 &amp;&amp; *p == 0) {
int c, v;

p += 3;
if (*p == SHARP_s &amp;&amp; (flag &amp; INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR) != 0) {
return TRUE;
}

c = *p;
v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE(c,
(BIT_CTYPE_UPPER | BIT_CTYPE_LOWER));
if ((v | BIT_CTYPE_LOWER) != 0) {

if (c &gt;= 0xaa &amp;&amp; c &lt;= 0xba)
return FALSE;
else
return TRUE;
}
return (v != 0 ? TRUE : FALSE);
}

return FALSE;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>utf32be_left_adjust_char_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>rem</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>%</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>rem</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf32be_get_case_fold_codes_by_str</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>onigenc_unicode_get_case_fold_codes_by_str</name><argument_list>(<argument><expr><name>enc</name></expr></argument>,
<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>OnigEncodingDefine</name><argument_list>(<argument><expr><name>utf_32be</name></expr></argument>, <argument><expr><name>UTF_32BE</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{
<expr><name>utf32be_mbc_enc_len</name></expr>,
<expr><literal type="string">"UTF-32BE"</literal></expr>, 
<expr><literal type="number">4</literal></expr>, 
<expr><literal type="number">4</literal></expr>, 
<expr><name>utf32be_is_mbc_newline</name></expr>,
<expr><name>utf32be_mbc_to_code</name></expr>,
<expr><name>utf32be_code_to_mbclen</name></expr>,
<expr><name>utf32be_code_to_mbc</name></expr>,
<expr><name>utf32be_mbc_case_fold</name></expr>,
<expr><name>onigenc_unicode_apply_all_case_fold</name></expr>,
<expr><name>utf32be_get_case_fold_codes_by_str</name></expr>,
<expr><name>onigenc_unicode_property_name_to_ctype</name></expr>,
<expr><name>onigenc_unicode_is_code_ctype</name></expr>,
<expr><name>onigenc_utf16_32_get_ctype_code_range</name></expr>,
<expr><name>utf32be_left_adjust_char_head</name></expr>,
<expr><name>onigenc_always_false_is_allowed_reverse_match</name></expr>,
<expr><name>onigenc_unicode_case_map</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>ONIGENC_FLAG_UNICODE</name></expr>,
}</block></expr>;</expr_stmt>
<macro><name>ENC_ALIAS</name><argument_list>(<argument><literal type="string">"UCS-4BE"</literal></argument>, <argument><literal type="string">"UTF-32BE"</literal></argument>)</argument_list></macro>
</unit>
