<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\enc\unicode.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regint.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_IS_UNICODE_ISO_8859_1_CTYPE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>,<parameter><type><name>ctype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((EncUNICODE_ISO_8859_1_CtypeTable[code] &amp; CTYPE_TO_BIT(ctype)) != 0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>,<parameter><type><name>cbit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((EncUNICODE_ISO_8859_1_CtypeTable[code] &amp; (cbit)) != 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>EncUNICODE_ISO_8859_1_CtypeTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x420c</literal></expr>, <expr><literal type="number">0x4209</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4284</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,
<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,
<expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>,
<expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,
<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,
<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,
<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,
<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x51a0</literal></expr>,
<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,
<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,
<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,
<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0288</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0284</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a8</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>,
<expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name><name>code</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CodePointList3</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodePointList3</name></type> <name>to</name></decl>;</decl_stmt>
}</block></struct></type> <name>CaseFold_11_Type</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodePointList3</name></type> <name>to</name></decl>;</decl_stmt>
}</block></struct></type> <name>CaseUnfold_11_Type</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name><name>code</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CodePointList2</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name><name>from</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodePointList2</name></type> <name>to</name></decl>;</decl_stmt>
}</block></struct></type> <name>CaseUnfold_12_Type</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name><name>from</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodePointList2</name></type> <name>to</name></decl>;</decl_stmt>
}</block></struct></type> <name>CaseUnfold_13_Type</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>bits_of</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>n</name><operator>)</operator> <operator>*</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">127</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>bits_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bits_of</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>n</name> <operator>/</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name> <operator>%</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>code1_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>code2_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>code3_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_CASE_SPECIALS</name></cpp:macro> <cpp:value>(ONIGENC_CASE_TITLECASE | ONIGENC_CASE_IS_TITLECASE | ONIGENC_CASE_UP_SPECIAL | ONIGENC_CASE_DOWN_SPECIAL)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SpecialsLengthOffset</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SpecialsLengthExtract</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &gt;&gt; SpecialsLengthOffset)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SpecialsCodepointExtract</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &amp; ((1 &lt;&lt; SpecialsLengthOffset) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SpecialsLengthEncode</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &lt;&lt; SpecialsLengthOffset)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OnigSpecialIndexMask</name></cpp:macro> <cpp:value>(((1 &lt;&lt; OnigSpecialIndexWidth) - 1) &lt;&lt; OnigSpecialIndexShift)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OnigSpecialIndexEncode</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &lt;&lt; OnigSpecialIndexShift)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OnigSpecialIndexDecode</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((n) &amp; OnigSpecialIndexMask) &gt;&gt; OnigSpecialIndexShift)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name></cpp:macro> <cpp:value>ONIGENC_CASE_UPCASE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>ONIGENC_CASE_DOWNCASE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>ONIGENC_CASE_FOLD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST</name></cpp:macro> <cpp:value>ONIGENC_CASE_TITLECASE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SU</name></cpp:macro> <cpp:value>ONIGENC_CASE_UP_SPECIAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL</name></cpp:macro> <cpp:value>ONIGENC_CASE_DOWN_SPECIAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IT</name></cpp:macro> <cpp:value>ONIGENC_CASE_IS_TITLECASE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OnigSpecialIndexEncode(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SpecialsLengthEncode(n)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"casefold.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>U</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ST</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SU</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>I</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>L</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"name2ctype.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE_RANGES_NUM</name></cpp:macro> <cpp:value>numberof(CodeRanges)</cpp:value></cpp:define>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onigenc_unicode_is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_PROPERTIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ctype</name> <operator>&lt;=</operator> <name>ONIGENC_MAX_STD_CTYPE</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>code</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ONIGENC_IS_UNICODE_ISO_8859_1_CTYPE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&gt;=</operator> <name>CODE_RANGES_NUM</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ONIGERR_TYPE_BUG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>onig_is_in_code_range</name><argument_list>(<argument><expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name><name>CodeRanges</name><index>[<expr><name>ctype</name></expr>]</index></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onigenc_unicode_ctype_code_range</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name><modifier>*</modifier></type> <name><name>ranges</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&gt;=</operator> <name>CODE_RANGES_NUM</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ONIGERR_TYPE_BUG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ranges</name> <operator>=</operator> <name><name>CodeRanges</name><index>[<expr><name>ctype</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onigenc_utf16_32_get_ctype_code_range</name><parameter_list>(<parameter><decl><type><name>OnigCtype</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name><modifier>*</modifier></type> <name>sb_out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name><modifier>*</modifier></type> <name><name>ranges</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sb_out</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<return>return <expr><call><name>onigenc_unicode_ctype_code_range</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_NAME_MAX_SIZE</name></cpp:macro> <cpp:value>(MAX_WORD_LENGTH + 1)</cpp:value></cpp:define>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onigenc_unicode_property_name_to_ctype</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>buf</name><index>[<expr><name>PROPERTY_NAME_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>code</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>code</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ONIGERR_INVALID_CHAR_PROPERTY_NAME</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>ONIGENC_ASCII_CODE_TO_LOWER_CASE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>PROPERTY_NAME_MAX_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ONIGERR_INVALID_CHAR_PROPERTY_NAME</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctype</name> <operator>=</operator> <call><name>uniname2ctype</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ONIGERR_INVALID_CHAR_PROPERTY_NAME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ctype</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onigenc_unicode_fold_lookup</name></cpp:macro> <cpp:value>onigenc_unicode_CaseFold_11_lookup</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onigenc_unicode_unfold1_lookup</name></cpp:macro> <cpp:value>onigenc_unicode_CaseUnfold_11_lookup</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onigenc_unicode_unfold2_lookup</name></cpp:macro> <cpp:value>onigenc_unicode_CaseUnfold_12_lookup</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onigenc_unicode_unfold3_lookup</name></cpp:macro> <cpp:value>onigenc_unicode_CaseUnfold_13_lookup</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>I_WITH_DOT_ABOVE</name> <init>= <expr><literal type="number">0x0130</literal></expr></init></decl>,
<decl><name>DOTLESS_i</name> <init>= <expr><literal type="number">0x0131</literal></expr></init></decl>,
<decl><name>DOT_ABOVE</name> <init>= <expr><literal type="number">0x0307</literal></expr></init></decl>
}</block>;</enum>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onigenc_unicode_mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>,
<parameter><decl><type><name>OnigCaseFoldType</name> <name>flag</name></type> <name>ARG_UNUSED</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>fold</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CodePointList3</name> <modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>rlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_CASE_FOLD_TURKISH_AZERI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ONIGENC_CODE_TO_MBC</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>DOTLESS_i</name></expr></argument>, <argument><expr><name>fold</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>I_WITH_DOT_ABOVE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ONIGENC_CODE_TO_MBC</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><name>fold</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>to</name> <operator>=</operator> <call><name>onigenc_unicode_fold_lookup</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ONIGENC_CODE_TO_MBC</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fold</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

else if ((flag &amp; INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR) != 0)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>rlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ONIGENC_CODE_TO_MBC</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fold</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>rlen</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fold</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onigenc_unicode_apply_all_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CaseUnfold_11_Type</name><modifier>*</modifier></type> <name>p11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>CaseUnfold_11</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p11</name> <operator>=</operator> <operator>&amp;</operator><name><name>CaseUnfold_11</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>p11</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>p11</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_CASE_FOLD_TURKISH_AZERI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>DOTLESS_i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name>DOTLESS_i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>I_WITH_DOT_ABOVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name>I_WITH_DOT_ABOVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>CaseUnfold_11_Locale</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p11</name> <operator>=</operator> <operator>&amp;</operator><name><name>CaseUnfold_11_Locale</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>p11</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>p11</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p11</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_CASE_FOLD_TURKISH_AZERI</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>CaseUnfold_12</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>CaseUnfold_12</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>CaseUnfold_12</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>*</operator> <operator>)</operator><name><name>CaseUnfold_12</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>CaseUnfold_12</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>CaseUnfold_12</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>CaseUnfold_12</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_CASE_FOLD_TURKISH_AZERI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>CaseUnfold_12_Locale</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>CaseUnfold_12_Locale</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>CaseUnfold_12_Locale</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>*</operator> <operator>)</operator><name><name>CaseUnfold_12_Locale</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>CaseUnfold_12_Locale</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>CaseUnfold_12_Locale</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>CaseUnfold_12_Locale</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_CASE_FOLD_TURKISH_AZERI</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>CaseUnfold_13</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>CaseUnfold_13</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>CaseUnfold_13</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>*</operator> <operator>)</operator><name><name>CaseUnfold_13</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>CaseUnfold_13</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name><name>CaseUnfold_13</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>CaseUnfold_13</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>to</name><operator>.</operator><name>code</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CodePointListValidP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OnigCodePointCount((x)-&gt;n) &lt;= numberof((x)-&gt;code))</cpp:value></cpp:define>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onigenc_unicode_get_case_fold_codes_by_str</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>,
<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name><name>codes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CodePointList3</name> <modifier>*</modifier></type><name>to</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CodePointList2</name> <modifier>*</modifier></type><name>z2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNICODE_CASE_FOLD_TURKISH_AZERI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DOTLESS_i</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>I_WITH_DOT_ABOVE</name></expr>:</case>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>DOTLESS_i</name></expr>:</case>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>I_WITH_DOT_ABOVE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>to</name> <operator>=</operator> <call><name>onigenc_unicode_fold_lookup</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>orig_code</name> <init>= <expr><name>code</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>to</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>to</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>to</name> <operator>=</operator> <call><name>onigenc_unicode_unfold1_lookup</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>CodePointListValidP</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>to</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>orig_code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>to</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name><name>cs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fn</name></decl>, <decl><type ref="prev"/><name><name>ncs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>fn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fn</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fn</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cs</name><index>[<expr><name>fn</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>to</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>fn</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>z3</name> <operator>=</operator> <call><name>onigenc_unicode_unfold1_lookup</name><argument_list>(<argument><expr><name><name>cs</name><index>[<expr><name>fn</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>z3</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cs</name><index>[<expr><name>fn</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>z3</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ncs</name><index>[<expr><name>fn</name></expr>]</index></name> <operator>=</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>z3</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ncs</name><index>[<expr><name>fn</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fn</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ncs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ncs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>z2</name> <operator>=</operator> <call><name>onigenc_unicode_unfold2_lookup</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>CodePointListValidP</name><argument_list>(<argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>z2</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>z2</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>code</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>z2</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ncs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ncs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>ncs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>z2</name> <operator>=</operator> <call><name>onigenc_unicode_unfold3_lookup</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>CodePointListValidP</name><argument_list>(<argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>z2</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>z2</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>code</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>z2</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>to</name> <operator>=</operator> <call><name>onigenc_unicode_unfold1_lookup</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>CodePointListValidP</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>to</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>to</name> <operator>=</operator> <call><name>onigenc_unicode_fold_lookup</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>codes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>to</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>codes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>z2</name> <operator>=</operator> <call><name>onigenc_unicode_unfold2_lookup</name><argument_list>(<argument><expr><name>codes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>CodePointListValidP</name><argument_list>(<argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>z2</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>z2</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>to</name> <operator>=</operator> <call><name>onigenc_unicode_fold_lookup</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>codes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>to</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>codes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>z2</name> <operator>=</operator> <call><name>onigenc_unicode_unfold3_lookup</name><argument_list>(<argument><expr><name>codes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>CodePointListValidP</name><argument_list>(<argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>z2</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>z2</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_MAPPING_SLACK</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODIFIED</name></cpp:macro> <cpp:value>(flags |= ONIGENC_CASE_MODIFIED)</cpp:value></cpp:define>
<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onigenc_unicode_case_map</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name><modifier>*</modifier></type> <name>flagP</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>OnigEncodingTypeST</name></name><modifier>*</modifier></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigUChar</name> <modifier>*</modifier></type><name>to_start</name> <init>= <expr><name>to</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCaseFoldType</name></type> <name>flags</name> <init>= <expr><operator>*</operator><name>flagP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codepoint_length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>to_end</name> <operator>-=</operator> <name>CASE_MAPPING_SLACK</name></expr>;</expr_stmt>


<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ONIGENC_CASE_UPCASE</name> <operator>|</operator> <name>ONIGENC_CASE_DOWNCASE</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>ONIGENC_CASE_SPECIAL_OFFSET</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>pp</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>to</name> <operator>&lt;=</operator> <name>to_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codepoint_length</name> <operator>=</operator> <call><name>ONIGENC_PRECISE_MBC_ENC_LEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codepoint_length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>codepoint_length</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <name>codepoint_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_UPCASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MODIFIED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>I_WITH_DOT_ABOVE</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>-=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_FOLD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MODIFIED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>DOTLESS_i</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_ASCII_ONLY</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>code</name> <operator>&gt;=</operator> <literal type="number">0x00B5</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>CodePointList3</name> <modifier>*</modifier></type><name>folded</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>I_WITH_DOT_ABOVE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_FOLD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD_TURKISH_AZERI</name><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>to</name> <operator>+=</operator> <call><name>ONIGENC_CODE_TO_MBC</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>DOT_ABOVE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>DOTLESS_i</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_UPCASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>folded</name> <operator>=</operator> <call><name>onigenc_unicode_fold_lookup</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>code</name><operator>&gt;=</operator><literal type="number">0x1C90</literal> <operator>&amp;&amp;</operator> <name>code</name><operator>&lt;=</operator><literal type="number">0x1CBF</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="number">0x10D0</literal> <operator>-</operator> <literal type="number">0x1C90</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name><operator>)</operator> 
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>OnigCaseFoldFlags</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ONIGENC_CASE_IS_TITLECASE</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>OnigCaseFoldFlags</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>OnigCodePoint</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>MODIFIED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>OnigCaseFoldFlags</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ONIGENC_CASE_SPECIALS</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>OnigCodePoint</name> <modifier>*</modifier></type><name>SpecialsStart</name> <init>= <expr><name>CaseMappingSpecials</name> <operator>+</operator> <call><name>OnigSpecialIndexDecode</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OnigCaseFoldFlags</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ONIGENC_CASE_IS_TITLECASE</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ONIGENC_CASE_UPCASE</name> <operator>|</operator> <name>ONIGENC_CASE_DOWNCASE</name><operator>)</operator><operator>)</operator>
<operator>==</operator> <operator>(</operator><name>ONIGENC_CASE_UPCASE</name> <operator>|</operator> <name>ONIGENC_CASE_DOWNCASE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
<goto>goto <name>SpecialsCopy</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>SpecialsStart</name> <operator>+=</operator> <call><name>SpecialsLengthExtract</name><argument_list>(<argument><expr><operator>*</operator><name>SpecialsStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OnigCaseFoldFlags</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name></expr>)</condition><block type="pseudo"><block_content> 
<goto>goto <name>SpecialsCopy</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>SpecialsStart</name> <operator>+=</operator> <call><name>SpecialsLengthExtract</name><argument_list>(<argument><expr><operator>*</operator><name>SpecialsStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OnigCaseFoldFlags</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ONIGENC_CASE_DOWN_SPECIAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_DOWN_SPECIAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SpecialsStart</name> <operator>+=</operator> <call><name>SpecialsLengthExtract</name><argument_list>(<argument><expr><operator>*</operator><name>SpecialsStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>SpecialsCopy</name>:</label>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>SpecialsLengthExtract</name><argument_list>(<argument><expr><operator>*</operator><name>SpecialsStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name>SpecialsStart</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>SpecialsCodepointExtract</name><argument_list>(<argument><expr><operator>*</operator><name>next</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>OnigCodePointCount</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>folded</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><name>next</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to</name> <operator>+=</operator> <call><name>ONIGENC_CODE_TO_MBC</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><name>next</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<expr_stmt><expr><name>to</name> <operator>+=</operator> <call><name>ONIGENC_CODE_TO_MBC</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>+=</operator> <call><name>ONIGENC_CODE_TO_MBC</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>*</operator><name>next</name><operator>++</operator></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>folded</name> <operator>=</operator> <call><name>onigenc_unicode_unfold1_lookup</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name><operator>)</operator> 
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>OnigCaseFoldFlags</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ONIGENC_CASE_IS_TITLECASE</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>OnigCaseFoldFlags</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>folded</name><operator>-&gt;</operator><name>code</name><index>[<expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <call><name>OnigCaseFoldFlags</name><argument_list>(<argument><expr><name><name>folded</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>to</name> <operator>+=</operator> <call><name>ONIGENC_CODE_TO_MBC</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>^=</operator> <operator>(</operator><name>ONIGENC_CASE_UPCASE</name> <operator>|</operator> <name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_TITLECASE</name> <operator>|</operator>
<name>ONIGENC_CASE_UP_SPECIAL</name> <operator>|</operator> <name>ONIGENC_CASE_DOWN_SPECIAL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>flagP</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>to</name> <operator>-</operator> <name>to_start</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
const char onigenc_unicode_version_string[] =
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_UNICODE_VERSION_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
ONIG_UNICODE_VERSION_STRING
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"";

const int onigenc_unicode_version_number[3] = {
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_UNICODE_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
ONIG_UNICODE_VERSION_MAJOR,
ONIG_UNICODE_VERSION_MINOR,
ONIG_UNICODE_VERSION_TEENY,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
0
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
