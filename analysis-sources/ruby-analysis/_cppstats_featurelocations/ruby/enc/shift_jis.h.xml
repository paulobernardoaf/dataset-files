<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\enc\shift_jis.h">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regenc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>EncLen_SJIS</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>SJIS_CAN_BE_TRAIL_TABLE</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigPairCaseFoldCodes</name></type> <name><name>CaseFoldMap</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x8260</literal></expr>, <expr><literal type="number">0x8281</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8261</literal></expr>, <expr><literal type="number">0x8282</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8262</literal></expr>, <expr><literal type="number">0x8283</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8263</literal></expr>, <expr><literal type="number">0x8284</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8264</literal></expr>, <expr><literal type="number">0x8285</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8265</literal></expr>, <expr><literal type="number">0x8286</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8266</literal></expr>, <expr><literal type="number">0x8287</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8267</literal></expr>, <expr><literal type="number">0x8288</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8268</literal></expr>, <expr><literal type="number">0x8289</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8269</literal></expr>, <expr><literal type="number">0x828a</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x826a</literal></expr>, <expr><literal type="number">0x828b</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x826b</literal></expr>, <expr><literal type="number">0x828c</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x826c</literal></expr>, <expr><literal type="number">0x828d</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x826d</literal></expr>, <expr><literal type="number">0x828e</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x826e</literal></expr>, <expr><literal type="number">0x828f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x826f</literal></expr>, <expr><literal type="number">0x8290</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8270</literal></expr>, <expr><literal type="number">0x8291</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8271</literal></expr>, <expr><literal type="number">0x8292</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8272</literal></expr>, <expr><literal type="number">0x8293</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8273</literal></expr>, <expr><literal type="number">0x8294</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8274</literal></expr>, <expr><literal type="number">0x8295</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8275</literal></expr>, <expr><literal type="number">0x8296</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8276</literal></expr>, <expr><literal type="number">0x8297</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8277</literal></expr>, <expr><literal type="number">0x8298</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8278</literal></expr>, <expr><literal type="number">0x8299</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8279</literal></expr>, <expr><literal type="number">0x829a</literal></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">0x839f</literal></expr>, <expr><literal type="number">0x83bf</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83a0</literal></expr>, <expr><literal type="number">0x83c0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83a1</literal></expr>, <expr><literal type="number">0x83c1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83a2</literal></expr>, <expr><literal type="number">0x83c2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83a3</literal></expr>, <expr><literal type="number">0x83c3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83a4</literal></expr>, <expr><literal type="number">0x83c4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83a5</literal></expr>, <expr><literal type="number">0x83c5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83a6</literal></expr>, <expr><literal type="number">0x83c6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83a7</literal></expr>, <expr><literal type="number">0x83c7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83a8</literal></expr>, <expr><literal type="number">0x83c8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83a9</literal></expr>, <expr><literal type="number">0x83c9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83aa</literal></expr>, <expr><literal type="number">0x83ca</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83ab</literal></expr>, <expr><literal type="number">0x83cb</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83ac</literal></expr>, <expr><literal type="number">0x83cc</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83ad</literal></expr>, <expr><literal type="number">0x83cd</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83ae</literal></expr>, <expr><literal type="number">0x83ce</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83af</literal></expr>, <expr><literal type="number">0x83cf</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83b0</literal></expr>, <expr><literal type="number">0x83d0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83b1</literal></expr>, <expr><literal type="number">0x83d1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83b2</literal></expr>, <expr><literal type="number">0x83d2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83b3</literal></expr>, <expr><literal type="number">0x83d3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83b4</literal></expr>, <expr><literal type="number">0x83d4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83b5</literal></expr>, <expr><literal type="number">0x83d5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83b6</literal></expr>, <expr><literal type="number">0x83d6</literal></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">0x8440</literal></expr>, <expr><literal type="number">0x8470</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8441</literal></expr>, <expr><literal type="number">0x8471</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8442</literal></expr>, <expr><literal type="number">0x8472</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8443</literal></expr>, <expr><literal type="number">0x8473</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8444</literal></expr>, <expr><literal type="number">0x8474</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8445</literal></expr>, <expr><literal type="number">0x8475</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8446</literal></expr>, <expr><literal type="number">0x8476</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8447</literal></expr>, <expr><literal type="number">0x8477</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8448</literal></expr>, <expr><literal type="number">0x8478</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8449</literal></expr>, <expr><literal type="number">0x8479</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x844a</literal></expr>, <expr><literal type="number">0x847a</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x844b</literal></expr>, <expr><literal type="number">0x847b</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x844c</literal></expr>, <expr><literal type="number">0x847c</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x844d</literal></expr>, <expr><literal type="number">0x847d</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x844e</literal></expr>, <expr><literal type="number">0x847e</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x844f</literal></expr>, <expr><literal type="number">0x8480</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8450</literal></expr>, <expr><literal type="number">0x8481</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8451</literal></expr>, <expr><literal type="number">0x8482</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8452</literal></expr>, <expr><literal type="number">0x8483</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8453</literal></expr>, <expr><literal type="number">0x8484</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8454</literal></expr>, <expr><literal type="number">0x8485</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8455</literal></expr>, <expr><literal type="number">0x8486</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8456</literal></expr>, <expr><literal type="number">0x8487</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8457</literal></expr>, <expr><literal type="number">0x8488</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8458</literal></expr>, <expr><literal type="number">0x8489</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8459</literal></expr>, <expr><literal type="number">0x848a</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x845a</literal></expr>, <expr><literal type="number">0x848b</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x845b</literal></expr>, <expr><literal type="number">0x848c</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x845c</literal></expr>, <expr><literal type="number">0x848d</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x845d</literal></expr>, <expr><literal type="number">0x848e</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x845e</literal></expr>, <expr><literal type="number">0x848f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x845f</literal></expr>, <expr><literal type="number">0x8490</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8460</literal></expr>, <expr><literal type="number">0x8491</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SJIS_ISMB_FIRST</name><parameter_list>(<parameter><type><name>byte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EncLen_SJIS[byte] &gt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SJIS_ISMB_TRAIL</name><parameter_list>(<parameter><type><name>byte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SJIS_CAN_BE_TRAIL_TABLE[(byte)]</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{ <decl><name>FAILURE</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>, <decl><name>ACCEPT</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><name>S0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>S1</name></decl> }</block></enum></type> <name>state_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>ACCEPT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>FAILURE</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>trans</name><index>[]</index><index>[<expr><literal type="number">0x100</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ 
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>F</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><name>F</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>
}</block></expr>,
<expr><block>{ 
<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,
<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,
<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,
<expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>F</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>,
<expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>A</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>, <expr><name>F</name></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbc_enc_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>firstbyte</name> <init>= <expr><operator>*</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>state_t</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>trans</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>firstbyte</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>ACCEPT</name></expr> ?</condition><then> <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE</name><argument_list>(<argument><expr><name><name>EncLen_SJIS</name><index>[<expr><name>firstbyte</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>trans</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>ACCEPT</name></expr> ?</condition><then> <expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>ONIGENC_CONSTRUCT_MBCLEN_INVALID</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>EncLen_SJIS</name><index>[<expr><operator>(</operator><name>int</name> <operator>)</operator><name>code</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>ONIGERR_INVALID_CODE_POINT_VALUE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>SJIS_ISMB_TRAIL</name><argument_list>(<argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ONIGERR_INVALID_CODE_POINT_VALUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>ONIGERR_TOO_BIG_WIDE_CHAR_VALUE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnigCodePoint</name></type>
<name>mbc_to_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbc_enc_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>code_to_mbc</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (mbc_enc_len(buf, p, enc) != (p - buf))
return REGERR_INVALID_CODE_POINT_VALUE;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>apply_all_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>onigenc_apply_all_case_fold_with_map</name><argument_list>(
<argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>CaseFoldMap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CaseFoldMap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnigCodePoint</name></type>
<name>get_lower_case</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0x8260</literal></expr></argument>, <argument><expr><literal type="number">0x8279</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <literal type="number">0x0021</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0x839f</literal></expr></argument>, <argument><expr><literal type="number">0x83b6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <literal type="number">0x0020</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0x8440</literal></expr></argument>, <argument><expr><literal type="number">0x8460</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>code</name> <operator>&gt;=</operator> <literal type="number">0x844f</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <operator>(</operator><literal type="number">0x0030</literal> <operator>+</operator> <name>d</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnigCodePoint</name></type>
<name>get_upper_case</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0x8281</literal></expr></argument>, <argument><expr><literal type="number">0x829a</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>-</operator> <literal type="number">0x0021</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0x83bf</literal></expr></argument>, <argument><expr><literal type="number">0x83d6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>-</operator> <literal type="number">0x0020</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0x8470</literal></expr></argument>, <argument><expr><literal type="number">0x847e</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ONIGENC_IS_IN_RANGE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0x8480</literal></expr></argument>, <argument><expr><literal type="number">0x8491</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>code</name> <operator>&gt;=</operator> <literal type="number">0x8480</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><name>code</name> <operator>-</operator> <operator>(</operator><literal type="number">0x0030</literal> <operator>-</operator> <name>d</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_case_fold_codes_by_str</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>code_lo</name></decl>, <decl><type ref="prev"/><name>code_up</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mbc_to_code</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_ASCII_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>onigenc_ascii_get_case_fold_codes_by_str</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbc_enc_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code_lo</name> <operator>=</operator> <call><name>get_lower_case</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code_up</name> <operator>=</operator> <call><name>get_upper_case</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>code_lo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>code_lo</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>!=</operator> <name>code_up</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>code_up</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>lower</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_ASCII</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lower</name> <operator>=</operator> <call><name>ONIGENC_ASCII_CODE_TO_LOWER_CASE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_lower_case</name><argument_list>(<argument><expr><call><name>mbc_to_code</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>code_to_mbc</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int
is_mbc_ambiguous(OnigCaseFoldType flag,
const UChar** pp, const UChar* end)
{
return onigenc_mbn_is_mbc_ambiguous(enc, flag, pp, end);

}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int
is_code_ctype(OnigCodePoint code, unsigned int ctype)
{
if (code &lt; 128)
return ONIGENC_IS_ASCII_CODE_CTYPE(code, ctype);
else {
if (CTYPE_IS_WORD_GRAPH_PRINT(ctype)) {
return (code_to_mbclen(code) &gt; 1 ? TRUE : FALSE);
}
}

return FALSE;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>left_adjust_char_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SJIS_ISMB_TRAIL</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>SJIS_ISMB_FIRST</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbc_enc_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_allowed_reverse_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>SJIS_ISMB_TRAIL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Hiragana</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0x829f</literal></expr>, <expr><literal type="number">0x82f1</literal></expr>
}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Katakana</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">0x00a6</literal></expr>, <expr><literal type="number">0x00af</literal></expr>,
<expr><literal type="number">0x00b1</literal></expr>, <expr><literal type="number">0x00dd</literal></expr>,
<expr><literal type="number">0x8340</literal></expr>, <expr><literal type="number">0x837e</literal></expr>,
<expr><literal type="number">0x8380</literal></expr>, <expr><literal type="number">0x8396</literal></expr>,
}</block></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENC_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Han</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">0x8157</literal></expr>, <expr><literal type="number">0x8157</literal></expr>,
<expr><literal type="number">0x889f</literal></expr>, <expr><literal type="number">0x9872</literal></expr>, 
<expr><literal type="number">0x989f</literal></expr>, <expr><literal type="number">0x9ffc</literal></expr>, 
<expr><literal type="number">0xe040</literal></expr>, <expr><literal type="number">0xeaa4</literal></expr>, 
<expr><literal type="number">0xed40</literal></expr>, <expr><literal type="number">0xeeec</literal></expr>, 
<expr><literal type="number">0xfa5c</literal></expr>, <expr><literal type="number">0xfc4b</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Han</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">0x8157</literal></expr>, <expr><literal type="number">0x8157</literal></expr>,
<expr><literal type="number">0x889f</literal></expr>, <expr><literal type="number">0x9872</literal></expr>, 
<expr><literal type="number">0x989f</literal></expr>, <expr><literal type="number">0x9ffc</literal></expr>, 
<expr><literal type="number">0xe040</literal></expr>, <expr><literal type="number">0xeaa4</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Latin</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">0x0041</literal></expr>, <expr><literal type="number">0x005a</literal></expr>,
<expr><literal type="number">0x0061</literal></expr>, <expr><literal type="number">0x007a</literal></expr>,
<expr><literal type="number">0x8260</literal></expr>, <expr><literal type="number">0x8279</literal></expr>,
<expr><literal type="number">0x8281</literal></expr>, <expr><literal type="number">0x829a</literal></expr>,
}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Greek</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">0x839f</literal></expr>, <expr><literal type="number">0x83b6</literal></expr>,
<expr><literal type="number">0x83bf</literal></expr>, <expr><literal type="number">0x83d6</literal></expr>,
}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigCodePoint</name></type> <name><name>CR_Cyrillic</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">0x8440</literal></expr>, <expr><literal type="number">0x8460</literal></expr>,
<expr><literal type="number">0x8470</literal></expr>, <expr><literal type="number">0x847f</literal></expr>,
<expr><literal type="number">0x8480</literal></expr>, <expr><literal type="number">0x8491</literal></expr>,
}</block></expr></init></decl>;</decl_stmt> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"enc/jis/props.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>property_name_to_ctype</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>p</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>enc_property</name></name> <modifier>*</modifier></type><name>prop</name> <init>=
<expr><call><name>onig_jis_property</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator> <operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prop</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>onigenc_minimum_property_name_to_ctype</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><name><name>prop</name><operator>-&gt;</operator><name>ctype</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&lt;=</operator> <name>ONIGENC_MAX_STD_CTYPE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ONIGENC_IS_ASCII_CODE_CTYPE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CTYPE_IS_WORD_GRAPH_PRINT</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ctype</name> <operator>-=</operator> <operator>(</operator><name>ONIGENC_MAX_STD_CTYPE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>)</operator><name>PropertyListNum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ONIGERR_TYPE_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>onig_is_in_code_range</name><argument_list>(<argument><expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name><name>PropertyList</name><index>[<expr><name>ctype</name></expr>]</index></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_ctype_code_range</name><parameter_list>(<parameter><decl><type><name>OnigCtype</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name><modifier>*</modifier></type> <name>sb_out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name><modifier>*</modifier></type> <name><name>ranges</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&lt;=</operator> <name>ONIGENC_MAX_STD_CTYPE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ONIG_NO_SUPPORT_CONFIG</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sb_out</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ctype</name> <operator>-=</operator> <operator>(</operator><name>ONIGENC_MAX_STD_CTYPE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&gt;=</operator> <operator>(</operator><name>OnigCtype</name> <operator>)</operator><name>PropertyListNum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ONIGERR_TYPE_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ranges</name> <operator>=</operator> <name><name>PropertyList</name><index>[<expr><name>ctype</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
