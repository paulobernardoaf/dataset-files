<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\enc\iso_8859_1.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regenc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iso_8859.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_IS_ISO_8859_1_CTYPE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>,<parameter><type><name>ctype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((EncISO_8859_1_CtypeTable[code] &amp; CTYPE_TO_BIT(ctype)) != 0)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>EncISO_8859_1_CtypeTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x420c</literal></expr>, <expr><literal type="number">0x4209</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4208</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x4284</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,
<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,
<expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>,
<expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x78b0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>,
<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x7ca2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,
<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,
<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>,
<expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x74a2</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x51a0</literal></expr>,
<expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x78e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,
<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,
<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>,
<expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x70e2</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x41a0</literal></expr>, <expr><literal type="number">0x4008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,
<expr><literal type="number">0x0284</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>,
<expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x10a0</literal></expr>, <expr><literal type="number">0x01a0</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x34a2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x00a0</literal></expr>,
<expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>, <expr><literal type="number">0x30e2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OnigPairCaseFoldCodes</name></type> <name><name>CaseFoldMap</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xe0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xe1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xe2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xe3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xe4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xe5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xe6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0xe7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xe8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xe9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xea</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xeb</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xec</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xed</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xee</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xef</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xf0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xf1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xf2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xf3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xf4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xf5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xf6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xf8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xf9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xfa</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xfb</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xfc</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xfd</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xfe</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>apply_all_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>onigenc_apply_all_case_fold_with_map</name><argument_list>(
<argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>CaseFoldMap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CaseFoldMap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_case_fold_codes_by_str</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0x41</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0x5a</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x53</literal> <operator>&amp;&amp;</operator> <name>end</name> <operator>&gt;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x53</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x73</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><name>SHARP_s</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0x61</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0x7a</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x73</literal> <operator>&amp;&amp;</operator> <name>end</name> <operator>&gt;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x73</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x53</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><name>SHARP_s</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0xc0</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0xcf</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0xd0</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0xdf</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>SHARP_s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'s'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'S'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'S'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><literal type="char">'s'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0xd7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0xe0</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0xef</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0xf0</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0xfe</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0xf7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCodePoint</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier> <name>end</name></type> <name>ARG_UNUSED</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>lower</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>SHARP_s</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lower</name><operator>++</operator> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lower</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lower</name> <operator>=</operator> <call><name>ONIGENC_ISO_8859_1_TO_LOWER_CASE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int
is_mbc_ambiguous(OnigCaseFoldType flag,
const UChar** pp, const UChar* end)
{
int v;
const UChar* p = *pp;

if (*p == SHARP_s &amp;&amp; (flag &amp; INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR) != 0) {
(*pp)++;
return TRUE;
}

(*pp)++;
v = (EncISO_8859_1_CtypeTable[*p] &amp; (BIT_CTYPE_UPPER | BIT_CTYPE_LOWER));
if ((v | BIT_CTYPE_LOWER) != 0) {

if (*p &gt;= 0xaa &amp;&amp; *p &lt;= 0xba)
return FALSE;
else
return TRUE;
}

return (v != 0 ? TRUE : FALSE);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ENC_IS_ISO_8859_1_CTYPE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>case_map</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name><modifier>*</modifier></type> <name>flagP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>OnigEncodingTypeST</name></name><modifier>*</modifier></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigUChar</name> <modifier>*</modifier></type><name>to_start</name> <init>= <expr><name>to</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCaseFoldType</name></type> <name>flags</name> <init>= <expr><operator>*</operator><name>flagP</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>pp</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>to</name> <operator>&lt;</operator> <name>to_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>SHARP_s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_UPCASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'s'</literal></expr> </then><else>: <expr><literal type="char">'S'</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_FOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>EncISO_8859_1_CtypeTable</name><index>[<expr><name>code</name></expr>]</index></name> <operator>&amp;</operator> <name>BIT_CTYPE_UPPER</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_FOLD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0xAA</literal> <operator>||</operator> <name>code</name> <operator>==</operator> <literal type="number">0xBA</literal> <operator>||</operator> <name>code</name> <operator>==</operator> <literal type="number">0xB5</literal> <operator>||</operator> <name>code</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>EncISO_8859_1_CtypeTable</name><index>[<expr><name>code</name></expr>]</index></name> <operator>&amp;</operator> <name>BIT_CTYPE_LOWER</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_UPCASE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ONIGENC_CASE_MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>-=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ONIGENC_CASE_TITLECASE</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>flags</name> <operator>^=</operator> <operator>(</operator><name>ONIGENC_CASE_UPCASE</name> <operator>|</operator> <name>ONIGENC_CASE_DOWNCASE</name> <operator>|</operator> <name>ONIGENC_CASE_TITLECASE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>flagP</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>to</name> <operator>-</operator> <name>to_start</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>OnigEncodingDefine</name><argument_list>(<argument><expr><name>iso_8859_1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{
<expr><name>onigenc_single_byte_mbc_enc_len</name></expr>,
<expr><literal type="string">"ISO-8859-1"</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><name>onigenc_is_mbc_newline_0x0a</name></expr>,
<expr><name>onigenc_single_byte_mbc_to_code</name></expr>,
<expr><name>onigenc_single_byte_code_to_mbclen</name></expr>,
<expr><name>onigenc_single_byte_code_to_mbc</name></expr>,
<expr><name>mbc_case_fold</name></expr>,
<expr><name>apply_all_case_fold</name></expr>,
<expr><name>get_case_fold_codes_by_str</name></expr>,
<expr><name>onigenc_minimum_property_name_to_ctype</name></expr>,
<expr><name>is_code_ctype</name></expr>,
<expr><name>onigenc_not_support_get_ctype_code_range</name></expr>,
<expr><name>onigenc_single_byte_left_adjust_char_head</name></expr>,
<expr><name>onigenc_always_true_is_allowed_reverse_match</name></expr>,
<expr><name>case_map</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>ONIGENC_FLAG_NONE</name></expr>,
}</block></expr>;</expr_stmt>
<macro><name>ENC_ALIAS</name><argument_list>(<argument><literal type="string">"ISO8859-1"</literal></argument>, <argument><literal type="string">"ISO-8859-1"</literal></argument>)</argument_list></macro>
</unit>
