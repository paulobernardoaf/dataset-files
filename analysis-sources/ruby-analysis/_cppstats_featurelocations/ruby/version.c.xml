<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\version.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIT_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>puts(ruby_##type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MKSTR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_freeze(rb_usascii_str_new_static(ruby_##type, sizeof(ruby_##type)-1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MKINT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INT2FIX(ruby_##name)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>ruby_api_version</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>RUBY_API_VERSION_MAJOR</name></expr>,
<expr><name>RUBY_API_VERSION_MINOR</name></expr>,
<expr><name>RUBY_API_VERSION_TEENY</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VERSION</name></cpp:macro> <cpp:value>STRINGIZE(RUBY_VERSION_MAJOR) "." STRINGIZE(RUBY_VERSION_MINOR) "." STRINGIZE(RUBY_VERSION_TEENY) ""</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_FULL_REVISION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_FULL_REVISION</name></cpp:macro> <cpp:value>RUBY_REVISION</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ruby_version</name><index>[]</index></name> <init>= <expr><name>RUBY_VERSION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ruby_revision</name><index>[]</index></name> <init>= <expr><name>RUBY_FULL_REVISION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ruby_release_date</name><index>[]</index></name> <init>= <expr><name>RUBY_RELEASE_DATE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ruby_platform</name><index>[]</index></name> <init>= <expr><name>RUBY_PLATFORM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ruby_patchlevel</name> <init>= <expr><name>RUBY_PATCHLEVEL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ruby_description</name><index>[]</index></name> <init>= <expr><call><name>RUBY_DESCRIPTION_WITH</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ruby_description_with_jit</name><index>[]</index></name> <init>= <expr><call><name>RUBY_DESCRIPTION_WITH</name><argument_list>(<argument><expr><literal type="string">" +JIT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ruby_copyright</name><index>[]</index></name> <init>= <expr><name>RUBY_COPYRIGHT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ruby_engine</name><index>[]</index></name> <init>= <expr><literal type="string">"ruby"</literal></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type>
<name>Init_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<enum>enum <block>{<decl><name>ruby_patchlevel</name> <init>= <expr><name>RUBY_PATCHLEVEL</name></expr></init></decl>}</block>;</enum>
<decl_stmt><decl><type><name>VALUE</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ruby_engine_name</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"RUBY_VERSION"</literal></expr></argument>, <argument><expr><operator>(</operator><name>version</name> <operator>=</operator> <call><name>MKSTR</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"RUBY_RELEASE_DATE"</literal></expr></argument>, <argument><expr><call><name>MKSTR</name><argument_list>(<argument><expr><name>release_date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"RUBY_PLATFORM"</literal></expr></argument>, <argument><expr><call><name>MKSTR</name><argument_list>(<argument><expr><name>platform</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"RUBY_PATCHLEVEL"</literal></expr></argument>, <argument><expr><call><name>MKINT</name><argument_list>(<argument><expr><name>patchlevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"RUBY_REVISION"</literal></expr></argument>, <argument><expr><call><name>MKSTR</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"RUBY_COPYRIGHT"</literal></expr></argument>, <argument><expr><call><name>MKSTR</name><argument_list>(<argument><expr><name>copyright</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"RUBY_ENGINE"</literal></expr></argument>, <argument><expr><name>ruby_engine_name</name> <operator>=</operator> <call><name>MKSTR</name><argument_list>(<argument><expr><name>engine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ruby_set_script_name</name><argument_list>(<argument><expr><name>ruby_engine_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"RUBY_ENGINE_VERSION"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><literal type="number">1</literal></expr> ?</condition><then> <expr><name>version</name></expr> </then><else>: <expr><call><name>MKSTR</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_provide</name><argument_list>(<argument><expr><literal type="string">"ruby2_keywords.rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MJIT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MJIT_OPTS_ON</name></cpp:macro> <cpp:value>mjit_opts.on</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MJIT_OPTS_ON</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>Init_ruby_description</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>description</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>MJIT_OPTS_ON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <call><name>MKSTR</name><argument_list>(<argument><expr><name>description_with_jit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>description</name> <operator>=</operator> <call><name>MKSTR</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>rb_define_global_const</name><argument_list>(<argument><expr><literal type="string">"RUBY_DESCRIPTION"</literal></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ruby_show_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>MJIT_OPTS_ON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>description_with_jit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_LAST_COMMIT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"last_commit="</literal> <name>RUBY_LAST_COMMIT_TITLE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MALLOC_CONF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>malloc_conf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"malloc_conf=%s\n"</literal></expr></argument>, <argument><expr><name>malloc_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ruby_show_copyright</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><name>copyright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
