<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\debug.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval_intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/signal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"symbol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_callinfo.h"</cpp:file></cpp:include>


<struct>struct <name>RIMemo</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v3</name></decl>;</decl_stmt>
}</block>;</struct>


<union><specifier>const</specifier> union <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_special_consts</name></name></type> <name>special_consts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_value_type</name></name></type> <name>value_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_tag_type</name></name></type> <name>tag_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>node_type</name></name></type> <name>node_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_method_ids</name></name></type> <name>method_ids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_id_types</name></name></type> <name>id_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_fl_type</name></name></type> <name>fl_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_encoding_consts</name></name></type> <name>encoding_consts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_coderange_type</name></name></type> <name>enc_coderange_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_econv_flag_type</name></name></type> <name>econv_flag_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_robject_flags</name></name></type> <name>robject_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_rmodule_flags</name></name></type> <name>rmodule_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_rstring_flags</name></name></type> <name>rstring_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_rarray_flags</name></name></type> <name>rarray_flags</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>RUBY_FMODE_READABLE</name> <init>= <expr><name>FMODE_READABLE</name></expr></init></decl>,
<decl><name>RUBY_FMODE_WRITABLE</name> <init>= <expr><name>FMODE_WRITABLE</name></expr></init></decl>,
<decl><name>RUBY_FMODE_READWRITE</name> <init>= <expr><name>FMODE_READWRITE</name></expr></init></decl>,
<decl><name>RUBY_FMODE_BINMODE</name> <init>= <expr><name>FMODE_BINMODE</name></expr></init></decl>,
<decl><name>RUBY_FMODE_SYNC</name> <init>= <expr><name>FMODE_SYNC</name></expr></init></decl>,
<decl><name>RUBY_FMODE_TTY</name> <init>= <expr><name>FMODE_TTY</name></expr></init></decl>,
<decl><name>RUBY_FMODE_DUPLEX</name> <init>= <expr><name>FMODE_DUPLEX</name></expr></init></decl>,
<decl><name>RUBY_FMODE_APPEND</name> <init>= <expr><name>FMODE_APPEND</name></expr></init></decl>,
<decl><name>RUBY_FMODE_CREATE</name> <init>= <expr><name>FMODE_CREATE</name></expr></init></decl>,
<decl><name>RUBY_FMODE_NOREVLOOKUP</name> <init>= <expr><literal type="number">0x00000100</literal></expr></init></decl>,
<decl><name>RUBY_FMODE_TRUNC</name> <init>= <expr><name>FMODE_TRUNC</name></expr></init></decl>,
<decl><name>RUBY_FMODE_TEXTMODE</name> <init>= <expr><name>FMODE_TEXTMODE</name></expr></init></decl>,
<decl><name>RUBY_FMODE_PREP</name> <init>= <expr><literal type="number">0x00010000</literal></expr></init></decl>,
<decl><name>RUBY_FMODE_SETENC_BY_BOM</name> <init>= <expr><name>FMODE_SETENC_BY_BOM</name></expr></init></decl>,
<decl><name>RUBY_FMODE_UNIX</name> <init>= <expr><literal type="number">0x00200000</literal></expr></init></decl>,
<decl><name>RUBY_FMODE_INET</name> <init>= <expr><literal type="number">0x00400000</literal></expr></init></decl>,
<decl><name>RUBY_FMODE_INET6</name> <init>= <expr><literal type="number">0x00800000</literal></expr></init></decl>,

<decl><name>RUBY_NODE_TYPESHIFT</name> <init>= <expr><name>NODE_TYPESHIFT</name></expr></init></decl>,
<decl><name>RUBY_NODE_TYPEMASK</name> <init>= <expr><name>NODE_TYPEMASK</name></expr></init></decl>,
<decl><name>RUBY_NODE_LSHIFT</name> <init>= <expr><name>NODE_LSHIFT</name></expr></init></decl>,
<decl><name>RUBY_NODE_FL_NEWLINE</name> <init>= <expr><name>NODE_FL_NEWLINE</name></expr></init></decl>
}</block> <decl><name>various</name></decl>;</enum>
<union>union <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>imemo_type</name></name></type> <name>types</name></decl>;</decl_stmt>
<enum>enum <block>{<decl><name>RUBY_IMEMO_MASK</name> <init>= <expr><name>IMEMO_MASK</name></expr></init></decl>}</block> <decl><name>mask</name></decl>;</enum>
<decl_stmt><decl><type><name><name>struct</name> <name>RIMemo</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block> <decl><name>imemo</name></decl>;</union>
<decl_stmt><decl><type><name><name>struct</name> <name>RSymbol</name></name> <modifier>*</modifier></type><name>symbol_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vm_call_flag_bits</name></name></type> <name>vm_call_flags</name></decl>;</decl_stmt>
}</block> <decl><name>ruby_dummy_gdb_enums</name></decl>;</union>

<decl_stmt><decl><type><specifier>const</specifier> <name>SIGNED_VALUE</name></type> <name>RUBY_NODE_LMASK</name> <init>= <expr><name>NODE_LMASK</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>ruby_debug_print_indent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>debug_level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name>debug_level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name>indent_level</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ruby_debug_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gc.h"</cpp:file></cpp:include>

<function><type><name>VALUE</name></type>
<name>ruby_debug_print_value</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>debug_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name>debug_level</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">0x100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_raw_obj_info</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DBG&gt; %s: %s\n"</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ruby_debug_print_v</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ruby_debug_print_value</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ID</name></type>
<name>ruby_debug_print_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>debug_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name>debug_level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DBG&gt; %s: %s\n"</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>NODE</name> <modifier>*</modifier></type>
<name>ruby_debug_print_node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>debug_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name>debug_level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DBG&gt; %s: %s (%u)\n"</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>,
<argument><expr><call><name>ruby_node_name</name><argument_list>(<argument><expr><call><name>nd_type</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nd_line</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NODE</name> <operator>*</operator><operator>)</operator><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ruby_debug_breakpoint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">80</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ruby_w32_rtc_error</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>UINT</name></type> <name><name>ruby_w32_codepage</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ruby_rgengc_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ruby_on_ci</name></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>ruby_env_debug_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>retlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_WHEN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (len == sizeof(name) - 1 &amp;&amp; strncmp(str, (name), len) == 0) { (var) = (val); return 1; } } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_MATCH_VALUE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)len &gt;= sizeof(name)-1 &amp;&amp; strncmp(str, (name), sizeof(name)-1) == 0 &amp;&amp; ((len == sizeof(name)-1 &amp;&amp; !(len = 0)) || (str[sizeof(name)-1] == '=' &amp;&amp; (str += sizeof(name), len -= sizeof(name), 1))))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_UINT</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { n = ruby_scan_digits(str, len, 10, &amp;retlen, &amp;ov); if (!ov &amp;&amp; retlen) { val = (unsigned int)n; } str += retlen; len -= retlen; } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_UINT_LIST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>vals</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; (num); ++i) { SET_UINT((vals)[i]); if (!len || *str != ':') break; ++str; --len; } if (len &gt; 0) { fprintf(stderr, "ignored "name" option: `%.*s'\n", len, str); } } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_WHEN_UINT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>vals</name></type></parameter>, <parameter><type><name>num</name></type></parameter>, <parameter><type><name>req</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (NAME_MATCH_VALUE(name)) SET_UINT_LIST(name, vals, num);</cpp:value></cpp:define>


<expr_stmt><expr><call><name>SET_WHEN</name><argument_list>(<argument><expr><literal type="string">"gc_stress"</literal></expr></argument>, <argument><expr><operator>*</operator><name>ruby_initial_gc_stress_ptr</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_WHEN</name><argument_list>(<argument><expr><literal type="string">"core"</literal></expr></argument>, <argument><expr><name>ruby_enable_coredump</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_WHEN</name><argument_list>(<argument><expr><literal type="string">"ci"</literal></expr></argument>, <argument><expr><name>ruby_on_ci</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NAME_MATCH_VALUE</name><argument_list>(<argument><expr><literal type="string">"rgengc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ruby_rgengc_debug</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>SET_UINT_LIST</name><argument_list>(<argument><expr><literal type="string">"rgengc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ruby_rgengc_debug</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">80</literal></expr></cpp:if>
<expr_stmt><expr><call><name>SET_WHEN</name><argument_list>(<argument><expr><literal type="string">"rtc_error"</literal></expr></argument>, <argument><expr><name>ruby_w32_rtc_error</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>NAME_MATCH_VALUE</name><argument_list>(<argument><expr><literal type="string">"codepage"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"missing codepage argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>SET_UINT_LIST</name><argument_list>(<argument><expr><literal type="string">"codepage"</literal></expr></argument>, <argument><expr><name>ruby_w32_codepage</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>ruby_w32_codepage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_debug_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ruby_env_debug_option</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unexpected debug option: %.*s\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ruby_set_debug_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ruby_each_words</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>set_debug_option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
