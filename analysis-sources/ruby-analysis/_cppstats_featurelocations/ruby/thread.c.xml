<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\thread.c">


























































<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_FORTIFY_SOURCE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__USE_FORTIFY_LEVEL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_FORTIFY_LEVEL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval_intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hrtime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/signal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/warnings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iseq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/thread_native.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timev.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NATIVE_THREAD_PRIORITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_NATIVE_THREAD_PRIORITY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_THREAD_PRIORITY_MAX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_THREAD_PRIORITY_MIN</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cThreadShield</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>sym_immediate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>sym_on_blocking</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>sym_never</name></decl>;</decl_stmt>

<enum>enum <name>SLEEP_FLAGS</name> <block>{
<decl><name>SLEEP_DEADLOCKABLE</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>SLEEP_SPURIOUS_CHECK</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL_STORAGE_INITIALISED</name></cpp:macro> <cpp:value>FL_USER13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_LOCAL_STORAGE_INITIALISED_P</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_TEST_RAW((th), THREAD_LOCAL_STORAGE_INITIALISED)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>rb_thread_local_storage</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>THREAD_LOCAL_STORAGE_INITIALISED_P</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>idLocals</name></expr></argument>, <argument><expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_FL_SET_RAW</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>THREAD_LOCAL_STORAGE_INITIALISED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>idLocals</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sleep_hrtime</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rb_hrtime_t</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sleep_forever</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rb_thread_sleep_deadly_allow_spurious_wakeup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rb_threadptr_dead</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rb_check_deadlock</name><parameter_list>(<parameter><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rb_threadptr_pending_interrupt_empty_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thread_status_name</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>detail</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hrtime_update_expire</name><parameter_list>(<parameter><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_hrtime_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>NORETURN</name><argument_list>(<argument>static void async_bug_fd(const char *mesg, int errno_arg, int fd)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>consume_communication_pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_signals_nogvl</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sigwait_fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_sigwait_fd_migrate</name><parameter_list>(<parameter><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eKillSignal</name></cpp:macro> <cpp:value>INT2FIX(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eTerminateSignal</name></cpp:macro> <cpp:value>INT2FIX(1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>system_working</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>waiting_fd</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>list_node</name></name></type> <name>wfd_node</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_SYSTEM_DEPENDENT_IMPLEMENTATION</name></cpp:macro></cpp:define>

<struct>struct <name>rb_blocking_region_buffer</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>rb_thread_status</name></name></type> <name>prev_status</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>unblock_function_set</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>rb_unblock_function_t</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fail_if_interrupted</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>unblock_function_clear</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>blocking_region_begin</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_blocking_region_buffer</name></name> <modifier>*</modifier></type><name>region</name></decl></parameter>,
<parameter><decl><type><name>rb_unblock_function_t</name> <modifier>*</modifier></type><name>ubf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fail_if_interrupted</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>blocking_region_end</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_blocking_region_buffer</name></name> <modifier>*</modifier></type><name>region</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_GC_SAVE_MACHINE_CONTEXT</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { FLUSH_REGISTER_WINDOWS; setjmp((th)-&gt;ec-&gt;machine.regs); SET_MACHINE_STACK_END(&amp;(th)-&gt;ec-&gt;machine.stack_end); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GVL_UNLOCK_BEGIN</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { RB_GC_SAVE_MACHINE_CONTEXT(th); gvl_release(th-&gt;vm);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GVL_UNLOCK_END</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gvl_acquire(th-&gt;vm, th); rb_thread_set_current(th); } while(0)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR_CONSTANT_P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>only_if_constant</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>notconst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_choose_expr(__builtin_constant_p(expr), (expr), (notconst))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>only_if_constant</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>notconst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_constant_p(expr) ? (expr) : (notconst))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>only_if_constant</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>notconst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>notconst</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKING_REGION</name><parameter_list>(<parameter><type><name>th</name></type></parameter>, <parameter><type><name>exec</name></type></parameter>, <parameter><type><name>ubf</name></type></parameter>, <parameter><type><name>ubfarg</name></type></parameter>, <parameter><type><name>fail_if_interrupted</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { struct rb_blocking_region_buffer __region; if (blocking_region_begin(th, &amp;__region, (ubf), (ubfarg), fail_if_interrupted) || !only_if_constant(fail_if_interrupted, TRUE)) { exec; blocking_region_end(th, &amp;__region); }; } while(0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VM_CHECK_INTS_BLOCKING</name><parameter_list>(<parameter><type><name>ec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vm_check_ints_blocking(ec)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>vm_check_ints_blocking</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>rb_ec_thread_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><call><name>rb_threadptr_pending_interrupt_empty_p</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>RUBY_VM_INTERRUPTED_ANY</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue_checked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_VM_SET_INTERRUPT</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>rb_threadptr_execute_interrupts</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vm_living_thread_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>vm</name><operator>-&gt;</operator><name>living_thread_num</name></name></expr>;</return>
</block_content>}</block></function>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_POLL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD_version</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__FreeBSD_version</name> <operator>&gt;=</operator> <literal type="number">1100000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_POLL</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLERR_SET</name></cpp:macro> <cpp:value>(POLLHUP | POLLERR)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>timeout_prepare</name><parameter_list>(<parameter><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <call><name>rb_timeval2hrtime</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <call><name>rb_hrtime_add</name><argument_list>(<argument><expr><call><name>rb_hrtime_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <name>rel</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREAD_DEBUG</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_ARGS_MACRO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>rb_thread_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>thread_debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_thread_debug(__FILE__, __LINE__, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSITION_FORMAT</name></cpp:macro> <cpp:value>"%s:%d:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSITION_ARGS</name></cpp:macro> <cpp:value>,file, line</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>rb_thread_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>thread_debug</name></cpp:macro> <cpp:value>rb_thread_debug</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSITION_FORMAT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSITION_ARGS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NON_SCALAR_THREAD_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill_thread_id_string</name></cpp:macro> <cpp:value>ruby_fill_thread_id_string</cpp:value></cpp:define>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ruby_fill_thread_id_string</name><parameter_list>(<parameter><decl><type><name>rb_nativethread_id_t</name></type> <name>thid</name></decl></parameter>, <parameter><decl><type><name>rb_thread_id_string_t</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ruby_digitmap</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>thid</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>thid</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>thid</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ruby_digitmap</name><index>[<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ruby_digitmap</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>rb_thread_id_string_t</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill_thread_id_str</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fill_thread_id_string((th)-&gt;thread_id, (th)-&gt;thread_id_string)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>thread_id_str</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((th)-&gt;thread_id_string)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_THREAD_ID</name></cpp:macro> <cpp:value>"s"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREAD_DEBUG</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rb_thread_debug_enabled</name></decl>;</decl_stmt>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_s_debug</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>rb_thread_debug_enabled</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_s_debug_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>rb_thread_debug_enabled</name> <operator>=</operator> <ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_thread_debug_enabled</name></cpp:macro> <cpp:value>THREAD_DEBUG</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>thread_debug</name></cpp:macro> <cpp:value>if(0)printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>fill_thread_id_str</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill_thread_id_string</name><parameter_list>(<parameter><type><name>thid</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)(uintptr_t)(thid))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill_thread_id_str</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>thread_id_str</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)(uintptr_t)(th)-&gt;thread_id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_THREAD_ID</name></cpp:macro> <cpp:value>"p"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>NOINLINE</name><argument_list>(<argument>static int thread_start_func_2(rb_thread_t *th, VALUE *stack_start)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>timer_thread_function</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ruby_sigchld_handler</name><parameter_list>(<parameter><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ubf_sigwait</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ignore</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_wakeup_timer_thread</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_win32.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_OUT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>WaitForSingleObject(&amp;debug_mutex, INFINITE); printf(POSITION_FORMAT"%#lx - %s" POSITION_ARGS, GetCurrentThreadId(), buf); fflush(stdout); ReleaseMutex(&amp;debug_mutex);</cpp:value></cpp:define>





<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_pthread.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_OUT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>pthread_mutex_lock(&amp;debug_mutex); printf(POSITION_FORMAT"%"PRI_THREAD_ID" - %s" POSITION_ARGS, fill_thread_id_string(pthread_self(), thread_id_string), buf); fflush(stdout); pthread_mutex_unlock(&amp;debug_mutex);</cpp:value></cpp:define>






<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unsupported thread type"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BUSY_WAIT_SIGNALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUSY_WAIT_SIGNALS</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_EVENTFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_EVENTFD</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREAD_DEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>debug_mutex_initialized</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>rb_nativethread_lock_t</name></type> <name>debug_mutex</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>rb_thread_debug</name><parameter_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_ARGS_MACRO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NON_SCALAR_THREAD_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>rb_thread_id_string_t</name></type> <name>thread_id_string</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rb_thread_debug_enabled</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_mutex_initialized</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>debug_mutex_initialized</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_native_mutex_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>debug_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUFSIZ</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUG_OUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_sync.c"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>rb_vm_gvl_destroy</name><parameter_list>(<parameter><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gvl_release</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gvl_destroy</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_native_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>waitpid_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_native_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_nativethread_lock_initialize</name><parameter_list>(<parameter><decl><type><name>rb_nativethread_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_native_mutex_initialize</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_nativethread_lock_destroy</name><parameter_list>(<parameter><decl><type><name>rb_nativethread_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_native_mutex_destroy</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_nativethread_lock_lock</name><parameter_list>(<parameter><decl><type><name>rb_nativethread_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_native_mutex_lock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_nativethread_lock_unlock</name><parameter_list>(<parameter><decl><type><name>rb_nativethread_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_native_mutex_unlock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unblock_function_set</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>rb_unblock_function_t</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fail_if_interrupted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fail_if_interrupted</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RUBY_VM_INTERRUPTED_ANY</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rb_native_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>raised_flag</name></name> <operator>&amp;&amp;</operator> <call><name>RUBY_VM_INTERRUPTED_ANY</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>rb_native_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call><operator>,</operator> <name>TRUE</name><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>unblock</name><operator>.</operator><name>func</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>unblock</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>unblock</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_native_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unblock_function_clear</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_native_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>unblock</name><operator>.</operator><name>func</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_native_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_threadptr_interrupt_common</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_native_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>trap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RUBY_VM_SET_TRAP_INTERRUPT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>RUBY_VM_SET_INTERRUPT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>unblock</name><operator>.</operator><name>func</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name><name>th</name><operator>-&gt;</operator><name>unblock</name><operator>.</operator><name>func</name></name><operator>)</operator><operator>(</operator><name><name>th</name><operator>-&gt;</operator><name>unblock</name><operator>.</operator><name>arg</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_native_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_threadptr_interrupt</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_interrupt_common</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>threadptr_trap_interrupt</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_interrupt_common</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminate_all</name><parameter_list>(<parameter><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_thread_t</name> <modifier>*</modifier></type><name>main_thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>list_for_each</name><argument_list>(<argument>&amp;vm-&gt;living_threads</argument>, <argument>th</argument>, <argument>vmlt_node</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>!=</operator> <name>main_thread</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"terminate_all: begin (thid: %"</literal><name>PRI_THREAD_ID</name><literal type="string">", status: %s)\n"</literal></expr></argument>,
<argument><expr><call><name>thread_id_str</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>thread_status_name</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_pending_interrupt_enque</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>eTerminateSignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_interrupt</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"terminate_all: end (thid: %"</literal><name>PRI_THREAD_ID</name><literal type="string">", status: %s)\n"</literal></expr></argument>,
<argument><expr><call><name>thread_id_str</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>thread_status_name</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"terminate_all: main thread (%p)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_threadptr_unlock_all_locking_mutexes</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_mutex_t</name> <modifier>*</modifier></type><name>mutexes</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>keeping_mutexes</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>mutexes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mutex</name> <operator>=</operator> <name>mutexes</name></expr>;</expr_stmt>


<expr_stmt><expr><name>mutexes</name> <operator>=</operator> <name><name>mutex</name><operator>-&gt;</operator><name>next_mutex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>rb_mutex_unlock_th</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"invalid keeping_mutexes: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_terminate_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>ec</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>vm</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>sleeping</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name> <operator>!=</operator> <name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_terminate_all: called by child thread (%p, %p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rb_threadptr_unlock_all_locking_mutexes</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<label><name>retry</name>:</label>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_terminate_all (main thread: %p)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminate_all</name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>vm_living_thread_num</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_hrtime_t</name></type> <name>rel</name> <init>= <expr><name>RB_HRTIME_PER_SEC</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>sleeping</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>native_sleep</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sleeping</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>sleeping</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sleeping</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>rb_threadptr_root_fiber_terminate</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>thread_cleanup_func_before_exec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>th_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><name>th_ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_KILLED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_threadptr_root_fiber_terminate</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>thread_cleanup_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>th_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>atfork</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><name>th_ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>locking_mutex</name></name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>thread_cleanup_func_before_exec</name><argument_list>(<argument><expr><name>th_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><name>atfork</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_native_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>native_thread_destroy</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_threadptr_raise</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_thread_to_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>ruby_thread_init_stack</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>native_thread_init_stack</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type>
<name>rb_vm_proc_local_ep</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><call><name>vm_proc_ep</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ep</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_vm_ep_local_ep</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>thread_do_start</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>native_set_thread_name</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>invoke_type</name></name> <operator>==</operator> <name>thread_invoke_type_proc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>args</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>proc</name><operator>.</operator><name>args</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>args_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>args_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>procval</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>proc</name><operator>.</operator><name>proc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_proc_t</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetProcPtr</name><argument_list>(<argument><expr><name>procval</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>root_lep</name></name> <operator>=</operator> <call><name>rb_vm_proc_local_ep</name><argument_list>(<argument><expr><name>procval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>root_svar</name></name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXEC_EVENT_HOOK</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>RUBY_EVENT_THREAD_BEGIN</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vm_check_ints_blocking</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>args_len</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>args_ptr</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>args_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>args_ptr</name></expr></argument>, <argument><expr><call><name>RARRAY_CONST_PTR_TRANSIENT</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>args_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>proc</name><operator>.</operator><name>args</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>args_ptr</name> <operator>=</operator> <call><name>RARRAY_CONST_PTR</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vm_check_ints_blocking</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>rb_vm_invoke_proc</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>proc</name></expr></argument>,
<argument><expr><name>args_len</name></expr></argument>, <argument><expr><name>args_ptr</name></expr></argument>,
<argument><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>proc</name><operator>.</operator><name>kw_splat</name></name></expr></argument>,
<argument><expr><name>VM_BLOCK_HANDLER_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXEC_EVENT_HOOK</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>RUBY_EVENT_THREAD_END</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>func</name><operator>.</operator><name>func</name></name>)<argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>func</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>rb_ec_clear_current_thread_trace_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>thread_start_func_2</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>stack_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>STACK_GROW_DIR_DETECTION</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_tag_type</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_list_t</name> <modifier>*</modifier></type><name>join_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>main_th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>errinfo</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>default_params</name><operator>.</operator><name>thread_vm_stack_size</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type> <name>vm_stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"thread_start_func_2 must not be used for main thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"thread start: %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&lt;=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_maxsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vm_stack</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name>vm_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gvl_acquire</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ec_initialize_vm_stack</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>vm_stack</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name> <operator>=</operator> <call><name>STACK_DIR_UPPER</name><argument_list>(<argument><expr><name>vm_stack</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>vm_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_maxsize</name></name> <operator>-=</operator> <name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ruby_thread_set_native</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"thread start (get lock): %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_thread_set_current</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SAVE_ROOT_JMPBUF</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><call><name>thread_do_start</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>errinfo</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>TAG_FATAL</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>, <argument><expr><name>rb_eSystemExit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>report_on_exception</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mesg</name> <init>= <expr><call><name>rb_thread_to_s</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><literal type="string">" terminated with exception (report_on_exception is true):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_write_error_str</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ec_error_print</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>errinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>thread_abort_on_exception</name></name> <operator>||</operator>
<name><name>th</name><operator>-&gt;</operator><name>abort_on_exception</name></name> <operator>||</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name>ruby_debug</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>errinfo</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_KILLED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"thread end: %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>main_th</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>main_th</name> <operator>==</operator> <name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_stop</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>, <argument><expr><name>T_OBJECT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_threadptr_raise</name><argument_list>(<argument><expr><name>main_th</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>errinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ec_clear_current_thread_trace_func</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>locking_mutex</name></name> <operator>!=</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"thread_start_func_2: locking_mutex must not be set (%p:%"</literal><name>PRIxVALUE</name><literal type="string">")"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>locking_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rb_vm_living_threads_remove</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>main_th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_KILLED</name> <operator>&amp;&amp;</operator> <call><name>rb_thread_alone</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_threadptr_interrupt</name><argument_list>(<argument><expr><name>main_th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>join_list</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>join_list</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>join_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_interrupt</name><argument_list>(<argument><expr><name><name>join_list</name><operator>-&gt;</operator><name>th</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>join_list</name><operator>-&gt;</operator><name>th</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>THREAD_STOPPED</name></expr>:</case> <case>case <expr><name>THREAD_STOPPED_FOREVER</name></expr>:</case>
<expr_stmt><expr><name><name>join_list</name><operator>-&gt;</operator><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_RUNNABLE</name></expr>;</expr_stmt>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>join_list</name> <operator>=</operator> <name><name>join_list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>rb_threadptr_unlock_all_locking_mutexes</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_check_deadlock</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_fiber_close</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>thread_cleanup_func</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gvl_release</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_create_core</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thval</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current_th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OBJ_FROZEN</name><argument_list>(<argument><expr><name><name>current_th</name><operator>-&gt;</operator><name>thgroup</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>,
<argument><expr><literal type="string">"can't start a new thread (frozen ThreadGroup)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_type</name></name> <operator>=</operator> <name>thread_invoke_type_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>func</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>func</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>args</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_type</name></name> <operator>=</operator> <name>thread_invoke_type_proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>proc</name><operator>.</operator><name>proc</name></name> <operator>=</operator> <call><name>rb_block_proc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>proc</name><operator>.</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>proc</name><operator>.</operator><name>kw_splat</name></name> <operator>=</operator> <call><name>rb_keyword_given_p</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <name><name>current_th</name><operator>-&gt;</operator><name>priority</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>thgroup</name></name> <operator>=</operator> <name><name>current_th</name><operator>-&gt;</operator><name>thgroup</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue_checked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_mask_stack</name></name> <operator>=</operator> <call><name>rb_ary_dup</name><argument_list>(<argument><expr><name><name>current_th</name><operator>-&gt;</operator><name>pending_interrupt_mask_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC_CLEAR_CLASS</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_mask_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_native_mutex_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>native_thread_create</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_KILLED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"can't create Thread: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_vm_living_threads_insert</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>thval</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>threadptr_initialized</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((th)-&gt;invoke_type != thread_invoke_type_none)</cpp:value></cpp:define>





















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_s_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>thread</name> <init>= <expr><call><name>rb_thread_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>main_thread</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_KILLED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"can't alloc thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_obj_call_init_kw</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>RB_PASS_CALLED_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>threadptr_initialized</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"uninitialized thread - check `%"</literal><name>PRIsVALUE</name><literal type="string">"#initialize'"</literal></expr></argument>,
<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>thread</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_start</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>thread_create_core</name><argument_list>(<argument><expr><call><name>rb_thread_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>threadptr_invoke_proc_location</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>invoke_type</name></name> <operator>==</operator> <name>thread_invoke_type_proc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_proc_location</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>invoke_arg</name><operator>.</operator><name>proc</name><operator>.</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"must be called with a block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>invoke_type</name></name> <operator>!=</operator> <name>thread_invoke_type_none</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>loc</name> <init>= <expr><call><name>threadptr_invoke_proc_location</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>,
<argument><expr><literal type="string">"already initialized thread - %"</literal><name>PRIsVALUE</name><literal type="string">":%"</literal><name>PRIsVALUE</name></expr></argument>,
<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"already initialized thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>thread_create_core</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_thread_create</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>thread_create_core</name><argument_list>(<argument><expr><call><name>rb_thread_alloc</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>join_arg</name> <block>{
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>waiting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier></type><name>limit</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>remove_from_join_list</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>join_arg</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator>struct <name>join_arg</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>target</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>th</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>waiting</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target_th</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>THREAD_KILLED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_list_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>target_th</name><operator>-&gt;</operator><name>join_list</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>th</name></name> <operator>==</operator> <name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_join_sleep</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>join_arg</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator>struct <name>join_arg</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>target</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>th</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>waiting</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_hrtime_t</name></type> <name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>rb_hrtime_add</name><argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><call><name>rb_hrtime_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>target_th</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>THREAD_KILLED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_STOPPED_FOREVER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>sleeper</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_check_deadlock</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>native_sleep</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>sleeper</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hrtime_update_expire</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"thread_join: timeout (thid: %"</literal><name>PRI_THREAD_ID</name><literal type="string">")\n"</literal></expr></argument>,
<argument><expr><call><name>thread_id_str</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_STOPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>native_sleep</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_RUNNABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"thread_join: interrupted (thid: %"</literal><name>PRI_THREAD_ID</name><literal type="string">", status: %s)\n"</literal></expr></argument>,
<argument><expr><call><name>thread_id_str</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>thread_status_name</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_join</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name></decl></parameter>, <parameter><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>join_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>target_th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"Target thread must not be current thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>main_thread</name> <operator>==</operator> <name>target_th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"Target thread must not be main thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>target_th</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>waiting</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name>rel</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"thread_join (thid: %"</literal><name>PRI_THREAD_ID</name><literal type="string">", status: %s)\n"</literal></expr></argument>,
<argument><expr><call><name>thread_id_str</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>thread_status_name</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target_th</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>THREAD_KILLED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_list_t</name></type> <name>list</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>list</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>target_th</name><operator>-&gt;</operator><name>join_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>.</operator><name>th</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target_th</name><operator>-&gt;</operator><name>join_list</name></name> <operator>=</operator> <operator>&amp;</operator><name>list</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_ensure</name><argument_list>(<argument><expr><name>thread_join_sleep</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>,
<argument><expr><name>remove_from_join_list</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"thread_join: success (thid: %"</literal><name>PRI_THREAD_ID</name><literal type="string">", status: %s)\n"</literal></expr></argument>,
<argument><expr><call><name>thread_id_str</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>thread_status_name</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>err</name> <init>= <expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TAG_FATAL</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"thread_join: terminated (thid: %"</literal><name>PRI_THREAD_ID</name><literal type="string">", status: %s)\n"</literal></expr></argument>,
<argument><expr><call><name>thread_id_str</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>thread_status_name</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"thread_join: Fixnum (%d) should not reach here."</literal></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>THROW_DATA_P</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"thread_join: THROW_DATA should not reach here."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>target_th</name><operator>-&gt;</operator><name>self</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>rb_hrtime_t</name> <modifier>*</modifier></type><name>double2hrtime</name><parameter_list>(<parameter><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>








































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_join_m</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_hrtime_t</name></type> <name>rel</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>limit</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>rb_sec2hrtime</name><argument_list>(<argument><expr><call><name>NUM2TIMET</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <operator>&amp;</operator><name>rel</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>double2hrtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><call><name>rb_num2dbl</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>thread_join</name><argument_list>(<argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>thread_join</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>th</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
</block_content>}</block></function>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMESPEC_SEC_MAX</name></cpp:macro> <cpp:value>TIMET_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMESPEC_SEC_MIN</name></cpp:macro> <cpp:value>TIMET_MIN</cpp:value></cpp:define>

<decl_stmt><decl><type><name>COMPILER_WARNING_PUSH</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_warning</name><argument_list>(<argument><expr><literal type="string">"-Wimplicit-int-float-conversion"</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<name>COMPILER_WARNING_IGNORED</name><argument_list>(<argument><expr><operator>-</operator><name>Wimplicit</name><operator>-</operator><name>int</name><operator>-</operator><name>float</name><operator>-</operator><name>conversion</name></expr></argument>)</argument_list>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<name>COMPILER_WARNING_IGNORED</name><argument_list>(<argument><expr><literal type="number">4305</literal></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
static const <name>double</name> <name>TIMESPEC_SEC_MAX_as_double</name> <init>= <expr><name>TIMESPEC_SEC_MAX</name></expr></init></decl>;</decl_stmt>
<function><type><name>COMPILER_WARNING_POP</name>

<specifier>static</specifier> <name>rb_hrtime_t</name> <modifier>*</modifier></type>
<name>double2hrtime</name><parameter_list>(<parameter><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier></type><name>hrt</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>TIMESPEC_SEC_MAX_PLUS_ONE</name> <init>= <expr><literal type="number">2.0</literal> <operator>*</operator> <operator>(</operator><name>TIMESPEC_SEC_MAX_as_double</name> <operator>/</operator> <literal type="number">2.0</literal> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>TIMESPEC_SEC_MAX_PLUS_ONE</name> <operator>&lt;=</operator> <name>d</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hrt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hrt</name> <operator>=</operator> <operator>(</operator><name>rb_hrtime_t</name><operator>)</operator><operator>(</operator><name>d</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>RB_HRTIME_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>hrt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getclockofday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOCK_GETTIME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_timespec_now</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<macro><name>NOINLINE</name><argument_list>(<argument>rb_hrtime_t rb_hrtime_now(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function><type><name>rb_hrtime_t</name></type>
<name>rb_hrtime_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getclockofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_timespec2hrtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sleep_forever</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>rb_thread_status</name></name></type> <name>prev_status</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>rb_thread_status</name></name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>woke</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <ternary><condition><expr><name>fl</name> <operator>&amp;</operator> <name>SLEEP_DEADLOCKABLE</name></expr> ?</condition><then> <expr><name>THREAD_STOPPED_FOREVER</name></expr> </then><else>: <expr><name>THREAD_STOPPED</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>status</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>&amp;</operator> <name>SLEEP_DEADLOCKABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>sleeper</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_check_deadlock</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>native_sleep</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>&amp;</operator> <name>SLEEP_DEADLOCKABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>sleeper</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>woke</name> <operator>=</operator> <call><name>vm_check_ints_blocking</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>woke</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>fl</name> <operator>&amp;</operator> <name>SLEEP_SPURIOUS_CHECK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>prev_status</name></expr>;</expr_stmt>
</block_content>}</block></function>





<decl_stmt><decl><type><name>COMPILER_WARNING_PUSH</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr></cpp:if>
<name>COMPILER_WARNING_IGNORED</name><argument_list>(<argument><expr><operator>-</operator><name>Wmaybe</name><operator>-</operator><name>uninitialized</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRIu64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIu64</name></cpp:macro> <cpp:value>PRI_64_PREFIX "u"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





static <name>int</name>
<name>hrtime_update_expire</name><argument_list>(<argument><expr><name>rb_hrtime_t</name> <operator>*</operator><name>timeout</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>rb_hrtime_t</name> <name>end</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_hrtime_t</name></type> <name>now</name> <init>= <expr><call><name>rb_hrtime_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"hrtime_update_expire: "</literal>
<literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" &gt; %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>timeout</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>now</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><name>COMPILER_WARNING_POP</name>

<specifier>static</specifier> <name>void</name></type>
<name>sleep_hrtime</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>rb_hrtime_t</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>rb_thread_status</name></name></type> <name>prev_status</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>woke</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_hrtime_t</name></type> <name>end</name> <init>= <expr><call><name>rb_hrtime_add</name><argument_list>(<argument><expr><call><name>rb_hrtime_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_STOPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_STOPPED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>native_sleep</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>woke</name> <operator>=</operator> <call><name>vm_check_ints_blocking</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>woke</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>fl</name> <operator>&amp;</operator> <name>SLEEP_SPURIOUS_CHECK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hrtime_update_expire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>prev_status</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_sleep_forever</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_sleep_forever\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sleep_forever</name><argument_list>(<argument><expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SLEEP_SPURIOUS_CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_sleep_deadly</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_sleep_deadly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sleep_forever</name><argument_list>(<argument><expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SLEEP_DEADLOCKABLE</name><operator>|</operator><name>SLEEP_SPURIOUS_CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_sleep_interruptible</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>rb_thread_status</name></name></type> <name>prev_status</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_STOPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>native_sleep</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>prev_status</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_thread_sleep_deadly_allow_spurious_wakeup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_sleep_deadly_allow_spurious_wakeup\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sleep_forever</name><argument_list>(<argument><expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SLEEP_DEADLOCKABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_wait_for</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sleep_hrtime</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><call><name>rb_timeval2hrtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SLEEP_SPURIOUS_CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>rb_thread_check_ints</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>rb_thread_check_trap_pending</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_signal_buff_size</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_thread_interrupted</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>RUBY_VM_INTERRUPTED</name><argument_list>(<argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thval</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_sleep</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_wait_for</name><argument_list>(<argument><expr><call><name>rb_time_timeval</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_thread_schedule_limits</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>limits_us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_schedule\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_thread_alone</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>running_time_us</name></name> <operator>&gt;=</operator> <name>limits_us</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_schedule/switch start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_SAVE_MACHINE_CONTEXT</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gvl_yield</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_thread_set_current</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_schedule/switch done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_schedule</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_schedule_limits</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>blocking_region_begin</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_blocking_region_buffer</name></name> <modifier>*</modifier></type><name>region</name></decl></parameter>,
<parameter><decl><type><name>rb_unblock_function_t</name> <modifier>*</modifier></type><name>ubf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fail_if_interrupted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>prev_status</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unblock_function_set</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>ubf</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>fail_if_interrupted</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>blocking_region_buffer</name></name> <operator>=</operator> <name>region</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_STOPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"enter blocking region (%p)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_SAVE_MACHINE_CONTEXT</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gvl_release</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>blocking_region_end</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_blocking_region_buffer</name></name> <modifier>*</modifier></type><name>region</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>unblock_function_clear</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unregister_ubf_list</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gvl_acquire</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_thread_set_current</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"leave blocking region (%p)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>blocking_region_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_STOPPED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>prev_status</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>rb_nogvl</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>,
<parameter><decl><type><name>rb_unblock_function_t</name> <modifier>*</modifier></type><name>ubf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>rb_ec_thread_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ubf_th</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ubf</name> <operator>==</operator> <name>RUBY_UBF_IO</name> <operator>||</operator> <name>ubf</name> <operator>==</operator> <name>RUBY_UBF_PROCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ubf</name> <operator>=</operator> <name>ubf_select</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data2</name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ubf</name> <operator>&amp;&amp;</operator> <call><name>vm_living_thread_num</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>RB_NOGVL_UBF_ASYNC_SAFE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>ubf_async_safe</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ubf_th</name> <operator>=</operator> <call><name>rb_thread_start_unblock_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>BLOCKING_REGION</name><argument_list>(<argument>th</argument>, <argument>{
val = func(data1);
saved_errno = errno;
}</argument>, <argument>ubf</argument>, <argument>data2</argument>, <argument>flags &amp; RB_NOGVL_INTR_FAIL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>ubf_async_safe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RB_NOGVL_INTR_FAIL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ubf_th</name> <operator>!=</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>thread_value</name><argument_list>(<argument><expr><call><name>rb_thread_kill</name><argument_list>(<argument><expr><name>ubf_th</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>






















































































<function><type><name>void</name> <modifier>*</modifier></type>
<name>rb_thread_call_without_gvl2</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>,
<parameter><decl><type><name>rb_unblock_function_t</name> <modifier>*</modifier></type><name>ubf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_nogvl</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>, <argument><expr><name>ubf</name></expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr><name>RB_NOGVL_INTR_FAIL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>rb_thread_call_without_gvl</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>,
<parameter><decl><type><name>rb_unblock_function_t</name> <modifier>*</modifier></type><name>ubf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_nogvl</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>, <argument><expr><name>ubf</name></expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_thread_io_blocking_region</name><parameter_list>(<parameter><decl><type><name>rb_blocking_function_t</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>val</name> <init>= <expr><name>Qundef</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>saved_errno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_tag_type</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>waiting_fd</name></name></type> <name>wfd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wfd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wfd</name><operator>.</operator><name>th</name></name> <operator>=</operator> <call><name>rb_ec_thread_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>rb_ec_vm_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>waiting_fds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>wfd_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<macro><name>BLOCKING_REGION</name><argument_list>(<argument>wfd.th</argument>, <argument>{
val = func(data1);
saved_errno = errno;
}</argument>, <argument>ubf_select</argument>, <argument>wfd.th</argument>, <argument>FALSE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>wfd_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EC_JUMP_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>





























<function><type><name>void</name> <modifier>*</modifier></type>
<name>rb_thread_call_with_gvl</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>ruby_thread_from_native</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_blocking_region_buffer</name></name> <modifier>*</modifier></type><name>brb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_unblock_callback</name></name></type> <name>prev_unblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"[BUG] rb_thread_call_with_gvl() is called by non-ruby thread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>brb</name> <operator>=</operator> <operator>(</operator>struct <name>rb_blocking_region_buffer</name> <operator>*</operator><operator>)</operator><name><name>th</name><operator>-&gt;</operator><name>blocking_region_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_unblock</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>unblock</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>brb</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_call_with_gvl: called by a thread which has GVL."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blocking_region_end</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>brb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>released</name> <init>= <expr><call><name>blocking_region_begin</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>brb</name></expr></argument>, <argument><expr><name><name>prev_unblock</name><operator>.</operator><name>func</name></name></expr></argument>, <argument><expr><name><name>prev_unblock</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUBY_ASSERT_ALWAYS</name><argument_list>(<argument><expr><name>released</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>ruby_thread_has_gvl_p</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>ruby_thread_from_native</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>&amp;&amp;</operator> <name><name>th</name><operator>-&gt;</operator><name>blocking_region_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_s_pass</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_schedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>



















<function><type><name>void</name></type>
<name>rb_threadptr_pending_interrupt_clear</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_clear</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_threadptr_pending_interrupt_enque</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue_checked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>threadptr_check_pending_interrupt_queue</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"uninitialized thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<enum>enum <name>handle_interrupt_timing</name> <block>{
<decl><name>INTERRUPT_NONE</name></decl>,
<decl><name>INTERRUPT_IMMEDIATE</name></decl>,
<decl><name>INTERRUPT_ON_BLOCKING</name></decl>,
<decl><name>INTERRUPT_NEVER</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>handle_interrupt_timing</name></name></type>
<name>rb_threadptr_pending_interrupt_check_mask</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mask_stack_len</name> <init>= <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_mask_stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>mask_stack</name> <init>= <expr><call><name>RARRAY_CONST_PTR</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_mask_stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>mask_stack_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>mask_stack</name><index>[<expr><name>mask_stack_len</name><operator>-</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mod</name> <operator>=</operator> <name>err</name></expr>;</init> <condition><expr><name>mod</name></expr>;</condition> <incr><expr><name>mod</name> <operator>=</operator> <call><name>RCLASS_SUPER</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name> <init>= <expr><name>mod</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BUILTIN_TYPE</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_ICLASS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>RBASIC</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mod</name> <operator>!=</operator> <call><name>RCLASS_ORIGIN</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sym</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>==</operator> <name>sym_immediate</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>INTERRUPT_IMMEDIATE</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>sym</name> <operator>==</operator> <name>sym_on_blocking</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>INTERRUPT_ON_BLOCKING</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>sym</name> <operator>==</operator> <name>sym_never</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>INTERRUPT_NEVER</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"unknown mask signature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

</block_content>}</block></for>
<return>return <expr><name>INTERRUPT_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_threadptr_pending_interrupt_empty_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_threadptr_pending_interrupt_include_p</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_class_inherited_p</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_threadptr_pending_interrupt_deque</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>handle_interrupt_timing</name></name></type> <name>timing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>err</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>handle_interrupt_timing</name></name></type> <name>mask_timing</name> <init>= <expr><call><name>rb_threadptr_pending_interrupt_check_mask</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>mask_timing</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>INTERRUPT_ON_BLOCKING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>timing</name> <operator>!=</operator> <name>INTERRUPT_ON_BLOCKING</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>INTERRUPT_NONE</name></expr>:</case> 
<case>case <expr><name>INTERRUPT_IMMEDIATE</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_delete_at</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
<case>case <expr><name>INTERRUPT_NEVER</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue_checked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>Qundef</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>VALUE</name></type> <name>err</name> <init>= <expr><call><name>rb_ary_shift</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_threadptr_pending_interrupt_empty_p</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue_checked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>threadptr_pending_interrupt_active_p</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue_checked</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_threadptr_pending_interrupt_empty_p</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_interrupt_arg_check_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>maskp</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>args</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>sym_immediate</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>!=</operator> <name>sym_on_blocking</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>!=</operator> <name>sym_never</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unknown mask signature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>maskp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>maskp</name> <operator>=</operator> <call><name>rb_ident_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><operator>*</operator><name>maskp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>











































































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_s_handle_interrupt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>mask_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>th</name> <init>= <expr><call><name>rb_ec_thread_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>r</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_tag_type</name></name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"block is needed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mask_arg</name> <operator>=</operator> <call><name>rb_to_hash_type</name><argument_list>(<argument><expr><name>mask_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>mask_arg</name></expr></argument>, <argument><expr><name>handle_interrupt_arg_check_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mask</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_mask_stack</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_threadptr_pending_interrupt_empty_p</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue_checked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_VM_SET_INTERRUPT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rb_yield</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_pop</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_mask_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_threadptr_pending_interrupt_empty_p</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue_checked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_VM_SET_INTERRUPT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EC_JUMP_TAG</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_pending_interrupt_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>target_thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>target_thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>target_th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_threadptr_pending_interrupt_empty_p</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>err</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>rb_cModule</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"class or module required for rescue clause"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_threadptr_pending_interrupt_include_p</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


























































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_s_pending_interrupt_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_thread_pending_interrupt_p</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>NORETURN</name><argument_list>(<argument>static void rb_threadptr_to_kill(rb_thread_t *th)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_threadptr_to_kill</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_pending_interrupt_clear</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_RUNNABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>to_kill</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>TAG_FATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EC_JUMP_TAG</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>TAG_FATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_atomic_t</name></type>
<name>threadptr_get_interrupts</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_atomic_t</name></type> <name>interrupt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_atomic_t</name></type> <name>old</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>interrupt</name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>interrupt_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>ATOMIC_CAS</name><argument_list>(<argument><expr><name><name>ec</name><operator>-&gt;</operator><name>interrupt_flag</name></name></expr></argument>, <argument><expr><name>interrupt</name></expr></argument>, <argument><expr><name>interrupt</name> <operator>&amp;</operator> <name><name>ec</name><operator>-&gt;</operator><name>interrupt_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>old</name> <operator>!=</operator> <name>interrupt</name></expr>)</condition>;</do>
<return>return <expr><name>interrupt</name> <operator>&amp;</operator> <operator>(</operator><name>rb_atomic_t</name><operator>)</operator><operator>~</operator><name><name>ec</name><operator>-&gt;</operator><name>interrupt_mask</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MJIT_FUNC_EXPORTED</name> <name>int</name></type>
<name>rb_threadptr_execute_interrupts</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking_timing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_atomic_t</name></type> <name>interrupt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>postponed_job_interrupt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>raised_flag</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>interrupt</name> <operator>=</operator> <call><name>threadptr_get_interrupts</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timer_interrupt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pending_interrupt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trap_interrupt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>timer_interrupt</name> <operator>=</operator> <name>interrupt</name> <operator>&amp;</operator> <name>TIMER_INTERRUPT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pending_interrupt</name> <operator>=</operator> <name>interrupt</name> <operator>&amp;</operator> <name>PENDING_INTERRUPT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>postponed_job_interrupt</name> <operator>=</operator> <name>interrupt</name> <operator>&amp;</operator> <name>POSTPONED_JOB_INTERRUPT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>trap_interrupt</name> <operator>=</operator> <name>interrupt</name> <operator>&amp;</operator> <name>TRAP_INTERRUPT_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>postponed_job_interrupt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_postponed_job_flush</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>trap_interrupt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>th</name> <operator>==</operator> <name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>rb_thread_status</name></name></type> <name>prev_status</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sigwait_fd</name> <init>= <expr><call><name>rb_sigwait_fd_get</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sigwait_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>consume_communication_pipe</name><argument_list>(<argument><expr><name>sigwait_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ruby_sigchld_handler</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_sigwait_fd_put</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>sigwait_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_sigwait_fd_migrate</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_RUNNABLE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>sig</name> <operator>=</operator> <call><name>rb_get_next_signal</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>rb_signal_exec</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>prev_status</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pending_interrupt</name> <operator>&amp;&amp;</operator> <call><name>threadptr_pending_interrupt_active_p</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>err</name> <init>= <expr><call><name>rb_threadptr_pending_interrupt_deque</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><ternary><condition><expr><name>blocking_timing</name></expr> ?</condition><then> <expr><name>INTERRUPT_ON_BLOCKING</name></expr> </then><else>: <expr><name>INTERRUPT_NONE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_execute_interrupts: %"</literal><name>PRIdVALUE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>eKillSignal</name> <operator>||</operator>
<name>err</name> <operator>==</operator> <name>eTerminateSignal</name> <operator>||</operator>
<name>err</name> <operator>==</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>TAG_FATAL</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_to_kill</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>special_exceptions</name><index>[<expr><name>ruby_error_stream_closed</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ruby_vm_special_exception_copy</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_STOPPED</name> <operator>||</operator>
<name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_STOPPED_FOREVER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_RUNNABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timer_interrupt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>limits_us</name> <init>= <expr><name>TIME_QUANTUM_USEC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>priority</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>limits_us</name> <operator>&lt;&lt;=</operator> <name><name>th</name><operator>-&gt;</operator><name>priority</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>limits_us</name> <operator>&gt;&gt;=</operator> <operator>-</operator><name><name>th</name><operator>-&gt;</operator><name>priority</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_RUNNABLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>running_time_us</name></name> <operator>+=</operator> <name>TIME_QUANTUM_USEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXEC_EVENT_HOOK</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>RUBY_INTERNAL_EVENT_SWITCH</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>cfp</name><operator>-&gt;</operator><name>self</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_thread_schedule_limits</name><argument_list>(<argument><expr><name>limits_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_execute_interrupts</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_execute_interrupts</name><argument_list>(<argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_threadptr_ready</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_interrupt</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_threadptr_raise</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>exc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_threadptr_dead</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_exc_new</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_make_exception</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>rb_threadptr_dead</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_ec_setup_exception</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exc</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_pending_interrupt_enque</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_interrupt</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_threadptr_signal_raise</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rb_eSignal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_raise</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_threadptr_signal_exit</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rb_eSystemExit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_raise</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_ec_set_raised</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>raised_flag</name></name> <operator>&amp;</operator> <name>RAISED_EXCEPTION</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>raised_flag</name></name> <operator>|=</operator> <name>RAISED_EXCEPTION</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_ec_reset_raised</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ec</name><operator>-&gt;</operator><name>raised_flag</name></name> <operator>&amp;</operator> <name>RAISED_EXCEPTION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>raised_flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RAISED_EXCEPTION</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_notify_fd_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>busy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>vm</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>waiting_fd</name></name> <modifier>*</modifier></type><name>wfd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<macro><name>list_for_each_safe</name><argument_list>(<argument>&amp;vm-&gt;waiting_fds</argument>, <argument>wfd</argument>, <argument>next</argument>, <argument>wfd_node</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wfd</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name>fd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><name><name>wfd</name><operator>-&gt;</operator><name>th</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>-&gt;</operator><name>wfd_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><name>busy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>-&gt;</operator><name>wfd_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>special_exceptions</name><index>[<expr><name>ruby_error_stream_closed</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_pending_interrupt_enque</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_interrupt</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><operator>!</operator><call><name>list_empty</name><argument_list>(<argument><expr><name>busy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_fd_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>list_head</name></name></type> <name>busy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>list_head_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>busy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_notify_fd_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>busy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<do>do<block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_thread_schedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block> while <condition>(<expr><operator>!</operator><call><name>list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>busy</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_raise_m</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_thread_t</name> <modifier>*</modifier></type><name>current_th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>threadptr_check_pending_interrupt_queue</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_raise</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>current_th</name> <operator>==</operator> <name>target_th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>VALUE</name></type>
<name>rb_thread_kill</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>to_kill</name></name> <operator>||</operator> <name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_KILLED</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>thread</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_kill: %p (%"</literal><name>PRI_THREAD_ID</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>, <argument><expr><call><name>thread_id_str</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_threadptr_to_kill</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>threadptr_check_pending_interrupt_queue</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_pending_interrupt_enque</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>eKillSignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_interrupt</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>thread</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_thread_to_be_killed</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>to_kill</name></name> <operator>||</operator> <name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_KILLED</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_s_kill</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_thread_kill</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_exit</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_thread_kill</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><name>VALUE</name></type>
<name>rb_thread_wakeup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_thread_wakeup_alive</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"killed thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>thread</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_thread_wakeup_alive</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>target_th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_KILLED</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_threadptr_ready</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target_th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_STOPPED</name> <operator>||</operator>
<name><name>target_th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_STOPPED_FOREVER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>target_th</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>THREAD_RUNNABLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>thread</name></expr>;</return>
</block_content>}</block></function>























<function><type><name>VALUE</name></type>
<name>rb_thread_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_wakeup</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_thread_schedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>thread</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>VALUE</name></type>
<name>rb_thread_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_thread_alone</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>,
<argument><expr><literal type="string">"stopping only thread\n\tnote: use sleep to stop forever"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_thread_sleep_deadly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_stop</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_thread_stop</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>VALUE</name></type>
<name>rb_thread_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>vm</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>list_for_each</name><argument_list>(<argument>&amp;vm-&gt;living_threads</argument>, <argument>th</argument>, <argument>vmlt_node</argument>)</argument_list></macro> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>THREAD_RUNNABLE</name></expr>:</case>
<case>case <expr><name>THREAD_STOPPED</name></expr>:</case>
<case>case <expr><name>THREAD_STOPPED_FOREVER</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_list</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_thread_list</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_thread_current</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>self</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_s_current</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_thread_current</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_thread_main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>vm</name><operator>-&gt;</operator><name>main_thread</name><operator>-&gt;</operator><name>self</name></name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_s_main</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_thread_main</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_s_abort_exc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>vm</name><operator>-&gt;</operator><name>thread_abort_on_exception</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_s_abort_exc_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>vm</name><operator>-&gt;</operator><name>thread_abort_on_exception</name></name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_abort_exc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>abort_on_exception</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_abort_exc_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>abort_on_exception</name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>












































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_s_report_exc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>vm</name><operator>-&gt;</operator><name>thread_report_on_exception</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_s_report_exc_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>vm</name><operator>-&gt;</operator><name>thread_report_on_exception</name></name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_report_exc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>report_on_exception</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_report_exc_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>report_on_exception</name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>VALUE</name></type>
<name>rb_thread_group</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>group</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>thgroup</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>group</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Qnil</name></expr> </then><else>: <expr><name>group</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>thread_status_name</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>detail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>THREAD_RUNNABLE</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name><name>th</name><operator>-&gt;</operator><name>to_kill</name></name></expr> ?</condition><then> <expr><literal type="string">"aborting"</literal></expr> </then><else>: <expr><literal type="string">"run"</literal></expr></else></ternary></expr>;</return>
<case>case <expr><name>THREAD_STOPPED_FOREVER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>detail</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"sleep_forever"</literal></expr>;</return></block_content></block></if></if_stmt>
<case>case <expr><name>THREAD_STOPPED</name></expr>:</case>
<return>return <expr><literal type="string">"sleep"</literal></expr>;</return>
<case>case <expr><name>THREAD_KILLED</name></expr>:</case>
<return>return <expr><literal type="string">"dead"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_threadptr_dead</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_KILLED</name></expr>;</return>
</block_content>}</block></function>

































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_status</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_threadptr_dead</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>thread_status_name</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_alive_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_threadptr_dead</name><argument_list>(<argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_stop_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_threadptr_dead</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_STOPPED</name> <operator>||</operator>
<name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_STOPPED_FOREVER</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_safe_level</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"Thread#safe_level will be removed in Ruby 3.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>UINT2NUM</name><argument_list>(<argument><expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>safe_level_</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_getname</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>name</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_setname</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_enc_get</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_enc_asciicompat</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"ASCII incompatible encoding (%s)"</literal></expr></argument>,
<argument><expr><call><name>rb_enc_name</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rb_str_new_frozen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>target_th</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>threadptr_initialized</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>native_set_another_thread_name</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_to_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cname</name> <init>= <expr><call><name>rb_class_path</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>thread_status_name</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"#&lt;%"</literal><name>PRIsVALUE</name><literal type="string">":%p"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"@%"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>loc</name> <operator>=</operator> <call><name>threadptr_invoke_proc_location</name><argument_list>(<argument><expr><name>target_th</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" %"</literal><name>PRIsVALUE</name><literal type="string">":%"</literal><name>PRIsVALUE</name></expr></argument>,
<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_force_recycle</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" %s&gt;"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>recursive_key</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>threadptr_local_aref</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>recursive_key</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash</name></name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>local_storage</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>local_storage</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>rb_id_table_lookup</name><argument_list>(<argument><expr><name>local_storage</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_thread_local_aref</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>threadptr_local_aref</name><argument_list>(<argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





























































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_aref</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>rb_check_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_thread_local_aref</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_fetch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_given</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_given</name> <operator>=</operator> <call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block_given</name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"block supersedes default value argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rb_check_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>recursive_key</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash</name></name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>id</name> <operator>&amp;&amp;</operator> <name><name>target_th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage</name></name> <operator>&amp;&amp;</operator>
<call><name>rb_id_table_lookup</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>block_given</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_key_err_raise</name><argument_list>(<argument><expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"key not found: %+"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>threadptr_local_aset</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>recursive_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>local_storage</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_storage</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_id_table_delete</name><argument_list>(<argument><expr><name>local_storage</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>local_storage</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage</name></name> <operator>=</operator> <name>local_storage</name> <operator>=</operator> <call><name>rb_id_table_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_id_table_insert</name><argument_list>(<argument><expr><name>local_storage</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_thread_local_aset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OBJ_FROZEN</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_frozen_error_raise</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><literal type="string">"can't modify frozen thread locals"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>threadptr_local_aset</name><argument_list>(<argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_aset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_thread_local_aset</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_to_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_variable_get</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>locals</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>THREAD_LOCAL_STORAGE_INITIALISED_P</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>locals</name> <operator>=</operator> <call><name>rb_thread_local_storage</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>locals</name></expr></argument>, <argument><expr><call><name>rb_to_symbol</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_variable_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>locals</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OBJ_FROZEN</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_frozen_error_raise</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><literal type="string">"can't modify frozen thread locals"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>locals</name> <operator>=</operator> <call><name>rb_thread_local_storage</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>locals</name></expr></argument>, <argument><expr><call><name>rb_to_symbol</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_key_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>rb_check_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>local_storage</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ec</name><operator>-&gt;</operator><name>local_storage</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name> <operator>||</operator> <name>local_storage</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>rb_id_table_lookup</name><argument_list>(<argument><expr><name>local_storage</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>rb_id_table_iterator_result</name></name></type>
<name>thread_keys_i</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>ary</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ID_TABLE_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_thread_alone</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vm_living_thread_num</name><argument_list>(<argument><expr><call><name>GET_VM</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_keys</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>local_storage</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ec</name><operator>-&gt;</operator><name>local_storage</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>local_storage</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_id_table_foreach</name><argument_list>(<argument><expr><name>local_storage</name></expr></argument>, <argument><expr><name>thread_keys_i</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>keys_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_variables</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>locals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>THREAD_LOCAL_STORAGE_INITIALISED_P</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>locals</name> <operator>=</operator> <call><name>rb_thread_local_storage</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>locals</name></expr></argument>, <argument><expr><name>keys_i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_variable_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>locals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>rb_check_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>THREAD_LOCAL_STORAGE_INITIALISED_P</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>locals</name> <operator>=</operator> <call><name>rb_thread_local_storage</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_hash_lookup</name><argument_list>(<argument><expr><name>locals</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_priority</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>priority</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_priority_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>prio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>priority</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_NATIVE_THREAD_PRIORITY</name></expr></cpp:if>
<expr_stmt><expr><name><name>target_th</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>prio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>native_thread_apply_priority</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>priority</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>prio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>priority</name> <operator>&gt;</operator> <name>RUBY_THREAD_PRIORITY_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>priority</name> <operator>=</operator> <name>RUBY_THREAD_PRIORITY_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>priority</name> <operator>&lt;</operator> <name>RUBY_THREAD_PRIORITY_MIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>priority</name> <operator>=</operator> <name>RUBY_THREAD_PRIORITY_MIN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>target_th</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name>priority</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NFDBITS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RB_FD_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
































<function><type><name>void</name></type>
<name>rb_fd_init</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fds</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <call><name>ALLOC</name><argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fd_init_copy</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>howmany</name><argument_list>(<argument><expr><call><name>rb_fd_max</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NFDBITS</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_mask</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>maxfd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fd_term</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fds</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fd_zero</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MEMZERO</name><argument_list>(<argument><expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>fd_mask</name></expr></argument>, <argument><expr><call><name>howmany</name><argument_list>(<argument><expr><name><name>fds</name><operator>-&gt;</operator><name>maxfd</name></name></expr></argument>, <argument><expr><name>NFDBITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_fd_resize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>m</name> <init>= <expr><call><name>howmany</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NFDBITS</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_mask</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>o</name> <init>= <expr><call><name>howmany</name><argument_list>(<argument><expr><name><name>fds</name><operator>-&gt;</operator><name>maxfd</name></name></expr></argument>, <argument><expr><name>NFDBITS</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_mask</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>o</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <name>o</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name> <operator>+</operator> <name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name><name>fds</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fds</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fd_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_fd_resize</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fd_clr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name><name>fds</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_fd_isset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_fdset_t</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name><name>fds</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>fds</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fd_copy</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fd_set</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>howmany</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>NFDBITS</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_mask</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fd_dup</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_fdset_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>howmany</name><argument_list>(<argument><expr><call><name>rb_fd_max</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NFDBITS</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_mask</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>maxfd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_fd_select</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>readfds</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>writefds</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>exceptfds</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>w</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>readfds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fd_resize</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rb_fd_ptr</name><argument_list>(<argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>writefds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fd_resize</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>rb_fd_ptr</name><argument_list>(<argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>exceptfds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fd_resize</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rb_fd_ptr</name><argument_list>(<argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>select</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_fd_no_init</name><parameter_list>(<parameter><type><name>fds</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)((fds)-&gt;fdset = 0), (void)((fds)-&gt;maxfd = 0))</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_ZERO</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_SET</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_CLR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_ISSET</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_ZERO</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_fd_zero(f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_SET</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_fd_set((i), (f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_CLR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_fd_clr((i), (f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_ISSET</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_fd_isset((i), (f))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><name>void</name></type>
<name>rb_fd_init</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>capa</name></name> <operator>=</operator> <name>FD_SETSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <call><name>ALLOC</name><argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fd_init_copy</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_fd_init</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fd_dup</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fd_term</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>capa</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fd_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name> <init>= <expr><call><name>rb_w32_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>set</name><operator>-&gt;</operator><name>capa</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>capa</name></name> <operator>=</operator> <operator>(</operator><name><name>set</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>/</operator> <name>FD_SETSIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>FD_SETSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator>
<call><name>rb_xrealloc_mul_add</name><argument_list>(
<argument><expr><name><name>set</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name><name>set</name><operator>-&gt;</operator><name>capa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOCKET</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name><name>set</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_ZERO</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_SET</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_CLR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_ISSET</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_ZERO</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_fd_zero(f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_SET</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_fd_set((i), (f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_CLR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_fd_clr((i), (f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_ISSET</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_fd_isset((i), (f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_fd_no_init</name><parameter_list>(<parameter><type><name>fds</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)((fds)-&gt;fdset = 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>rb_fd_no_init</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_fd_no_init</name><parameter_list>(<parameter><type><name>fds</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(fds)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wait_retryable</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>, <parameter><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>rb_hrtime_t</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>errnum</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EINTR</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERESTART</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ERESTART</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rel</name> <operator>&amp;&amp;</operator> <call><name>hrtime_update_expire</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rel</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>!</operator><call><name>hrtime_update_expire</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>select_set</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sigwait_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>rset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>wset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>eset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name></type> <name>orig_rset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name></type> <name>orig_wset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name></type> <name>orig_eset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>select_set_free</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>select_set</name></name> <modifier>*</modifier></type><name>set</name> <init>= <expr><operator>(</operator>struct <name>select_set</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>sigwait_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_sigwait_fd_put</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>th</name></name></expr></argument>, <argument><expr><name><name>set</name><operator>-&gt;</operator><name>sigwait_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_sigwait_fd_migrate</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>orig_rset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>orig_wset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>orig_eset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_hrtime_t</name> <modifier>*</modifier></type>
<name>sigwait_timeout</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sigwait_fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_hrtime_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>drained_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_hrtime_t</name></type> <name>quantum</name> <init>= <expr><name>TIME_QUANTUM_USEC</name> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sigwait_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>ubf_threads_empty</name><argument_list>()</argument_list></call> <operator>||</operator> <name>BUSY_WAIT_SIGNALS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>drained_p</name> <operator>=</operator> <call><name>check_signals_nogvl</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>sigwait_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>orig</name> <operator>||</operator> <operator>*</operator><name>orig</name> <operator>&gt;</operator> <name>quantum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>quantum</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>orig</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>do_select</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>select_set</name></name> <modifier>*</modifier></type><name>set</name> <init>= <expr><operator>(</operator>struct <name>select_set</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lerrno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier></type><name>to</name></decl>, <decl><type ref="prev"/><name>rel</name></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>timeout_prepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name><name>set</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>restore_fdset</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dst) ? rb_fd_dup(dst, src) : (void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_select_update</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(restore_fdset(set-&gt;rset, &amp;set-&gt;orig_rset), restore_fdset(set-&gt;wset, &amp;set-&gt;orig_wset), restore_fdset(set-&gt;eset, &amp;set-&gt;orig_eset), TRUE)</cpp:value></cpp:define>





<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>drained</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lerrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>BLOCKING_REGION</name><argument_list>(<argument>set-&gt;th</argument>, <argument>{
const rb_hrtime_t *sto;
struct timeval tv;

sto = sigwait_timeout(set-&gt;th, set-&gt;sigwait_fd, to, &amp;drained);
if (!RUBY_VM_INTERRUPTED(set-&gt;th-&gt;ec)) {
result = native_fd_select(set-&gt;max, set-&gt;rset, set-&gt;wset,
set-&gt;eset,
rb_hrtime2timeval(&amp;tv, sto), set-&gt;th);
if (result &lt; <literal type="number">0</literal>) lerrno = errno;
}
}</argument>, <argument>set-&gt;sigwait_fd &gt;= <literal type="number">0</literal> ? ubf_sigwait : ubf_select</argument>, <argument>set-&gt;th</argument>, <argument>TRUE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>sigwait_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>rb_fd_isset</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sigwait_fd</name></name></expr></argument>, <argument><expr><name><name>set</name><operator>-&gt;</operator><name>rset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>check_signals_nogvl</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>th</name></name></expr></argument>, <argument><expr><name><name>set</name><operator>-&gt;</operator><name>sigwait_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>check_signals_nogvl</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>th</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block> while <condition>(<expr><call><name>wait_retryable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>lerrno</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>do_select_update</name><argument_list>()</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>lerrno</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_thread_wait_fd_rw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>events</name> <init>= <expr><ternary><condition><expr><name>read</name></expr> ?</condition><then> <expr><name>RB_WAITFD_IN</name></expr> </then><else>: <expr><name>RB_WAITFD_OUT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_wait_fd_rw(%d, %s)\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>read</name></expr> ?</condition><then> <expr><literal type="string">"read"</literal></expr> </then><else>: <expr><literal type="string">"write"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eIOError</name></expr></argument>, <argument><expr><literal type="string">"closed stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_wait_for_single_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>thread_debug</name><argument_list>(<argument><expr><literal type="string">"rb_thread_wait_fd_rw(%d, %s): done\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>read</name></expr> ?</condition><then> <expr><literal type="string">"read"</literal></expr> </then><else>: <expr><literal type="string">"write"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_wait_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_wait_fd_rw</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_thread_fd_writable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_wait_fd_rw</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_fdset_t</name> <modifier>*</modifier></type>
<name>init_set_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_fd_init</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fd_set</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>fds</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_thread_fd_select</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type> <name>read</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type> <name>except</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>select_set</name></name></type> <name>set</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>set</name><operator>.</operator><name>th</name></name> <operator>=</operator> <call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name><name>set</name><operator>.</operator><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>.</operator><name>rset</name></name> <operator>=</operator> <name>read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>.</operator><name>wset</name></name> <operator>=</operator> <name>write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>.</operator><name>eset</name></name> <operator>=</operator> <name>except</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>set</name><operator>.</operator><name>rset</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>set</name><operator>.</operator><name>wset</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>set</name><operator>.</operator><name>eset</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_sleep_forever</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_thread_wait_for</name><argument_list>(<argument><expr><operator>*</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>set</name><operator>.</operator><name>sigwait_fd</name></name> <operator>=</operator> <call><name>rb_sigwait_fd_get</name><argument_list>(<argument><expr><name><name>set</name><operator>.</operator><name>th</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>.</operator><name>sigwait_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>.</operator><name>rset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_fd_set</name><argument_list>(<argument><expr><name><name>set</name><operator>.</operator><name>sigwait_fd</name></name></expr></argument>, <argument><expr><name><name>set</name><operator>.</operator><name>rset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>set</name><operator>.</operator><name>rset</name></name> <operator>=</operator> <call><name>init_set_fd</name><argument_list>(<argument><expr><name><name>set</name><operator>.</operator><name>sigwait_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>set</name><operator>.</operator><name>orig_rset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>.</operator><name>sigwait_fd</name></name> <operator>&gt;=</operator> <name><name>set</name><operator>.</operator><name>max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>set</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name><name>set</name><operator>.</operator><name>sigwait_fd</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd_init_copy</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (set.f) { rb_fd_resize(set.max - 1, set.f); if (&amp;set.orig_##f != set.f) { rb_fd_init_copy(&amp;set.orig_##f, set.f); } } else { rb_fd_no_init(&amp;set.orig_##f); } } while (0)</cpp:value></cpp:define>










<expr_stmt><expr><call><name>fd_init_copy</name><argument_list>(<argument><expr><name>rset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fd_init_copy</name><argument_list>(<argument><expr><name>wset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fd_init_copy</name><argument_list>(<argument><expr><name>eset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fd_init_copy</name></cpp:undef>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_ensure</name><argument_list>(<argument><expr><name>do_select</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><name>select_set_free</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLIN_SET</name></cpp:macro> <cpp:value>(POLLRDNORM | POLLRDBAND | POLLIN | POLLHUP | POLLERR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLOUT_SET</name></cpp:macro> <cpp:value>(POLLWRBAND | POLLWRNORM | POLLOUT | POLLERR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLEX_SET</name></cpp:macro> <cpp:value>(POLLPRI)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>POLLERR_SET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLERR_SET</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type>
<name>rb_wait_for_single_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lerrno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_hrtime_t</name> <modifier>*</modifier></type><name>to</name></decl>, <decl><type ref="prev"/><name>rel</name></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drained</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfds_t</name></type> <name>nfds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_unblock_function_t</name> <modifier>*</modifier></type><name>ubf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>waiting_fd</name></name></type> <name>wfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wfd</name><operator>.</operator><name>th</name></name> <operator>=</operator> <call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wfd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>waiting_fds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>wfd_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>timeout_prepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>events</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>rb_sigwait_fd_get</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>th</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nfds</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ubf</name> <operator>=</operator> <name>ubf_sigwait</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>nfds</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ubf</name> <operator>=</operator> <name>ubf_select</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lerrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>BLOCKING_REGION</name><argument_list>(<argument>wfd.th</argument>, <argument>{
const rb_hrtime_t *sto;
struct timespec ts;

sto = sigwait_timeout(wfd.th, fds[<literal type="number">1</literal>].fd, to, &amp;drained);
if (!RUBY_VM_INTERRUPTED(wfd.th-&gt;ec)) {
result = ppoll(fds, nfds, rb_hrtime2timespec(&amp;ts, sto), <literal type="number">0</literal>);
if (result &lt; <literal type="number">0</literal>) lerrno = errno;
}
}</argument>, <argument>ubf</argument>, <argument>wfd.th</argument>, <argument>TRUE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>check_signals_nogvl</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>th</name></name></expr></argument>, <argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>check_signals_nogvl</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>th</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_sigwait_fd_put</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>th</name></name></expr></argument>, <argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_sigwait_fd_migrate</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS_BLOCKING</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>wait_retryable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>lerrno</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>wfd_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EC_JUMP_TAG</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>lerrno</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLNVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>RB_WAITFD_IN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLOUT_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>RB_WAITFD_OUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLEX_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>RB_WAITFD_PRI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLERR_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>events</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<struct>struct <name>select_args</name> <block>{
<union>union <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
}</block> <decl><name>as</name></decl>;</union>
<decl_stmt><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>except</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>waiting_fd</name></name></type> <name>wfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>select_single</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>select_args</name></name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator>struct <name>select_args</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rb_thread_fd_select</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>fd</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>read</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>except</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>read</name></name> <operator>&amp;&amp;</operator> <call><name>rb_fd_isset</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>RB_WAITFD_IN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>write</name></name> <operator>&amp;&amp;</operator> <call><name>rb_fd_isset</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>write</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>RB_WAITFD_OUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>except</name></name> <operator>&amp;&amp;</operator> <call><name>rb_fd_isset</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>except</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>RB_WAITFD_PRI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>select_single_cleanup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>select_args</name></name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator>struct <name>select_args</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><operator>-&gt;</operator><name>wfd</name><operator>.</operator><name>wfd_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>read</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>write</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>except</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>except</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_wait_for_single_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fdset_t</name></type> <name>rfds</name></decl>, <decl><type ref="prev"/><name>wfds</name></decl>, <decl><type ref="prev"/><name>efds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>select_args</name></name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ptr</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>args</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>as</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>read</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <name>RB_WAITFD_IN</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>init_set_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>write</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <name>RB_WAITFD_OUT</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>init_set_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>except</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <name>RB_WAITFD_PRI</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>init_set_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>efds</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>tv</name></name> <operator>=</operator> <name>tv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>wfd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>wfd</name><operator>.</operator><name>th</name></name> <operator>=</operator> <call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><operator>.</operator><name>wfd</name><operator>.</operator><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>waiting_fds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><operator>.</operator><name>wfd</name><operator>.</operator><name>wfd_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>rb_ensure</name><argument_list>(<argument><expr><name>select_single</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>select_single_cleanup</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>as</name><operator>.</operator><name>error</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CONSERVATIVE_STACK_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>rb_gc_set_stack_end</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier><modifier>*</modifier></type><name>stack_end_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>stack_end</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>stack_end_p</name> <operator>=</operator> <operator>&amp;</operator><name>stack_end</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>rb_threadptr_check_signal</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>mth</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rb_signal_buff_size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>threadptr_trap_interrupt</name><argument_list>(<argument><expr><name>mth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>timer_thread_function</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>


<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>ACCESS_ONCE</name><argument_list>(<argument><expr><name>rb_execution_context_t</name> <operator>*</operator></expr></argument>,
<argument><expr><name>ruby_current_execution_context_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ec</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RUBY_VM_SET_TIMER_INTERRUPT</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>async_bug_fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errno_arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>mesg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_snprintf</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>n</name></expr></argument>, <argument><expr><literal type="string">"(%d)"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_async_bug_errno</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>errno_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>consume_communication_pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_EVENTFD</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 







<expr_stmt><expr><call><name>ubf_timer_disarm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>USE_EVENTFD</name> <operator>||</operator> <name>result</name> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EINTR</name></expr>:</case>
<continue>continue;</continue> 
<case>case <expr><name>EAGAIN</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EWOULDBLOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>EWOULDBLOCK</name> <operator>!=</operator> <name>EAGAIN</name></expr></cpp:if>
<case>case <expr><name>EWOULDBLOCK</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>async_bug_fd</name><argument_list>(<argument><expr><literal type="string">"consume_communication_pipe: read"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_signals_nogvl</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sigwait_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>GET_VM</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name>sigwait_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>consume_communication_pipe</name><argument_list>(<argument><expr><name>sigwait_fd</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ubf_wakeup_all_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ruby_sigchld_handler</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_signal_buff_size</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RUBY_VM_SET_TRAP_INTERRUPT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>threadptr_trap_interrupt</name><argument_list>(<argument><expr><name><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_stop_timer_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TIMER_THREAD_CREATED_P</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>native_stop_timer_thread</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>native_reset_timer_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_reset_timer_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>native_reset_timer_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_start_timer_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>system_working</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_thread_create_timer_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>clear_coverage_i</name><parameter_list>(<parameter><decl><type><name>st_data_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>coverage</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>val</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>lines</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>, <argument><expr><name>COVERAGE_INDEX_LINES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>branches</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>, <argument><expr><name>COVERAGE_INDEX_BRANCHES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>coverage_mode</name> <operator>&amp;</operator> <name>COVERAGE_TARGET_ONESHOT_LINES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_clear</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>branches</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>counters</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>branches</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>counters</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>counters</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_clear_coverages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>coverages</name> <init>= <expr><call><name>rb_get_coverages</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>coverages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>coverages</name></expr></argument>, <argument><expr><name>clear_coverage_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WORKING_FORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_thread_atfork_internal</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>atfork</name>)<parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_thread_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gvl_atfork</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ubf_list_atfork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>list_for_each</name><argument_list>(<argument>&amp;vm-&gt;living_threads</argument>, <argument>i</argument>, <argument>vmlt_node</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>atfork</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>rb_vm_living_threads_init</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_vm_living_threads_insert</name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_native_mutex_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>waitpid_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_native_mutex_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_native_mutex_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vm</name><operator>-&gt;</operator><name>fork_gen</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vm</name><operator>-&gt;</operator><name>sleeper</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_clear_coverages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminate_atfork_i</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_thread_t</name> <modifier>*</modifier></type><name>current_th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>!=</operator> <name>current_th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_mutex_abandon_keeping_mutexes</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_mutex_abandon_locking_mutex</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>thread_cleanup_func</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>rb_fiber_atfork</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>rb_thread_atfork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_thread_atfork_internal</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>terminate_atfork_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>join_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fiber_atfork</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_reset_random_seed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mjit_child_after_fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminate_atfork_before_exec_i</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_thread_t</name> <modifier>*</modifier></type><name>current_th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>!=</operator> <name>current_th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>thread_cleanup_func_before_exec</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_atfork_before_exec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_thread_atfork_internal</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>terminate_atfork_before_exec_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>void</name></type>
<name>rb_thread_atfork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_atfork_before_exec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>thgroup</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>enclosed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>group</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>thgroup_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>thgroup</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>thgroup_data_type</name> <init>= <expr><block>{
<expr><literal type="string">"thgroup"</literal></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_DEFAULT_FREE</name></expr>, <expr><name>thgroup_memsize</name></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thgroup_s_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>thgroup</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>thgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thgroup_data_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>enclosed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>

<return>return <expr><name>group</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thgroup_list</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>vm</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>list_for_each</name><argument_list>(<argument>&amp;vm-&gt;living_threads</argument>, <argument>th</argument>, <argument>vmlt_node</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>thgroup</name></name> <operator>==</operator> <name>group</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thgroup_enclose</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>thgroup</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr>struct <name>thgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thgroup_data_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>enclosed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>group</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thgroup_enclosed_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>thgroup</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr>struct <name>thgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thgroup_data_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>enclosed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>




























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thgroup_add</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>thgroup</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OBJ_FROZEN</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"can't move to the frozen thread group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr>struct <name>thgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thgroup_data_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>enclosed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"can't move to the enclosed thread group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>target_th</name><operator>-&gt;</operator><name>thgroup</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OBJ_FROZEN</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>thgroup</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"can't move from the frozen thread group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>thgroup</name></name></expr></argument>, <argument><expr>struct <name>thgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thgroup_data_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>enclosed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>,
<argument><expr><literal type="string">"can't move from the enclosed thread group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>target_th</name><operator>-&gt;</operator><name>thgroup</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
<return>return <expr><name>group</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>thread_shield_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>thread_shield_data_type</name> <init>= <expr><block>{
<expr><literal type="string">"thread_shield"</literal></expr>,
<expr><block>{<expr><name>thread_shield_mark</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_shield_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thread_shield_data_type</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>mutex_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetThreadShieldPtr</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((VALUE)rb_check_typeddata((obj), &amp;thread_shield_data_type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_SHIELD_WAITING_MASK</name></cpp:macro> <cpp:value>(((FL_USER19-1)&amp;~(FL_USER0-1))|FL_USER19)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_SHIELD_WAITING_SHIFT</name></cpp:macro> <cpp:value>(FL_USHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_SHIELD_WAITING_MAX</name></cpp:macro> <cpp:value>(THREAD_SHIELD_WAITING_MASK&gt;&gt;THREAD_SHIELD_WAITING_SHIFT)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><name>THREAD_SHIELD_WAITING_MAX</name></expr></argument>, <argument><expr><name>THREAD_SHIELD_WAITING_MAX</name> <operator>&lt;=</operator> <name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>rb_thread_shield_waiting</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><call><name>RBASIC</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name><operator>&amp;</operator><name>THREAD_SHIELD_WAITING_MASK</name><operator>)</operator><operator>&gt;&gt;</operator><name>THREAD_SHIELD_WAITING_SHIFT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rb_thread_shield_waiting_inc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>w</name> <init>= <expr><call><name>rb_thread_shield_waiting</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <name>THREAD_SHIELD_WAITING_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"waiting count overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>THREAD_SHIELD_WAITING_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>VALUE</name><operator>)</operator><name>w</name> <operator>&lt;&lt;</operator> <name>THREAD_SHIELD_WAITING_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rb_thread_shield_waiting_dec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>w</name> <init>= <expr><call><name>rb_thread_shield_waiting</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"waiting count underflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>w</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>THREAD_SHIELD_WAITING_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>VALUE</name><operator>)</operator><name>w</name> <operator>&lt;&lt;</operator> <name>THREAD_SHIELD_WAITING_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_thread_shield_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>thread_shield</name> <init>= <expr><call><name>thread_shield_alloc</name><argument_list>(<argument><expr><name>rb_cThreadShield</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_mutex_lock</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>thread_shield</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>thread_shield</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>VALUE</name></type>
<name>rb_thread_shield_wait</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mutex</name> <init>= <expr><call><name>GetThreadShieldPtr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_mutex_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mutex</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>mutex_ptr</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>th</name></name> <operator>==</operator> <call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_thread_shield_waiting_inc</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_thread_shield_waiting_dec</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>rb_thread_shield_waiting</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Qnil</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_shield_get_mutex</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mutex</name> <init>= <expr><call><name>GetThreadShieldPtr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mutex</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eThreadError</name></expr></argument>, <argument><expr><literal type="string">"destroyed thread shield - %p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>mutex</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>VALUE</name></type>
<name>rb_thread_shield_release</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mutex</name> <init>= <expr><call><name>thread_shield_get_mutex</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>rb_thread_shield_waiting</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>VALUE</name></type>
<name>rb_thread_shield_destroy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mutex</name> <init>= <expr><call><name>thread_shield_get_mutex</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>rb_thread_shield_waiting</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>threadptr_recursive_hash</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>threadptr_recursive_hash_set</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>ID</name></type> <name>rb_frame_last_func</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>recursive_list_access</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>threadptr_recursive_hash</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>list</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_ident_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>threadptr_recursive_hash_set</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>rb_ident_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>recursive_check</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>paired_obj_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>==</operator> <name>SIZEOF_VOIDP</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ID_EQL</name><parameter_list>(<parameter><type><name>obj_id</name></type></parameter>, <parameter><type><name>other</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((obj_id) == (other))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_LONG_LONG</name> <operator>==</operator> <name>SIZEOF_VOIDP</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ID_EQL</name><parameter_list>(<parameter><type><name>obj_id</name></type></parameter>, <parameter><type><name>other</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_TYPE_P((obj_id), T_BIGNUM) ? rb_big_eql((obj_id), (other)) : ((obj_id) == (other)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>VALUE</name></type> <name>pair_list</name> <init>= <expr><call><name>rb_hash_lookup2</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pair_list</name> <operator>==</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>paired_obj_id</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>pair_list</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OBJ_ID_EQL</name><argument_list>(<argument><expr><name>paired_obj_id</name></expr></argument>, <argument><expr><name>pair_list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>rb_hash_lookup</name><argument_list>(<argument><expr><name>pair_list</name></expr></argument>, <argument><expr><name>paired_obj_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>recursive_push</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>paired_obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pair_list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>paired_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>pair_list</name> <operator>=</operator> <call><name>rb_hash_lookup2</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>paired_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>pair_list</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>other_paired_obj</name> <init>= <expr><name>pair_list</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pair_list</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>pair_list</name></expr></argument>, <argument><expr><name>other_paired_obj</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pair_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>pair_list</name></expr></argument>, <argument><expr><name>paired_obj</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>recursive_pop</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>paired_obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>paired_obj</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pair_list</name> <init>= <expr><call><name>rb_hash_lookup2</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pair_list</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>pair_list</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_delete_entry</name><argument_list>(<argument><expr><name>pair_list</name></expr></argument>, <argument><expr><name>paired_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RHASH_EMPTY_P</name><argument_list>(<argument><expr><name>pair_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_hash_delete_entry</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>exec_recursive_params</name> <block>{
<function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>VALUE</name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pairid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>exec_recursive_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>exec_recursive_params</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call>(<modifier>*</modifier><name><name>p</name><operator>-&gt;</operator><name>func</name></name>)<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>exec_recursive</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>pairid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qundef</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ID</name></type> <name>mid</name> <init>= <expr><call><name>rb_frame_last_func</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>sym</name> <init>= <expr><ternary><condition><expr><name>mid</name></expr> ?</condition><then> <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>idNULL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>exec_recursive_params</name></name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outermost</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>list</name></name> <operator>=</operator> <call><name>recursive_list_access</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>pairid</name></name> <operator>=</operator> <name>pairid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outermost</name> <operator>=</operator> <name>outer</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>recursive_check</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>recursive_key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>recursive_check</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><name>pairid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>outer</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>outermost</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_throw_obj</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_tag_type</name></name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>outermost</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>recursive_push</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>recursive_key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recursive_push</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>pairid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_catch_protect</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name>exec_recursive_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>recursive_pop</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>pairid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>recursive_pop</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>recursive_key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>TAG_NONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>EC_JUMP_TAG</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>ret</name> <init>= <expr><name>Qundef</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>recursive_push</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>pairid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>recursive_pop</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>pairid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>invalid</name>:</label>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"invalid inspect_tbl pair_list "</literal>
<literal type="string">"for %+"</literal><name>PRIsVALUE</name><literal type="string">" in %+"</literal><name>PRIsVALUE</name></expr></argument>,
<argument><expr><name>sym</name></expr></argument>, <argument><expr><call><name>rb_thread_current</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>TAG_NONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>EC_JUMP_TAG</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>volatile</specifier> struct <name>exec_recursive_params</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>VALUE</name></type>
<name>rb_exec_recursive</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>exec_recursive</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>VALUE</name></type>
<name>rb_exec_recursive_paired</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>paired_obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>exec_recursive</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>rb_memory_id</name><argument_list>(<argument><expr><name>paired_obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VALUE</name></type>
<name>rb_exec_recursive_outer</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>exec_recursive</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VALUE</name></type>
<name>rb_exec_recursive_paired_outer</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>paired_obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>exec_recursive</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>rb_memory_id</name><argument_list>(<argument><expr><name>paired_obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_backtrace_m</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_vm_thread_backtrace</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>thval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_thread_backtrace_locations_m</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_vm_thread_backtrace_locations</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>thval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><name>void</name></type>
<name>Init_Thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_intern</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_intern_const(str)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cThGroup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sym_never</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"never"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sym_immediate</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sym_on_blocking</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"on_blocking"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><name>thread_s_new</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><name>thread_start</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"fork"</literal></expr></argument>, <argument><expr><name>thread_start</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>rb_thread_s_main</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"current"</literal></expr></argument>, <argument><expr><name>thread_s_current</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"stop"</literal></expr></argument>, <argument><expr><name>thread_stop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"kill"</literal></expr></argument>, <argument><expr><name>rb_thread_s_kill</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"exit"</literal></expr></argument>, <argument><expr><name>rb_thread_exit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"pass"</literal></expr></argument>, <argument><expr><name>thread_s_pass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><name>thread_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"abort_on_exception"</literal></expr></argument>, <argument><expr><name>rb_thread_s_abort_exc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"abort_on_exception="</literal></expr></argument>, <argument><expr><name>rb_thread_s_abort_exc_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"report_on_exception"</literal></expr></argument>, <argument><expr><name>rb_thread_s_report_exc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"report_on_exception="</literal></expr></argument>, <argument><expr><name>rb_thread_s_report_exc_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREAD_DEBUG</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"DEBUG"</literal></expr></argument>, <argument><expr><name>rb_thread_s_debug</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"DEBUG="</literal></expr></argument>, <argument><expr><name>rb_thread_s_debug_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"handle_interrupt"</literal></expr></argument>, <argument><expr><name>rb_thread_s_handle_interrupt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"pending_interrupt?"</literal></expr></argument>, <argument><expr><name>rb_thread_s_pending_interrupt_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"pending_interrupt?"</literal></expr></argument>, <argument><expr><name>rb_thread_pending_interrupt_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>thread_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"raise"</literal></expr></argument>, <argument><expr><name>thread_raise_m</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"join"</literal></expr></argument>, <argument><expr><name>thread_join_m</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>thread_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"kill"</literal></expr></argument>, <argument><expr><name>rb_thread_kill</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"terminate"</literal></expr></argument>, <argument><expr><name>rb_thread_kill</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"exit"</literal></expr></argument>, <argument><expr><name>rb_thread_kill</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"run"</literal></expr></argument>, <argument><expr><name>rb_thread_run</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"wakeup"</literal></expr></argument>, <argument><expr><name>rb_thread_wakeup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>rb_thread_aref</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"[]="</literal></expr></argument>, <argument><expr><name>rb_thread_aset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"fetch"</literal></expr></argument>, <argument><expr><name>rb_thread_fetch</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"key?"</literal></expr></argument>, <argument><expr><name>rb_thread_key_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"keys"</literal></expr></argument>, <argument><expr><name>rb_thread_keys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"priority"</literal></expr></argument>, <argument><expr><name>rb_thread_priority</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"priority="</literal></expr></argument>, <argument><expr><name>rb_thread_priority_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><name>rb_thread_status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"thread_variable_get"</literal></expr></argument>, <argument><expr><name>rb_thread_variable_get</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"thread_variable_set"</literal></expr></argument>, <argument><expr><name>rb_thread_variable_set</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"thread_variables"</literal></expr></argument>, <argument><expr><name>rb_thread_variables</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"thread_variable?"</literal></expr></argument>, <argument><expr><name>rb_thread_variable_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"alive?"</literal></expr></argument>, <argument><expr><name>rb_thread_alive_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"stop?"</literal></expr></argument>, <argument><expr><name>rb_thread_stop_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"abort_on_exception"</literal></expr></argument>, <argument><expr><name>rb_thread_abort_exc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"abort_on_exception="</literal></expr></argument>, <argument><expr><name>rb_thread_abort_exc_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"report_on_exception"</literal></expr></argument>, <argument><expr><name>rb_thread_report_exc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"report_on_exception="</literal></expr></argument>, <argument><expr><name>rb_thread_report_exc_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"safe_level"</literal></expr></argument>, <argument><expr><name>rb_thread_safe_level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>, <argument><expr><name>rb_thread_group</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"backtrace"</literal></expr></argument>, <argument><expr><name>rb_thread_backtrace_m</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"backtrace_locations"</literal></expr></argument>, <argument><expr><name>rb_thread_backtrace_locations_m</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>rb_thread_getname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"name="</literal></expr></argument>, <argument><expr><name>rb_thread_setname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>rb_thread_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_vm_register_special_exception</name><argument_list>(<argument><expr><name>ruby_error_stream_closed</name></expr></argument>, <argument><expr><name>rb_eIOError</name></expr></argument>,
<argument><expr><literal type="string">"stream closed in another thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cThGroup</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"ThreadGroup"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cThGroup</name></expr></argument>, <argument><expr><name>thgroup_s_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cThGroup</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><name>thgroup_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cThGroup</name></expr></argument>, <argument><expr><literal type="string">"enclose"</literal></expr></argument>, <argument><expr><name>thgroup_enclose</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cThGroup</name></expr></argument>, <argument><expr><literal type="string">"enclosed?"</literal></expr></argument>, <argument><expr><name>thgroup_enclosed_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cThGroup</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><name>thgroup_add</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>thgroup</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>thgroup_default</name></name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>cThGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cThGroup</name></expr></argument>, <argument><expr><literal type="string">"Default"</literal></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>thgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>recursive_key</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"__recursive_key__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_eThreadError</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"ThreadError"</literal></expr></argument>, <argument><expr><name>rb_eStandardError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>

<block>{<block_content>

<expr_stmt><expr><call><name>gvl_init</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gvl_acquire</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name></name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_native_mutex_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>waitpid_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_native_mutex_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>workqueue_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_native_mutex_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue</name></name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_queue_checked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pending_interrupt_mask_stack</name></name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>

<expr_stmt><expr><call><name>rb_thread_create_timer_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>native_mutex_trylock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_thread_sync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ruby_native_thread_p</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>ruby_thread_from_native</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>th</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>debug_deadlock_check</name><parameter_list>(<parameter><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sep</name> <init>= <expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"\n%d threads, %d sleeps current:%p main thread:%p\n"</literal></expr></argument>,
<argument><expr><call><name>vm_living_thread_num</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vm</name><operator>-&gt;</operator><name>sleeper</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>list_for_each</name><argument_list>(<argument>&amp;vm-&gt;living_threads</argument>, <argument>th</argument>, <argument>vmlt_node</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"* %+"</literal><name>PRIsVALUE</name><literal type="string">"\n rb_thread_t:%p "</literal>
<literal type="string">"native:%"</literal><name>PRI_THREAD_ID</name><literal type="string">" int:%u"</literal></expr></argument>,
<argument><expr><name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>, <argument><expr><call><name>thread_id_str</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>interrupt_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>locking_mutex</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_mutex_t</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>mutex_ptr</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>locking_mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">" mutex:%p cond:%"</literal><name>PRIuSIZE</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>mutex</name><operator>-&gt;</operator><name>th</name></name></expr></argument>, <argument><expr><call><name>rb_mutex_num_waiting</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_list_t</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>join_list</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"\n depended by: tb_thread_id:%p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>list</name><operator>-&gt;</operator><name>th</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>rb_ary_join</name><argument_list>(<argument><expr><call><name>rb_ec_backtrace_str_ary</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_check_deadlock</name><parameter_list>(<parameter><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vm_living_thread_num</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>vm</name><operator>-&gt;</operator><name>sleeper</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vm_living_thread_num</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>vm</name><operator>-&gt;</operator><name>sleeper</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"sleeper must not be more than vm_living_thread_num(vm)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>patrol_thread</name> <operator>&amp;&amp;</operator> <name>patrol_thread</name> <operator>!=</operator> <call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<macro><name>list_for_each</name><argument_list>(<argument>&amp;vm-&gt;living_threads</argument>, <argument>th</argument>, <argument>vmlt_node</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>THREAD_STOPPED_FOREVER</name> <operator>||</operator> <call><name>RUBY_VM_INTERRUPTED</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>locking_mutex</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_mutex_t</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>mutex_ptr</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>locking_mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>th</name></name> <operator>==</operator> <name>th</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>mutex</name><operator>-&gt;</operator><name>th</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>waitq</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rb_eFatal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"No live threads left. Deadlock?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_deadlock_check</name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>-&gt;</operator><name>sleeper</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_threadptr_raise</name><argument_list>(<argument><expr><name><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_line_coverage</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>cfp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>coverage</name> <init>= <expr><call><name>rb_iseq_coverage</name><argument_list>(<argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RBASIC_CLASS</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>lines</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>, <argument><expr><name>COVERAGE_INDEX_LINES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>line</name> <init>= <expr><call><name>rb_sourceline</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>rb_iseq_clear_event_flags</name><argument_list>(<argument><expr><specifier>const</specifier> <name>rb_iseq_t</name> <operator>*</operator><name>iseq</name></expr></argument>, <argument><expr><name>size_t</name> <name>pos</name></expr></argument>, <argument><expr><name>rb_event_flag_t</name> <name>reset</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>coverage_mode</name> <operator>&amp;</operator> <name>COVERAGE_TARGET_ONESHOT_LINES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_iseq_clear_event_flags</name><argument_list>(<argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></argument>, <argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>pc</name></name> <operator>-</operator> <name><name>cfp</name><operator>-&gt;</operator><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>iseq_encoded</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>RUBY_EVENT_COVERAGE_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&gt;=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>POSFIXABLE</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_branch_coverage</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>cfp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>coverage</name> <init>= <expr><call><name>rb_iseq_coverage</name><argument_list>(<argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RBASIC_CLASS</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>branches</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>, <argument><expr><name>COVERAGE_INDEX_BRANCHES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>branches</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>pc</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>pc</name></name> <operator>-</operator> <name><name>cfp</name><operator>-&gt;</operator><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>iseq_encoded</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>idx</name> <init>= <expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><call><name>ISEQ_PC2BRANCHINDEX</name><argument_list>(<argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>counters</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>branches</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>counters</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>POSFIXABLE</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>counters</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>rb_method_entry_t</name> <modifier>*</modifier></type>
<name>rb_resolve_me_location</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_method_entry_t</name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name><name>resolved_location</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name></decl>, <decl><type ref="prev"/><name>beg_pos_lineno</name></decl>, <decl><type ref="prev"/><name>beg_pos_column</name></decl>, <decl><type ref="prev"/><name>end_pos_lineno</name></decl>, <decl><type ref="prev"/><name>end_pos_column</name></decl>;</decl_stmt>

<label><name>retry</name>:</label>
<switch>switch <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VM_METHOD_TYPE_ISEQ</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><name><name>me</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>iseq</name><operator>.</operator><name>iseqptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_iseq_location_t</name> <modifier>*</modifier></type><name>loc</name> <init>= <expr><operator>&amp;</operator><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>location</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_iseq_path</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beg_pos_lineno</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>code_location</name><operator>.</operator><name>beg_pos</name><operator>.</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beg_pos_column</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>code_location</name><operator>.</operator><name>beg_pos</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_pos_lineno</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>code_location</name><operator>.</operator><name>end_pos</name><operator>.</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_pos_column</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>code_location</name><operator>.</operator><name>end_pos</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VM_METHOD_TYPE_BMETHOD</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><call><name>rb_proc_get_iseq</name><argument_list>(<argument><expr><name><name>me</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>bmethod</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iseq</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_iseq_location_t</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_iseq_check</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_iseq_path</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <operator>&amp;</operator><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>location</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>beg_pos_lineno</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>code_location</name><operator>.</operator><name>beg_pos</name><operator>.</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beg_pos_column</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>code_location</name><operator>.</operator><name>beg_pos</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_pos_lineno</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>code_location</name><operator>.</operator><name>end_pos</name><operator>.</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_pos_column</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>loc</name><operator>-&gt;</operator><name>code_location</name><operator>.</operator><name>end_pos</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VM_METHOD_TYPE_ALIAS</name></expr>:</case>
<expr_stmt><expr><name>me</name> <operator>=</operator> <name><name>me</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>alias</name><operator>.</operator><name>original_me</name></name></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
<case>case <expr><name>VM_METHOD_TYPE_REFINED</name></expr>:</case>
<expr_stmt><expr><name>me</name> <operator>=</operator> <name><name>me</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>refined</name><operator>.</operator><name>orig_me</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>me</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>retry</name>;</goto>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>resolved_location</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>resolved_location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resolved_location</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>beg_pos_lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resolved_location</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>beg_pos_column</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resolved_location</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>end_pos_lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resolved_location</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>end_pos_column</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>me</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_method_coverage</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>me2counter</name></decl></parameter>, <parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>cfp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_callable_method_entry_t</name> <modifier>*</modifier></type><name>cme</name> <init>= <expr><call><name>rb_vm_frame_method_entry</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_method_entry_t</name> <modifier>*</modifier></type><name>me</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>rb_method_entry_t</name> <operator>*</operator><operator>)</operator><name>cme</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>rb_resolve_me_location</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>me</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rcount</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>me2counter</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator> <name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <ternary><condition><expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>rcount</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>rcount</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>POSFIXABLE</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>me2counter</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator> <name>me</name></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_get_coverages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>coverages</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_get_coverage_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>coverage_mode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_set_coverages</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>coverages</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>me2counter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>coverages</name> <operator>=</operator> <name>coverages</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>coverage_mode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_add_event_hook2</name><argument_list>(<argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator> <name>update_line_coverage</name></expr></argument>, <argument><expr><name>RUBY_EVENT_COVERAGE_LINE</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>RUBY_EVENT_HOOK_FLAG_SAFE</name> <operator>|</operator> <name>RUBY_EVENT_HOOK_FLAG_RAW_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>COVERAGE_TARGET_BRANCHES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_add_event_hook2</name><argument_list>(<argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator> <name>update_branch_coverage</name></expr></argument>, <argument><expr><name>RUBY_EVENT_COVERAGE_BRANCH</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>RUBY_EVENT_HOOK_FLAG_SAFE</name> <operator>|</operator> <name>RUBY_EVENT_HOOK_FLAG_RAW_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>COVERAGE_TARGET_METHODS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_add_event_hook2</name><argument_list>(<argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator> <name>update_method_coverage</name></expr></argument>, <argument><expr><name>RUBY_EVENT_CALL</name></expr></argument>, <argument><expr><name>me2counter</name></expr></argument>, <argument><expr><name>RUBY_EVENT_HOOK_FLAG_SAFE</name> <operator>|</operator> <name>RUBY_EVENT_HOOK_FLAG_RAW_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>rb_reset_coverages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_clear_coverages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iseq_remove_coverage_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>coverages</name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_remove_event_hook</name><argument_list>(<argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator> <name>update_line_coverage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>coverage_mode</name> <operator>&amp;</operator> <name>COVERAGE_TARGET_BRANCHES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_remove_event_hook</name><argument_list>(<argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator> <name>update_branch_coverage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>coverage_mode</name> <operator>&amp;</operator> <name>COVERAGE_TARGET_METHODS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_remove_event_hook</name><argument_list>(<argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator> <name>update_method_coverage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_default_coverage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>coverage</name> <init>= <expr><call><name>rb_ary_tmp_new_fill</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>lines</name> <init>= <expr><name>Qfalse</name></expr></init></decl>, <decl><type ref="prev"/><name>branches</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>coverage_mode</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>COVERAGE_TARGET_LINES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>rb_ary_tmp_new_fill</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>, <argument><expr><name>COVERAGE_INDEX_LINES</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>COVERAGE_TARGET_BRANCHES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>branches</name> <operator>=</operator> <call><name>rb_ary_tmp_new_fill</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>branches</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>branches</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>, <argument><expr><name>COVERAGE_INDEX_BRANCHES</name></expr></argument>, <argument><expr><name>branches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>coverage</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_uninterruptible</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>b_proc</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>interrupt_mask</name> <init>= <expr><call><name>rb_ident_hash_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>cur_th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>interrupt_mask</name></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>, <argument><expr><name>sym_never</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>interrupt_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>cur_th</name><operator>-&gt;</operator><name>pending_interrupt_mask_stack</name></name></expr></argument>, <argument><expr><name>interrupt_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>b_proc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>rb_ary_pop</name></expr></argument>, <argument><expr><name><name>cur_th</name><operator>-&gt;</operator><name>pending_interrupt_mask_stack</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
