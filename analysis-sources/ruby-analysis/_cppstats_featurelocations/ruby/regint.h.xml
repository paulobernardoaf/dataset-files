<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\regint.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONIGMO_REGINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGMO_REGINT_H</name></cpp:macro></cpp:define>









































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_PARSE_TREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MATCH</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_COMPILE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_STATISTICS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MEMLEAK</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_DEBUG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNALIGNED_WORD_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mc68020__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_WORD_ACCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_WORD_ACCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UNALIGNED_WORD_ACCESS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_UNALIGNED_WORD_ACCESS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_NAMED_GROUP</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SUBEXP_CALL</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_PERL_SUBEXP_CALL</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CAPITAL_P_NAMED_GROUP</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_BACKREF_WITH_LEVEL</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MONOMANIAC_CHECK_CAPTURES_IN_ENDLESS_REPEAT</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_WARNING_REDUNDANT_NESTED_REPEAT_OPERATOR</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_NO_INVALID_QUANTIFIER</name></cpp:macro></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_QTFR_PEEK_NEXT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ST_LIBRARY</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SUNDAY_QUICK_SEARCH</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_MATCH_STACK_SIZE</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MATCH_STACK_LIMIT_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PARSE_DEPTH_LIMIT</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_EXACT_MAXLEN</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PERL_SUBEXP_CALL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_CAPITAL_P_NAMED_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NAMED_GROUP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> USE_NAMED_GROUP and USE_SUBEXP_CALL must be defined.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_UNUSED</name></cpp:macro> <cpp:value>__attribute__ ((unused))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_UNUSED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>RUBY_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_DEFINES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xmalloc</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xrealloc</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xcalloc</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xfree</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG_LONG</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_LONG</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_ESCAPE_UCHAR_COLLISION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ONIG_ESCAPE_UCHAR_COLLISION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_WORD_BEGIN_END</name></cpp:macro></cpp:define> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_CAPTURE_HISTORY</name></cpp:undef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CAPTURE_HISTORY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_VARIABLE_META_CHARS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE</name></cpp:macro></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>xmalloc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmalloc</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xrealloc</name></cpp:macro> <cpp:value>realloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xcalloc</name></cpp:macro> <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xfree</name></cpp:macro> <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_INTERRUPT_IN_MATCH_AT</name></cpp:macro> <cpp:value>rb_thread_check_ints()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_init_table</name></cpp:macro> <cpp:value>st_init_table</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_init_table_with_size</name></cpp:macro> <cpp:value>st_init_table_with_size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_init_numtable</name></cpp:macro> <cpp:value>st_init_numtable</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_init_numtable_with_size</name></cpp:macro> <cpp:value>st_init_numtable_with_size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_init_strtable</name></cpp:macro> <cpp:value>st_init_strtable</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_init_strtable_with_size</name></cpp:macro> <cpp:value>st_init_strtable_with_size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_delete</name></cpp:macro> <cpp:value>st_delete</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_delete_safe</name></cpp:macro> <cpp:value>st_delete_safe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_insert</name></cpp:macro> <cpp:value>st_insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_lookup</name></cpp:macro> <cpp:value>st_lookup</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_foreach</name></cpp:macro> <cpp:value>st_foreach</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_add_direct</name></cpp:macro> <cpp:value>st_add_direct</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_free_table</name></cpp:macro> <cpp:value>st_free_table</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_cleanup_safe</name></cpp:macro> <cpp:value>st_cleanup_safe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_copy</name></cpp:macro> <cpp:value>st_copy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_nothing_key_clone</name></cpp:macro> <cpp:value>st_nothing_key_clone</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_nothing_key_free</name></cpp:macro> <cpp:value>st_nothing_key_free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_is_member</name></cpp:macro> <cpp:value>st_is_member</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_UPPER_CASE_TABLE</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_INTERRUPT_IN_MATCH_AT</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_table</name></cpp:macro> <cpp:value>onig_st_init_table</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_table_with_size</name></cpp:macro> <cpp:value>onig_st_init_table_with_size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_numtable</name></cpp:macro> <cpp:value>onig_st_init_numtable</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_numtable_with_size</name></cpp:macro> <cpp:value>onig_st_init_numtable_with_size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_strtable</name></cpp:macro> <cpp:value>onig_st_init_strtable</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_strtable_with_size</name></cpp:macro> <cpp:value>onig_st_init_strtable_with_size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_delete</name></cpp:macro> <cpp:value>onig_st_delete</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_delete_safe</name></cpp:macro> <cpp:value>onig_st_delete_safe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_insert</name></cpp:macro> <cpp:value>onig_st_insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_lookup</name></cpp:macro> <cpp:value>onig_st_lookup</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_foreach</name></cpp:macro> <cpp:value>onig_st_foreach</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_add_direct</name></cpp:macro> <cpp:value>onig_st_add_direct</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_free_table</name></cpp:macro> <cpp:value>onig_st_free_table</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_cleanup_safe</name></cpp:macro> <cpp:value>onig_st_cleanup_safe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_copy</name></cpp:macro> <cpp:value>onig_st_copy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_nothing_key_clone</name></cpp:macro> <cpp:value>onig_st_nothing_key_clone</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_nothing_key_free</name></cpp:macro> <cpp:value>onig_st_nothing_key_free</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onig_st_is_member</name></cpp:macro> <cpp:value>st_is_member</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_CHECK_STRING_THRESHOLD_LEN</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_CHECK_BUFF_MAX_SIZE</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmemset</name></cpp:macro> <cpp:value>memset</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmemcpy</name></cpp:macro> <cpp:value>memcpy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmemmove</name></cpp:macro> <cpp:value>memmove</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_MSVCRT_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">90</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_MSVCRT_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xalloca</name></cpp:macro> <cpp:value>_alloca</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xvsnprintf</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>size</name></type></parameter>,<parameter><type><name>fmt</name></type></parameter>,<parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_vsnprintf_s(buf,size,_TRUNCATE,fmt,args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xsnprintf</name></cpp:macro> <cpp:value>sprintf_s</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xstrcat</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>src</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcat_s(dest,size,src)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xalloca</name></cpp:macro> <cpp:value>alloca</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xvsnprintf</name></cpp:macro> <cpp:value>vsnprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xsnprintf</name></cpp:macro> <cpp:value>snprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xstrcat</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>src</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcat(dest,src)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MEMLEAK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRTDBG_MAP_ALLOC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crtdbg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALLOCA_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_INTPTR_T_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_INTPTR_T_DEFINED</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>intptr_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_UINTPTR_T_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UINTPTR_T_DEFINED</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uintptr_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRIdPTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdPTR</name></cpp:macro> <cpp:value>"I64d"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuPTR</name></cpp:macro> <cpp:value>"I64u"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxPTR</name></cpp:macro> <cpp:value>"I64x"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdPTR</name></cpp:macro> <cpp:value>"ld"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuPTR</name></cpp:macro> <cpp:value>"lu"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxPTR</name></cpp:macro> <cpp:value>"lx"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRIdPTRDIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdPTRDIFF</name></cpp:macro> <cpp:value>PRIdPTR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regenc.h"</cpp:file></cpp:include>

<macro><name>RUBY_SYMBOL_EXPORT_BEGIN</name></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(b):(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&lt;(b))?(b):(a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NULL</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((void*)(p)) == (void*)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NOT_NULL</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((void*)(p)) != (void*)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_NULL_RETURN</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (IS_NULL(p)) return NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_NULL_RETURN_MEMERR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (IS_NULL(p)) return ONIGERR_MEMORY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL_UCHARP</name></cpp:macro> <cpp:value>((UChar* )0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_LAST_CODE_POINT</name></cpp:macro> <cpp:value>(~((OnigCodePoint )0))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UNALIGNED_WORD_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_GET_INC</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{val = *(type* )p;(p) += sizeof(type);} while(0)</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_GET_INC</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{xmemcpy(&amp;val, (p), sizeof(type));(p) += sizeof(type);} while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_ALIGNMENT_SIZE</name></cpp:macro> <cpp:value>SIZEOF_LONG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ALIGNMENT_PAD_SIZE</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>,<parameter><type><name>pad_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {(pad_size) = WORD_ALIGNMENT_SIZE - ((uintptr_t )(addr) % WORD_ALIGNMENT_SIZE);if ((pad_size) == WORD_ALIGNMENT_SIZE) (pad_size) = 0;} while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNMENT_RIGHT</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {(addr) += (WORD_ALIGNMENT_SIZE - 1);(addr) -= ((uintptr_t )(addr) % WORD_ALIGNMENT_SIZE);} while (0)</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP_LEVEL_FREE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP_LEVEL_MEM_START</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP_LEVEL_ALL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_OPTIMIZE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_OPTIMIZE_EXACT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_OPTIMIZE_EXACT_BM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_OPTIMIZE_EXACT_BM_NOT_REV</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_OPTIMIZE_EXACT_IC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_OPTIMIZE_MAP</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_OPTIMIZE_EXACT_BM_IC</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_OPTIMIZE_EXACT_BM_NOT_REV_IC</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 


<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>BitStatusType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STATUS_BITS_NUM</name></cpp:macro> <cpp:value>(sizeof(BitStatusType) * 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STATUS_CLEAR</name><parameter_list>(<parameter><type><name>stats</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(stats) = 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STATUS_ON_ALL</name><parameter_list>(<parameter><type><name>stats</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(stats) = ~((BitStatusType )0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STATUS_AT</name><parameter_list>(<parameter><type><name>stats</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &lt; (int )BIT_STATUS_BITS_NUM ? ((stats) &amp; ((BitStatusType )1 &lt;&lt; n)) : ((stats) &amp; 1))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STATUS_ON_AT</name><parameter_list>(<parameter><type><name>stats</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if ((n) &lt; (int )BIT_STATUS_BITS_NUM)(stats) |= (1 &lt;&lt; (n));else(stats) |= 1;} while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STATUS_ON_AT_SIMPLE</name><parameter_list>(<parameter><type><name>stats</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if ((n) &lt; (int )BIT_STATUS_BITS_NUM)(stats) |= (1 &lt;&lt; (n));} while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_MAX_LIMIT</name></cpp:macro> <cpp:value>((1UL &lt;&lt; (SIZEOF_INT * 8 - 1)) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGITVAL</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((code) - '0')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODIGITVAL</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DIGITVAL(code)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDIGITVAL</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>,<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ONIGENC_IS_CODE_DIGIT(enc,code) ? DIGITVAL(code) : (ONIGENC_IS_CODE_UPPER(enc,code) ? (code) - 'A' + 10 : (code) - 'a' + 10))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SINGLELINE</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_SINGLELINE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MULTILINE</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_MULTILINE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_IGNORECASE</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_IGNORECASE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_EXTEND</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_EXTEND)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_FIND_LONGEST</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_FIND_LONGEST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_FIND_NOT_EMPTY</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_FIND_NOT_EMPTY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_FIND_CONDITION</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; (ONIG_OPTION_FIND_LONGEST | ONIG_OPTION_FIND_NOT_EMPTY))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NOTBOL</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_NOTBOL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NOTEOL</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_NOTEOL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NOTBOS</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_NOTBOS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NOTEOS</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_NOTEOS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ASCII_RANGE</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_ASCII_RANGE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_POSIX_BRACKET_ALL_RANGE</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_POSIX_BRACKET_ALL_RANGE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_WORD_BOUND_ALL_RANGE</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_WORD_BOUND_ALL_RANGE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NEWLINE_CRLF</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &amp; ONIG_OPTION_NEWLINE_CRLF)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DYNAMIC_OPTION</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISABLE_CASE_FOLD_MULTI_CHAR</name><parameter_list>(<parameter><type><name>case_fold_flag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((case_fold_flag) &amp; ~INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT_INFINITE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_REPEAT_INFINITE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) == REPEAT_INFINITE)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS_PER_BYTE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SINGLE_BYTE_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; BITS_PER_BYTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS_IN_ROOM</name></cpp:macro> <cpp:value>((int )sizeof(Bits) * BITS_PER_BYTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSET_SIZE</name></cpp:macro> <cpp:value>(SINGLE_BYTE_SIZE / BITS_IN_ROOM)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UNALIGNED_WORD_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>Bits</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>Bits</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>Bits</name></type> <name><name>BitSet</name><index>[<expr><name>BITSET_SIZE</name></expr>]</index></name>;</typedef>
<typedef>typedef <type><name>Bits</name><modifier>*</modifier></type> <name>BitSetRef</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_BITSET</name></cpp:macro> <cpp:value>(int )sizeof(BitSet)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSET_CLEAR</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {int i;for (i = 0; i &lt; BITSET_SIZE; i++) { (bs)[i] = 0; } } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_ROOM</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bs)[(int )(pos) / BITS_IN_ROOM]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_BIT</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1U &lt;&lt; ((int )(pos) % BITS_IN_ROOM))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSET_AT</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BS_ROOM(bs,pos) &amp; BS_BIT(pos))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSET_SET_BIT</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BS_ROOM(bs,pos) |= BS_BIT(pos)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSET_CLEAR_BIT</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BS_ROOM(bs,pos) &amp;= ~(BS_BIT(pos))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSET_INVERT_BIT</name><parameter_list>(<parameter><type><name>bs</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BS_ROOM(bs,pos) ^= BS_BIT(pos)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>_BBuf</name> <block>{
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>alloc</name></decl>;</decl_stmt>
}</block></struct></type> <name>BBuf</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_INIT</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>onig_bbuf_init((BBuf* )(buf), (size))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_SIZE_INC</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>inc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{UChar *tmp;(buf)-&gt;alloc += (inc);tmp = (UChar* )xrealloc((buf)-&gt;p, (buf)-&gt;alloc);if (IS_NULL(tmp)) return(ONIGERR_MEMORY);(buf)-&gt;p = tmp;} while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_EXPAND</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>low</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{UChar *tmp;do { (buf)-&gt;alloc *= 2; } while ((buf)-&gt;alloc &lt; (unsigned int )low);tmp = (UChar* )xrealloc((buf)-&gt;p, (buf)-&gt;alloc);if (IS_NULL(tmp)) return(ONIGERR_MEMORY);(buf)-&gt;p = tmp;} while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_ENSURE_SIZE</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{unsigned int new_alloc = (buf)-&gt;alloc;while (new_alloc &lt; (unsigned int )(size)) { new_alloc *= 2; }if ((buf)-&gt;alloc != new_alloc) {UChar *tmp;tmp = (UChar* )xrealloc((buf)-&gt;p, new_alloc);if (IS_NULL(tmp)) return(ONIGERR_MEMORY);(buf)-&gt;p = tmp;(buf)-&gt;alloc = new_alloc;}} while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_WRITE</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>,<parameter><type><name>bytes</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{int used = (pos) + (int )(n);if ((buf)-&gt;alloc &lt; (unsigned int )used) BBUF_EXPAND((buf),used);xmemcpy((buf)-&gt;p + (pos), (bytes), (n));if ((buf)-&gt;used &lt; (unsigned int )used) (buf)-&gt;used = used;} while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_WRITE1</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>,<parameter><type><name>byte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{int used = (pos) + 1;if ((buf)-&gt;alloc &lt; (unsigned int )used) BBUF_EXPAND((buf),used);(buf)-&gt;p[(pos)] = (UChar )(byte);if ((buf)-&gt;used &lt; (unsigned int )used) (buf)-&gt;used = used;} while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_ADD</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>bytes</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BBUF_WRITE((buf),(buf)-&gt;used,(bytes),(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_ADD1</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>byte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BBUF_WRITE1((buf),(buf)-&gt;used,(byte))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_GET_ADD_ADDRESS</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buf)-&gt;p + (buf)-&gt;used)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_GET_OFFSET_POS</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buf)-&gt;used)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_MOVE_RIGHT</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>from</name></type></parameter>,<parameter><type><name>to</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if ((unsigned int )((to)+(n)) &gt; (buf)-&gt;alloc) BBUF_EXPAND((buf),(to) + (n));xmemmove((buf)-&gt;p + (to), (buf)-&gt;p + (from), (n));if ((unsigned int )((to)+(n)) &gt; (buf)-&gt;used) (buf)-&gt;used = (to) + (n);} while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_MOVE_LEFT</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>from</name></type></parameter>,<parameter><type><name>to</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {xmemmove((buf)-&gt;p + (to), (buf)-&gt;p + (from), (n));} while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_MOVE_LEFT_REDUCE</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>from</name></type></parameter>,<parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {xmemmove((buf)-&gt;p + (to), (buf)-&gt;p + (from), (buf)-&gt;used - (from));(buf)-&gt;used -= (from - to);} while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_INSERT</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>,<parameter><type><name>bytes</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (pos &gt;= (buf)-&gt;used) {BBUF_WRITE(buf,pos,bytes,n);}else {BBUF_MOVE_RIGHT((buf),(pos),(pos) + (n),((buf)-&gt;used - (pos)));xmemcpy((buf)-&gt;p + (pos), (bytes), (n));}} while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BBUF_GET_BYTE</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(buf)-&gt;p[(pos)]</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_BEGIN_BUF</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_BEGIN_LINE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_BEGIN_POSITION</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_END_BUF</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_SEMI_END_BUF</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_END_LINE</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_WORD_BOUND</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_NOT_WORD_BOUND</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_WORD_BEGIN</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_WORD_END</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_PREC_READ</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_PREC_READ_NOT</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_LOOK_BEHIND</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_LOOK_BEHIND_NOT</name></cpp:macro> <cpp:value>(1&lt;&lt;13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_ANYCHAR_STAR</name></cpp:macro> <cpp:value>(1&lt;&lt;14)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_ANYCHAR_STAR_ML</name></cpp:macro> <cpp:value>(1&lt;&lt;15)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_KEEP</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>


<enum>enum <name>OpCode</name> <block>{
<decl><name>OP_FINISH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>OP_END</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>OP_EXACT1</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>OP_EXACT2</name></decl>, 
<decl><name>OP_EXACT3</name></decl>, 
<decl><name>OP_EXACT4</name></decl>, 
<decl><name>OP_EXACT5</name></decl>, 
<decl><name>OP_EXACTN</name></decl>, 
<decl><name>OP_EXACTMB2N1</name></decl>, 
<decl><name>OP_EXACTMB2N2</name></decl>, 
<decl><name>OP_EXACTMB2N3</name></decl>, 
<decl><name>OP_EXACTMB2N</name></decl>, 
<decl><name>OP_EXACTMB3N</name></decl>, 
<decl><name>OP_EXACTMBN</name></decl>, 

<decl><name>OP_EXACT1_IC</name></decl>, 
<decl><name>OP_EXACTN_IC</name></decl>, 

<decl><name>OP_CCLASS</name></decl>,
<decl><name>OP_CCLASS_MB</name></decl>,
<decl><name>OP_CCLASS_MIX</name></decl>,
<decl><name>OP_CCLASS_NOT</name></decl>,
<decl><name>OP_CCLASS_MB_NOT</name></decl>,
<decl><name>OP_CCLASS_MIX_NOT</name></decl>,

<decl><name>OP_ANYCHAR</name></decl>, 
<decl><name>OP_ANYCHAR_ML</name></decl>, 
<decl><name>OP_ANYCHAR_STAR</name></decl>, 
<decl><name>OP_ANYCHAR_ML_STAR</name></decl>, 
<decl><name>OP_ANYCHAR_STAR_PEEK_NEXT</name></decl>,
<decl><name>OP_ANYCHAR_ML_STAR_PEEK_NEXT</name></decl>,

<decl><name>OP_WORD</name></decl>,
<decl><name>OP_NOT_WORD</name></decl>,
<decl><name>OP_WORD_BOUND</name></decl>,
<decl><name>OP_NOT_WORD_BOUND</name></decl>,
<decl><name>OP_WORD_BEGIN</name></decl>,
<decl><name>OP_WORD_END</name></decl>,

<decl><name>OP_ASCII_WORD</name></decl>,
<decl><name>OP_NOT_ASCII_WORD</name></decl>,
<decl><name>OP_ASCII_WORD_BOUND</name></decl>,
<decl><name>OP_NOT_ASCII_WORD_BOUND</name></decl>,
<decl><name>OP_ASCII_WORD_BEGIN</name></decl>,
<decl><name>OP_ASCII_WORD_END</name></decl>,

<decl><name>OP_BEGIN_BUF</name></decl>,
<decl><name>OP_END_BUF</name></decl>,
<decl><name>OP_BEGIN_LINE</name></decl>,
<decl><name>OP_END_LINE</name></decl>,
<decl><name>OP_SEMI_END_BUF</name></decl>,
<decl><name>OP_BEGIN_POSITION</name></decl>,

<decl><name>OP_BACKREF1</name></decl>,
<decl><name>OP_BACKREF2</name></decl>,
<decl><name>OP_BACKREFN</name></decl>,
<decl><name>OP_BACKREFN_IC</name></decl>,
<decl><name>OP_BACKREF_MULTI</name></decl>,
<decl><name>OP_BACKREF_MULTI_IC</name></decl>,
<decl><name>OP_BACKREF_WITH_LEVEL</name></decl>, 

<decl><name>OP_MEMORY_START</name></decl>,
<decl><name>OP_MEMORY_START_PUSH</name></decl>, 
<decl><name>OP_MEMORY_END_PUSH</name></decl>, 
<decl><name>OP_MEMORY_END_PUSH_REC</name></decl>, 
<decl><name>OP_MEMORY_END</name></decl>,
<decl><name>OP_MEMORY_END_REC</name></decl>, 

<decl><name>OP_KEEP</name></decl>,

<decl><name>OP_FAIL</name></decl>, 
<decl><name>OP_JUMP</name></decl>,
<decl><name>OP_PUSH</name></decl>,
<decl><name>OP_POP</name></decl>,
<decl><name>OP_PUSH_OR_JUMP_EXACT1</name></decl>, 
<decl><name>OP_PUSH_IF_PEEK_NEXT</name></decl>, 
<decl><name>OP_REPEAT</name></decl>, 
<decl><name>OP_REPEAT_NG</name></decl>, 
<decl><name>OP_REPEAT_INC</name></decl>,
<decl><name>OP_REPEAT_INC_NG</name></decl>, 
<decl><name>OP_REPEAT_INC_SG</name></decl>, 
<decl><name>OP_REPEAT_INC_NG_SG</name></decl>, 
<decl><name>OP_NULL_CHECK_START</name></decl>, 
<decl><name>OP_NULL_CHECK_END</name></decl>, 
<decl><name>OP_NULL_CHECK_END_MEMST</name></decl>, 
<decl><name>OP_NULL_CHECK_END_MEMST_PUSH</name></decl>, 

<decl><name>OP_PUSH_POS</name></decl>, 
<decl><name>OP_POP_POS</name></decl>, 
<decl><name>OP_PUSH_POS_NOT</name></decl>, 
<decl><name>OP_FAIL_POS</name></decl>, 
<decl><name>OP_PUSH_STOP_BT</name></decl>, 
<decl><name>OP_POP_STOP_BT</name></decl>, 
<decl><name>OP_LOOK_BEHIND</name></decl>, 
<decl><name>OP_PUSH_LOOK_BEHIND_NOT</name></decl>, 
<decl><name>OP_FAIL_LOOK_BEHIND_NOT</name></decl>, 
<decl><name>OP_PUSH_ABSENT_POS</name></decl>, 
<decl><name>OP_ABSENT</name></decl>, 
<decl><name>OP_ABSENT_END</name></decl>, 

<decl><name>OP_CALL</name></decl>, 
<decl><name>OP_RETURN</name></decl>,

<decl><name>OP_CONDITION</name></decl>,

<decl><name>OP_STATE_CHECK_PUSH</name></decl>, 
<decl><name>OP_STATE_CHECK_PUSH_OR_JUMP</name></decl>, 
<decl><name>OP_STATE_CHECK</name></decl>, 
<decl><name>OP_STATE_CHECK_ANYCHAR_STAR</name></decl>,
<decl><name>OP_STATE_CHECK_ANYCHAR_ML_STAR</name></decl>,


<decl><name>OP_SET_OPTION_PUSH</name></decl>, 
<decl><name>OP_SET_OPTION</name></decl> 
}</block>;</enum>

<typedef>typedef <type><name>int</name></type> <name>RelAddrType</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>AbsAddrType</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LengthType</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>RepeatNumType</name>;</typedef>
<typedef>typedef <type><name>short</name> <name>int</name></type> <name>MemNumType</name>;</typedef>
<typedef>typedef <type><name>short</name> <name>int</name></type> <name>StateCheckNumType</name>;</typedef>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>PointerType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OPCODE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_RELADDR</name></cpp:macro> <cpp:value>(int )sizeof(RelAddrType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_ABSADDR</name></cpp:macro> <cpp:value>(int )sizeof(AbsAddrType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_LENGTH</name></cpp:macro> <cpp:value>(int )sizeof(LengthType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MEMNUM</name></cpp:macro> <cpp:value>(int )sizeof(MemNumType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_STATE_CHECK_NUM</name></cpp:macro> <cpp:value>(int )sizeof(StateCheckNumType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_REPEATNUM</name></cpp:macro> <cpp:value>(int )sizeof(RepeatNumType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OPTION</name></cpp:macro> <cpp:value>(int )sizeof(OnigOptionType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_CODE_POINT</name></cpp:macro> <cpp:value>(int )sizeof(OnigCodePoint)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_POINTER</name></cpp:macro> <cpp:value>(int )sizeof(PointerType)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_RELADDR_INC</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLATFORM_GET_INC(addr, p, RelAddrType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ABSADDR_INC</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLATFORM_GET_INC(addr, p, AbsAddrType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LENGTH_INC</name><parameter_list>(<parameter><type><name>len</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLATFORM_GET_INC(len, p, LengthType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_MEMNUM_INC</name><parameter_list>(<parameter><type><name>num</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLATFORM_GET_INC(num, p, MemNumType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_REPEATNUM_INC</name><parameter_list>(<parameter><type><name>num</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLATFORM_GET_INC(num, p, RepeatNumType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OPTION_INC</name><parameter_list>(<parameter><type><name>option</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLATFORM_GET_INC(option, p, OnigOptionType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_POINTER_INC</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLATFORM_GET_INC(ptr, p, PointerType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STATE_CHECK_NUM_INC</name><parameter_list>(<parameter><type><name>num</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLATFORM_GET_INC(num, p, StateCheckNumType)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CODE_POINT</name><parameter_list>(<parameter><type><name>code</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>code = *((OnigCodePoint* )(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_BYTE_INC</name><parameter_list>(<parameter><type><name>byte</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{byte = *(p);(p)++;} while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_ANYCHAR_STAR</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_ANYCHAR_STAR_PEEK_NEXT</name></cpp:macro> <cpp:value>(SIZE_OPCODE + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_JUMP</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_RELADDR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_PUSH</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_RELADDR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_POP</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_PUSH_OR_JUMP_EXACT1</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_RELADDR + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_PUSH_IF_PEEK_NEXT</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_RELADDR + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_REPEAT_INC</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_REPEAT_INC_NG</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_PUSH_POS</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_PUSH_POS_NOT</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_RELADDR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_POP_POS</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_FAIL_POS</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_SET_OPTION</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_OPTION)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_SET_OPTION_PUSH</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_OPTION)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_FAIL</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_MEMORY_START</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_MEMORY_START_PUSH</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_MEMORY_END_PUSH</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_MEMORY_END_PUSH_REC</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_MEMORY_END</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_MEMORY_END_REC</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_PUSH_STOP_BT</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_POP_STOP_BT</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_NULL_CHECK_START</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_NULL_CHECK_END</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_LOOK_BEHIND</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_LENGTH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_PUSH_LOOK_BEHIND_NOT</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_RELADDR + SIZE_LENGTH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_FAIL_LOOK_BEHIND_NOT</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_CALL</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_ABSADDR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_RETURN</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_CONDITION</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_MEMNUM + SIZE_RELADDR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_PUSH_ABSENT_POS</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_ABSENT</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_RELADDR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_ABSENT_END</name></cpp:macro> <cpp:value>SIZE_OPCODE</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_STATE_CHECK</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_STATE_CHECK_NUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_STATE_CHECK_PUSH</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_STATE_CHECK_NUM + SIZE_RELADDR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_STATE_CHECK_PUSH_OR_JUMP</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_STATE_CHECK_NUM + SIZE_RELADDR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OP_STATE_CHECK_ANYCHAR_STAR</name></cpp:macro> <cpp:value>(SIZE_OPCODE + SIZE_STATE_CHECK_NUM)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_ESC</name><parameter_list>(<parameter><type><name>syn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(syn)-&gt;meta_char_table.esc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_ANYCHAR</name><parameter_list>(<parameter><type><name>syn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(syn)-&gt;meta_char_table.anychar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_ANYTIME</name><parameter_list>(<parameter><type><name>syn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(syn)-&gt;meta_char_table.anytime</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_ZERO_OR_ONE_TIME</name><parameter_list>(<parameter><type><name>syn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(syn)-&gt;meta_char_table.zero_or_one_time</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_ONE_OR_MORE_TIME</name><parameter_list>(<parameter><type><name>syn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(syn)-&gt;meta_char_table.one_or_more_time</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_ANYCHAR_ANYTIME</name><parameter_list>(<parameter><type><name>syn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(syn)-&gt;meta_char_table.anychar_anytime</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MC_ESC_CODE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>, <parameter><type><name>syn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((code) == MC_ESC(syn) &amp;&amp; !IS_SYNTAX_OP2((syn), ONIG_SYN_OP2_INEFFECTIVE_ESCAPE))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_POSIX_COMMON_OP</name></cpp:macro> <cpp:value>( ONIG_SYN_OP_DOT_ANYCHAR | ONIG_SYN_OP_POSIX_BRACKET | ONIG_SYN_OP_DECIMAL_BACKREF | ONIG_SYN_OP_BRACKET_CC | ONIG_SYN_OP_ASTERISK_ZERO_INF | ONIG_SYN_OP_LINE_ANCHOR | ONIG_SYN_OP_ESC_CONTROL_CHARS )</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_GNU_REGEX_OP</name></cpp:macro> <cpp:value>( ONIG_SYN_OP_DOT_ANYCHAR | ONIG_SYN_OP_BRACKET_CC | ONIG_SYN_OP_POSIX_BRACKET | ONIG_SYN_OP_DECIMAL_BACKREF | ONIG_SYN_OP_BRACE_INTERVAL | ONIG_SYN_OP_LPAREN_SUBEXP | ONIG_SYN_OP_VBAR_ALT | ONIG_SYN_OP_ASTERISK_ZERO_INF | ONIG_SYN_OP_PLUS_ONE_INF | ONIG_SYN_OP_QMARK_ZERO_ONE | ONIG_SYN_OP_ESC_AZ_BUF_ANCHOR | ONIG_SYN_OP_ESC_CAPITAL_G_BEGIN_ANCHOR | ONIG_SYN_OP_ESC_W_WORD | ONIG_SYN_OP_ESC_B_WORD_BOUND | ONIG_SYN_OP_ESC_LTGT_WORD_BEGIN_END | ONIG_SYN_OP_ESC_S_WHITE_SPACE | ONIG_SYN_OP_ESC_D_DIGIT | ONIG_SYN_OP_LINE_ANCHOR )</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_GNU_REGEX_BV</name></cpp:macro> <cpp:value>( ONIG_SYN_CONTEXT_INDEP_ANCHORS | ONIG_SYN_CONTEXT_INDEP_REPEAT_OPS | ONIG_SYN_CONTEXT_INVALID_REPEAT_OPS | ONIG_SYN_ALLOW_INVALID_INTERVAL | ONIG_SYN_BACKSLASH_ESCAPE_IN_CC | ONIG_SYN_ALLOW_DOUBLE_RANGE_OP_IN_CC )</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCCLASS_FLAGS</name><parameter_list>(<parameter><type><name>cc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cc)-&gt;flags)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCCLASS_FLAG_SET</name><parameter_list>(<parameter><type><name>cc</name></type></parameter>,<parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(NCCLASS_FLAGS(cc) |= (flag))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCCLASS_FLAG_CLEAR</name><parameter_list>(<parameter><type><name>cc</name></type></parameter>,<parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(NCCLASS_FLAGS(cc) &amp;= ~(flag))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NCCLASS_FLAG_ON</name><parameter_list>(<parameter><type><name>cc</name></type></parameter>,<parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((NCCLASS_FLAGS(cc) &amp; (flag)) != 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_NCCLASS_NOT</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCCLASS_SET_NOT</name><parameter_list>(<parameter><type><name>nd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NCCLASS_FLAG_SET(nd, FLAG_NCCLASS_NOT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCCLASS_CLEAR_NOT</name><parameter_list>(<parameter><type><name>nd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NCCLASS_FLAG_CLEAR(nd, FLAG_NCCLASS_NOT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NCCLASS_NOT</name><parameter_list>(<parameter><type><name>nd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_NCCLASS_FLAG_ON(nd, FLAG_NCCLASS_NOT)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>


}</block></struct></type> <name>NodeBase</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>NodeBase</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BitSet</name></type> <name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BBuf</name><modifier>*</modifier></type> <name>mbuf</name></decl>;</decl_stmt> 
}</block></struct></type> <name>CClassNode</name>;</typedef>

<typedef>typedef <type><name>intptr_t</name></type> <name>OnigStackIndex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_OnigStackType</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pcode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pstr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pstr_prev</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>state_check</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pkeep</name></decl>;</decl_stmt> 
}</block> <decl><name>state</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pcode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt> 
}</block> <decl><name>repeat</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>OnigStackIndex</name></type> <name>si</name></decl>;</decl_stmt> 
}</block> <decl><name>repeat_inc</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pstr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OnigStackIndex</name></type> <name>start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OnigStackIndex</name></type> <name>end</name></decl>;</decl_stmt> 
}</block> <decl><name>mem</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pstr</name></decl>;</decl_stmt> 
}</block> <decl><name>null_check</name></decl>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <block>{
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>ret_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pstr</name></decl>;</decl_stmt> 
}</block> <decl><name>call_frame</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <block>{
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>abs_pstr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>end_pstr</name></decl>;</decl_stmt> 
}</block> <decl><name>absent_pos</name></decl>;</struct>
}</block> <decl><name>u</name></decl>;</union>
}</block></struct></type> <name>OnigStackType</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>stack_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stack_n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigOptionType</name></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>gpos</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>OnigPosition</name></type> <name>best_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>best_s</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>state_check_buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state_check_buff_size</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>OnigMatchArg</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CODE_SB_WORD</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>,<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ONIGENC_IS_CODE_ASCII(code) &amp;&amp; ONIGENC_IS_CODE_WORD(enc,code))</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>OnigEndCallListItem</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>OnigEndCallListItem</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>OnigEndCallListItemType</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>onig_add_end_call</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name>opcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name>arg_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>OnigOpInfoType</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>OnigOpInfoType</name></type> <name><name>OnigOpInfo</name><index>[]</index></name></decl>;</decl_stmt>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>onig_print_compiled_byte_code</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>bp</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>bpend</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>nextp</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_STATISTICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>onig_statistics_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>onig_print_statistics</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>UChar</name><modifier>*</modifier></type> <name>onig_error_code_to_format</name><parameter_list>(<parameter><decl><type><name>OnigPosition</name></type> <name>code</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>onig_vsnprintf_with_pattern</name><parameter_list>(<parameter><decl><type><name>UChar</name></type> <name><name>buf</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>pat</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>pat_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>onig_snprintf_with_pattern</name><parameter_list>(<parameter><decl><type><name>UChar</name></type> <name><name>buf</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>pat</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>pat_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>onig_bbuf_init</name><parameter_list>(<parameter><decl><type><name>BBuf</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OnigDistance</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>onig_compile</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>pattern_end</name></decl></parameter>, <parameter><decl><type><name>OnigErrorInfo</name><modifier>*</modifier></type> <name>einfo</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>onig_compile_ruby</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>pattern_end</name></decl></parameter>, <parameter><decl><type><name>OnigErrorInfo</name><modifier>*</modifier></type> <name>einfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sourcefile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sourceline</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>onig_transfer</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>from</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>onig_is_code_in_cc</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>CClassNode</name><modifier>*</modifier></type> <name>cc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>onig_is_code_in_cc_len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enclen</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>CClassNode</name><modifier>*</modifier></type> <name>cc</name></decl></parameter>)</parameter_list>;</function_decl>


<typedef>typedef <type><name>void</name></type> <name>hash_table_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/st.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"st.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>st_data_t</name></type> <name>hash_data_type</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>hash_table_type</name><modifier>*</modifier></type> <name>onig_st_init_strend_table_with_size</name><parameter_list>(<parameter><decl><type><name>st_index_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>onig_st_lookup_strend</name><parameter_list>(<parameter><decl><type><name>hash_table_type</name><modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>str_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end_key</name></decl></parameter>, <parameter><decl><type><name>hash_data_type</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>onig_st_insert_strend</name><parameter_list>(<parameter><decl><type><name>hash_table_type</name><modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>str_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end_key</name></decl></parameter>, <parameter><decl><type><name>hash_data_type</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>onig_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>onig_region_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>re_registers</name></name> <modifier>*</modifier></type><name>regs</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>RUBY_SYMBOL_EXPORT_END</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
