<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\struct.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/symbol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transient_heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>


<enum>enum <block>{
<decl><name>AREF_HASH_UNIT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>AREF_HASH_THRESHOLD</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>
}</block>;</enum>

<function_decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>rb_method_for_self_aref</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>rb_insn_func_t</name></type> <name>func</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>rb_method_for_self_aset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>rb_insn_func_t</name></type> <name>func</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_cStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_members</name></decl>, <decl><type ref="prev"/><name>id_back_members</name></decl>, <decl><type ref="prev"/><name>id_keyword_init</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>struct_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>struct_ivar_get</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>orig</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ivar</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>ivar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ivar</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>RCLASS_SUPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>rb_cStruct</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ivar</name> <operator>=</operator> <call><name>rb_attr_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>ivar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>ivar</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_s_keyword_init</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>struct_ivar_get</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>id_keyword_init</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_s_members</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>members</name> <init>= <expr><call><name>struct_ivar_get</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>id_members</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"uninitialized struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"corrupted struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>members</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_members</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>members</name> <init>= <expr><call><name>rb_struct_s_members</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"struct size differs (%ld required %ld given)"</literal></expr></argument>,
<argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>members</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>struct_member_pos_ideal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>SYM2ID</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>ID_SCOPE_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>struct_member_pos_probe</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><name>prev</name> <operator>*</operator> <name>AREF_HASH_UNIT</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>struct_set_members</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>members</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>back</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>members_length</name> <init>= <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>members_length</name> <operator>&lt;=</operator> <name>AREF_HASH_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>back</name> <operator>=</operator> <name>members</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>mask</name> <operator>&lt;</operator> <name>members_length</name> <operator>*</operator> <name>AREF_HASH_UNIT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mask</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>back</name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><name>mask</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>members_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>members_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>struct_member_pos_ideal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTEST</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>struct_member_pos_probe</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>id_members</name></expr></argument>, <argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>id_back_members</name></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>members</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>struct_member_pos</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>back</name> <init>= <expr><call><name>struct_ivar_get</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id_back_members</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>back</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"uninitialized struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"corrupted struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&lt;=</operator> <name>AREF_HASH_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>,
<argument><expr><literal type="string">"struct size differs (%ld required %ld given)"</literal></expr></argument>,
<argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mask</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>j</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><name>mask</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"struct size differs (%d required %ld given)"</literal></expr></argument>,
<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><name>mask</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>struct_member_pos_ideal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTEST</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>struct_member_pos_probe</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_s_members_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>members</name> <init>= <expr><call><name>rb_struct_s_members</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_ary_dup</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_members_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_struct_s_members_m</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_getmember</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>slot</name> <init>= <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>struct_member_pos</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_name_err_raise</name><argument_list>(<argument><expr><literal type="string">"`%1$s' is not a struct member"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_struct_ref0</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_struct_ref1</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_struct_ref2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_struct_ref3</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_struct_ref4</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_struct_ref5</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_struct_ref6</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_struct_ref7</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_struct_ref8</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_struct_ref9</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_REF_FUNC</name></cpp:macro> <cpp:value>numberof(ref_func)</cpp:value></cpp:define>

<expr_stmt><expr><specifier>static</specifier> <call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator><specifier>const</specifier> <name><name>ref_func</name><index>[]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{
<expr><name>rb_struct_ref0</name></expr>,
<expr><name>rb_struct_ref1</name></expr>,
<expr><name>rb_struct_ref2</name></expr>,
<expr><name>rb_struct_ref3</name></expr>,
<expr><name>rb_struct_ref4</name></expr>,
<expr><name>rb_struct_ref5</name></expr>,
<expr><name>rb_struct_ref6</name></expr>,
<expr><name>rb_struct_ref7</name></expr>,
<expr><name>rb_struct_ref8</name></expr>,
<expr><name>rb_struct_ref9</name></expr>,
}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_struct_modify</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_check_frozen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>anonymous_struct</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nstr</name> <operator>=</operator> <call><name>rb_class_new</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_make_metaclass</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_class_inherited</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>nstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nstr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>new_struct</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>super</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rb_str_to_str</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_is_const_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_name_err_raise</name><argument_list>(<argument><expr><literal type="string">"identifier %1$s needs to be constant"</literal></expr></argument>,
<argument><expr><name>super</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rb_to_id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_const_defined_at</name><argument_list>(<argument><expr><name>super</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"redefining constant %"</literal><name>PRIsVALUE</name><literal type="string">"::%"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>super</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_mod_remove_const</name><argument_list>(<argument><expr><name>super</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_define_class_id_under</name><argument_list>(<argument><expr><name>super</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>super</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>define_aref_method</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>nstr</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_control_frame_t</name> <modifier>*</modifier><name>FUNC_FASTCALL</name></type><argument_list>(<argument><expr><name>rb_vm_opt_struct_aref</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>rb_execution_context_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>rb_control_frame_t</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><call><name>rb_method_for_self_aref</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>rb_vm_opt_struct_aref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_add_method_iseq</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>METHOD_VISI_PUBLIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>define_aset_method</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>nstr</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_control_frame_t</name> <modifier>*</modifier><name>FUNC_FASTCALL</name></type><argument_list>(<argument><expr><name>rb_vm_opt_struct_aset</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>rb_execution_context_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>rb_control_frame_t</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><call><name>rb_method_for_self_aset</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>rb_vm_opt_struct_aset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_add_method_iseq</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>METHOD_VISI_PUBLIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_s_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>inspect</name> <init>= <expr><call><name>rb_class_name</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_struct_s_keyword_init</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>inspect</name></expr></argument>, <argument><expr><literal type="string">"(keyword_init: true)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>inspect</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>struct_new_kw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_class_new_instance_kw</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>RB_PASS_CALLED_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>setup_struct</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>nstr</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>members</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyword_init</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>new_func</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>rb_class_new_instance</name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><name>keyword_init</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>new_func</name> <operator>=</operator> <name>struct_new_kw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>members</name> <operator>=</operator> <call><name>struct_set_members</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><name>struct_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><name>new_func</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>new_func</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><literal type="string">"members"</literal></expr></argument>, <argument><expr><name>rb_struct_s_members_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>rb_struct_s_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>off</name> <init>= <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>N_REF_FUNC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_define_method_id</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>ref_func</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>define_aref_method</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>define_aset_method</name><argument_list>(<argument><expr><name>nstr</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_id_attrset</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>nstr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_alloc_noinit</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>struct_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>struct_make_members_list</name><parameter_list>(<parameter><decl><type><name>va_list</name></type> <name>ar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>, <decl><type ref="prev"/><name>list</name> <init>= <expr><call><name>rb_ident_hash_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st_table</name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><call><name>RHASH_TBL</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RBASIC_CLEAR_CLASS</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>mem</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><call><name>rb_sym_intern_ascii_cstr</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>st_insert</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"duplicate member: %s"</literal></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_hash_keys</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>st_clear</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC_CLEAR_CLASS</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>struct_define_without_accessor</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>outer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>super</name></decl></parameter>, <parameter><decl><type><name>rb_alloc_func_t</name></type> <name>alloc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>members</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>class_name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>outer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>outer</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>super</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>super</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>anonymous_struct</name><argument_list>(<argument><expr><name>super</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>struct_set_members</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>struct_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>klass</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_define_without_accessor_under</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>outer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>super</name></decl></parameter>, <parameter><decl><type><name>rb_alloc_func_t</name></type> <name>alloc</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>members</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>members</name> <operator>=</operator> <call><name>struct_make_members_list</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>struct_define_without_accessor</name><argument_list>(<argument><expr><name>outer</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>super</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>, <argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_define_without_accessor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>super</name></decl></parameter>, <parameter><decl><type><name>rb_alloc_func_t</name></type> <name>alloc</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>members</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>members</name> <operator>=</operator> <call><name>struct_make_members_list</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>struct_define_without_accessor</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>super</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>, <argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_define</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>st</name></decl>, <decl><type ref="prev"/><name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>struct_make_members_list</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>anonymous_struct</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>new_struct</name><argument_list>(<argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_cStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><call><name>setup_struct</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_define_under</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>outer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>struct_make_members_list</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>setup_struct</name><argument_list>(<argument><expr><call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>outer</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rb_cStruct</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_s_def</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>rest</name></decl>, <decl><type ref="prev"/><name>keyword_init</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st_table</name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UNLIMITED_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name><name>keyword_ids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>keyword_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>keyword_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"keyword_init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_get_kwargs</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>keyword_ids</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyword_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>keyword_init</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keyword_init</name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>rb_ident_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC_CLEAR_CLASS</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>RHASH_TBL</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mem</name> <init>= <expr><call><name>rb_to_symbol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_is_attrset_sym</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid struct member: %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>st_insert</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"duplicate member: %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>rb_hash_keys</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>st_clear</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC_CLEAR_CLASS</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>anonymous_struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>new_struct</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>setup_struct</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>keyword_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>id_keyword_init</name></expr></argument>, <argument><expr><name>keyword_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_mod_module_eval</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>num_members</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>members</name></decl>;</decl_stmt>
<expr_stmt><expr><name>members</name> <operator>=</operator> <call><name>struct_ivar_get</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>id_members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"broken members"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<struct>struct <name>struct_hash_set_arg</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>unknown_keywords</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rb_struct_pos</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>struct_hash_set_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>struct_hash_set_arg</name></name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator>struct <name>struct_hash_set_arg</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>rb_struct_pos</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>unknown_keywords</name></name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>unknown_keywords</name></name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>unknown_keywords</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_struct_modify</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_initialize_m</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name> <init>= <expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_struct_modify</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>num_members</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_struct_s_keyword_init</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>struct_hash_set_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"wrong number of arguments (given %d, expected 0)"</literal></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_mem_clear</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><call><name>RSTRUCT_CONST_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>self</name></name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>unknown_keywords</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>struct_hash_set_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>.</operator><name>unknown_keywords</name></name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unknown keywords: %s"</literal></expr></argument>,
<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><call><name>rb_ary_join</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>unknown_keywords</name></name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"struct size differs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_mem_clear</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><call><name>RSTRUCT_CONST_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>+</operator><name>argc</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_struct_initialize_m</name><argument_list>(<argument><expr><call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RARRAY_CONST_PTR</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name> <modifier>*</modifier></type>
<name>struct_heap_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>rb_transient_heap_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>st</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RSTRUCT_TRANSIENT_SET</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>RSTRUCT_TRANSIENT_UNSET</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ALLOC_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>rb_struct_transient_heap_evacuate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>promote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRUCT_TRANSIENT_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>old_ptr</name> <init>= <expr><call><name>rb_struct_const_heap_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>new_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>promote</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_ptr</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FL_UNSET_RAW</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>RSTRUCT_TRANSIENT_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>new_ptr</name> <operator>=</operator> <call><name>struct_heap_alloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name>new_ptr</name></expr></argument>, <argument><expr><name>old_ptr</name></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRUCT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>new_ptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>struct_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>NEWOBJ_OF</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr>struct <name>RStruct</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_STRUCT</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>RGENGC_WB_PROTECTED_STRUCT</name></expr> ?</condition><then> <expr><name>FL_WB_PROTECTED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>num_members</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <name>RSTRUCT_EMBED_LEN_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>RSTRUCT_EMBED_LEN_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>|=</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>RSTRUCT_EMBED_LEN_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_mem_clear</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>ary</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>struct_heap_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>st</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_mem_clear</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>st</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_class_new_instance</name><argument_list>(<argument><expr><call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RARRAY_CONST_PTR</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_struct_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>tmpargs</name><index>[<expr><name>N_REF_FUNC</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mem</name> <init>= <expr><name>tmpargs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>rb_long2int</name><argument_list>(<argument><expr><call><name>num_members</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>tmpargs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tmpargs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>RARRAY_PTR</name><argument_list>(<argument><expr><name><name>tmpargs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mem</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_class_new_instance</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>struct_enum_size</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>eobj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_struct_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_each</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>struct_enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_each_pair</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>members</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>struct_enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>members</name> <operator>=</operator> <call><name>rb_struct_members</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_block_pair_yield_optimizable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>key</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name> <init>= <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>key</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name> <init>= <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>inspect_struct</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dummy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cname</name> <init>= <expr><call><name>rb_class_path</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>members</name></decl>, <decl><type ref="prev"/><name>str</name> <init>= <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"#&lt;struct "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>first</name> <init>= <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recur</name> <operator>||</operator> <name>first</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>recur</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">":...&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>members</name> <operator>=</operator> <call><name>rb_struct_members</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>first</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>SYM2ID</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_is_local_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>rb_is_const_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>rb_id2str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>rb_inspect</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>rb_inspect</name><argument_list>(<argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_exec_recursive</name><argument_list>(<argument><expr><name>inspect_struct</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_to_a</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_ary_new4</name><argument_list>(<argument><expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRUCT_CONST_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_to_h</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>h</name> <init>= <expr><call><name>rb_hash_new_with_size</name><argument_list>(<argument><expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>members</name> <init>= <expr><call><name>rb_struct_members</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_given</name> <init>= <expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>k</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>block_given</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_hash_set_pair</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_deconstruct_keys</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_struct_to_h</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>,
<argument><expr><literal type="string">"wrong argument type %"</literal><name>PRIsVALUE</name><literal type="string">" (expected Array or nil)"</literal></expr></argument>,
<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_hash_new_with_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>rb_hash_new_with_size</name><argument_list>(<argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>key</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>rb_struct_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>VALUE</name></type>
<name>rb_struct_init_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OBJ_INIT_COPY</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>copy</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"struct size mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>len</name><operator>=</operator><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>copy</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_struct_pos</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>idx</name> <init>= <expr><operator>*</operator><name>name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>T_SYMBOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>struct_member_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>rb_check_symbol</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>struct_member_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<macro><name>NORETURN</name><argument_list>(<argument>static void invalid_struct_pos(VALUE s, VALUE idx)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>invalid_struct_pos</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eIndexError</name></expr></argument>, <argument><expr><literal type="string">"offset %ld too small for struct(size:%ld)"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eIndexError</name></expr></argument>, <argument><expr><literal type="string">"offset %ld too large for struct(size:%ld)"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_name_err_raise</name><argument_list>(<argument><expr><literal type="string">"no member '%1$s' in struct"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


















<function><type><name>VALUE</name></type>
<name>rb_struct_aref</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>rb_struct_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>invalid_struct_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><name>VALUE</name></type>
<name>rb_struct_aset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>rb_struct_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>invalid_struct_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_struct_modify</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<macro><name>FUNC_MINIMIZED</name><argument_list>(<argument>VALUE rb_struct_lookup(VALUE s, VALUE idx)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NOINLINE</name><argument_list>(<argument>static VALUE rb_struct_lookup_default(VALUE s, VALUE idx, VALUE notfound)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><name>VALUE</name></type>
<name>rb_struct_lookup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_struct_lookup_default</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_lookup_default</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>notfound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>rb_struct_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>notfound</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>struct_entry</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_struct_aref</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_values_at</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_get_values_at</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>struct_entry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_select</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>struct_enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_yield</name><argument_list>(<argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>recursive_equal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recur</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_equal</name><argument_list>(<argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_equal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>T_STRUCT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>rb_obj_class</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"inconsistent struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_exec_recursive_paired</name><argument_list>(<argument><expr><name>recursive_equal</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_hash</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st_index_t</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>rb_hash_start</name><argument_list>(<argument><expr><call><name>rb_hash</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_hash</name><argument_list>(<argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>rb_hash_uint</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>rb_hash_end</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ST2FIX</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>recursive_eql</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recur</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_eql</name><argument_list>(<argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRUCT_GET</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_eql</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>T_STRUCT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>rb_obj_class</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"inconsistent struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_exec_recursive_paired</name><argument_list>(<argument><expr><name>recursive_eql</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>VALUE</name></type>
<name>rb_struct_size</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><call><name>RSTRUCT_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_struct_dig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UNLIMITED_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>rb_struct_lookup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>argc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt>
<return>return <expr><call><name>rb_obj_dig</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




























<function><type><name>void</name></type>
<name>InitVM_Struct</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>rb_cStruct</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Struct"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_include_module</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><name>rb_mEnumerable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_alloc_func</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><name>rb_struct_s_def</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>rb_struct_initialize_m</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>rb_struct_init_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><name>rb_struct_equal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"eql?"</literal></expr></argument>, <argument><expr><name>rb_struct_eql</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><name>rb_struct_hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>rb_struct_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"to_a"</literal></expr></argument>, <argument><expr><name>rb_struct_to_a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"to_h"</literal></expr></argument>, <argument><expr><name>rb_struct_to_h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"values"</literal></expr></argument>, <argument><expr><name>rb_struct_to_a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>rb_struct_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name>rb_struct_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"each"</literal></expr></argument>, <argument><expr><name>rb_struct_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"each_pair"</literal></expr></argument>, <argument><expr><name>rb_struct_each_pair</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>rb_struct_aref</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"[]="</literal></expr></argument>, <argument><expr><name>rb_struct_aset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"select"</literal></expr></argument>, <argument><expr><name>rb_struct_select</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument>, <argument><expr><name>rb_struct_select</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"values_at"</literal></expr></argument>, <argument><expr><name>rb_struct_values_at</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"members"</literal></expr></argument>, <argument><expr><name>rb_struct_members_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"dig"</literal></expr></argument>, <argument><expr><name>rb_struct_dig</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"deconstruct"</literal></expr></argument>, <argument><expr><name>rb_struct_to_a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cStruct</name></expr></argument>, <argument><expr><literal type="string">"deconstruct_keys"</literal></expr></argument>, <argument><expr><name>rb_struct_deconstruct_keys</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<function><type><name>void</name></type>
<name>Init_Struct</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>id_members</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_back_members</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"__members_back__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_keyword_init</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"__keyword_init__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitVM</name><argument_list>(<argument><expr><name>Struct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
