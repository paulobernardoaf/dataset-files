<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ast.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/symbol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/warnings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iseq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_mAST</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cNode</name></decl>;</decl_stmt>

<struct>struct <name>ASTNodeData</name> <block>{
<decl_stmt><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>node_gc_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>ASTNodeData</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>node_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>ASTNodeData</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_ast_memsize</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>rb_node_type</name> <init>= <expr><block>{
<expr><literal type="string">"AST/node"</literal></expr>,
<expr><block>{<expr><name>node_gc_mark</name></expr>, <expr><name>RUBY_TYPED_DEFAULT_FREE</name></expr>, <expr><name>node_memsize</name></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_ast_node_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_node</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>ASTNodeData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_node_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ast</name></name> <operator>=</operator> <name>ast</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_new_internal</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_ast_node_alloc</name><argument_list>(<argument><expr><name>rb_cNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_node</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ast</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_ast_parse_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_ast_parse_file</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_ast_parse_array</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_parse_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_parser_set_context</name><argument_list>(<argument><expr><call><name>rb_parser_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_parse_done</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ast</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ast_dispose</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>errinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ast_new_internal</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><operator>(</operator><name>NODE</name> <operator>*</operator><operator>)</operator><name><name>ast</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_s_parse</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>module</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_ast_parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_ast_parse_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ast</name> <operator>=</operator> <call><name>rb_parser_compile_string_path</name><argument_list>(<argument><expr><call><name>ast_parse_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ast_parse_done</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_s_parse_file</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>module</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_ast_parse_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_ast_parse_file</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FilePathValue</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rb_file_open_str</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"set_encoding"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ast</name> <operator>=</operator> <call><name>rb_parser_compile_file_path</name><argument_list>(<argument><expr><call><name>ast_parse_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_io_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ast_parse_done</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>lex_array</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_enc_asciicompat</name><argument_list>(<argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid source encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_ast_parse_array</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>rb_check_array_type</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ast</name> <operator>=</operator> <call><name>rb_parser_compile_generic</name><argument_list>(<argument><expr><call><name>ast_parse_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lex_array</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ast_parse_done</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>node_children</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>NODE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>node_find</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>node_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>ASTNodeData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_node_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nd_node_id</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>node_id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>node_children</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>child</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>rb_cNode</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><call><name>node_find</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>VALUE</name></type> <name>rb_e_script</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>script_lines</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name></decl>, <decl><type ref="prev"/><name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>script_lines</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONST_ID</name><argument_list>(<argument><expr><name>script_lines</name></expr></argument>, <argument><expr><literal type="string">"SCRIPT_LINES__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_const_defined_at</name><argument_list>(<argument><expr><name>rb_cObject</name></expr></argument>, <argument><expr><name>script_lines</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_const_get_at</name><argument_list>(<argument><expr><name>rb_cObject</name></expr></argument>, <argument><expr><name>script_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>rb_hash_lookup</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>lines</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_s_of</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>module</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>body</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name></decl>, <decl><type ref="prev"/><name>node</name></decl>, <decl><type ref="prev"/><name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>node_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_proc</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iseq</name> <operator>=</operator> <call><name>vm_proc_iseq</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_iseq</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>iseq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iseq</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>iseq</name> <operator>=</operator> <call><name>rb_method_iseq</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iseq</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_iseq_path</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>node_id</name> <operator>=</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>node_id</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>lines</name> <operator>=</operator> <call><name>script_lines</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>rb_ast_parse_array</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-e"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>rb_ast_parse_str</name><argument_list>(<argument><expr><name>rb_e_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>rb_ast_parse_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>node_find</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_ast_node_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>ASTNodeData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_node_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type>
<name>node_type_to_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ruby_node_name</name><argument_list>(<argument><expr><call><name>nd_type</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>rb_strlen_lit</name><argument_list>(<argument><expr><literal type="string">"NODE_"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_node_type</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>ASTNodeData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_node_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_sym_intern_ascii_cstr</name><argument_list>(<argument><expr><call><name>node_type_to_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CHILD</name><parameter_list>(<parameter><type><name>ast</name></type></parameter>, <parameter><type><name>node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>node ? ast_new_internal(ast, node) : Qnil</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_ary_new_from_node_args</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>NODE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dump_block</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name> <operator>&amp;&amp;</operator>
<call><name>nd_type</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NODE_BLOCK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name><operator>,</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dump_array</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name> <operator>&amp;&amp;</operator> <call><name>nd_type</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NODE_LIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>var_name</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_id2str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>node_children</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><call><name>DECIMAL_SIZE_OF_BITS</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>node_type</name></name></type> <name>type</name> <init>= <expr><call><name>nd_type</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NODE_BLOCK</name></expr>:</case>
<return>return <expr><call><name>dump_block</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_IF</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_cond</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_else</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_UNLESS</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_cond</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_else</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_CASE</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_CASE2</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_CASE3</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_WHEN</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_IN</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_WHILE</name></expr>:</case>
<goto>goto <name>loop</name>;</goto>
<case>case <expr><name>NODE_UNTIL</name></expr>:</case>
<label><name>loop</name>:</label>
<return>return <expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_cond</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>nd_state</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ITER</name></expr>:</case>
<case>case <expr><name>NODE_FOR</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_iter</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_FOR_MASGN</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_var</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_BREAK</name></expr>:</case>
<goto>goto <name>jump</name>;</goto>
<case>case <expr><name>NODE_NEXT</name></expr>:</case>
<goto>goto <name>jump</name>;</goto>
<case>case <expr><name>NODE_RETURN</name></expr>:</case>
<label><name>jump</name>:</label>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_stts</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_REDO</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_RETRY</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_BEGIN</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_RESCUE</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_resq</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_else</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_RESBODY</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ENSURE</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_ensr</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_AND</name></expr>:</case>
<goto>goto <name>andor</name>;</goto>
<case>case <expr><name>NODE_OR</name></expr>:</case>
<label><name>andor</name>:</label>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_1st</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>nd_2nd</name></name> <operator>||</operator> <call><name>nd_type</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_2nd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>nd_2nd</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_2nd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>NODE_MASGN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NODE_NAMED_REST_P</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"NODE_SPECIAL_NO_NAME_REST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<case>case <expr><name>NODE_LASGN</name></expr>:</case>
<goto>goto <name>asgn</name>;</goto>
<case>case <expr><name>NODE_DASGN</name></expr>:</case>
<goto>goto <name>asgn</name>;</goto>
<case>case <expr><name>NODE_DASGN_CURR</name></expr>:</case>
<goto>goto <name>asgn</name>;</goto>
<case>case <expr><name>NODE_IASGN</name></expr>:</case>
<goto>goto <name>asgn</name>;</goto>
<case>case <expr><name>NODE_CVASGN</name></expr>:</case>
<label><name>asgn</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>NODE_REQUIRED_KEYWORD_P</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>var_name</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_vid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"NODE_SPECIAL_REQUIRED_KEYWORD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>var_name</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_vid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_GASGN</name></expr>:</case>
<goto>goto <name>asgn</name>;</goto>
<case>case <expr><name>NODE_CDECL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nd_vid</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_vid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_else</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_else</name><operator>-&gt;</operator><name>nd_mid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_OP_ASGN1</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_recv</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_mid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_OP_ASGN2</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_recv</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name><operator>-&gt;</operator><name>nd_aid</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr></argument>,
<argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name><operator>-&gt;</operator><name>nd_vid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_OP_ASGN_AND</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>idANDOP</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_OP_ASGN_OR</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>idOROP</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_OP_CDECL</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_aid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_CALL</name></expr>:</case>
<case>case <expr><name>NODE_OPCALL</name></expr>:</case>
<case>case <expr><name>NODE_QCALL</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_recv</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_mid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_FCALL</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_mid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_VCALL</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_mid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_SUPER</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ZSUPER</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_LIST</name></expr>:</case>
<goto>goto <name>ary</name>;</goto>
<case>case <expr><name>NODE_VALUES</name></expr>:</case>
<label><name>ary</name>:</label>
<return>return <expr><call><name>dump_array</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ZLIST</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_HASH</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_YIELD</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_LVAR</name></expr>:</case>
<case>case <expr><name>NODE_DVAR</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>var_name</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_vid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_IVAR</name></expr>:</case>
<case>case <expr><name>NODE_CONST</name></expr>:</case>
<case>case <expr><name>NODE_CVAR</name></expr>:</case>
<case>case <expr><name>NODE_GVAR</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_vid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_NTH_REF</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"$%ld"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_nth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_BACK_REF</name></expr>:</case>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>nd_nth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_MATCH</name></expr>:</case>
<goto>goto <name>lit</name>;</goto>
<case>case <expr><name>NODE_MATCH2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_recv</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_recv</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_MATCH3</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_recv</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_value</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_LIT</name></expr>:</case>
<goto>goto <name>lit</name>;</goto>
<case>case <expr><name>NODE_STR</name></expr>:</case>
<goto>goto <name>lit</name>;</goto>
<case>case <expr><name>NODE_XSTR</name></expr>:</case>
<label><name>lit</name>:</label>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_lit</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ONCE</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_DSTR</name></expr>:</case>
<goto>goto <name>dlit</name>;</goto>
<case>case <expr><name>NODE_DXSTR</name></expr>:</case>
<goto>goto <name>dlit</name>;</goto>
<case>case <expr><name>NODE_DREGX</name></expr>:</case>
<goto>goto <name>dlit</name>;</goto>
<case>case <expr><name>NODE_DSYM</name></expr>:</case>
<label><name>dlit</name>:</label>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_lit</name></name></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name><operator>-&gt;</operator><name>nd_next</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_EVSTR</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ARGSCAT</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ARGSPUSH</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_SPLAT</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_BLOCK_PASS</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_DEFN</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_mid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_defn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_DEFS</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_recv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_mid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_defn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ALIAS</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_1st</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_2nd</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_VALIAS</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_orig</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_UNDEF</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_undef</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_CLASS</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_cpath</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_super</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_MODULE</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_cpath</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_SCLASS</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_recv</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_COLON2</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_mid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_COLON3</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_mid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_DOT2</name></expr>:</case>
<goto>goto <name>dot</name>;</goto>
<case>case <expr><name>NODE_DOT3</name></expr>:</case>
<goto>goto <name>dot</name>;</goto>
<case>case <expr><name>NODE_FLIP2</name></expr>:</case>
<goto>goto <name>dot</name>;</goto>
<case>case <expr><name>NODE_FLIP3</name></expr>:</case>
<label><name>dot</name>:</label>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_beg</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_end</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_SELF</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_NIL</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_TRUE</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_FALSE</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ERRINFO</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_DEFINED</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_head</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_POSTEXE</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ATTRASGN</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_recv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_mid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_LAMBDA</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_OPT_ARG</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_KW_ARG</name></expr>:</case>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_next</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_POSTARG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NODE_NAMED_REST_P</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_1st</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_ary_new_from_node_args</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_1st</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_2nd</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"NODE_SPECIAL_NO_NAME_REST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_2nd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>NODE_ARGS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_args_info</name></name> <modifier>*</modifier></type><name>ainfo</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>nd_ainfo</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>pre_args_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>pre_init</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>opt_args</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>var_name</name><argument_list>(<argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>first_post_arg</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>post_args_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>post_init</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>var_name</name><argument_list>(<argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>rest_arg</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>ainfo</name><operator>-&gt;</operator><name>no_kwarg</name></name></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>kw_args</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>ainfo</name><operator>-&gt;</operator><name>no_kwarg</name></name></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>kw_rest_arg</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><call><name>var_name</name><argument_list>(<argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>block_arg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>NODE_SCOPE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>nd_tbl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><ternary><condition><expr><name>tbl</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>tbl</name><operator>++</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>locals</name> <init>= <expr><call><name>rb_ary_new_capa</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>locals</name></expr></argument>, <argument><expr><call><name>var_name</name><argument_list>(<argument><expr><name><name>tbl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>locals</name></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_body</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>NODE_ARYPTN</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_ary_pattern_info</name></name> <modifier>*</modifier></type><name>apinfo</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>nd_apinfo</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rest</name> <init>= <expr><ternary><condition><expr><call><name>NODE_NAMED_REST_P</name><argument_list>(<argument><expr><name><name>apinfo</name><operator>-&gt;</operator><name>rest_arg</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>apinfo</name><operator>-&gt;</operator><name>rest_arg</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"NODE_SPECIAL_NO_NAME_REST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_pconst</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>apinfo</name><operator>-&gt;</operator><name>pre_args</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rest</name></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>apinfo</name><operator>-&gt;</operator><name>post_args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>NODE_HSHPTN</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>kwrest</name> <init>= <expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>nd_pkwrestarg</name></name> <operator>==</operator> <name>NODE_SPECIAL_NO_REST_KEYWORD</name></expr> ?</condition><then> <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"NODE_SPECIAL_NO_REST_KEYWORD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_pkwrestarg</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_pconst</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NEW_CHILD</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nd_pkwargs</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>kwrest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>NODE_ARGS_AUX</name></expr>:</case>
<case>case <expr><name>NODE_LAST</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"node_children: unknown node: %s"</literal></expr></argument>, <argument><expr><call><name>ruby_node_name</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_node_children</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>ASTNodeData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_node_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>node_children</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_node_first_lineno</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>ASTNodeData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_node_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>nd_first_lineno</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_node_first_column</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>ASTNodeData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_node_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>nd_first_column</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_node_last_lineno</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>ASTNodeData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_node_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>nd_last_lineno</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_node_last_column</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>ASTNodeData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_node_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>nd_last_column</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ast_node_inspect</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ASTNodeData</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>ASTNodeData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_node_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cname</name> <operator>=</operator> <call><name>rb_class_path</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"#&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">":%s@%d:%d-%d:%d&gt;"</literal></expr></argument>,
<argument><expr><call><name>node_type_to_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>nd_first_lineno</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nd_first_column</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>nd_last_lineno</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nd_last_column</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ast.rbinc"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>Init_ast</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>rb_mAST</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>rb_cRubyVM</name></expr></argument>, <argument><expr><literal type="string">"AbstractSyntaxTree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_cNode</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>rb_mAST</name></expr></argument>, <argument><expr><literal type="string">"Node"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_undef_alloc_func</name><argument_list>(<argument><expr><name>rb_cNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
