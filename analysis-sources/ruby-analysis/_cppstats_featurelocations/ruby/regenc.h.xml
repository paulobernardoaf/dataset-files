<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\regenc.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONIGMO_REGENC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGMO_REGENC_H</name></cpp:macro></cpp:define>






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_EXPORT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ONIG_ENC_REGISTER</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONIGMO_REGINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_EXTERN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/defines.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PACKAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_ESCAPE_UCHAR_COLLISION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ONIG_ESCAPE_UCHAR_COLLISION</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/onigmo.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"onigmo.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>RUBY_SYMBOL_EXPORT_BEGIN</name></macro>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>to</name></decl>;</decl_stmt>
}</block></struct></type> <name>OnigPairCaseFoldCodes</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>((void* )0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARG_UNUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_UNUSED</name></cpp:macro> <cpp:value>__attribute__ ((unused))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_UNUSED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_IS_NULL</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((void*)(p)) == (void*)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_IS_NOT_NULL</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((void*)(p)) != (void*)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_CHECK_NULL_RETURN</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (ONIG_IS_NULL(p)) return NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_CHECK_NULL_RETURN_VAL</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (ONIG_IS_NULL(p)) return (val)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>enclen</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((enc-&gt;max_enc_len == enc-&gt;min_enc_len) ? enc-&gt;min_enc_len : ONIGENC_MBC_ENC_LEN(enc,p,e))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_NEWLINE</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_NEWLINE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_ALPHA</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_ALPHA)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_BLANK</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_BLANK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_CNTRL</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_CNTRL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_DIGIT</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_DIGIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_GRAPH</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_GRAPH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_LOWER</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_LOWER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_PRINT</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_PRINT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_PUNCT</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_PUNCT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_SPACE</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_SPACE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_UPPER</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_UPPER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_XDIGIT</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_XDIGIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_WORD</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_WORD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_ALNUM</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_ALNUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CTYPE_ASCII</name></cpp:macro> <cpp:value>(1&lt;&lt; ONIGENC_CTYPE_ASCII)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTYPE_TO_BIT</name><parameter_list>(<parameter><type><name>ctype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1&lt;&lt;(ctype))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTYPE_IS_WORD_GRAPH_PRINT</name><parameter_list>(<parameter><type><name>ctype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ctype) == ONIGENC_CTYPE_WORD || (ctype) == ONIGENC_CTYPE_GRAPH ||(ctype) == ONIGENC_CTYPE_PRINT)</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name></type> <name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctype</name></decl>;</decl_stmt>
}</block></struct></type> <name>PosixBracketEntryType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSIX_BRACKET_ENTRY_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>ctype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{(short int )(sizeof(name) - 1), name, (ctype)}</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>numberof</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>numberof</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int )(sizeof(array) / sizeof((array)[0]))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CRNL_AS_LINE_TERMINATOR</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_UNICODE_PROPERTIES</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_UNICODE_AGE_PROPERTIES</name></cpp:macro></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIG_ENCODING_INIT_DEFAULT</name></cpp:macro> <cpp:value>ONIG_ENCODING_ASCII</cpp:value></cpp:define>


<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_ascii_apply_all_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_ascii_get_case_fold_codes_by_str</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_apply_all_case_fold_with_map</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>map_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigPairCaseFoldCodes</name></type> <name><name>map</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ess_tsett_flag</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_get_case_fold_codes_by_str_with_map</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>map_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigPairCaseFoldCodes</name></type> <name><name>map</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ess_tsett_flag</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_not_support_get_ctype_code_range</name><parameter_list>(<parameter><decl><type><name>OnigCtype</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name><modifier>*</modifier></type> <name>sb_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name><modifier>*</modifier></type> <name><name>ranges</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_is_mbc_newline_0x0a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_single_byte_ascii_only_case_map</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name><modifier>*</modifier></type> <name>flagP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>OnigEncodingTypeST</name></name><modifier>*</modifier></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_ascii_mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>lower</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_single_byte_mbc_enc_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>OnigCodePoint</name></type> <name>onigenc_single_byte_mbc_to_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_single_byte_code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_single_byte_code_to_mbc</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>UChar</name><modifier>*</modifier></type> <name>onigenc_single_byte_left_adjust_char_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_always_true_is_allowed_reverse_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_always_false_is_allowed_reverse_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_ascii_is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>ONIG_EXTERN</name> <name>OnigCodePoint</name></type> <name>onigenc_mbn_mbc_to_code</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_mbn_mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>lower</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_mb2_code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_mb2_code_to_mbc</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_minimum_property_name_to_ctype</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_unicode_property_name_to_ctype</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_mb2_is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_mb4_code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_mb4_code_to_mbc</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>UChar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_mb4_is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_unicode_case_map</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name><modifier>*</modifier></type> <name>flagP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>OnigUChar</name><modifier>*</modifier></type> <name>to_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>OnigEncodingTypeST</name></name><modifier>*</modifier></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_unicode_is_code_ctype</name><parameter_list>(<parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_utf16_32_get_ctype_code_range</name><parameter_list>(<parameter><decl><type><name>OnigCtype</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name> <modifier>*</modifier></type><name>sb_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name><modifier>*</modifier></type> <name><name>ranges</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_unicode_ctype_code_range</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ctype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigCodePoint</name><modifier>*</modifier></type> <name><name>ranges</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_unicode_get_case_fold_codes_by_str</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigUChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldCodeItem</name></type> <name><name>items</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_unicode_mbc_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>fold</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type> <name>onigenc_unicode_apply_all_case_fold</name><parameter_list>(<parameter><decl><type><name>OnigCaseFoldType</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>OnigApplyAllCaseFoldFunc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF16_IS_SURROGATE_FIRST</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c) &amp; 0xfc) == 0xd8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF16_IS_SURROGATE_SECOND</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c) &amp; 0xfc) == 0xdc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF16_IS_SURROGATE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c) &amp; 0xf8) == 0xd8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE_VALID_CODEPOINT_P</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((c) &lt;= 0x10ffff) &amp;&amp; !((c) &lt; 0x10000 &amp;&amp; UTF16_IS_SURROGATE((c) &gt;&gt; 8)))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_ISO_8859_1_TO_LOWER_CASE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OnigEncISO_8859_1_ToLowerCaseTable[c]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_ISO_8859_1_TO_UPPER_CASE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OnigEncISO_8859_1_ToUpperCaseTable[c]</cpp:value></cpp:define>


<decl_stmt><decl><type><name>ONIG_EXTERN</name> <specifier>const</specifier> <name>UChar</name></type> <name><name>OnigEncISO_8859_1_ToLowerCaseTable</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ONIG_EXTERN</name> <specifier>const</specifier> <name>UChar</name></type> <name><name>OnigEncISO_8859_1_ToUpperCaseTable</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type>
<name>onigenc_with_ascii_strncmp</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>sascii</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>int</name></type>
<name>onigenc_with_ascii_strnicmp</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>sascii</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ONIG_EXTERN</name> <name>UChar</name><modifier>*</modifier></type>
<name>onigenc_step</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>onig_is_in_code_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ONIG_EXTERN</name> <name>OnigEncoding</name></type> <name>OnigEncDefaultCharEncoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ONIG_EXTERN</name> <specifier>const</specifier> <name>UChar</name></type> <name><name>OnigEncAsciiToLowerCaseTable</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ONIG_EXTERN</name> <specifier>const</specifier> <name>UChar</name></type> <name><name>OnigEncAsciiToUpperCaseTable</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ONIG_EXTERN</name> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>OnigEncAsciiCtypeTable</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_IS_ASCII_CODE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((code) &lt; 0x80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_ASCII_CODE_TO_LOWER_CASE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OnigEncAsciiToLowerCaseTable[c]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_ASCII_CODE_TO_UPPER_CASE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OnigEncAsciiToUpperCaseTable[c]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_IS_ASCII_CODE_CTYPE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>,<parameter><type><name>ctype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OnigEncAsciiCtypeTable[code] &amp; CTYPE_TO_BIT(ctype)) != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_IS_ASCII_CODE_CASE_AMBIG</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ONIGENC_IS_ASCII_CODE_CTYPE(code, ONIGENC_CTYPE_UPPER) ||ONIGENC_IS_ASCII_CODE_CTYPE(code, ONIGENC_CTYPE_LOWER))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_IS_IN_RANGE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>, <parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OnigCodePoint )((code) - (from)) &lt;= (OnigCodePoint )((to) - (from)))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_ENC_REGISTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ONIG_ENC_REGISTER</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OnigEncodingName</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>encoding_##n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OnigEncodingDeclare</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const OnigEncodingType OnigEncodingName(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OnigEncodingDefine</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OnigEncodingDeclare(n); void Init_##f(void) { ONIG_ENC_REGISTER(OnigEncodingName(n).name, &amp;OnigEncodingName(n)); } OnigEncodingDeclare(n)</cpp:value></cpp:define>






<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OnigEncodingName</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OnigEncoding##n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OnigEncodingDeclare</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const OnigEncodingType OnigEncodingName(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OnigEncodingDefine</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OnigEncodingDeclare(n)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_REPLICATE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>orig</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ALIAS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>orig</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DUMMY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<expr><name>RUBY_SYMBOL_EXPORT_END</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
