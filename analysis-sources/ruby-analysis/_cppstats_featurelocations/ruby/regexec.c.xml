<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\regexec.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regint.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_MATCH_RANGE_MUST_BE_INSIDE_OF_SPECIFIED_RANGE</name></cpp:undef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MATCH_RANGE_MUST_BE_INSIDE_OF_SPECIFIED_RANGE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_TOKEN_THREADED_VM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_TOKEN_THREADED_VM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_TOKEN_THREADED_VM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DUMMY_FLAG</name></cpp:macro> <cpp:value>(1&lt;&lt;24)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>rb_enc_asciicompat</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ONIGENC_MBC_MINLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>enc</name><operator>)</operator><operator>-&gt;</operator><name>ruby_encoding_index</name> <operator>&amp;</operator> <name>ENC_DUMMY_FLAG</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ONIGENC_IS_MBC_ASCII_WORD</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_IS_MBC_ASCII_WORD</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_enc_asciicompat(enc) ? (ISALNUM(*s) || *s=='_') : onigenc_ascii_is_code_ctype( ONIGENC_MBC_TO_CODE(enc,s,end),ONIGENC_CTYPE_WORD,enc))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRNL_AS_LINE_TERMINATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_IS_MBC_CRNL</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ONIGENC_MBC_TO_CODE(enc,p,end) == 13 &amp;&amp; ONIGENC_MBC_TO_CODE(enc,(p+enclen(enc,p,end)),end) == 10)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_IS_MBC_NEWLINE_EX</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>start</name></type></parameter>,<parameter><type><name>end</name></type></parameter>,<parameter><type><name>option</name></type></parameter>,<parameter><type><name>check_prev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>is_mbc_newline_ex((enc),(p),(start),(end),(option),(check_prev))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_mbc_newline_ex</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>OnigOptionType</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_NEWLINE_CRLF</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>check_prev</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x0d</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>pnext</name> <init>= <expr><name>p</name> <operator>+</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pnext</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator>
<call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x0d</literal> <operator>&amp;&amp;</operator>
<call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pnext</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_NEWLINE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>ONIGENC_IS_MBC_NEWLINE</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIGENC_IS_MBC_NEWLINE_EX</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>start</name></type></parameter>,<parameter><type><name>end</name></type></parameter>,<parameter><type><name>option</name></type></parameter>,<parameter><type><name>check_prev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_MBC_NEWLINE((enc), (p), (end))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CAPTURE_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>history_tree_free</name><parameter_list>(<parameter><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>history_tree_clear</name><parameter_list>(<parameter><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_NOT_NULL</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>num_childs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_NOT_NULL</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>childs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>history_tree_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>childs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>allocated</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>childs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>num_childs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <name>ONIG_REGION_NOTPOS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>ONIG_REGION_NOTPOS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>childs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>childs</name></name> <operator>=</operator> <operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>history_tree_free</name><parameter_list>(<parameter><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>history_tree_clear</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>history_root_free</name><parameter_list>(<parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_NOT_NULL</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>history_root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>history_tree_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>history_root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>history_root</name></name> <operator>=</operator> <operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnigCaptureTreeNode</name><modifier>*</modifier></type>
<name>history_node_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator> <operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OnigCaptureTreeNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_NULL_RETURN</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>childs</name></name> <operator>=</operator> <operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>num_childs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <name>ONIG_REGION_NOTPOS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>ONIG_REGION_NOTPOS</name></expr>;</expr_stmt>

<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>history_tree_add_child</name><parameter_list>(<parameter><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier></type> <name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HISTORY_TREE_INIT_ALLOC_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>num_childs</name></name> <operator>&gt;=</operator> <name><name>parent</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>childs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>HISTORY_TREE_INIT_ALLOC_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>childs</name></name> <operator>=</operator>
<operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator><operator>*</operator> <operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OnigCaptureTreeNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_NULL_RETURN_MEMERR</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>childs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>allocated</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator>
<operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator><operator>*</operator> <operator>)</operator><call><name>xrealloc</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>childs</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OnigCaptureTreeNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>history_tree_clear</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ONIGERR_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>childs</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>allocated</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>childs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>childs</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>num_childs</name></name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>num_childs</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnigCaptureTreeNode</name><modifier>*</modifier></type>
<name>history_tree_clone</name><parameter_list>(<parameter><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCaptureTreeNode</name> <modifier>*</modifier></type><name>clone</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<expr_stmt><expr><name>clone</name> <operator>=</operator> <call><name>history_node_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_NULL_RETURN</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>beg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>num_childs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>history_tree_clone</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>childs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>history_tree_free</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>history_tree_add_child</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>history_tree_free</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>history_tree_free</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigCaptureTreeNode</name><modifier>*</modifier></type>
<name>onig_get_capture_tree</name><parameter_list>(<parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>region</name><operator>-&gt;</operator><name>history_root</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>onig_region_clear</name><parameter_list>(<parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>region</name><operator>-&gt;</operator><name>num_regs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>end</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ONIG_REGION_NOTPOS</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CAPTURE_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>history_root_free</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onig_region_resize</name><parameter_list>(<parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>num_regs</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>ONIG_NREGION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>ONIG_NREGION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>allocated</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <operator>(</operator><name>OnigPosition</name><operator>*</operator> <operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OnigPosition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>beg</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ONIGERR_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>(</operator><name>OnigPosition</name><operator>*</operator> <operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OnigPosition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ONIGERR_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>allocated</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OnigPosition</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>OnigPosition</name><operator>*</operator> <operator>)</operator><call><name>xrealloc</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OnigPosition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ONIGERR_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>OnigPosition</name><operator>*</operator> <operator>)</operator><call><name>xrealloc</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OnigPosition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ONIGERR_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>onig_region_resize_clear</name><parameter_list>(<parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>onig_region_resize</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>onig_region_clear</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onig_region_set</name><parameter_list>(<parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ONIGERR_INVALID_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&gt;=</operator> <name><name>region</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>onig_region_resize</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name>at</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name><index>[<expr><name>at</name></expr>]</index></name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>end</name><index>[<expr><name>at</name></expr>]</index></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>onig_region_init</name><parameter_list>(<parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>num_regs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <operator>(</operator><name>OnigPosition</name><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>(</operator><name>OnigPosition</name><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CAPTURE_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>history_root</name></name> <operator>=</operator> <operator>(</operator><name>OnigCaptureTreeNode</name><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigRegion</name><modifier>*</modifier></type>
<name>onig_region_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>OnigRegion</name><operator>*</operator> <operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OnigRegion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>onig_region_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>onig_region_free</name><parameter_list>(<parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>free_self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>allocated</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>beg</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CAPTURE_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>history_root_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>free_self</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>onig_region_copy</name><parameter_list>(<parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OnigRegion</name><modifier>*</modifier></type> <name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREGC_SIZE</name></cpp:macro> <cpp:value>(sizeof(int) * from-&gt;num_regs)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>onig_region_resize</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>num_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>from</name><operator>-&gt;</operator><name>num_regs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>beg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>beg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>end</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>end</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>num_regs</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>num_regs</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CAPTURE_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>history_root_free</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_NOT_NULL</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>history_root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>history_root</name></name> <operator>=</operator> <call><name>history_tree_clone</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>history_root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_STACK_INDEX</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_ALT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_LOOK_BEHIND_NOT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_POS_NOT</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_MEM_START</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_MEM_END</name></cpp:macro> <cpp:value>0x8200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_REPEAT_INC</name></cpp:macro> <cpp:value>0x0300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_STATE_CHECK_MARK</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_NULL_CHECK_START</name></cpp:macro> <cpp:value>0x3000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_NULL_CHECK_END</name></cpp:macro> <cpp:value>0x5000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_MEM_END_MARK</name></cpp:macro> <cpp:value>0x8400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_POS</name></cpp:macro> <cpp:value>0x0500</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_STOP_BT</name></cpp:macro> <cpp:value>0x0600</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_REPEAT</name></cpp:macro> <cpp:value>0x0700</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_CALL_FRAME</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_RETURN</name></cpp:macro> <cpp:value>0x0900</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_VOID</name></cpp:macro> <cpp:value>0x0a00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_ABSENT_POS</name></cpp:macro> <cpp:value>0x0b00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_ABSENT</name></cpp:macro> <cpp:value>0x0c00</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_MASK_POP_USED</name></cpp:macro> <cpp:value>0x00ff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_MASK_TO_VOID_TARGET</name></cpp:macro> <cpp:value>0x10ff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STK_MASK_MEM_END_OR_MARK</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_ARG_INIT</name><parameter_list>(<parameter><type><name>msa</name></type></parameter>, <parameter><type><name>arg_option</name></type></parameter>, <parameter><type><name>arg_region</name></type></parameter>, <parameter><type><name>arg_start</name></type></parameter>, <parameter><type><name>arg_gpos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {(msa).stack_p = (void* )0;(msa).options = (arg_option);(msa).region = (arg_region);(msa).start = (arg_start);(msa).gpos = (arg_gpos);(msa).best_len = ONIG_MISMATCH;} while(0)</cpp:value></cpp:define>







<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_ARG_INIT</name><parameter_list>(<parameter><type><name>msa</name></type></parameter>, <parameter><type><name>arg_option</name></type></parameter>, <parameter><type><name>arg_region</name></type></parameter>, <parameter><type><name>arg_start</name></type></parameter>, <parameter><type><name>arg_gpos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {(msa).stack_p = (void* )0;(msa).options = (arg_option);(msa).region = (arg_region);(msa).start = (arg_start);(msa).gpos = (arg_gpos);} while(0)</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_CHECK_BUFF_MALLOC_THRESHOLD_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_CHECK_BUFF_INIT</name><parameter_list>(<parameter><type><name>msa</name></type></parameter>, <parameter><type><name>str_len</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>, <parameter><type><name>state_num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((state_num) &gt; 0 &amp;&amp; str_len &gt;= STATE_CHECK_STRING_THRESHOLD_LEN) {unsigned int size = (unsigned int )(((str_len) + 1) * (state_num) + 7) &gt;&gt; 3;offset = ((offset) * (state_num)) &gt;&gt; 3;if (size &gt; 0 &amp;&amp; offset &lt; size &amp;&amp; size &lt; STATE_CHECK_BUFF_MAX_SIZE) {if (size &gt;= STATE_CHECK_BUFF_MALLOC_THRESHOLD_SIZE) {(msa).state_check_buff = (void* )xmalloc(size);CHECK_NULL_RETURN_MEMERR((msa).state_check_buff);}else (msa).state_check_buff = (void* )xalloca(size);xmemset(((char* )((msa).state_check_buff)+(offset)), 0, (size_t )(size - (offset))); (msa).state_check_buff_size = size;}else {(msa).state_check_buff = (void* )0;(msa).state_check_buff_size = 0;}}else {(msa).state_check_buff = (void* )0;(msa).state_check_buff_size = 0;}} while(0)</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_ARG_FREE</name><parameter_list>(<parameter><type><name>msa</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if ((msa).stack_p) xfree((msa).stack_p);if ((msa).state_check_buff_size &gt;= STATE_CHECK_BUFF_MALLOC_THRESHOLD_SIZE) { if ((msa).state_check_buff) xfree((msa).state_check_buff);}} while(0)</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_ARG_FREE</name><parameter_list>(<parameter><type><name>msa</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((msa).stack_p) xfree((msa).stack_p)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PTR_NUM</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_INIT</name><parameter_list>(<parameter><type><name>alloc_addr</name></type></parameter>, <parameter><type><name>heap_addr</name></type></parameter>, <parameter><type><name>ptr_num</name></type></parameter>, <parameter><type><name>stack_num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (ptr_num &gt; MAX_PTR_NUM) {alloc_addr = (char* )xmalloc(sizeof(OnigStackIndex) * (ptr_num));heap_addr = alloc_addr;if (msa-&gt;stack_p) {stk_alloc = (OnigStackType* )(msa-&gt;stack_p);stk_base = stk_alloc;stk = stk_base;stk_end = stk_base + msa-&gt;stack_n;} else {stk_alloc = (OnigStackType* )xalloca(sizeof(OnigStackType) * (stack_num));stk_base = stk_alloc;stk = stk_base;stk_end = stk_base + (stack_num);}} else if (msa-&gt;stack_p) {alloc_addr = (char* )xalloca(sizeof(OnigStackIndex) * (ptr_num));heap_addr = NULL;stk_alloc = (OnigStackType* )(msa-&gt;stack_p);stk_base = stk_alloc;stk = stk_base;stk_end = stk_base + msa-&gt;stack_n;}else {alloc_addr = (char* )xalloca(sizeof(OnigStackIndex) * (ptr_num)+ sizeof(OnigStackType) * (stack_num));heap_addr = NULL;stk_alloc = (OnigStackType* )(alloc_addr + sizeof(OnigStackIndex) * (ptr_num));stk_base = stk_alloc;stk = stk_base;stk_end = stk_base + (stack_num);}} while(0)</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_SAVE</name></cpp:macro> <cpp:value>do{if (stk_base != stk_alloc) {msa-&gt;stack_p = stk_base;msa-&gt;stack_n = stk_end - stk_base; };} while(0)</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>MatchStackLimitSize</name> <init>= <expr><name>DEFAULT_MATCH_STACK_LIMIT_SIZE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>extern</specifier> <name>unsigned</name> <name>int</name></type>
<name>onig_get_match_stack_limit_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>MatchStackLimitSize</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onig_set_match_stack_limit_size</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>MatchStackLimitSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>stack_double</name><parameter_list>(<parameter><decl><type><name>OnigStackType</name><modifier>*</modifier><modifier>*</modifier></type> <name>arg_stk_base</name></decl></parameter>, <parameter><decl><type><name>OnigStackType</name><modifier>*</modifier><modifier>*</modifier></type> <name>arg_stk_end</name></decl></parameter>,
<parameter><decl><type><name>OnigStackType</name><modifier>*</modifier><modifier>*</modifier></type> <name>arg_stk</name></decl></parameter>, <parameter><decl><type><name>OnigStackType</name><modifier>*</modifier></type> <name>stk_alloc</name></decl></parameter>, <parameter><decl><type><name>OnigMatchArg</name><modifier>*</modifier></type> <name>msa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigStackType</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>stk_base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>stk_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>stk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stk_base</name> <operator>=</operator> <operator>*</operator><name>arg_stk_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stk_end</name> <operator>=</operator> <operator>*</operator><name>arg_stk_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stk</name> <operator>=</operator> <operator>*</operator><name>arg_stk</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>stk_end</name> <operator>-</operator> <name>stk_base</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stk_base</name> <operator>==</operator> <name>stk_alloc</name> <operator>&amp;&amp;</operator> <call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>msa</name><operator>-&gt;</operator><name>stack_p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>OnigStackType</name><operator>*</operator> <operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OnigStackType</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>STACK_SAVE</name></expr>;</expr_stmt>
<return>return <expr><name>ONIGERR_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xmemcpy</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>stk_base</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OnigStackType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>limit_size</name> <init>= <expr><name>MatchStackLimitSize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit_size</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <name>limit_size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>)</operator><operator>(</operator><name>stk_end</name> <operator>-</operator> <name>stk_base</name><operator>)</operator> <operator>==</operator> <name>limit_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ONIGERR_MATCH_STACK_LIMIT_OVER</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>limit_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>OnigStackType</name><operator>*</operator> <operator>)</operator><call><name>xrealloc</name><argument_list>(<argument><expr><name>stk_base</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OnigStackType</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>STACK_SAVE</name></expr>;</expr_stmt>
<return>return <expr><name>ONIGERR_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>arg_stk</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>stk</name> <operator>-</operator> <name>stk_base</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>arg_stk_base</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>arg_stk_end</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_ENSURE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (stk_end - stk &lt; (n)) {int r = stack_double(&amp;stk_base, &amp;stk_end, &amp;stk, stk_alloc, msa);if (r != 0) {STACK_SAVE;if (xmalloc_base) xfree(xmalloc_base);return r;}}} while(0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_AT</name><parameter_list>(<parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(stk_base + (index))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_INDEX</name><parameter_list>(<parameter><type><name>stk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((stk) - stk_base)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_TYPE</name><parameter_list>(<parameter><type><name>stack_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = (stack_type);STACK_INC;} while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TO_VOID_TARGET</name><parameter_list>(<parameter><type><name>stk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((stk)-&gt;type &amp; STK_MASK_TO_VOID_TARGET) != 0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_CHECK_POS</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>snum</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((s) - str) * num_comb_exp_check + ((snum) - 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_CHECK_VAL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>snum</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (state_check_buff != NULL) {int x = STATE_CHECK_POS(s,snum);(v) = state_check_buff[x/8] &amp; (1&lt;&lt;(x%8));}else (v) = 0;} while(0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELSE_IF_STATE_CHECK_MARK</name><parameter_list>(<parameter><type><name>stk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>else if ((stk)-&gt;type == STK_STATE_CHECK_MARK) { int x = STATE_CHECK_POS(stk-&gt;u.state.pstr, stk-&gt;u.state.state_check);state_check_buff[x/8] |= (1&lt;&lt;(x%8)); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH</name><parameter_list>(<parameter><type><name>stack_type</name></type></parameter>,<parameter><type><name>pat</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>sprev</name></type></parameter>,<parameter><type><name>keep</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = (stack_type);stk-&gt;u.state.pcode = (pat);stk-&gt;u.state.pstr = (s);stk-&gt;u.state.pstr_prev = (sprev);stk-&gt;u.state.state_check = 0;stk-&gt;u.state.pkeep = (keep);STACK_INC;} while(0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_ENSURED</name><parameter_list>(<parameter><type><name>stack_type</name></type></parameter>,<parameter><type><name>pat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {stk-&gt;type = (stack_type);stk-&gt;u.state.pcode = (pat);stk-&gt;u.state.state_check = 0;STACK_INC;} while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_ALT_WITH_STATE_CHECK</name><parameter_list>(<parameter><type><name>pat</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>sprev</name></type></parameter>,<parameter><type><name>snum</name></type></parameter>,<parameter><type><name>keep</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_ALT;stk-&gt;u.state.pcode = (pat);stk-&gt;u.state.pstr = (s);stk-&gt;u.state.pstr_prev = (sprev);stk-&gt;u.state.state_check = ((state_check_buff != NULL) ? (snum) : 0);stk-&gt;u.state.pkeep = (keep);STACK_INC;} while(0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_STATE_CHECK</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>snum</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (state_check_buff != NULL) {STACK_ENSURE(1);stk-&gt;type = STK_STATE_CHECK_MARK;stk-&gt;u.state.pstr = (s);stk-&gt;u.state.state_check = (snum);STACK_INC;}} while(0)</cpp:value></cpp:define>









<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELSE_IF_STATE_CHECK_MARK</name><parameter_list>(<parameter><type><name>stk</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH</name><parameter_list>(<parameter><type><name>stack_type</name></type></parameter>,<parameter><type><name>pat</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>sprev</name></type></parameter>,<parameter><type><name>keep</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = (stack_type);stk-&gt;u.state.pcode = (pat);stk-&gt;u.state.pstr = (s);stk-&gt;u.state.pstr_prev = (sprev);stk-&gt;u.state.pkeep = (keep);STACK_INC;} while(0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_ENSURED</name><parameter_list>(<parameter><type><name>stack_type</name></type></parameter>,<parameter><type><name>pat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {stk-&gt;type = (stack_type);stk-&gt;u.state.pcode = (pat);STACK_INC;} while(0)</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_ALT</name><parameter_list>(<parameter><type><name>pat</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>sprev</name></type></parameter>,<parameter><type><name>keep</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STACK_PUSH(STK_ALT,pat,s,sprev,keep)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_POS</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>sprev</name></type></parameter>,<parameter><type><name>keep</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STACK_PUSH(STK_POS,NULL_UCHARP,s,sprev,keep)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_POS_NOT</name><parameter_list>(<parameter><type><name>pat</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>sprev</name></type></parameter>,<parameter><type><name>keep</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STACK_PUSH(STK_POS_NOT,pat,s,sprev,keep)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_ABSENT</name></cpp:macro> <cpp:value>STACK_PUSH_TYPE(STK_ABSENT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_STOP_BT</name></cpp:macro> <cpp:value>STACK_PUSH_TYPE(STK_STOP_BT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_LOOK_BEHIND_NOT</name><parameter_list>(<parameter><type><name>pat</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>sprev</name></type></parameter>,<parameter><type><name>keep</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STACK_PUSH(STK_LOOK_BEHIND_NOT,pat,s,sprev,keep)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_REPEAT</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>pat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_REPEAT;stk-&gt;u.repeat.num = (id);stk-&gt;u.repeat.pcode = (pat);stk-&gt;u.repeat.count = 0;STACK_INC;} while(0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_REPEAT_INC</name><parameter_list>(<parameter><type><name>sindex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_REPEAT_INC;stk-&gt;u.repeat_inc.si = (sindex);STACK_INC;} while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_MEM_START</name><parameter_list>(<parameter><type><name>mnum</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_MEM_START;stk-&gt;u.mem.num = (mnum);stk-&gt;u.mem.pstr = (s);stk-&gt;u.mem.start = mem_start_stk[mnum];stk-&gt;u.mem.end = mem_end_stk[mnum];mem_start_stk[mnum] = GET_STACK_INDEX(stk);mem_end_stk[mnum] = INVALID_STACK_INDEX;STACK_INC;} while(0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_MEM_END</name><parameter_list>(<parameter><type><name>mnum</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_MEM_END;stk-&gt;u.mem.num = (mnum);stk-&gt;u.mem.pstr = (s);stk-&gt;u.mem.start = mem_start_stk[mnum];stk-&gt;u.mem.end = mem_end_stk[mnum];mem_end_stk[mnum] = GET_STACK_INDEX(stk);STACK_INC;} while(0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_MEM_END_MARK</name><parameter_list>(<parameter><type><name>mnum</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_MEM_END_MARK;stk-&gt;u.mem.num = (mnum);STACK_INC;} while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_GET_MEM_START</name><parameter_list>(<parameter><type><name>mnum</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {int level = 0;k = stk;while (k &gt; stk_base) {k--;if ((k-&gt;type &amp; STK_MASK_MEM_END_OR_MARK) != 0 &amp;&amp; k-&gt;u.mem.num == (mnum)) {level++;}else if (k-&gt;type == STK_MEM_START &amp;&amp; k-&gt;u.mem.num == (mnum)) {if (level == 0) break;level--;}}} while(0)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_GET_MEM_RANGE</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>mnum</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {int level = 0;while (k &lt; stk) {if (k-&gt;type == STK_MEM_START &amp;&amp; k-&gt;u.mem.num == (mnum)) {if (level == 0) (start) = k-&gt;u.mem.pstr;level++;}else if (k-&gt;type == STK_MEM_END &amp;&amp; k-&gt;u.mem.num == (mnum)) {level--;if (level == 0) {(end) = k-&gt;u.mem.pstr;break;}}k++;}} while(0)</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_NULL_CHECK_START</name><parameter_list>(<parameter><type><name>cnum</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_NULL_CHECK_START;stk-&gt;u.null_check.num = (cnum);stk-&gt;u.null_check.pstr = (s);STACK_INC;} while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_NULL_CHECK_END</name><parameter_list>(<parameter><type><name>cnum</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_NULL_CHECK_END;stk-&gt;u.null_check.num = (cnum);STACK_INC;} while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_CALL_FRAME</name><parameter_list>(<parameter><type><name>pat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_CALL_FRAME;stk-&gt;u.call_frame.ret_addr = (pat);STACK_INC;} while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_RETURN</name></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_RETURN;STACK_INC;} while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH_ABSENT_POS</name><parameter_list>(<parameter><type><name>start</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {STACK_ENSURE(1);stk-&gt;type = STK_ABSENT_POS;stk-&gt;u.absent_pos.abs_pstr = (start);stk-&gt;u.absent_pos.end_pstr = (end);STACK_INC;} while(0)</cpp:value></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_BASE_CHECK</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>at</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((p) &lt; stk_base) {fprintf(stderr, "at %s\n", at);goto stack_error;}</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_BASE_CHECK</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>at</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP_ONE</name></cpp:macro> <cpp:value>do {stk--;STACK_BASE_CHECK(stk, "STACK_POP_ONE"); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP</name></cpp:macro> <cpp:value>do {switch (pop_level) {case STACK_POP_LEVEL_FREE:while (1) {stk--;STACK_BASE_CHECK(stk, "STACK_POP"); if ((stk-&gt;type &amp; STK_MASK_POP_USED) != 0) break;ELSE_IF_STATE_CHECK_MARK(stk);}break;case STACK_POP_LEVEL_MEM_START:while (1) {stk--;STACK_BASE_CHECK(stk, "STACK_POP 2"); if ((stk-&gt;type &amp; STK_MASK_POP_USED) != 0) break;else if (stk-&gt;type == STK_MEM_START) {mem_start_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.start;mem_end_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.end;}ELSE_IF_STATE_CHECK_MARK(stk);}break;default:while (1) {stk--;STACK_BASE_CHECK(stk, "STACK_POP 3"); if ((stk-&gt;type &amp; STK_MASK_POP_USED) != 0) break;else if (stk-&gt;type == STK_MEM_START) {mem_start_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.start;mem_end_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.end;}else if (stk-&gt;type == STK_REPEAT_INC) {STACK_AT(stk-&gt;u.repeat_inc.si)-&gt;u.repeat.count--;}else if (stk-&gt;type == STK_MEM_END) {mem_start_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.start;mem_end_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.end;}ELSE_IF_STATE_CHECK_MARK(stk);}break;}} while(0)</cpp:value></cpp:define>











































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP_TIL_POS_NOT</name></cpp:macro> <cpp:value>do {while (1) {stk--;STACK_BASE_CHECK(stk, "STACK_POP_TIL_POS_NOT"); if (stk-&gt;type == STK_POS_NOT) break;else if (stk-&gt;type == STK_MEM_START) {mem_start_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.start;mem_end_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.end;}else if (stk-&gt;type == STK_REPEAT_INC) {STACK_AT(stk-&gt;u.repeat_inc.si)-&gt;u.repeat.count--;}else if (stk-&gt;type == STK_MEM_END) {mem_start_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.start;mem_end_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.end;}ELSE_IF_STATE_CHECK_MARK(stk);}} while(0)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP_TIL_LOOK_BEHIND_NOT</name></cpp:macro> <cpp:value>do {while (1) {stk--;STACK_BASE_CHECK(stk, "STACK_POP_TIL_LOOK_BEHIND_NOT"); if (stk-&gt;type == STK_LOOK_BEHIND_NOT) break;else if (stk-&gt;type == STK_MEM_START) {mem_start_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.start;mem_end_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.end;}else if (stk-&gt;type == STK_REPEAT_INC) {STACK_AT(stk-&gt;u.repeat_inc.si)-&gt;u.repeat.count--;}else if (stk-&gt;type == STK_MEM_END) {mem_start_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.start;mem_end_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.end;}ELSE_IF_STATE_CHECK_MARK(stk);}} while(0)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP_TIL_ABSENT</name></cpp:macro> <cpp:value>do {while (1) {stk--;STACK_BASE_CHECK(stk, "STACK_POP_TIL_ABSENT"); if (stk-&gt;type == STK_ABSENT) break;else if (stk-&gt;type == STK_MEM_START) {mem_start_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.start;mem_end_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.end;}else if (stk-&gt;type == STK_REPEAT_INC) {STACK_AT(stk-&gt;u.repeat_inc.si)-&gt;u.repeat.count--;}else if (stk-&gt;type == STK_MEM_END) {mem_start_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.start;mem_end_stk[stk-&gt;u.mem.num] = stk-&gt;u.mem.end;}ELSE_IF_STATE_CHECK_MARK(stk);}} while(0)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP_ABSENT_POS</name><parameter_list>(<parameter><type><name>start</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {stk--;STACK_BASE_CHECK(stk, "STACK_POP_ABSENT_POS"); (start) = stk-&gt;u.absent_pos.abs_pstr;(end) = stk-&gt;u.absent_pos.end_pstr;} while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POS_END</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {k = stk;while (1) {k--;STACK_BASE_CHECK(k, "STACK_POS_END"); if (IS_TO_VOID_TARGET(k)) {k-&gt;type = STK_VOID;}else if (k-&gt;type == STK_POS) {k-&gt;type = STK_VOID;break;}}} while(0)</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_STOP_BT_END</name></cpp:macro> <cpp:value>do {OnigStackType *k = stk;while (1) {k--;STACK_BASE_CHECK(k, "STACK_STOP_BT_END"); if (IS_TO_VOID_TARGET(k)) {k-&gt;type = STK_VOID;}else if (k-&gt;type == STK_STOP_BT) {k-&gt;type = STK_VOID;break;}}} while(0)</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_NULL_CHECK</name><parameter_list>(<parameter><type><name>isnull</name></type></parameter>,<parameter><type><name>id</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {OnigStackType* k = stk;while (1) {k--;STACK_BASE_CHECK(k, "STACK_NULL_CHECK"); if (k-&gt;type == STK_NULL_CHECK_START) {if (k-&gt;u.null_check.num == (id)) {(isnull) = (k-&gt;u.null_check.pstr == (s));break;}}}} while(0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_NULL_CHECK_REC</name><parameter_list>(<parameter><type><name>isnull</name></type></parameter>,<parameter><type><name>id</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {int level = 0;OnigStackType* k = stk;while (1) {k--;STACK_BASE_CHECK(k, "STACK_NULL_CHECK_REC"); if (k-&gt;type == STK_NULL_CHECK_START) {if (k-&gt;u.null_check.num == (id)) {if (level == 0) {(isnull) = (k-&gt;u.null_check.pstr == (s));break;}else level--;}}else if (k-&gt;type == STK_NULL_CHECK_END) {level++;}}} while(0)</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_NULL_CHECK_MEMST</name><parameter_list>(<parameter><type><name>isnull</name></type></parameter>,<parameter><type><name>id</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {OnigStackType* k = stk;while (1) {k--;STACK_BASE_CHECK(k, "STACK_NULL_CHECK_MEMST"); if (k-&gt;type == STK_NULL_CHECK_START) {if (k-&gt;u.null_check.num == (id)) {if (k-&gt;u.null_check.pstr != (s)) {(isnull) = 0;break;}else {UChar* endp;(isnull) = 1;while (k &lt; stk) {if (k-&gt;type == STK_MEM_START) {if (k-&gt;u.mem.end == INVALID_STACK_INDEX) {(isnull) = 0; break;}if (BIT_STATUS_AT(reg-&gt;bt_mem_end, k-&gt;u.mem.num))endp = STACK_AT(k-&gt;u.mem.end)-&gt;u.mem.pstr;elseendp = (UChar* )k-&gt;u.mem.end;if (STACK_AT(k-&gt;u.mem.start)-&gt;u.mem.pstr != endp) {(isnull) = 0; break;}else if (endp != s) {(isnull) = -1; }}k++;}break;}}}}} while(0)</cpp:value></cpp:define>






































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_NULL_CHECK_MEMST_REC</name><parameter_list>(<parameter><type><name>isnull</name></type></parameter>,<parameter><type><name>id</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {int level = 0;OnigStackType* k = stk;while (1) {k--;STACK_BASE_CHECK(k, "STACK_NULL_CHECK_MEMST_REC"); if (k-&gt;type == STK_NULL_CHECK_START) {if (k-&gt;u.null_check.num == (id)) {if (level == 0) {if (k-&gt;u.null_check.pstr != (s)) {(isnull) = 0;break;}else {UChar* endp;(isnull) = 1;while (k &lt; stk) {if (k-&gt;type == STK_MEM_START) {if (k-&gt;u.mem.end == INVALID_STACK_INDEX) {(isnull) = 0; break;}if (BIT_STATUS_AT(reg-&gt;bt_mem_end, k-&gt;u.mem.num))endp = STACK_AT(k-&gt;u.mem.end)-&gt;u.mem.pstr;elseendp = (UChar* )k-&gt;u.mem.end;if (STACK_AT(k-&gt;u.mem.start)-&gt;u.mem.pstr != endp) {(isnull) = 0; break;}else if (endp != s) {(isnull) = -1; }}k++;}break;}}else {level--;}}}else if (k-&gt;type == STK_NULL_CHECK_END) {if (k-&gt;u.null_check.num == (id)) level++;}}} while(0)</cpp:value></cpp:define>















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_GET_REPEAT</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {int level = 0;k = stk;while (1) {k--;STACK_BASE_CHECK(k, "STACK_GET_REPEAT"); if (k-&gt;type == STK_REPEAT) {if (level == 0) {if (k-&gt;u.repeat.num == (id)) {break;}}}else if (k-&gt;type == STK_CALL_FRAME) level--;else if (k-&gt;type == STK_RETURN) level++;}} while(0)</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_RETURN</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {int level = 0;OnigStackType* k = stk;while (1) {k--;STACK_BASE_CHECK(k, "STACK_RETURN"); if (k-&gt;type == STK_CALL_FRAME) {if (level == 0) {(addr) = k-&gt;u.call_frame.ret_addr;break;}else level--;}else if (k-&gt;type == STK_RETURN)level++;}} while(0)</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_CMP</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {while (len-- &gt; 0) {if (*s1++ != *s2++) goto fail;}} while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_CMP_IC</name><parameter_list>(<parameter><type><name>case_fold_flag</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>ps2</name></type></parameter>,<parameter><type><name>len</name></type></parameter>,<parameter><type><name>text_end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (string_cmp_ic(encode, case_fold_flag, s1, ps2, len, text_end) == 0) goto fail; } while(0)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type> <name>string_cmp_ic</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>case_fold_flag</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>ps2</name></decl></parameter>, <parameter><decl><type><name>OnigDistance</name></type> <name>mblen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>buf1</name><index>[<expr><name>ONIGENC_MBC_CASE_FOLD_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name></type> <name><name>buf2</name><index>[<expr><name>ONIGENC_MBC_CASE_FOLD_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len1</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>*</operator><name>ps2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end1</name> <operator>=</operator> <name>s1</name> <operator>+</operator> <name>mblen</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s1</name> <operator>&lt;</operator> <name>end1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <call><name>ONIGENC_MBC_CASE_FOLD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>ONIGENC_MBC_CASE_FOLD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>!=</operator> <name>len2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>buf1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>buf2</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len1</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>!=</operator> <operator>*</operator><name>p2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>ps2</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_CMP_VALUE</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>len</name></type></parameter>,<parameter><type><name>is_fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {is_fail = 0;while (len-- &gt; 0) {if (*s1++ != *s2++) {is_fail = 1; break;}}} while(0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_CMP_VALUE_IC</name><parameter_list>(<parameter><type><name>case_fold_flag</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>ps2</name></type></parameter>,<parameter><type><name>len</name></type></parameter>,<parameter><type><name>text_end</name></type></parameter>,<parameter><type><name>is_fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (string_cmp_ic(encode, case_fold_flag, s1, ps2, len, text_end) == 0) is_fail = 1; else is_fail = 0; } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_EMPTY_STR</name></cpp:macro> <cpp:value>(str == end)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON_STR_BEGIN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) == str)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON_STR_END</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) == end)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MATCH_RANGE_MUST_BE_INSIDE_OF_SPECIFIED_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_ENSURE_CHECK1</name></cpp:macro> <cpp:value>(s &lt; right_range)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_ENSURE_CHECK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s + (n) &lt;= right_range)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_ENSURE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (s + (n) &gt; right_range) goto fail</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSENT_END_POS</name></cpp:macro> <cpp:value>right_range</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_ENSURE_CHECK1</name></cpp:macro> <cpp:value>(s &lt; end)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_ENSURE_CHECK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s + (n) &lt;= end)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_ENSURE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (s + (n) &gt; end) goto fail</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSENT_END_POS</name></cpp:macro> <cpp:value>end</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CAPTURE_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_capture_history_tree</name><parameter_list>(<parameter><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>OnigStackType</name><modifier>*</modifier><modifier>*</modifier></type> <name>kp</name></decl></parameter>,
<parameter><decl><type><name>OnigStackType</name><modifier>*</modifier></type> <name>stk_top</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigStackType</name><modifier>*</modifier></type> <name>k</name> <init>= <expr><operator>*</operator><name>kp</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>stk_top</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STK_MEM_START</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <name>ONIG_MAX_CAPTURE_HISTORY_GROUP</name> <operator>&amp;&amp;</operator>
<call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>capture_history</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>history_node_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_NULL_RETURN_MEMERR</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name> <operator>-</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>history_tree_add_child</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>history_tree_free</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>make_capture_history_tree</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>kp</name></expr></argument>, <argument><expr><name>stk_top</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>*</operator><name>kp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name> <operator>-</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STK_MEM_END</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name> <operator>-</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BACKREF_WITH_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mem_is_in_memp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>memp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemNumType</name></type> <name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>memp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mem</name> <operator>==</operator> <operator>(</operator><name>int</name> <operator>)</operator><name>m</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>backref_match_at_nested_level</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>,
<parameter><decl><type><name>OnigStackType</name><modifier>*</modifier></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>OnigStackType</name><modifier>*</modifier></type> <name>stk_base</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ignore_case</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>case_fold_flag</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mem_num</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>memp</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>send</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>ss</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pstart</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name> <init>= <expr><name>NULL_UCHARP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigStackType</name><modifier>*</modifier></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>stk_base</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STK_CALL_FRAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STK_RETURN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>level</name> <operator>==</operator> <name>nest</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STK_MEM_START</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mem_is_in_memp</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>mem_num</name></expr></argument>, <argument><expr><name>memp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pend</name> <operator>!=</operator> <name>NULL_UCHARP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pend</name> <operator>-</operator> <name>pstart</name> <operator>&gt;</operator> <name>send</name> <operator>-</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pstart</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ss</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ignore_case</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>string_cmp_ic</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>,
<argument><expr><name>pstart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><name>pend</name> <operator>-</operator> <name>pstart</name></expr></argument>, <argument><expr><name>send</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <operator>*</operator><name>ss</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STK_MEM_END</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mem_is_in_memp</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>mem_num</name></expr></argument>, <argument><expr><name>memp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pend</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_STATISTICS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>LARGE_INTEGER</name></type> <name>ts</name></decl>, <decl><type ref="prev"/><name>te</name></decl>, <decl><type ref="prev"/><name>freq</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETTIME</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>QueryPerformanceCounter(&amp;(t))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEDIFF</name><parameter_list>(<parameter><type><name>te</name></type></parameter>,<parameter><type><name>ts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned long )(((te).QuadPart - (ts).QuadPart) * 1000000 / freq.QuadPart)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_TIMEOFDAY</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TIMEOFDAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>ts</name></decl>, <decl><type ref="prev"/><name>te</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETTIME</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gettimeofday(&amp;(t), (struct timezone* )0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEDIFF</name><parameter_list>(<parameter><type><name>te</name></type></parameter>,<parameter><type><name>ts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((te).tv_usec - (ts).tv_usec) + (((te).tv_sec - (ts).tv_sec)*1000000))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIMES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/times.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tms</name></name></type> <name>ts</name></decl>, <decl><type ref="prev"/><name>te</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETTIME</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>times(&amp;(t))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEDIFF</name><parameter_list>(<parameter><type><name>te</name></type></parameter>,<parameter><type><name>ts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((te).tms_utime - (ts).tms_utime)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>OpCounter</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>OpPrevCounter</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>OpTime</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>OpCurr</name> <init>= <expr><name>OP_FINISH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>OpPrevTarget</name> <init>= <expr><name>OP_FAIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>MaxStackDepth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOP_IN</name><parameter_list>(<parameter><type><name>opcode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (opcode == OpPrevTarget) OpPrevCounter[OpCurr]++;OpCurr = opcode;OpCounter[opcode]++;GETTIME(ts);} while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOP_OUT</name></cpp:macro> <cpp:value>do {GETTIME(te);OpTime[OpCurr] += TIMEDIFF(te, ts);} while(0)</cpp:value></cpp:define>




<function><type><specifier>extern</specifier> <name>void</name></type>
<name>onig_statistics_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>OpCounter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>OpPrevCounter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>OpTime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>MaxStackDepth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>onig_print_statistics</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" count prev time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>OnigOpInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%8d: %8d: %10lu: %s\n"</literal></expr></argument>,
<argument><expr><name><name>OpCounter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>OpPrevCounter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>OpTime</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>OnigOpInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\nmax stack depth: %d\n"</literal></expr></argument>, <argument><expr><name>MaxStackDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_INC</name></cpp:macro> <cpp:value>do {stk++;if (stk - stk_base &gt; MaxStackDepth) MaxStackDepth = stk - stk_base;} while(0)</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_INC</name></cpp:macro> <cpp:value>stk++</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOP_IN</name><parameter_list>(<parameter><type><name>opcode</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOP_OUT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>stack_type_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stack_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>stack_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STK_ALT</name></expr>:</case> <return>return <expr><literal type="string">"Alt "</literal></expr>;</return>
<case>case <expr><name>STK_LOOK_BEHIND_NOT</name></expr>:</case> <return>return <expr><literal type="string">"LBNot "</literal></expr>;</return>
<case>case <expr><name>STK_POS_NOT</name></expr>:</case> <return>return <expr><literal type="string">"PosNot"</literal></expr>;</return>
<case>case <expr><name>STK_MEM_START</name></expr>:</case> <return>return <expr><literal type="string">"MemS "</literal></expr>;</return>
<case>case <expr><name>STK_MEM_END</name></expr>:</case> <return>return <expr><literal type="string">"MemE "</literal></expr>;</return>
<case>case <expr><name>STK_REPEAT_INC</name></expr>:</case> <return>return <expr><literal type="string">"RepInc"</literal></expr>;</return>
<case>case <expr><name>STK_STATE_CHECK_MARK</name></expr>:</case> <return>return <expr><literal type="string">"StChMk"</literal></expr>;</return>
<case>case <expr><name>STK_NULL_CHECK_START</name></expr>:</case> <return>return <expr><literal type="string">"NulChS"</literal></expr>;</return>
<case>case <expr><name>STK_NULL_CHECK_END</name></expr>:</case> <return>return <expr><literal type="string">"NulChE"</literal></expr>;</return>
<case>case <expr><name>STK_MEM_END_MARK</name></expr>:</case> <return>return <expr><literal type="string">"MemEMk"</literal></expr>;</return>
<case>case <expr><name>STK_POS</name></expr>:</case> <return>return <expr><literal type="string">"Pos "</literal></expr>;</return>
<case>case <expr><name>STK_STOP_BT</name></expr>:</case> <return>return <expr><literal type="string">"StopBt"</literal></expr>;</return>
<case>case <expr><name>STK_REPEAT</name></expr>:</case> <return>return <expr><literal type="string">"Rep "</literal></expr>;</return>
<case>case <expr><name>STK_CALL_FRAME</name></expr>:</case> <return>return <expr><literal type="string">"Call "</literal></expr>;</return>
<case>case <expr><name>STK_RETURN</name></expr>:</case> <return>return <expr><literal type="string">"Ret "</literal></expr>;</return>
<case>case <expr><name>STK_VOID</name></expr>:</case> <return>return <expr><literal type="string">"Void "</literal></expr>;</return>
<case>case <expr><name>STK_ABSENT_POS</name></expr>:</case> <return>return <expr><literal type="string">"AbsPos"</literal></expr>;</return>
<case>case <expr><name>STK_ABSENT</name></expr>:</case> <return>return <expr><literal type="string">"Absent"</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">" "</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>OnigPosition</name></type>
<name>match_at</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MATCH_RANGE_MUST_BE_INSIDE_OF_SPECIFIED_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>right_range</name></decl></parameter>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>sstart</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>sprev</name></decl></parameter>, <parameter><decl><type><name>OnigMatchArg</name><modifier>*</modifier></type> <name>msa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UChar</name></type> <name><name>FinishCode</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>OP_FINISH</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_mem</name></decl>, <decl><type ref="prev"/><name>pop_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>best_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LengthType</name></type> <name>tlen</name></decl>, <decl><type ref="prev"/><name>tlen2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemNumType</name></type> <name>mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelAddrType</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigOptionType</name></type> <name>option</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigEncoding</name></type> <name>encode</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCaseFoldType</name></type> <name>case_fold_flag</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>case_fold_flag</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sbegin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pkeep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alloca_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xmalloc_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigStackType</name> <modifier>*</modifier></type><name>stk_alloc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>stk_base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>stk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>stk_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigStackType</name> <modifier>*</modifier></type><name>stkp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OnigStackIndex</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigStackIndex</name> <modifier>*</modifier></type><name>repeat_stk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigStackIndex</name> <modifier>*</modifier></type><name>mem_start_stk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mem_end_stk</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>scv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>state_check_buff</name> <init>= <expr><name><name>msa</name><operator>-&gt;</operator><name>state_check_buff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_comb_exp_check</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>num_comb_exp_check</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TOKEN_THREADED_VM</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_OFFSET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VM_LOOP</name></cpp:macro> <cpp:value>JUMP;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VM_LOOP_END</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>L_##x: sbegin = s; OPCODE_EXEC_HOOK;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT</name></cpp:macro> <cpp:value>L_DEFAULT:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name></cpp:macro> <cpp:value>sprev = sbegin; JUMP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP</name></cpp:macro> <cpp:value>RB_GNUC_EXTENSION_BLOCK(goto *oplabels[*p++])</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RB_GNUC_EXTENSION</name> <specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>oplabels</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>&amp;&amp;</operator><name>L_OP_FINISH</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_END</name></expr>, 

<expr><operator>&amp;&amp;</operator><name>L_OP_EXACT1</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACT2</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACT3</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACT4</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACT5</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACTN</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACTMB2N1</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACTMB2N2</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACTMB2N3</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACTMB2N</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACTMB3N</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACTMBN</name></expr>, 

<expr><operator>&amp;&amp;</operator><name>L_OP_EXACT1_IC</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_EXACTN_IC</name></expr>, 

<expr><operator>&amp;&amp;</operator><name>L_OP_CCLASS</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_CCLASS_MB</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_CCLASS_MIX</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_CCLASS_NOT</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_CCLASS_MB_NOT</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_CCLASS_MIX_NOT</name></expr>,

<expr><operator>&amp;&amp;</operator><name>L_OP_ANYCHAR</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_ANYCHAR_ML</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_ANYCHAR_STAR</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_ANYCHAR_ML_STAR</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_ANYCHAR_STAR_PEEK_NEXT</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_ANYCHAR_ML_STAR_PEEK_NEXT</name></expr>,

<expr><operator>&amp;&amp;</operator><name>L_OP_WORD</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_NOT_WORD</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_WORD_BOUND</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_NOT_WORD_BOUND</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WORD_BEGIN_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_WORD_BEGIN</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_WORD_END</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>&amp;&amp;</operator><name>L_OP_ASCII_WORD</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_NOT_ASCII_WORD</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_ASCII_WORD_BOUND</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_NOT_ASCII_WORD_BOUND</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WORD_BEGIN_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_ASCII_WORD_BEGIN</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_ASCII_WORD_END</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>&amp;&amp;</operator><name>L_OP_BEGIN_BUF</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_END_BUF</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_BEGIN_LINE</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_END_LINE</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_SEMI_END_BUF</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_BEGIN_POSITION</name></expr>,

<expr><operator>&amp;&amp;</operator><name>L_OP_BACKREF1</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_BACKREF2</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_BACKREFN</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_BACKREFN_IC</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_BACKREF_MULTI</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_BACKREF_MULTI_IC</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BACKREF_WITH_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_BACKREF_WITH_LEVEL</name></expr>, 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>&amp;&amp;</operator><name>L_OP_MEMORY_START</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_MEMORY_START_PUSH</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_MEMORY_END_PUSH</name></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_MEMORY_END_PUSH_REC</name></expr>, 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>&amp;&amp;</operator><name>L_OP_MEMORY_END</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_MEMORY_END_REC</name></expr>, 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>&amp;&amp;</operator><name>L_OP_KEEP</name></expr>,

<expr><operator>&amp;&amp;</operator><name>L_OP_FAIL</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_JUMP</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_PUSH</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_POP</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OP_PUSH_OR_JUMP_EXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_PUSH_OR_JUMP_EXACT1</name></expr>, 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>&amp;&amp;</operator><name>L_OP_PUSH_IF_PEEK_NEXT</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_REPEAT</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_REPEAT_NG</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_REPEAT_INC</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_REPEAT_INC_NG</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_REPEAT_INC_SG</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_REPEAT_INC_NG_SG</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_NULL_CHECK_START</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_NULL_CHECK_END</name></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MONOMANIAC_CHECK_CAPTURES_IN_ENDLESS_REPEAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_NULL_CHECK_END_MEMST</name></expr>, 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_NULL_CHECK_END_MEMST_PUSH</name></expr>, 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>&amp;&amp;</operator><name>L_OP_PUSH_POS</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_POP_POS</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_PUSH_POS_NOT</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_FAIL_POS</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_PUSH_STOP_BT</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_POP_STOP_BT</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_LOOK_BEHIND</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_PUSH_LOOK_BEHIND_NOT</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_FAIL_LOOK_BEHIND_NOT</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_PUSH_ABSENT_POS</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_ABSENT</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_ABSENT_END</name></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_CALL</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_RETURN</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>&amp;&amp;</operator><name>L_OP_CONDITION</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_STATE_CHECK_PUSH</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_STATE_CHECK_PUSH_OR_JUMP</name></expr>, 
<expr><operator>&amp;&amp;</operator><name>L_OP_STATE_CHECK</name></expr>, 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;&amp;</operator><name>L_OP_STATE_CHECK_ANYCHAR_STAR</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_OP_STATE_CHECK_ANYCHAR_ML_STAR</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
&amp;&amp;L_OP_SET_OPTION_PUSH, 
&amp;&amp;L_OP_SET_OPTION 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>,
<expr><operator>&amp;&amp;</operator><name>L_DEFAULT</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_OFFSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VM_LOOP</name></cpp:macro> <cpp:value>while (1) { OPCODE_EXEC_HOOK; sbegin = s; switch (*p++) {</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VM_LOOP_END</name></cpp:macro> <cpp:value>} sprev = sbegin; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case x:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT</name></cpp:macro> <cpp:value>default:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name></cpp:macro> <cpp:value>break</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP</name></cpp:macro> <cpp:value>continue; break</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_NUMMEM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_NUMMEM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>num_repeat</name></name> <operator>+</operator> <operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>num_mem</name></name> <operator>+</operator> <name>ADD_NUMMEM</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>alloca_base</name></expr></argument>, <argument><expr><name>xmalloc_base</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>INIT_MATCH_STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pop_level</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>stack_pop_level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_mem</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>num_mem</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>repeat_stk</name> <operator>=</operator> <operator>(</operator><name>OnigStackIndex</name><operator>*</operator> <operator>)</operator><name>alloca_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mem_start_stk</name> <operator>=</operator> <operator>(</operator><name>OnigStackIndex</name><operator>*</operator> <operator>)</operator><operator>(</operator><name>repeat_stk</name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>num_repeat</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mem_end_stk</name> <operator>=</operator> <name>mem_start_stk</name> <operator>+</operator> <operator>(</operator><name>num_mem</name> <operator>+</operator> <name>ADD_NUMMEM</name><operator>)</operator></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>OnigStackIndex</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>mem_start_stk</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>pp</name> <operator>&lt;</operator> <name>repeat_stk</name> <operator>+</operator> <name>n</name></expr>;</condition> <incr><expr><name>pp</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>INVALID_STACK_INDEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>INVALID_STACK_INDEX</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>mem_start_stk</name><operator>--</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>mem_end_stk</name><operator>--</operator></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"match_at: str: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), end: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), start: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), sprev: %"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>end</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>sstart</name></expr></argument>, <argument><expr><name>sstart</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>sprev</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"size: %d, start offset: %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>sstart</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n ofs&gt; str stk:type addr:opcode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>STACK_PUSH_ENSURED</name><argument_list>(<argument><expr><name>STK_ALT</name></expr></argument>, <argument><expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>FinishCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>best_len</name> <operator>=</operator> <name>ONIG_MISMATCH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>sstart</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pkeep</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>sstart</name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCODE_EXEC_HOOK</name></cpp:macro> <cpp:value>if (s) { UChar *op, *q, *bp, buf[50]; int len; op = p - OP_OFFSET; fprintf(stderr, "%4"PRIdPTR"&gt; \"", (*op == OP_FINISH) ? (ptrdiff_t )-1 : s - str); bp = buf; q = s; if (*op != OP_FINISH) { for (i = 0; i &lt; 7 &amp;&amp; q &lt; end; i++) { len = enclen(encode, q, end); while (len-- &gt; 0) *bp++ = *q++; } if (q &lt; end) { xmemcpy(bp, "...", 3); bp += 3; } } xmemcpy(bp, "\"", 1); bp += 1; *bp = 0; fputs((char* )buf, stderr); for (i = 0; i &lt; 20 - (bp - buf); i++) fputc(' ', stderr); fprintf(stderr, "%4"PRIdPTR":%s %4"PRIdPTR":", stk - stk_base - 1, (stk &gt; stk_base) ? stack_type_str(stk[-1].type) : " ", (op == FinishCode) ? (ptrdiff_t )-1 : op - reg-&gt;p); onig_print_compiled_byte_code(stderr, op, reg-&gt;p+reg-&gt;used, NULL, encode); fprintf(stderr, "\n"); }</cpp:value></cpp:define>

























<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCODE_EXEC_HOOK</name></cpp:macro> <cpp:value>((void) 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<macro><name>VM_LOOP</name></macro> <block>{<block_content>
<macro><name>CASE</name><argument_list>(<argument>OP_END</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>sstart</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>best_len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IS_FIND_LONGEST</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>msa</name><operator>-&gt;</operator><name>best_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msa</name><operator>-&gt;</operator><name>best_len</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msa</name><operator>-&gt;</operator><name>best_s</name></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>sstart</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>end_best_len</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>best_len</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>region</name> <operator>=</operator> <name><name>msa</name><operator>-&gt;</operator><name>region</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>region</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>pkeep</name> <operator>&gt;</operator> <name>s</name><operator>)</operator></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><name>pkeep</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>str</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_mem</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mem_end_stk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>INVALID_STACK_INDEX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_start</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>STACK_AT</name><argument_list>(<argument><expr><name><name>mem_start_stk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name> <operator>-</operator> <name>str</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>mem_start_stk</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <name>str</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>end</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_end</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>STACK_AT</name><argument_list>(<argument><expr><name><name>mem_end_stk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>
</then><else>: <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>mem_end_stk</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>beg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>end</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ONIG_REGION_NOTPOS</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CAPTURE_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>capture_history</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigCaptureTreeNode</name><modifier>*</modifier></type> <name>node</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>history_root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>history_root</name></name> <operator>=</operator> <name>node</name> <operator>=</operator> <call><name>history_node_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_NULL_RETURN_MEMERR</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>history_root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>history_tree_clear</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>pkeep</name> <operator>&gt;</operator> <name>s</name><operator>)</operator></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><name>pkeep</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stkp</name> <operator>=</operator> <name>stk_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>make_capture_history_tree</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>history_root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stkp</name></expr></argument>,
<argument><expr><name>stk</name></expr></argument>, <argument><expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_len</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt> 
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if></if_stmt> 
</block_content>}</block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>end_best_len</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_FIND_CONDITION</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_FIND_NOT_EMPTY</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>s</name> <operator>==</operator> <name>sstart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_len</name> <operator>=</operator> <name>ONIG_MISMATCH</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_FIND_LONGEST</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>DATA_ENSURE_CHECK1</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<goto>goto <name>finish</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACT1</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACT1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACT1_IC</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACT1_IC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"/><name><name>lowbuf</name><index>[<expr><name>ONIGENC_MBC_CASE_FOLD_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ONIGENC_MBC_CASE_FOLD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>,

<argument><expr><name>case_fold_flag</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>lowbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>lowbuf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>q</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACT2</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACT2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACT3</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACT3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACT4</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACT4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACT5</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACT5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACTN</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACTN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tlen</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACTN_IC</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACTN_IC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>, <decl><type ref="prev"/><name><name>lowbuf</name><index>[<expr><name>ONIGENC_MBC_CASE_FOLD_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>tlen</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>endp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ONIGENC_MBC_CASE_FOLD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>,

<argument><expr><name>case_fold_flag</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>lowbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>lowbuf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
</block_content>}</block>

<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACTMB2N1</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACTMB2N1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACTMB2N2</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACTMB2N2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACTMB2N3</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACTMB2N3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACTMB2N</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACTMB2N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>tlen</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tlen</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACTMB3N</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACTMB3N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>tlen</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tlen</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_EXACTMBN</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_EXACTMBN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>tlen2</name> <operator>*=</operator> <name>tlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>tlen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tlen2</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>tlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_CCLASS</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_CCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BITSET_AT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>BitSetRef</name> <operator>)</operator><name>p</name><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>SIZE_BITSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_CCLASS_MB</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_CCLASS_MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ONIGENC_IS_MBC_HEAD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<label><name>cclass_mb</name>:</label>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>mb_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ss</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>mb_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UNALIGNED_WORD_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>onig_is_in_code_range</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALIGNMENT_RIGHT</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>onig_is_in_code_range</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>tlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_CCLASS_MIX</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_CCLASS_MIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_HEAD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>SIZE_BITSET</name></expr>;</expr_stmt>
<goto>goto <name>cclass_mb</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BITSET_AT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>BitSetRef</name> <operator>)</operator><name>p</name><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>SIZE_BITSET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>tlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_CCLASS_NOT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_CCLASS_NOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BITSET_AT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>BitSetRef</name> <operator>)</operator><name>p</name><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>SIZE_BITSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_CCLASS_MB_NOT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_CCLASS_MB_NOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ONIGENC_IS_MBC_HEAD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>tlen</name></expr>;</expr_stmt>
<goto>goto <name>cc_mb_not_success</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>cclass_mb_not</name>:</label>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>OnigCodePoint</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_len</name> <init>= <expr><call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>DATA_ENSURE_CHECK</name><argument_list>(<argument><expr><name>mb_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>tlen</name></expr>;</expr_stmt>
<goto>goto <name>cc_mb_not_success</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>mb_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ONIGENC_MBC_TO_CODE</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UNALIGNED_WORD_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>onig_is_in_code_range</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALIGNMENT_RIGHT</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>onig_is_in_code_range</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>tlen</name></expr>;</expr_stmt>

<label><name>cc_mb_not_success</name>:</label>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_CCLASS_MIX_NOT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_CCLASS_MIX_NOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_HEAD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>SIZE_BITSET</name></expr>;</expr_stmt>
<goto>goto <name>cclass_mb_not</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BITSET_AT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>BitSetRef</name> <operator>)</operator><name>p</name><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>SIZE_BITSET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>tlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ANYCHAR</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ANYCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ANYCHAR_ML</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ANYCHAR_ML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ANYCHAR_STAR</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ANYCHAR_STAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>DATA_ENSURE_CHECK1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ANYCHAR_ML_STAR</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ANYCHAR_ML_STAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>DATA_ENSURE_CHECK1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ANYCHAR_STAR_PEEK_NEXT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ANYCHAR_STAR_PEEK_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>DATA_ENSURE_CHECK1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ANYCHAR_ML_STAR_PEEK_NEXT</argument>)</argument_list></macro><expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ANYCHAR_ML_STAR_PEEK_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>DATA_ENSURE_CHECK1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CASE</name><argument_list>(<argument>OP_STATE_CHECK_ANYCHAR_STAR</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_STATE_CHECK_ANYCHAR_STAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_STATE_CHECK_NUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>DATA_ENSURE_CHECK1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STATE_CHECK_VAL</name><argument_list>(<argument><expr><name>scv</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scv</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STACK_PUSH_ALT_WITH_STATE_CHECK</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_STATE_CHECK_ANYCHAR_ML_STAR</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_STATE_CHECK_ANYCHAR_ML_STAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_STATE_CHECK_NUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>DATA_ENSURE_CHECK1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STATE_CHECK_VAL</name><argument_list>(<argument><expr><name>scv</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scv</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STACK_PUSH_ALT_WITH_STATE_CHECK</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<macro><name>CASE</name><argument_list>(<argument>OP_WORD</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ASCII_WORD</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ASCII_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_NOT_WORD</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_NOT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_NOT_ASCII_WORD</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_NOT_ASCII_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_WORD_BOUND</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_WORD_BOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call>
<operator>==</operator> <call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ASCII_WORD_BOUND</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ASCII_WORD_BOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call>
<operator>==</operator> <call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_NOT_WORD_BOUND</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_NOT_WORD_BOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>DATA_ENSURE_CHECK1</name> <operator>&amp;&amp;</operator> <call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_NOT_ASCII_WORD_BOUND</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_NOT_ASCII_WORD_BOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>DATA_ENSURE_CHECK1</name> <operator>&amp;&amp;</operator> <call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WORD_BEGIN_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CASE</name><argument_list>(<argument>OP_WORD_BEGIN</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_WORD_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>DATA_ENSURE_CHECK1</name> <operator>&amp;&amp;</operator> <call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ASCII_WORD_BEGIN</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ASCII_WORD_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>DATA_ENSURE_CHECK1</name> <operator>&amp;&amp;</operator> <call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_WORD_END</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_WORD_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ONIGENC_IS_MBC_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ASCII_WORD_END</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ASCII_WORD_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ONIGENC_IS_MBC_ASCII_WORD</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>CASE</name><argument_list>(<argument>OP_BEGIN_BUF</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_BEGIN_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NOTBOS</name><argument_list>(<argument><expr><name><name>msa</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_END_BUF</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_END_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ON_STR_END</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NOTEOS</name><argument_list>(<argument><expr><name><name>msa</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_BEGIN_LINE</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_BEGIN_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_NOTBOL</name><argument_list>(<argument><expr><name><name>msa</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_MBC_NEWLINE</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRNL_AS_LINE_TERMINATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>IS_NEWLINE_CRLF</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>ONIGENC_IS_MBC_CRNL</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_END_LINE</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_END_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>IS_EMPTY_STR</name> <operator>||</operator> <operator>!</operator><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>IS_NOTEOL</name><argument_list>(<argument><expr><name><name>msa</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_SEMI_END_BUF</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_SEMI_END_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>IS_EMPTY_STR</name> <operator>||</operator> <operator>!</operator><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>IS_NOTEOL</name><argument_list>(<argument><expr><name><name>msa</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>ss</name> <init>= <expr><name>s</name> <operator>+</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRNL_AS_LINE_TERMINATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IS_NEWLINE_CRLF</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>ONIGENC_IS_MBC_CRNL</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ss</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_BEGIN_POSITION</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_BEGIN_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name><name>msa</name><operator>-&gt;</operator><name>gpos</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_MEMORY_START_PUSH</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_MEMORY_START_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_MEM_START</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_MEMORY_START</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_MEMORY_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigStackIndex</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name>s</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>=</operator> <name>INVALID_STACK_INDEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_MEMORY_END_PUSH</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_MEMORY_END_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_MEM_END</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_MEMORY_END</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_MEMORY_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigStackIndex</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name>s</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_KEEP</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_KEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pkeep</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CASE</name><argument_list>(<argument>OP_MEMORY_END_PUSH_REC</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_MEMORY_END_PUSH_REC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_GET_MEM_START</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>stkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STACK_PUSH_MEM_END</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>=</operator> <call><name>GET_STACK_INDEX</name><argument_list>(<argument><expr><name>stkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_MEMORY_END_REC</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_MEMORY_END_REC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigStackIndex</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name>s</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_GET_MEM_START</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>stkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_start</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>=</operator> <call><name>GET_STACK_INDEX</name><argument_list>(<argument><expr><name>stkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OnigStackIndex</name> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STACK_PUSH_MEM_END_MARK</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>CASE</name><argument_list>(<argument>OP_BACKREF1</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_BACKREF1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mem</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>backref</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_BACKREF2</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_BACKREF2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mem</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>backref</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_BACKREFN</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_BACKREFN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>backref</name>:</label>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pstart</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>mem</name> <operator>&gt;</operator> <name>num_mem</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>==</operator> <name>INVALID_STACK_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>==</operator> <name>INVALID_STACK_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_start</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pstart</name> <operator>=</operator> <call><name>STACK_AT</name><argument_list>(<argument><expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pstart</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_end</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>STACK_AT</name><argument_list>(<argument><expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>
</then><else>: <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>pend</name> <operator>-</operator> <name>pstart</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_CMP</name><argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>sprev</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sprev</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>CASE</name><argument_list>(<argument>OP_BACKREFN_IC</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_BACKREFN_IC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pstart</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>mem</name> <operator>&gt;</operator> <name>num_mem</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>==</operator> <name>INVALID_STACK_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>==</operator> <name>INVALID_STACK_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_start</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pstart</name> <operator>=</operator> <call><name>STACK_AT</name><argument_list>(<argument><expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pstart</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_end</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>STACK_AT</name><argument_list>(<argument><expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>
</then><else>: <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>pend</name> <operator>-</operator> <name>pstart</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_CMP_IC</name><argument_list>(<argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>pstart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>sprev</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sprev</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_BACKREF_MULTI</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_BACKREF_MULTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>is_fail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pstart</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>swork</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>==</operator> <name>INVALID_STACK_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>==</operator> <name>INVALID_STACK_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_start</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pstart</name> <operator>=</operator> <call><name>STACK_AT</name><argument_list>(<argument><expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pstart</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_end</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>STACK_AT</name><argument_list>(<argument><expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>
</then><else>: <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>pend</name> <operator>-</operator> <name>pstart</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>swork</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_CMP_VALUE</name><argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>swork</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>is_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_fail</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>swork</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>sprev</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sprev</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>SIZE_MEMNUM</name> <operator>*</operator> <operator>(</operator><name>tlen</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>tlen</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_BACKREF_MULTI_IC</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_BACKREF_MULTI_IC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>is_fail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>pstart</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>swork</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>==</operator> <name>INVALID_STACK_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>==</operator> <name>INVALID_STACK_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_start</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pstart</name> <operator>=</operator> <call><name>STACK_AT</name><argument_list>(<argument><expr><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pstart</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>bt_mem_end</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>STACK_AT</name><argument_list>(<argument><expr><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>mem</name><operator>.</operator><name>pstr</name></name></expr>
</then><else>: <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>pend</name> <operator>-</operator> <name>pstart</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>swork</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_CMP_VALUE_IC</name><argument_list>(<argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>pstart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>swork</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>is_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_fail</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>swork</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>sprev</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sprev</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>SIZE_MEMNUM</name> <operator>*</operator> <operator>(</operator><name>tlen</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>tlen</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BACKREF_WITH_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CASE</name><argument_list>(<argument>OP_BACKREF_WITH_LEVEL</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigOptionType</name></type> <name>ic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LengthType</name></type> <name>level</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_OPTION_INC</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>backref_match_at_nested_level</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>, <argument><expr><name>stk_base</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>,
<argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>level</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>sprev</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sprev</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>SIZE_MEMNUM</name> <operator>*</operator> <name>tlen</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></else></if_stmt>

<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
CASE(OP_SET_OPTION_PUSH) MOP_IN(OP_SET_OPTION_PUSH);
GET_OPTION_INC(option, p);
STACK_PUSH_ALT(p, s, sprev, pkeep);
p += SIZE_OP_SET_OPTION + SIZE_OP_FAIL;
MOP_OUT;
JUMP;

CASE(OP_SET_OPTION) MOP_IN(OP_SET_OPTION);
GET_OPTION_INC(option, p);
MOP_OUT;
JUMP;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>CASE</name><argument_list>(<argument>OP_NULL_CHECK_START</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_NULL_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STACK_PUSH_NULL_CHECK_START</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_NULL_CHECK_END</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_NULL_CHECK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>isnull</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STACK_NULL_CHECK</name><argument_list>(<argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NULL_CHECK_END: skip id:%d, s:%"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>mem</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>null_check_found</name>:</label>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OP_JUMP</name></expr>:</case>
<case>case <expr><name>OP_PUSH</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>SIZE_RELADDR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP_REPEAT_INC</name></expr>:</case>
<case>case <expr><name>OP_REPEAT_INC_NG</name></expr>:</case>
<case>case <expr><name>OP_REPEAT_INC_SG</name></expr>:</case>
<case>case <expr><name>OP_REPEAT_INC_NG_SG</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>SIZE_MEMNUM</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>unexpected_bytecode_error</name>;</goto>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MONOMANIAC_CHECK_CAPTURES_IN_ENDLESS_REPEAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CASE</name><argument_list>(<argument>OP_NULL_CHECK_END_MEMST</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_NULL_CHECK_END_MEMST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>isnull</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STACK_NULL_CHECK_MEMST</name><argument_list>(<argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NULL_CHECK_END_MEMST: skip id:%d, s:%"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>mem</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>isnull</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>null_check_found</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CASE</name><argument_list>(<argument>OP_NULL_CHECK_END_MEMST_PUSH</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_NULL_CHECK_END_MEMST_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>isnull</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MONOMANIAC_CHECK_CAPTURES_IN_ENDLESS_REPEAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>STACK_NULL_CHECK_MEMST_REC</name><argument_list>(<argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>STACK_NULL_CHECK_REC</name><argument_list>(<argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NULL_CHECK_END_MEMST_PUSH: skip id:%d, s:%"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>mem</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>isnull</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>null_check_found</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_NULL_CHECK_END</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>CASE</name><argument_list>(<argument>OP_JUMP</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CHECK_INTERRUPT_IN_MATCH_AT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_PUSH</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CASE</name><argument_list>(<argument>OP_STATE_CHECK_PUSH</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_STATE_CHECK_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_STATE_CHECK_NUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STATE_CHECK_VAL</name><argument_list>(<argument><expr><name>scv</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scv</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_ALT_WITH_STATE_CHECK</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_STATE_CHECK_PUSH_OR_JUMP</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_STATE_CHECK_PUSH_OR_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_STATE_CHECK_NUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STATE_CHECK_VAL</name><argument_list>(<argument><expr><name>scv</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_ALT_WITH_STATE_CHECK</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_STATE_CHECK</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_STATE_CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_STATE_CHECK_NUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STATE_CHECK_VAL</name><argument_list>(<argument><expr><name>scv</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scv</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STACK_PUSH_STATE_CHECK</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<macro><name>CASE</name><argument_list>(<argument>OP_POP</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_POP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>STACK_POP_ONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OP_PUSH_OR_JUMP_EXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CASE</name><argument_list>(<argument>OP_PUSH_OR_JUMP_EXACT1</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_PUSH_OR_JUMP_EXACT1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <name>DATA_ENSURE_CHECK1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>CASE</name><argument_list>(<argument>OP_PUSH_IF_PEEK_NEXT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_PUSH_IF_PEEK_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_REPEAT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STACK_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>repeat_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>=</operator> <call><name>GET_STACK_INDEX</name><argument_list>(<argument><expr><name>stk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_REPEAT</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>repeat_range</name><index>[<expr><name>mem</name></expr>]</index></name><operator>.</operator><name>lower</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_REPEAT_NG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_REPEAT_NG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STACK_ENSURE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>repeat_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>=</operator> <call><name>GET_STACK_INDEX</name><argument_list>(<argument><expr><name>stk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_REPEAT</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>repeat_range</name><index>[<expr><name>mem</name></expr>]</index></name><operator>.</operator><name>lower</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_REPEAT_INC</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_REPEAT_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>si</name> <operator>=</operator> <name><name>repeat_stk</name><index>[<expr><name>mem</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stkp</name> <operator>=</operator> <call><name>STACK_AT</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>repeat_inc</name>:</label>
<expr_stmt><expr><name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>reg</name><operator>-&gt;</operator><name>repeat_range</name><index>[<expr><name>mem</name></expr>]</index></name><operator>.</operator><name>upper</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>reg</name><operator>-&gt;</operator><name>repeat_range</name><index>[<expr><name>mem</name></expr>]</index></name><operator>.</operator><name>lower</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>STACK_AT</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>pcode</name></name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>pcode</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_REPEAT_INC</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CHECK_INTERRUPT_IN_MATCH_AT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_REPEAT_INC_SG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_REPEAT_INC_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STACK_GET_REPEAT</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>stkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>GET_STACK_INDEX</name><argument_list>(<argument><expr><name>stkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>repeat_inc</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_REPEAT_INC_NG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_REPEAT_INC_NG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>si</name> <operator>=</operator> <name><name>repeat_stk</name><index>[<expr><name>mem</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stkp</name> <operator>=</operator> <call><name>STACK_AT</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>repeat_inc_ng</name>:</label>
<expr_stmt><expr><name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>count</name></name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>repeat_range</name><index>[<expr><name>mem</name></expr>]</index></name><operator>.</operator><name>upper</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>reg</name><operator>-&gt;</operator><name>repeat_range</name><index>[<expr><name>mem</name></expr>]</index></name><operator>.</operator><name>lower</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>pcode</name> <init>= <expr><name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>pcode</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_PUSH_REPEAT_INC</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>pcode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>pcode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_REPEAT_INC</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>repeat</name><operator>.</operator><name>count</name></name> <operator>==</operator> <name><name>reg</name><operator>-&gt;</operator><name>repeat_range</name><index>[<expr><name>mem</name></expr>]</index></name><operator>.</operator><name>upper</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_REPEAT_INC</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CHECK_INTERRUPT_IN_MATCH_AT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_REPEAT_INC_NG_SG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_REPEAT_INC_NG_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STACK_GET_REPEAT</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>stkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>GET_STACK_INDEX</name><argument_list>(<argument><expr><name>stkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>repeat_inc_ng</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_PUSH_POS</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_PUSH_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_POS</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_POP_POS</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_POP_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>STACK_POS_END</name><argument_list>(<argument><expr><name>stkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>state</name><operator>.</operator><name>pstr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name><name>stkp</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>state</name><operator>.</operator><name>pstr_prev</name></name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_PUSH_POS_NOT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_PUSH_POS_NOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_POS_NOT</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_FAIL_POS</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_FAIL_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>STACK_POP_TIL_POS_NOT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_PUSH_STOP_BT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_PUSH_STOP_BT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>STACK_PUSH_STOP_BT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_POP_STOP_BT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_POP_STOP_BT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>STACK_STOP_BT_END</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_LOOK_BEHIND</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_LOOK_BEHIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><call><name>ONIGENC_STEP_BACK</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_PUSH_LOOK_BEHIND_NOT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_PUSH_LOOK_BEHIND_NOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LENGTH_INC</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><call><name>ONIGENC_STEP_BACK</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_LOOK_BEHIND_NOT</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_FAIL_LOOK_BEHIND_NOT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_FAIL_LOOK_BEHIND_NOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>STACK_POP_TIL_LOOK_BEHIND_NOT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_PUSH_ABSENT_POS</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_PUSH_ABSENT_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STACK_PUSH_ABSENT_POS</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ABSENT_END_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ABSENT</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ABSENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>aend</name> <init>= <expr><name>ABSENT_END_POS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>absent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>selfp</name> <init>= <expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_POP_ABSENT_POS</name><argument_list>(<argument><expr><name>absent</name></expr></argument>, <argument><expr><name>ABSENT_END_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ABSENT: s:%p, end:%p, absent:%p, aend:%p\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>absent</name></expr></argument>, <argument><expr><name>aend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>absent</name> <operator>&gt;</operator> <name>aend</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>&gt;</operator> <name>absent</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>STACK_POP</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>s</name> <operator>&gt;=</operator> <name>aend</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>&gt;</operator> <name>absent</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>aend</name></expr>)</condition> <block>{<block_content>


<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DATA_ENSURE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sprev</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_ABSENT_POS</name><argument_list>(<argument><expr><name>absent</name></expr></argument>, <argument><expr><name>ABSENT_END_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STACK_PUSH_ALT</name><argument_list>(<argument><expr><name>selfp</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>STACK_PUSH_ABSENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ABSENT_END_POS</name> <operator>=</operator> <name>aend</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_ABSENT_END</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_ABSENT_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>sprev</name> <operator>&lt;</operator> <name>ABSENT_END_POS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ABSENT_END_POS</name> <operator>=</operator> <name>sprev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_MATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ABSENT_END: end:%p\n"</literal></expr></argument>, <argument><expr><name>ABSENT_END_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>STACK_POP_TIL_ABSENT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUBEXP_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CASE</name><argument_list>(<argument>OP_CALL</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ABSADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH_CALL_FRAME</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_RETURN</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_RETURN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>STACK_PUSH_RETURN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>CASE</name><argument_list>(<argument>OP_CONDITION</argument>)</argument_list></macro> <expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_CONDITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_MEMNUM_INC</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_RELADDR_INC</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mem</name> <operator>&gt;</operator> <name>num_mem</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>mem_end_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>==</operator> <name>INVALID_STACK_INDEX</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>mem_start_stk</name><index>[<expr><name>mem</name></expr>]</index></name> <operator>==</operator> <name>INVALID_STACK_INDEX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_FINISH</argument>)</argument_list></macro>
<goto>goto <name>finish</name>;</goto>
<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

<macro><name>CASE</name><argument_list>(<argument>OP_FAIL</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<label><name>fail</name>:</label>
<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MOP_IN</name><argument_list>(<argument><expr><name>OP_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>STACK_POP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>stk</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>state</name><operator>.</operator><name>pcode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>stk</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>state</name><operator>.</operator><name>pstr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sprev</name> <operator>=</operator> <name><name>stk</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>state</name><operator>.</operator><name>pstr_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pkeep</name> <operator>=</operator> <name><name>stk</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>state</name><operator>.</operator><name>pkeep</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>stk</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>state</name><operator>.</operator><name>state_check</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stk</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STK_STATE_CHECK_MARK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stk</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>MOP_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>JUMP</name></expr>;</expr_stmt>

<macro><name>DEFAULT</name></macro>
<goto>goto <name>bytecode_error</name>;</goto>
</block_content>}</block> <decl_stmt><decl><type><name>VM_LOOP_END</name></type>

<name>finish</name><range>:
<expr><name>STACK_SAVE</name></expr></range></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>xmalloc_base</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>xmalloc_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>best_len</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>stack_error</name>:</label>
<expr_stmt><expr><name>STACK_SAVE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xmalloc_base</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>xmalloc_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ONIGERR_STACK_BUG</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>bytecode_error</name>:</label>
<expr_stmt><expr><name>STACK_SAVE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xmalloc_base</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>xmalloc_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ONIGERR_UNDEFINED_BYTECODE</name></expr>;</return>

<label><name>unexpected_bytecode_error</name>:</label>
<expr_stmt><expr><name>STACK_SAVE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xmalloc_base</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>xmalloc_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ONIGERR_UNEXPECTED_BYTECODE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>slow_search</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>text_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>-=</operator> <name>target_end</name> <operator>-</operator> <name>target</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>text_range</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_range</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>text</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>max_enc_len</name></name> <operator>==</operator> <name><name>enc</name><operator>-&gt;</operator><name>min_enc_len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>max_enc_len</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <operator>*</operator><name>target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>target</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target_end</name> <operator>==</operator> <name>t</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>target_end</name> <operator>-</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <operator>*</operator><name>target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>target</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target_end</name> <operator>==</operator> <name>t</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>target_end</name> <operator>-</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>str_lower_case_match</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>case_fold_flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>tend</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lowlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"/><name><name>lowbuf</name><index>[<expr><name>ONIGENC_MBC_CASE_FOLD_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>tend</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lowlen</name> <operator>=</operator> <call><name>ONIGENC_MBC_CASE_FOLD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>lowbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>lowbuf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>lowlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name><operator>++</operator> <operator>!=</operator> <operator>*</operator><name>q</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lowlen</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>slow_search_ic</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>case_fold_flag</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>text_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>-=</operator> <name>target_end</name> <operator>-</operator> <name>target</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>text_range</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_range</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>text</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>str_lower_case_match</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>slow_search_backward</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>adjust_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>text_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>-=</operator> <operator>(</operator><name>target_end</name> <operator>-</operator> <name>target</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>text_start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>text_start</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>adjust_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>text</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <operator>*</operator><name>target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>target</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>target_end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>!=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>target_end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>adjust_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>slow_search_backward_ic</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>case_fold_flag</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>adjust_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>text_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>-=</operator> <operator>(</operator><name>target_end</name> <operator>-</operator> <name>target</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>text_start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>text_start</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>adjust_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>text</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>str_lower_case_match</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>,
<argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>adjust_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SUNDAY_QUICK_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>bm_search_notrev</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>se</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>skip</name></decl>, <decl><type ref="prev"/><name>tlen1</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bm_search_notrev: text: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_end: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_range: %"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_end</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_range</name></expr></argument>, <argument><expr><name>text_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>target_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tlen1</name> <operator>=</operator> <name>tail</name> <operator>-</operator> <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_range</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>+</operator> <name>tlen1</name> <operator>&gt;</operator> <name>text_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_end</name> <operator>-</operator> <name>tlen1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>int_map</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>se</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>t</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>map</name><index>[<expr><operator>*</operator><name>se</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>s</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&lt;</operator> <name>skip</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_EXACT_MAXLEN</name> <operator>&gt;=</operator> <name>ONIG_CHAR_TABLE_SIZE</name></expr></cpp:if>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>se</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>t</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>int_map</name><index>[<expr><operator>*</operator><name>se</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>s</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&lt;</operator> <name>skip</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>bm_search</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bm_search: text: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_end: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_range: %"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_end</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_range</name></expr></argument>, <argument><expr><name>text_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_range</name> <operator>+</operator> <operator>(</operator><name>target_end</name> <operator>-</operator> <name>target</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>text_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>target_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>text</name> <operator>+</operator> <operator>(</operator><name>target_end</name> <operator>-</operator> <name>target</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>int_map</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bm_search_loop: pos: %"</literal><name>PRIdPTR</name><literal type="string">" %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intptr_t</name> <operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>text</name><operator>)</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>t</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>map</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_EXACT_MAXLEN</name> <operator>&gt;=</operator> <name>ONIG_CHAR_TABLE_SIZE</name></expr></cpp:if>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>t</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>int_map</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>bm_search_notrev_ic</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>se</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>skip</name></decl>, <decl><type ref="prev"/><name>tlen1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigEncoding</name></type> <name>enc</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>case_fold_flag</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>case_fold_flag</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bm_search_notrev_ic: text: %d (%p), text_end: %d (%p), text_range: %d (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>text_end</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>text_range</name></expr></argument>, <argument><expr><name>text_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>target_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tlen1</name> <operator>=</operator> <name>tail</name> <operator>-</operator> <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_range</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>+</operator> <name>tlen1</name> <operator>&gt;</operator> <name>text_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_end</name> <operator>-</operator> <name>tlen1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>int_map</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>se</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>str_lower_case_match</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>se</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>map</name><index>[<expr><operator>*</operator><name>se</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>s</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&lt;</operator> <name>skip</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_EXACT_MAXLEN</name> <operator>&gt;=</operator> <name>ONIG_CHAR_TABLE_SIZE</name></expr></cpp:if>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>se</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>str_lower_case_match</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>se</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>int_map</name><index>[<expr><operator>*</operator><name>se</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>s</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&lt;</operator> <name>skip</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>bm_search_ic</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigEncoding</name></type> <name>enc</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>case_fold_flag</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>case_fold_flag</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bm_search_ic: text: %d (%p), text_end: %d (%p), text_range: %d (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>text_end</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><name>text_range</name></expr></argument>, <argument><expr><name>text_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_range</name> <operator>+</operator> <operator>(</operator><name>target_end</name> <operator>-</operator> <name>target</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>text_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>target_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>text</name> <operator>+</operator> <operator>(</operator><name>target_end</name> <operator>-</operator> <name>target</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>int_map</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>-</operator> <operator>(</operator><name>target_end</name> <operator>-</operator> <name>target</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>str_lower_case_match</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>map</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_EXACT_MAXLEN</name> <operator>&gt;=</operator> <name>ONIG_CHAR_TABLE_SIZE</name></expr></cpp:if>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>-</operator> <operator>(</operator><name>target_end</name> <operator>-</operator> <name>target</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>str_lower_case_match</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>int_map</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 


<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>bm_search_notrev</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>se</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>skip</name></decl>, <decl><type ref="prev"/><name>tlen1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigEncoding</name></type> <name>enc</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bm_search_notrev: text: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_end: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_range: %"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_end</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_range</name></expr></argument>, <argument><expr><name>text_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>target_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tlen1</name> <operator>=</operator> <name>tail</name> <operator>-</operator> <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_range</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>+</operator> <name>tlen1</name> <operator>&gt;</operator> <name>text_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_end</name> <operator>-</operator> <name>tlen1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>int_map</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>se</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>t</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>se</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>s</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&lt;</operator> <name>skip</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_EXACT_MAXLEN</name> <operator>&gt;=</operator> <name>ONIG_CHAR_TABLE_SIZE</name></expr></cpp:if>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>se</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>t</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>int_map</name><index>[<expr><name><name>se</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>s</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&lt;</operator> <name>skip</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>bm_search</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>tlen1</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bm_search: text: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_end: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_range: %"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_end</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_range</name></expr></argument>, <argument><expr><name>text_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>target_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tlen1</name> <operator>=</operator> <name>tail</name> <operator>-</operator> <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_range</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>text_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>text</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>int_map</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>t</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_EXACT_MAXLEN</name> <operator>&gt;=</operator> <name>ONIG_CHAR_TABLE_SIZE</name></expr></cpp:if>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>t</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>int_map</name><index>[<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>bm_search_notrev_ic</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>se</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>skip</name></decl>, <decl><type ref="prev"/><name>tlen1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigEncoding</name></type> <name>enc</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>case_fold_flag</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>case_fold_flag</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bm_search_notrev_ic: text: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_end: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_range: %"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_end</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_range</name></expr></argument>, <argument><expr><name>text_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>target_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tlen1</name> <operator>=</operator> <name>tail</name> <operator>-</operator> <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_range</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>+</operator> <name>tlen1</name> <operator>&gt;</operator> <name>text_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_end</name> <operator>-</operator> <name>tlen1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>int_map</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>se</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>str_lower_case_match</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>se</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>se</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>s</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&lt;</operator> <name>skip</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_EXACT_MAXLEN</name> <operator>&gt;=</operator> <name>ONIG_CHAR_TABLE_SIZE</name></expr></cpp:if>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>se</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>str_lower_case_match</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>se</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>int_map</name><index>[<expr><name><name>se</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>s</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&lt;</operator> <name>skip</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>bm_search_ic</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>tlen1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigEncoding</name></type> <name>enc</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>case_fold_flag</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>case_fold_flag</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bm_search_ic: text: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_end: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), text_range: %"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_end</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>text_range</name></expr></argument>, <argument><expr><name>text_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>target_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tlen1</name> <operator>=</operator> <name>tail</name> <operator>-</operator> <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_range</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>text_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text_end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>text</name> <operator>+</operator> <name>tlen1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>int_map</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>tlen1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>str_lower_case_match</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_EXACT_MAXLEN</name> <operator>&gt;=</operator> <name>ONIG_CHAR_TABLE_SIZE</name></expr></cpp:if>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>tlen1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>str_lower_case_match</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>case_fold_flag</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>int_map</name><index>[<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INT_MAP_BACKWARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_bm_backward_skip</name><parameter_list>(<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name> <name>enc</name></type> <name>ARG_UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier><modifier>*</modifier></type> <name>skip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><operator>*</operator><name>skip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>skip</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator> <operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ONIG_CHAR_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><operator>*</operator><name>skip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ONIGERR_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ONIG_CHAR_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>skip</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>skip</name><operator>)</operator><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>bm_search_backward</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>target_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>adjust_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>text_end</name> <operator>-</operator> <operator>(</operator><name>target_end</name> <operator>-</operator> <name>target</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>text_start</name> <operator>&lt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>text_start</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>adjust_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>text</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>target_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>target_end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>-=</operator> <name><name>reg</name><operator>-&gt;</operator><name>int_map_backward</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>adjust_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>map_search</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>UChar</name></type> <name><name>map</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_range</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>text</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>text_range</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>map</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UChar</name><modifier>*</modifier></type>
<name>map_search_backward</name><parameter_list>(<parameter><decl><type><name>OnigEncoding</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>UChar</name></type> <name><name>map</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>adjust_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>text_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>text_start</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>text</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>map</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>adjust_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigPosition</name></type>
<name>onig_match</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>,
<parameter><decl><type><name>OnigOptionType</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigMatchArg</name></type> <name>msa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MATCH_ARG_INIT</name><argument_list>(<argument><expr><name>msa</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>at</name> <operator>-</operator> <name>str</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STATE_CHECK_BUFF_INIT</name><argument_list>(<argument><expr><name>msa</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>str</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>num_comb_exp_check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>region</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>onig_region_resize_clear</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>num_mem</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>match_at</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MATCH_RANGE_MUST_BE_INSIDE_OF_SPECIFIED_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>end</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>at</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_ARG_FREE</name><argument_list>(<argument><expr><name>msa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>forward_search_range</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>low_prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pprev</name> <init>= <expr><operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"forward_search_range: str: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), end: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), s: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), range: %"</literal><name>PRIuPTR</name><literal type="string">" (%p)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>end</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>range</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>dmin</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_SINGLEBYTE</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmin</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>p</name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmin</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>q</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>retry</name>:</label>
<switch>switch <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>optimize</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ONIG_OPTIMIZE_EXACT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>slow_search</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact_end</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ONIG_OPTIMIZE_EXACT_IC</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>slow_search_ic</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>case_fold_flag</name></name></expr></argument>,
<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact_end</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ONIG_OPTIMIZE_EXACT_BM</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>bm_search</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact_end</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ONIG_OPTIMIZE_EXACT_BM_NOT_REV</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>bm_search_notrev</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact_end</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ONIG_OPTIMIZE_EXACT_BM_IC</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>bm_search_ic</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact_end</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ONIG_OPTIMIZE_EXACT_BM_NOT_REV_IC</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>bm_search_notrev_ic</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact_end</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ONIG_OPTIMIZE_MAP</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>map_search</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>range</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmin</name></name> <operator>&lt;</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<label><name>retry_gate</name>:</label>
<expr_stmt><expr><name>pprev</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>sub_anchor</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>sub_anchor</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ANCHOR_BEGIN_LINE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>pprev</name></expr> ?</condition><then> <expr><name>pprev</name></expr> </then><else>: <expr><name>str</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry_gate</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ANCHOR_END_LINE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>pprev</name></expr> ?</condition><then> <expr><name>pprev</name></expr> </then><else>: <expr><name>str</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&amp;&amp;</operator> <call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry_gate</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator> <call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry_gate</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>low</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>low_prev</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>low</name> <operator>&gt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>low_prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>low_prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>pprev</name></expr> ?</condition><then> <expr><name>pprev</name></expr> </then><else>: <expr><name>str</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name> <operator>!=</operator> <name>ONIG_INFINITE_DISTANCE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>str</name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>low</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>str</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>low_prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>low_prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>low</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>low</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>low</name> <operator>&gt;</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>low</name> <operator>=</operator> <call><name>onigenc_get_right_adjust_char_head_with_prev</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><operator>*</operator><name>low</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>UChar</name><operator>*</operator><operator>*</operator> <operator>)</operator><name>low_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>low_prev</name> <operator>&amp;&amp;</operator> <call><name>IS_NULL</name><argument_list>(<argument><expr><operator>*</operator><name>low_prev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>low_prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>pprev</name></expr> ?</condition><then> <expr><name>pprev</name></expr> </then><else>: <expr><name>s</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>low</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>low_prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>low_prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>pprev</name></expr> ?</condition><then> <expr><name>pprev</name></expr> </then><else>: <expr><name>str</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>low</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>high</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmin</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"forward_search_range success: low: %"</literal><name>PRIdPTR</name><literal type="string">", high: %"</literal><name>PRIdPTR</name><literal type="string">", dmin: %"</literal><name>PRIdPTR</name><literal type="string">", dmax: %"</literal><name>PRIdPTR</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>low</name> <operator>-</operator> <name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>high</name> <operator>-</operator> <name>str</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>dmin</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BM_BACKWARD_SEARCH_LENGTH_THRESHOLD</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>backward_search_range</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier></type> <name>adjrange</name></decl></parameter>,
<parameter><decl><type><name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>UChar</name><modifier>*</modifier><modifier>*</modifier></type> <name>high</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>range</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<label><name>retry</name>:</label>
<switch>switch <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>optimize</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ONIG_OPTIMIZE_EXACT</name></expr>:</case>
<label><name>exact_method</name>:</label>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>slow_search_backward</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact_end</name></name></expr></argument>,
<argument><expr><name>range</name></expr></argument>, <argument><expr><name>adjrange</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ONIG_OPTIMIZE_EXACT_IC</name></expr>:</case>
<case>case <expr><name>ONIG_OPTIMIZE_EXACT_BM_IC</name></expr>:</case>
<case>case <expr><name>ONIG_OPTIMIZE_EXACT_BM_NOT_REV_IC</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>slow_search_backward_ic</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>case_fold_flag</name></name></expr></argument>,
<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact_end</name></name></expr></argument>,
<argument><expr><name>range</name></expr></argument>, <argument><expr><name>adjrange</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ONIG_OPTIMIZE_EXACT_BM</name></expr>:</case>
<case>case <expr><name>ONIG_OPTIMIZE_EXACT_BM_NOT_REV</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INT_MAP_BACKWARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>int_map_backward</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>-</operator> <name>range</name> <operator>&lt;</operator> <name>BM_BACKWARD_SEARCH_LENGTH_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exact_method</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>set_bm_backward_skip</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact_end</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>int_map_backward</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>bm_search_backward</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>exact_end</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>adjrange</name></expr></argument>,
<argument><expr><name>end</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<goto>goto <name>exact_method</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>ONIG_OPTIMIZE_MAP</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>map_search_backward</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>adjrange</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>sub_anchor</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>sub_anchor</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ANCHOR_BEGIN_LINE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ON_STR_BEGIN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ANCHOR_END_LINE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ON_STR_END</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>adjrange</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator> <call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>adjrange</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NULL</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name> <operator>!=</operator> <name>ONIG_INFINITE_DISTANCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>low</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>high</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>high</name> <operator>=</operator> <call><name>onigenc_get_right_adjust_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>adjrange</name></expr></argument>, <argument><expr><operator>*</operator><name>high</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"backward_search_range: low: %d, high: %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>low</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><operator>*</operator><name>high</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"backward_search_range: fail.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>


<function><type><specifier>extern</specifier> <name>OnigPosition</name></type>
<name>onig_search</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>, <parameter><decl><type><name>OnigOptionType</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>onig_search_gpos</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigPosition</name></type>
<name>onig_search_gpos</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>global_pos</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>, <parameter><decl><type><name>OnigOptionType</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigMatchArg</name></type> <name>msa</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MATCH_RANGE_MUST_BE_INSIDE_OF_SPECIFIED_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>orig_start</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>orig_range</name> <init>= <expr><name>range</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"onig_search (entry point): str: %"</literal><name>PRIuPTR</name><literal type="string">" (%p), end: %"</literal><name>PRIuPTR</name><literal type="string">", start: %"</literal><name>PRIuPTR</name><literal type="string">", range: %"</literal><name>PRIuPTR</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name> <operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>str</name></expr></argument>, <argument><expr><name>start</name> <operator>-</operator> <name>str</name></expr></argument>, <argument><expr><name>range</name> <operator>-</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>region</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>onig_region_resize_clear</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>num_mem</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>finish_no_msa</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name> <operator>||</operator> <name>start</name> <operator>&lt;</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mismatch_no_msa</name>;</goto></block_content></block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MATCH_RANGE_MUST_BE_INSIDE_OF_SPECIFIED_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_AND_RETURN_CHECK</name><parameter_list>(<parameter><type><name>upper_range</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r = match_at(reg, str, end, (upper_range), s, prev, &amp;msa); if (r != ONIG_MISMATCH) {if (r &gt;= 0) {if (! IS_FIND_LONGEST(reg-&gt;options)) {goto match;}}else goto finish; }</cpp:value></cpp:define>









<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_AND_RETURN_CHECK</name><parameter_list>(<parameter><type><name>upper_range</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r = match_at(reg, str, end, (upper_range), s, prev, &amp;msa); if (r != ONIG_MISMATCH) {if (r &gt;= 0) {goto match;}else goto finish; }</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_AND_RETURN_CHECK</name><parameter_list>(<parameter><type><name>none</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r = match_at(reg, str, end, s, prev, &amp;msa);if (r != ONIG_MISMATCH) {if (r &gt;= 0) {if (! IS_FIND_LONGEST(reg-&gt;options)) {goto match;}}else goto finish; }</cpp:value></cpp:define>









<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_AND_RETURN_CHECK</name><parameter_list>(<parameter><type><name>none</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r = match_at(reg, str, end, s, prev, &amp;msa);if (r != ONIG_MISMATCH) {if (r &gt;= 0) {goto match;}else goto finish; }</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>anchor</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>str</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>min_semi_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>max_semi_end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>anchor</name></name> <operator>&amp;</operator> <name>ANCHOR_BEGIN_POSITION</name></expr>)</condition> <block>{<block_content>

<label><name>begin_position</name>:</label>
<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&gt;</operator> <name>start</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>global_pos</name> <operator>&gt;</operator> <name>start</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>global_pos</name> <operator>&lt;</operator> <name>range</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>global_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>anchor</name></name> <operator>&amp;</operator> <name>ANCHOR_BEGIN_BUF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mismatch_no_msa</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&lt;=</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>mismatch_no_msa</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>anchor</name></name> <operator>&amp;</operator> <name>ANCHOR_END_BUF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_semi_end</name> <operator>=</operator> <name>max_semi_end</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>end</name></expr>;</expr_stmt>

<label><name>end_buf</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>OnigDistance</name> <operator>)</operator><operator>(</operator><name>max_semi_end</name> <operator>-</operator> <name>str</name><operator>)</operator> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>anchor_dmin</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>mismatch_no_msa</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>OnigDistance</name> <operator>)</operator><operator>(</operator><name>min_semi_end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&gt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>anchor_dmax</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>min_semi_end</name> <operator>-</operator> <name><name>reg</name><operator>-&gt;</operator><name>anchor_dmax</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>onigenc_get_right_adjust_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>OnigDistance</name> <operator>)</operator><operator>(</operator><name>max_semi_end</name> <operator>-</operator> <operator>(</operator><name>range</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>anchor_dmin</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>max_semi_end</name> <operator>-</operator> <name><name>reg</name><operator>-&gt;</operator><name>anchor_dmin</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>range</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mismatch_no_msa</name>;</goto></block_content></block></if></if_stmt>


</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>OnigDistance</name> <operator>)</operator><operator>(</operator><name>min_semi_end</name> <operator>-</operator> <name>range</name><operator>)</operator> <operator>&gt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>anchor_dmax</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>min_semi_end</name> <operator>-</operator> <name><name>reg</name><operator>-&gt;</operator><name>anchor_dmax</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>OnigDistance</name> <operator>)</operator><operator>(</operator><name>max_semi_end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>anchor_dmin</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>max_semi_end</name> <operator>-</operator> <name><name>reg</name><operator>-&gt;</operator><name>anchor_dmin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&gt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mismatch_no_msa</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>anchor</name></name> <operator>&amp;</operator> <name>ANCHOR_SEMI_END_BUF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UChar</name><modifier>*</modifier></type> <name>pre_end</name> <init>= <expr><call><name>ONIGENC_STEP_BACK</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_semi_end</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>end</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ONIGENC_IS_MBC_NEWLINE</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>pre_end</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_semi_end</name> <operator>=</operator> <name>pre_end</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRNL_AS_LINE_TERMINATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pre_end</name> <operator>=</operator> <call><name>ONIGENC_STEP_BACK</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>pre_end</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NOT_NULL</name><argument_list>(<argument><expr><name>pre_end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>IS_NEWLINE_CRLF</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ONIGENC_IS_MBC_CRNL</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>pre_end</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_semi_end</name> <operator>=</operator> <name>pre_end</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>min_semi_end</name> <operator>&gt;</operator> <name>str</name> <operator>&amp;&amp;</operator> <name>start</name> <operator>&lt;=</operator> <name>min_semi_end</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>end_buf</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>min_semi_end</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>end</name></expr>;</expr_stmt>
<goto>goto <name>end_buf</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>anchor</name></name> <operator>&amp;</operator> <name>ANCHOR_ANYCHAR_STAR_ML</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>begin_position</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>str</name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UChar</name></type> <name><name>address_for_empty_string</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"onig_search: empty string.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>threshold_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name> <operator>=</operator> <name>str</name> <operator>=</operator> <name>address_for_empty_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_ARG_INIT</name><argument_list>(<argument><expr><name>msa</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>msa</name><operator>.</operator><name>state_check_buff</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator> <operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msa</name><operator>.</operator><name>state_check_buff_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>MATCH_AND_RETURN_CHECK</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>mismatch</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>mismatch_no_msa</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"onig_search(apply anchor): end: %d, start: %d, range: %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>start</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>)</operator><operator>(</operator><name>range</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MATCH_ARG_INIT</name><argument_list>(<argument><expr><name>msa</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>global_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_COMBINATION_EXPLOSION_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><call><name>MIN</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>str</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STATE_CHECK_BUFF_INIT</name><argument_list>(<argument><expr><name>msa</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>str</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>num_comb_exp_check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>optimize</name></name> <operator>!=</operator> <name>ONIG_OPTIMIZE_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>sch_range</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>low</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>high</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>low_prev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sch_range</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>range</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name> <operator>==</operator> <name>ONIG_INFINITE_DISTANCE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sch_range</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>end</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sch_range</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sch_range</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sch_range</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>threshold_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>mismatch</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name> <operator>!=</operator> <name>ONIG_INFINITE_DISTANCE</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>forward_search_range</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sch_range</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>low</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>low_prev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mismatch</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>low</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>low_prev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>high</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MATCH_AND_RETURN_CHECK</name><argument_list>(<argument><expr><name>orig_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>range</name></expr>)</condition>;</do>
<goto>goto <name>mismatch</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>forward_search_range</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sch_range</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>low</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>, <argument><expr><operator>(</operator><name>UChar</name><operator>*</operator><operator>*</operator> <operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mismatch</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>anchor</name></name> <operator>&amp;</operator> <name>ANCHOR_ANYCHAR_STAR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>MATCH_AND_RETURN_CHECK</name><argument_list>(<argument><expr><name>orig_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>anchor</name></name> <operator>&amp;</operator> <operator>(</operator><name>ANCHOR_LOOK_BEHIND</name> <operator>|</operator> <name>ANCHOR_PREC_READ_NOT</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>ONIGENC_IS_MBC_NEWLINE_EX</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>range</name></expr>)</condition>;</do>
<goto>goto <name>mismatch</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>MATCH_AND_RETURN_CHECK</name><argument_list>(<argument><expr><name>orig_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>range</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>range</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>MATCH_AND_RETURN_CHECK</name><argument_list>(<argument><expr><name>orig_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>optimize</name></name> <operator>!=</operator> <name>ONIG_OPTIMIZE_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>low</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>high</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>adjrange</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sch_start</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>adjrange</name> <operator>=</operator> <call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>adjrange</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>end</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name> <operator>!=</operator> <name>ONIG_INFINITE_DISTANCE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>end</name> <operator>-</operator> <name>range</name><operator>)</operator> <operator>&gt;=</operator> <name><name>reg</name><operator>-&gt;</operator><name>threshold_len</name></name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>sch_start</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sch_start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sch_start</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>backward_search_range</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>sch_start</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>adjrange</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>low</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>mismatch</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>high</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>high</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>low</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH_AND_RETURN_CHECK</name><argument_list>(<argument><expr><name>orig_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>range</name></expr>)</condition>;</do>
<goto>goto <name>mismatch</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>-</operator> <name>range</name><operator>)</operator> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>threshold_len</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mismatch</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sch_start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name> <operator>==</operator> <name>ONIG_INFINITE_DISTANCE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sch_start</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>end</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sch_start</name> <operator>+=</operator> <name><name>reg</name><operator>-&gt;</operator><name>dmax</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sch_start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sch_start</name> <operator>=</operator> <operator>(</operator><name>UChar</name><operator>*</operator> <operator>)</operator><name>end</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sch_start</name> <operator>=</operator> <call><name>ONIGENC_LEFT_ADJUST_CHAR_HEAD</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>,
<argument><expr><name>start</name></expr></argument>, <argument><expr><name>sch_start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>backward_search_range</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>sch_start</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>adjrange</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>low</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mismatch</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>onigenc_get_prev_char_head</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH_AND_RETURN_CHECK</name><argument_list>(<argument><expr><name>orig_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>range</name></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>

<label><name>mismatch</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IS_FIND_LONGEST</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msa</name><operator>.</operator><name>best_len</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>msa</name><operator>.</operator><name>best_s</name></name></expr>;</expr_stmt>
<goto>goto <name>match</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ONIG_MISMATCH</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
<expr_stmt><expr><call><name>MATCH_ARG_FREE</name><argument_list>(<argument><expr><name>msa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>IS_FIND_NOT_EMPTY</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>region</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>onig_region_clear</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ONIG_MISMATCH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"onig_search: error %"</literal><name>PRIdPTRDIFF</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>r</name></expr>;</return>

<label><name>mismatch_no_msa</name>:</label>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ONIG_MISMATCH</name></expr>;</expr_stmt>
<label><name>finish_no_msa</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ONIG_MISMATCH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"onig_search: error %"</literal><name>PRIdPTRDIFF</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>r</name></expr>;</return>

<label><name>match</name>:</label>
<expr_stmt><expr><call><name>MATCH_ARG_FREE</name><argument_list>(<argument><expr><name>msa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name> <operator>-</operator> <name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigPosition</name></type>
<name>onig_scan</name><parameter_list>(<parameter><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>, <parameter><decl><type><name>OnigOptionType</name></type> <name>option</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>scan_callback</name>)<parameter_list>(<parameter><decl><type><name>OnigPosition</name></type></decl></parameter>, <parameter><decl><type><name>OnigPosition</name></type></decl></parameter>, <parameter><decl><type><name>OnigRegion</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>callback_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OnigPosition</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OnigPosition</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name><modifier>*</modifier></type> <name>start</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>onig_search</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rs</name> <operator>=</operator> <call><name>scan_callback</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>callback_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rs</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>start</name> <operator>-</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start</name> <operator>+=</operator> <call><name>enclen</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name><name>region</name><operator>-&gt;</operator><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <name>ONIG_MISMATCH</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigEncoding</name></type>
<name>onig_get_encoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>reg</name><operator>-&gt;</operator><name>enc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigOptionType</name></type>
<name>onig_get_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>reg</name><operator>-&gt;</operator><name>options</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>OnigCaseFoldType</name></type>
<name>onig_get_case_fold_flag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>reg</name><operator>-&gt;</operator><name>case_fold_flag</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <specifier>const</specifier> <name>OnigSyntaxType</name><modifier>*</modifier></type>
<name>onig_get_syntax</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>reg</name><operator>-&gt;</operator><name>syntax</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onig_number_of_captures</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>reg</name><operator>-&gt;</operator><name>num_mem</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>onig_number_of_capture_histories</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name><modifier>*</modifier></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CAPTURE_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ONIG_MAX_CAPTURE_HISTORY_GROUP</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BIT_STATUS_AT</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>capture_history</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>n</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>onig_copy_encoding</name><parameter_list>(<parameter><decl><type><name>OnigEncodingType</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>OnigEncoding</name></type> <name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <operator>*</operator><name>from</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
