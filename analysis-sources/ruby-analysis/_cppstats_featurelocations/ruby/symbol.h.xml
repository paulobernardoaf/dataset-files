<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\symbol.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_SYMBOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_SYMBOL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_ID_P</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(id&amp;ID_STATIC_SYM)&amp;&amp;id&gt;tLAST_OP_ID)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC_ID2SYM</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((VALUE)(id)&lt;&lt;RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CONSTANT_P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_id2sym</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) &amp;&amp; !DYNAMIC_ID_P(id) ? STATIC_ID2SYM(id) : rb_id2sym(id))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>RSymbol</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st_index_t</name></type> <name>hashval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>fstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSYMBOL</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RSymbol)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_notop_id</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((id)&gt;tLAST_OP_ID)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_local_id</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(id_type(id)==ID_LOCAL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_global_id</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(id_type(id)==ID_GLOBAL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_instance_id</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(id_type(id)==ID_INSTANCE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_attrset_id</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((id)==idASET||id_type(id)==ID_ATTRSET)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_const_id</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(id_type(id)==ID_CONST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_class_id</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(id_type(id)==ID_CLASS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_junk_id</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(id_type(id)==ID_JUNK)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>id_type</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_notop_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>id</name><operator>&amp;</operator><name>ID_SCOPE_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><name>uint32_t</name></type> <name>rb_id_serial_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>RB_ID_SERIAL_MAX</name> <init>= 
<expr><name>UINT32_MAX</name> <operator>&gt;&gt;</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rb_id_serial_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>*</operator><name>CHAR_BIT</name> <operator>&lt;</operator> <name>RUBY_ID_SCOPE_SHIFT</name></expr> ?</condition><then>
<expr><name>RUBY_ID_SCOPE_SHIFT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>rb_id_serial_t</name></type> <name>last_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st_table</name> <modifier>*</modifier></type><name>str_sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dsymbol_fstr_hash</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_symbols_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_id_serial_t</name></type>
<name>rb_id_to_serial</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_notop_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>rb_id_serial_t</name><operator>)</operator><operator>(</operator><name>id</name> <operator>&gt;&gt;</operator> <name>ID_SCOPE_SHIFT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>rb_id_serial_t</name><operator>)</operator><name>id</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>sym_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STATIC_SYM_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>RSHIFT</name><argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><name>RUBY_SPECIAL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name><operator>&lt;=</operator><name>tLAST_OP_ID</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>RSYMBOL</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>id</name><operator>&amp;</operator><name>ID_SCOPE_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_local_sym</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sym_type(sym)==ID_LOCAL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_global_sym</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sym_type(sym)==ID_GLOBAL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_instance_sym</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sym_type(sym)==ID_INSTANCE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_attrset_sym</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sym_type(sym)==ID_ATTRSET)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_const_sym</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sym_type(sym)==ID_CONST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_class_sym</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sym_type(sym)==ID_CLASS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_junk_sym</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sym_type(sym)==ID_JUNK)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RUBY_FUNC_EXPORTED</name> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>ruby_global_name_punct_bits</name><index>[<expr><operator>(</operator><literal type="number">0x7e</literal> <operator>-</operator> <literal type="number">0x20</literal> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>is_global_name_punct</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x20</literal> <operator>||</operator> <literal type="number">0x7e</literal> <operator>&lt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>ruby_global_name_punct_bits</name><index>[<expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>rb_enc_symname_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>allowed_attrset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>size_t</name></type> <name>rb_sym_immortal_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr><name>RUBY_SYMBOL_EXPORT_END</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
