<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\internal.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> not for C++</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIKELY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_LIKELY(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLIKELY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_UNLIKELY(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>numberof</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(sizeof(array) / sizeof((array)[0])))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>roomof</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + (y) - 1) / (y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>type_roomof</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>roomof(sizeof(x), sizeof(y))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCESS_ONCE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((volatile type *)&amp;(x)))</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>





<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Check_Type</name></cpp:undef>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RClass</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RCLASS_SUPER</name></cpp:undef>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NEWOBJ_OF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RB_NEWOBJ_OF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RB_OBJ_WRITE</name></cpp:undef>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RHASH_IFNONE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RHASH_SIZE</name></cpp:undef>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RSTRUCT_LEN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RSTRUCT_PTR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RSTRUCT_SET</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RSTRUCT_GET</name></cpp:undef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_ary_new_from_args</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_nonexistent_symbol(__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_io_fptr_finalize</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_nonexistent_symbol(__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_fstring_cstr</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_nonexistent_symbol(__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_sym_intern_ascii_cstr</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_nonexistent_symbol(__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_funcallv</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_nonexistent_symbol(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_method_basic_definition_p</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_nonexistent_symbol(__VA_ARGS__)</cpp:value></cpp:define>





<function_decl><type><name>void</name></type> <name>rb_obj_info_dump</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_obj_info_dump_loc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ruby_debug_breakpoint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void ruby_debug_printf(const char*, ...)</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rp</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_info_dump_loc((VALUE)(obj), __FILE__, __LINE__, RUBY_FUNCTION_NAME_STRING)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rp_m</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(stderr, "%s", (msg)); rb_obj_info_dump((VALUE)obj); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bp</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ruby_debug_breakpoint()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
