<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\internal\error.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERNAL_ERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL_ERROR_H</name></cpp:macro></cpp:define>









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stdbool.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/string.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/intern.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Check_Type</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Check_Type</name></cpp:undef> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>rb_raise_static</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_raise_static</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_sys_fail_path</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_syserr_fail_path</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_raise_static</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_raise_cstr_i((e), rb_str_new_static((m), rb_strlen_lit(m)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_FUNCTION_NAME_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_sys_fail_path</name><parameter_list>(<parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_sys_fail_path_in(RUBY_FUNCTION_NAME_STRING, path)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_syserr_fail_path</name><parameter_list>(<parameter><type><name>err</name></type></parameter>, <parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_syserr_fail_path_in(RUBY_FUNCTION_NAME_STRING, (err), (path))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_sys_fail_path</name><parameter_list>(<parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_sys_fail_str(path)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_syserr_fail_path</name><parameter_list>(<parameter><type><name>err</name></type></parameter>, <parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_syserr_fail_str((err), (path))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><enum>enum <block>{
<decl><name>RB_WARN_CATEGORY_NONE</name></decl>,
<decl><name>RB_WARN_CATEGORY_DEPRECATED</name></decl>,
<decl><name>RB_WARN_CATEGORY_EXPERIMENTAL</name></decl>,
}</block></enum></type> <name>rb_warning_category_t</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>VALUE</name></type> <name>rb_eEAGAIN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>VALUE</name></type> <name>rb_eEWOULDBLOCK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>VALUE</name></type> <name>rb_eEINPROGRESS</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>rb_report_bug_valist</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>NORETURN</name><argument_list>(<argument>void rb_async_bug_errno(const char *,int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_builtin_type_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_builtin_class_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void rb_warn_deprecated(const char *fmt, const char *suggest, ...)</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void rb_warn_deprecated_to_remove(const char *fmt, const char *removal, ...)</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>VALUE</name></type> <name>rb_syntax_error_append</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void rb_enc_warn(rb_encoding *enc, const char *fmt, ...)</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void rb_sys_enc_warning(rb_encoding *enc, const char *fmt, ...)</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void rb_syserr_enc_warning(int err, rb_encoding *enc, const char *fmt, ...)</argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>rb_warning_category_t</name></type> <name>rb_warning_category_from_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>category</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>rb_warning_category_enabled_p</name><parameter_list>(<parameter><decl><type><name>rb_warning_category_t</name></type> <name>category</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_name_err_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>mesg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>method</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_nomethod_err_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>mesg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_key_err_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>mesg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>PRINTF_ARGS</name><argument_list>(<argument>VALUE rb_warning_string(const char *fmt, ...)</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>void rb_vraise(VALUE, const char *, va_list)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>static inline void rb_raise_cstr(VALUE etype, const char *mesg)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>static inline void rb_raise_cstr_i(VALUE etype, VALUE mesg)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>static inline void rb_name_err_raise_str(VALUE mesg, VALUE recv, VALUE name)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>static inline void rb_name_err_raise(const char *mesg, VALUE recv, VALUE name)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>static inline void rb_key_err_raise(VALUE mesg, VALUE recv, VALUE name)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>Check_Type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ruby_value_type</name></name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>rb_typeddata_is_instance_of_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type><name>data_type</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_typeddata_is_instance_of</name></cpp:macro> <cpp:value>rb_typeddata_is_instance_of_inline</cpp:value></cpp:define>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>int</name></type> <name>rb_bug_reporter_add</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>NORETURN</name><argument_list>(<argument>void rb_unexpected_type(VALUE,int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_FUNCTION_NAME_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>NORETURN</name><argument_list>(<argument>void rb_sys_fail_path_in(const char *func_name, VALUE path)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>void rb_syserr_fail_path_in(const char *func_name, int err, VALUE path)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>RUBY_SYMBOL_EXPORT_END</name>

<specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rb_raise_cstr_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>etype</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>mesg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>exc</name> <init>= <expr><call><name>rb_exc_new_str</name><argument_list>(<argument><expr><name>etype</name></expr></argument>, <argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rb_raise_cstr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>etype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_raise_cstr_i</name><argument_list>(<argument><expr><name>etype</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rb_name_err_raise_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>mesg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>exc</name> <init>= <expr><call><name>rb_name_err_new</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><name>recv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rb_name_err_raise</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_fstring_cstr</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_name_err_raise_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>recv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rb_key_err_raise</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>mesg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>exc</name> <init>= <expr><call><name>rb_key_err_new</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><name>recv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>Check_Type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ruby_value_type</name></name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>unexpected</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>t</name> <operator>!=</operator> <name>T_DATA</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator> <call><name>RTYPEDDATA_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>unexpected</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return;</return>
</block_content>}</block></else></if_stmt>
<label><name>unexpected</name>:</label>
<expr_stmt><expr><call><name>rb_unexpected_type</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>rb_typeddata_is_instance_of_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type><name>data_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_DATA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RTYPEDDATA_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>RTYPEDDATA_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>data_type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
