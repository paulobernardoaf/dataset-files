<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\internal\bignum.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERNAL_BIGNUM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL_BIGNUM_H</name></cpp:macro></cpp:define>









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stdbool.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;=</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_BDIGIT</name></cpp:macro> <cpp:value>SIZEOF_INT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL</name></cpp:macro> <cpp:value>unsigned LONG_LONG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL_SIGNED</name></cpp:macro> <cpp:value>LONG_LONG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_DBL_PREFIX</name></cpp:macro> <cpp:value>PRI_LL_PREFIX</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_INT</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;=</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_BDIGIT</name></cpp:macro> <cpp:value>SIZEOF_INT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL_SIGNED</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_DBL_PREFIX</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SHORT</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;=</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT</name></cpp:macro> <cpp:value>unsigned short</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_BDIGIT</name></cpp:macro> <cpp:value>SIZEOF_SHORT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL_SIGNED</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_PREFIX</name></cpp:macro> <cpp:value>"h"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_DBL_PREFIX</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT</name></cpp:macro> <cpp:value>unsigned short</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_BDIGIT</name></cpp:macro> <cpp:value>(SIZEOF_LONG/2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_ACTUAL_BDIGIT</name></cpp:macro> <cpp:value>SIZEOF_LONG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL_SIGNED</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_PREFIX</name></cpp:macro> <cpp:value>"h"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_DBL_PREFIX</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIZEOF_ACTUAL_BDIGIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_ACTUAL_BDIGIT</name></cpp:macro> <cpp:value>SIZEOF_BDIGIT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRI_BDIGIT_PREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"d"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIiBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"i"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIoBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"o"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"u"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"x"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIXBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"X"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRI_BDIGIT_DBL_PREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"d"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIiBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"i"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIoBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"o"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"u"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"x"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIXBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"X"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBIGNUM</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RBignum)(obj))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_SIGN_BIT</name></cpp:macro> <cpp:value>FL_USER1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_EMBED_FLAG</name></cpp:macro> <cpp:value>((VALUE)FL_USER2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_EMBED_LEN_NUMBITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_EMBED_LEN_MASK</name></cpp:macro> <cpp:value>(~(~(VALUE)0U &lt;&lt; BIGNUM_EMBED_LEN_NUMBITS) &lt;&lt; BIGNUM_EMBED_LEN_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_EMBED_LEN_SHIFT</name></cpp:macro> <cpp:value>(FL_USHIFT+3)</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BIGNUM_EMBED_LEN_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_VALUE</name><operator>*</operator><name>RVALUE_EMBED_LEN_MAX</name><operator>/</operator><name>SIZEOF_ACTUAL_BDIGIT</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>BIGNUM_EMBED_LEN_NUMBITS</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_EMBED_LEN_MAX</name></cpp:macro> <cpp:value>(SIZEOF_VALUE*RVALUE_EMBED_LEN_MAX/SIZEOF_ACTUAL_BDIGIT)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_EMBED_LEN_MAX</name></cpp:macro> <cpp:value>((1 &lt;&lt; BIGNUM_EMBED_LEN_NUMBITS)-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>rb_int_parse_flags</name> <block>{
<decl><name>RB_INT_PARSE_SIGN</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>RB_INT_PARSE_UNDERSCORE</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>RB_INT_PARSE_PREFIX</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>RB_INT_PARSE_ALL</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,
<decl><name>RB_INT_PARSE_DEFAULT</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>RBignum</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name> <modifier>*</modifier></type><name>digits</name></decl>;</decl_stmt>
}</block> <decl><name>heap</name></decl>;</struct>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name><name>ary</name><index>[<expr><name>BIGNUM_EMBED_LEN_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>as</name></decl>;</union>
}</block>;</struct>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ruby_digitmap</name><index>[]</index></name></decl>;</decl_stmt>
<function_decl><type><name>double</name></type> <name>rb_big_fdiv_double</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_uminus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_hash</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_odd_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_even_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>rb_big_size</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_integer_float_cmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_integer_float_eq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_str_convert_to_inum</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>badcheck</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raise_exception</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_comp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_aref</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_abs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_size_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>big</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_bit_length</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>big</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_remainder</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_gt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_ge</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_lt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_le</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_powm</name><parameter_list>(<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <specifier>const</specifier></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>BIGNUM_SIGN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>BIGNUM_POSITIVE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>BIGNUM_NEGATIVE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BIGNUM_SET_SIGN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sign</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BIGNUM_NEGATE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>BIGNUM_LEN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>BDIGIT</name> <modifier>*</modifier></type><name>BIGNUM_DIGITS</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>BIGNUM_LENINT</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>BIGNUM_EMBED_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>VALUE</name></type> <name>rb_big_mul_normal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_mul_balance</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_mul_karatsuba</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_mul_toom3</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_sq_fast</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_divrem_normal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big2str_poweroftwo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big2str_generic</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_str2big_poweroftwo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>badcheck</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_str2big_normal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>badcheck</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_str2big_karatsuba</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>badcheck</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBGMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>VALUE</name></type> <name>rb_big_mul_gmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big_divrem_gmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_big2str_gmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_str2big_gmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>badcheck</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>VALUE</name></type> <name>rb_int_parse_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ndigits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RUBY_SYMBOL_EXPORT_END</name>

<name>MJIT_SYMBOL_EXPORT_BEGIN</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INT128_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>VALUE</name></type> <name>rb_int128t2big</name><parameter_list>(<parameter><decl><type><name>int128_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>MJIT_SYMBOL_EXPORT_END</name>


<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>BIGNUM_SIGN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>FL_TEST_RAW</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>BIGNUM_SIGN_BIT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>BIGNUM_POSITIVE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>BIGNUM_SIGN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>BIGNUM_NEGATIVE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator> <call><name>BIGNUM_POSITIVE_P</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>BIGNUM_SET_SIGN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FL_SET_RAW</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>BIGNUM_SIGN_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>FL_UNSET_RAW</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>BIGNUM_SIGN_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>BIGNUM_NEGATE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FL_REVERSE_RAW</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>BIGNUM_SIGN_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>BIGNUM_LEN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>BIGNUM_EMBED_P</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>RBIGNUM</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>len</name></name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <name>BIGNUM_EMBED_LEN_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>&gt;&gt;=</operator> <name>BIGNUM_EMBED_LEN_SHIFT</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>BIGNUM_LENINT</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_long2int</name><argument_list>(<argument><expr><call><name>BIGNUM_LEN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>BDIGIT</name> <modifier>*</modifier></type>
<name>BIGNUM_DIGITS</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BIGNUM_EMBED_P</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>RBIGNUM</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>ary</name></name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>RBIGNUM</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>digits</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>BIGNUM_EMBED_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>FL_TEST_RAW</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>BIGNUM_EMBED_FLAG</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
