<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\internal\variable.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERNAL_VARIABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL_VARIABLE_H</name></cpp:macro></cpp:define>









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constant.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stdbool.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROBJECT_TRANSIENT_FLAG</name></cpp:macro> <cpp:value>FL_USER13</cpp:value></cpp:define>

<struct_decl>struct <name>rb_global_variable</name>;</struct_decl> 

<struct>struct <name>rb_global_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>rb_global_variable</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>void</name></type> <name>rb_gc_mark_global_tbl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>rb_generic_ivar_memsize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_search_class_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_attr_delete</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_ivar_lookup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>undef</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_autoload_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>mod</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_autoload_at_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>NORETURN</name><argument_list>(<argument>VALUE rb_mod_const_missing(VALUE,VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>rb_gvar_getter_t</name> <modifier>*</modifier></type><name>rb_gvar_getter_function_of</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_global_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rb_gvar_setter_t</name> <modifier>*</modifier></type><name>rb_gvar_setter_function_of</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_global_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>rb_gvar_is_traced</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_global_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_gvar_readonly_setter</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>_</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ROBJ_TRANSIENT_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ROBJ_TRANSIENT_SET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ROBJ_TRANSIENT_UNSET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>void</name></type> <name>rb_mark_generic_ivar</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_mv_generic_ivar</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_const_missing</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_class_ivar_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>vid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_iv_tbl_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_deprecate_constant</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>mod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>RUBY_SYMBOL_EXPORT_END</name>

<name>MJIT_SYMBOL_EXPORT_BEGIN</name>
struct <name>rb_global_entry</name> <operator>*</operator><call><name>rb_global_entry</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>VALUE</name></type> <name>rb_gvar_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_global_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_gvar_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_global_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_gvar_defined</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_global_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>st_table</name></name> <modifier>*</modifier></type><name>rb_ivar_generic_ivtbl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_const_warn_if_deprecated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_const_entry_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>MJIT_SYMBOL_EXPORT_END</name>

<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>ROBJ_TRANSIENT_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>
<return>return <expr><call><name>FL_TEST_RAW</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ROBJECT_TRANSIENT_FLAG</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ROBJ_TRANSIENT_SET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>
<expr_stmt><expr><call><name>FL_SET_RAW</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ROBJECT_TRANSIENT_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ROBJ_TRANSIENT_UNSET</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>
<expr_stmt><expr><call><name>FL_UNSET_RAW</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ROBJECT_TRANSIENT_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
