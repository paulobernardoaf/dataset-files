<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\internal\vm.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERNAL_VM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL_VM_H</name></cpp:macro></cpp:define>









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/serial.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/static_assert.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stdbool.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/st.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>rb_funcallv</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_funcallv</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>rb_method_basic_definition_p</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_method_basic_definition_p</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHELINE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<struct_decl>struct <name>rb_callable_method_entry_struct</name>;</struct_decl> 
<struct_decl>struct <name>rb_method_definition_struct</name>;</struct_decl> 
<struct_decl>struct <name>rb_execution_context_struct</name>;</struct_decl> 
<struct_decl>struct <name>rb_control_frame_struct</name>;</struct_decl> 
<struct_decl>struct <name>rb_calling_info</name>;</struct_decl> 
<struct_decl>struct <name>rb_call_data</name>;</struct_decl>

<enum>enum <name>method_missing_reason</name> <block>{
<decl><name>MISSING_NOENTRY</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>MISSING_PRIVATE</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>MISSING_PROTECTED</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>MISSING_FCALL</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>MISSING_VCALL</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>MISSING_SUPER</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>MISSING_MISSING</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>MISSING_NONE</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>
}</block>;</enum>


<function_decl><type><name>rb_serial_t</name></type> <name>rb_next_class_serial</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>VALUE</name></type> <name>rb_obj_is_thread</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_vm_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>PUREFUNC</name><argument_list>(<argument>VALUE rb_vm_top_self(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>rb_vm_inc_const_missing_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>rb_vm_get_insns_address_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_source_location</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pline</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_source_location_cstr</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pline</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>MJIT_STATIC</name> <name>void</name></type> <name>rb_vm_pop_cfunc_frame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_vm_add_root_module</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>module</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_vm_check_redefinition_by_prepend</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_vm_check_optimizable_mid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>mid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_yield_refine_block</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>refinement</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>refinements</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>MJIT_STATIC</name> <name>VALUE</name></type> <name>ruby_vm_special_exception_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PUREFUNC</name><argument_list>(<argument><expr><name>st_table</name> <operator>*</operator><call><name>rb_vm_fstring_table</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>MJIT_SYMBOL_EXPORT_BEGIN</name>
<name>VALUE</name></type> <name>vm_exec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_execution_context_struct</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>MJIT_SYMBOL_EXPORT_END</name>


<name>VALUE</name></type> <name>rb_current_realfilepath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_check_block_call</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rb_block_call_func_t</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>void</name></type> <name>rb_check_funcall_hook</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>VALUE</name></type> <name>rb_check_funcall_with_hook</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>rb_check_funcall_hook</name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_check_funcall_with_hook_kw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>rb_check_funcall_hook</name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kw_splat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_type_str</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ruby_value_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_check_funcall_default</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_yield_1</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_yield_force_blockarg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_lambda_call</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>rb_block_call_func_t</name></type> <name>bl_proc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_argc</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name></type> <name>data2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MJIT_SYMBOL_EXPORT_BEGIN</name>
<name>VALUE</name></type> <name>rb_vm_call0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_execution_context_struct</name></name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_callable_method_entry_struct</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kw_splat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_vm_call_kw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_execution_context_struct</name></name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_callable_method_entry_struct</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kw_splat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_make_no_method_exception</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>exc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>MJIT_SYMBOL_EXPORT_END</name>


<name>VALUE</name></type> <name>rb_equal_opt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_eql_opt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj2</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>rb_iseq_struct</name>;</struct_decl>
<function_decl><type><name>MJIT_SYMBOL_EXPORT_BEGIN</name>
<name>void</name></type> <name>rb_vm_search_method_slowpath</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>cd_owner</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_call_data</name></name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>MJIT_SYMBOL_EXPORT_END</name>


<name>void</name></type> <name>rb_print_backtrace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>VALUE</name></type> <name>rb_vm_thread_backtrace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_vm_thread_backtrace_locations</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_make_backtrace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_backtrace_print_as_bugreport</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_backtrace_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_backtrace_to_str_ary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_backtrace_to_location_ary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_backtrace_each</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>iter</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>recv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MJIT_SYMBOL_EXPORT_BEGIN</name>
<name>VALUE</name></type> <name>rb_ec_backtrace_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_execution_context_struct</name></name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_backtrace_use_iseq_first_lineno_for_last_location</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<expr><name>MJIT_SYMBOL_EXPORT_END</name></expr>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_DTRACE_CREATE_HOOK</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RUBY_DTRACE_HOOK(name##_CREATE, arg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_DTRACE_HOOK</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { int dtrace_line; const char *dtrace_file = rb_source_location_cstr(&amp;dtrace_line); if (!dtrace_file) dtrace_file = ""; RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); } } while (0)</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
