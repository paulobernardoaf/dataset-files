<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\internal\bits.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERNAL_BITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL_BITS_H</name></cpp:macro></cpp:define>


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/compilers.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1310</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X86INTRIN_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MJIT_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#</cpp:empty>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;x86intrin.h&gt;</cpp:file></cpp:include> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1310</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>__popcnt</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>__popcnt64</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>__lzcnt</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>__lzcnt64</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1310</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_rotl</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_rotr</name><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_rotl64</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_rotr64</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1400</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_BitScanForward</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_BitScanReverse</name><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_BitScanForward64</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_BitScanReverse64</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/static_assert.h"</cpp:file></cpp:include> 





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_LONG_MSB</name></cpp:macro> <cpp:value>((SIGNED_VALUE)1&lt;&lt;((SIZEOF_LONG*CHAR_BIT-1)/2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_INTEGER_TYPE_P</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0 &gt; ((T)0)-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_INTEGER_MIN</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sizeof(T) == sizeof(int8_t)) ? ((T)INT8_MIN) : ((sizeof(T) == sizeof(int16_t)) ? ((T)INT16_MIN) : ((sizeof(T) == sizeof(int32_t)) ? ((T)INT32_MIN) : ((sizeof(T) == sizeof(int64_t)) ? ((T)INT64_MIN) : 0))))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_INTEGER_MAX</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T)(SIGNED_INTEGER_MIN(T) ^ ((T)~(T)0)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNSIGNED_INTEGER_MAX</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T)~(T)0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_mul_overflow_p</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_mul_overflow_p((a), (b), (__typeof__(a * b))0)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_mul_overflow</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__ ({ __typeof__(a) c; __builtin_mul_overflow((a), (b), &amp;c); })</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_SIGNED_INTEGER_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (a) == 0 ? 0 : (a) == -1 ? (b) &lt; -(max) : (a) &gt; 0 ? ((b) &gt; 0 ? (max) / (a) &lt; (b) : (min) / (a) &gt; (b)) : ((b) &gt; 0 ? (min) / (a) &lt; (b) : (max) / (a) &gt; (b)))</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_mul_overflow_p</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_FIXNUM_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__ ({ struct { long fixnum : sizeof(long) * CHAR_BIT - 1; } c; __builtin_mul_overflow_p((a), (b), c.fixnum); })</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_FIXNUM_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL_OVERFLOW_SIGNED_INTEGER_P(a, b, FIXNUM_MIN, FIXNUM_MAX)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MUL_OVERFLOW_P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_LONG_LONG_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL_OVERFLOW_P(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_LONG_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL_OVERFLOW_P(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_INT_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL_OVERFLOW_P(a, b)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_LONG_LONG_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL_OVERFLOW_SIGNED_INTEGER_P(a, b, LLONG_MIN, LLONG_MAX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_LONG_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL_OVERFLOW_SIGNED_INTEGER_P(a, b, LONG_MIN, LONG_MAX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_INT_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL_OVERFLOW_SIGNED_INTEGER_P(a, b, INT_MIN, INT_MAX)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UINT128_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_length</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned int) (sizeof(x) &lt;= sizeof(int32_t) ? 32 - nlz_int32((uint32_t)(x)) : sizeof(x) &lt;= sizeof(int64_t) ? 64 - nlz_int64((uint64_t)(x)) : 128 - nlz_int128((uint128_t)(x)))</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_length</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned int) (sizeof(x) &lt;= sizeof(int32_t) ? 32 - nlz_int32((uint32_t)(x)) : 64 - nlz_int64((uint64_t)(x)))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>swap16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swap16</name></cpp:macro> <cpp:value>ruby_swap16</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>swap32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swap32</name></cpp:macro> <cpp:value>ruby_swap32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>swap64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swap64</name></cpp:macro> <cpp:value>ruby_swap64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>ruby_swap16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ruby_swap32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>ruby_swap64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>nlz_int</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>nlz_long</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>nlz_long_long</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>nlz_intptr</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>nlz_int32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>nlz_int64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UINT128_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>nlz_int128</name><parameter_list>(<parameter><decl><type><name>uint128_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>rb_popcount32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>rb_popcount64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>rb_popcount_intptr</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ntz_int32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ntz_int64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ntz_intptr</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>RUBY_BIT_ROTL</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>RUBY_BIT_ROTR</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type>
<name>ruby_swap16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_bswap16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_bswap16</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1310</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>_byteswap_ushort</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>ruby_swap32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_bswap32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_bswap32</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1310</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>_byteswap_ulong</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000FFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xFFFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00FF00FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xFF00FF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>ruby_swap64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_bswap64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_bswap64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1310</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>_byteswap_uint64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00000000FFFFFFFFULL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF00000000ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000FFFF0000FFFFULL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xFFFF0000FFFF0000ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00FF00FF00FF00FFULL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xFF00FF00FF00FF00ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>nlz_int32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX2__</name></expr></argument>)</argument_list></call></expr></cpp:if>




<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>__lzcnt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LZCNT__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MJIT_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>_lzcnt_u32</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1400</literal></expr></argument>)</argument_list></call></expr></cpp:elif> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><call><name>_BitScanReverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>r</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_clz</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><name>sizeof_int</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_clz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><return>return <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>;</return></block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>n</name> <operator>-</operator> <name>x</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>nlz_int64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>__lzcnt64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LZCNT__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MJIT_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>_lzcnt_u64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1400</literal></expr></argument>)</argument_list></call></expr></cpp:elif> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><call><name>_BitScanReverse64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">63u</literal> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>r</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_clzl</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">64</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_clzl</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_clzll</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>__builtin_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content><return>return <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>;</return></block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>n</name> <operator>-</operator> <name>x</name><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UINT128_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>nlz_int128</name><parameter_list>(<parameter><decl><type><name>uint128_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">128</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>nlz_int64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">64</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>nlz_int64</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>nlz_int</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nlz_int32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nlz_int64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>nlz_long</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nlz_int32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nlz_int64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>nlz_long_long</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nlz_int64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UINT128_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nlz_int128</name><argument_list>(<argument><expr><operator>(</operator><name>uint128_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>nlz_intptr</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nlz_int</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nlz_long</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nlz_long_long</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>rb_popcount32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>__popcnt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_popcount</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><name>sizeof_int</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_popcount</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0f0f0f0f</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">0x0f0f0f0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x001f001f</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0x001f001f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000003f</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0x0000003f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>x</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>rb_popcount64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>__popcnt64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_popcount</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_popcountl</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_popcountll</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>__builtin_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x5555555555555555</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&amp;</operator> <literal type="number">0x5555555555555555</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3333333333333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">0x3333333333333333</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0707070707070707</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">0x0707070707070707</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x001f001f001f001f</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0x001f001f001f001f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000003f0000003f</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0x0000003f0000003f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x000000000000007f</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator><literal type="number">32</literal> <operator>&amp;</operator> <literal type="number">0x000000000000007f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>x</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>rb_popcount_intptr</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_popcount64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_popcount32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ntz_int32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BMI__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MJIT_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>_tzcnt_u32</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1400</literal></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><call><name>_BitScanForward</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_ctz</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><name>sizeof_int</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>__builtin_ctz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>rb_popcount32</name><argument_list>(<argument><expr><operator>(</operator><operator>~</operator><name>x</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ntz_int64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BMI__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MJIT_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>_tzcnt_u64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1400</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><call><name>_BitScanForward64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_ctzl</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">64</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>__builtin_ctzl</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>__builtin_ctzll</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>__builtin_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>rb_popcount64</name><argument_list>(<argument><expr><operator>(</operator><operator>~</operator><name>x</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ntz_intptr</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ntz_int64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ntz_int32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>RUBY_BIT_ROTL</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_rotateleft32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr></cpp:if>
<return>return <expr><call><name>__builtin_rotateleft32</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_rotateleft64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:elif>
<return>return <expr><call><name>__builtin_rotateleft64</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1310</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr></cpp:elif>
<return>return <expr><call><name>_rotl</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1310</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:elif>
<return>return <expr><call><name>_rotl64</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_lrotl</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_VALUE</name> <operator>==</operator> <name>SIZEOF_LONG</name><operator>)</operator></expr></cpp:elif>
<return>return <expr><call><name>_lrotl</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>-</operator><name>n</name> <operator>&amp;</operator> <name>m</name><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>RUBY_BIT_ROTR</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_rotateright32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr></cpp:if>
<return>return <expr><call><name>__builtin_rotateright32</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_rotateright64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:elif>
<return>return <expr><call><name>__builtin_rotateright64</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1310</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr></cpp:elif>
<return>return <expr><call><name>_rotr</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>MSC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">1310</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:elif>
<return>return <expr><call><name>_rotr64</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_lrotr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_VALUE</name> <operator>==</operator> <name>SIZEOF_LONG</name><operator>)</operator></expr></cpp:elif>
<return>return <expr><call><name>_lrotr</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>-</operator><name>n</name> <operator>&amp;</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <name>m</name><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
