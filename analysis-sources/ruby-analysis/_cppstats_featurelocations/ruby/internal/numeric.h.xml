<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\internal\numeric.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERNAL_NUMERIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL_NUMERIC_H</name></cpp:macro></cpp:define>









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/bignum.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/bits.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/fixnum.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/vm.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/intern.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_TO</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>, <parameter><type><name>even</name></type></parameter>, <parameter><type><name>up</name></type></parameter>, <parameter><type><name>down</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((mode) == RUBY_NUM_ROUND_HALF_EVEN ? even : (mode) == RUBY_NUM_ROUND_HALF_UP ? up : down)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_FUNC</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ROUND_TO(mode, name##_half_even, name##_half_up, name##_half_down)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_CALL</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ROUND_TO(mode, name##_half_even args, name##_half_up args, name##_half_down args)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_DEFAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_DEFAULT</name></cpp:macro> <cpp:value>RUBY_NUM_ROUND_HALF_UP</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>ruby_num_rounding_mode</name> <block>{
<decl><name>RUBY_NUM_ROUND_HALF_UP</name></decl>,
<decl><name>RUBY_NUM_ROUND_HALF_EVEN</name></decl>,
<decl><name>RUBY_NUM_ROUND_HALF_DOWN</name></decl>,
<decl><name>RUBY_NUM_ROUND_DEFAULT</name> <init>= <expr><name>ROUND_DEFAULT</name></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>RFloat</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>float_value</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFLOAT</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RFloat)(obj))</cpp:value></cpp:define>


<function_decl><type><name>int</name></type> <name>rb_num_to_uint</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>ruby_num_interval_step_size</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>excl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> <name>ruby_float_step_size</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>excl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ruby_float_step</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>excl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_endless</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_num_negative_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_succ</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_uminus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_float_uminus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_plus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_float_plus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_minus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_mul</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_float_mul</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_float_div</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_idiv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_modulo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int2str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_fix_plus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_gt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_float_gt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_ge</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>ruby_num_rounding_mode</name></name></type> <name>rb_num_get_rounding_option</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>opts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> <name>rb_int_fdiv_double</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_pow</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_float_pow</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_cmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_equal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_divmod</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_and</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_lshift</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_div</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_abs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_int_odd_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_int_positive_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_int_negative_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_num_pow</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_float_ceil</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndigits</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_float_abs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>flt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>rb_num_compare_with_zero</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_num_positive_int_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_num_negative_int_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>rb_float_flonum_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>rb_float_noflonum_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>rb_float_value_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>rb_float_new_inline</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>INT_POSITIVE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>INT_NEGATIVE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>FLOAT_ZERO_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_float_value</name></cpp:macro> <cpp:value>rb_float_value_inline</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_float_new</name></cpp:macro> <cpp:value>rb_float_new_inline</cpp:value></cpp:define>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>VALUE</name></type> <name>rb_int_positive_pow</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RUBY_SYMBOL_EXPORT_END</name>

<name>MJIT_SYMBOL_EXPORT_BEGIN</name>
<name>VALUE</name></type> <name>rb_flo_div_flo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> <name>ruby_float_mod</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_float_equal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_float_cmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_float_eql</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_fix_aref</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fix</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>MJIT_SYMBOL_EXPORT_END</name>

<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>INT_POSITIVE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>FIXNUM_POSITIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>BIGNUM_POSITIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>INT_NEGATIVE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>FIXNUM_NEGATIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>BIGNUM_NEGATIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>FLOAT_ZERO_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>rb_num_compare_with_zero</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zero</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name> <init>= <expr><call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_cmperr</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>rb_num_positive_int_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ID</name></type> <name>mid</name> <init>= <expr><literal type="char">'&gt;'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>FIXNUM_POSITIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>BIGNUM_POSITIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_num_compare_with_zero</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>rb_num_negative_int_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ID</name></type> <name>mid</name> <init>= <expr><literal type="char">'&lt;'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>FIXNUM_NEGATIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>BIGNUM_NEGATIVE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_num_compare_with_zero</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>rb_float_flonum_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLONUM</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><literal type="number">0x8000000000000002</literal></expr>)</condition> <block>{<block_content> 
<union>union <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>
}</block> <decl><name>t</name></decl>;</union>

<decl_stmt><decl><type><name>VALUE</name></type> <name>b63</name> <init>= <expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>t</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>RUBY_BIT_ROTR</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>b63</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>VALUE</name><operator>)</operator><literal type="number">0x03</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>t</name><operator>.</operator><name>d</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>rb_float_noflonum_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RFLOAT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>float_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>rb_float_value_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FLONUM_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_float_flonum_value</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_float_noflonum_value</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>rb_float_new_inline</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLONUM</name></expr></cpp:if>
<union>union <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>
}</block> <decl><name>t</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>VALUE</name><operator>)</operator><operator>(</operator><name><name>t</name><operator>.</operator><name>v</name></name> <operator>&gt;&gt;</operator> <literal type="number">60</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>.</operator><name>v</name></name> <operator>!=</operator> <literal type="number">0x3000000000000000</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><operator>(</operator><name>bits</name><operator>-</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x01</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>RUBY_BIT_ROTL</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>VALUE</name><operator>)</operator><literal type="number">0x01</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x02</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>t</name><operator>.</operator><name>v</name></name> <operator>==</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0x8000000000000002</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>rb_float_new_in_heap</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
