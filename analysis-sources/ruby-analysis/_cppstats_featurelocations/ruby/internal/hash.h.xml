<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\internal\hash.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERNAL_HASH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL_HASH_H</name></cpp:macro></cpp:define>









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stdbool.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/st.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_AR_TABLE_MAX_SIZE</name></cpp:macro> <cpp:value>SIZEOF_VALUE</cpp:value></cpp:define>

<struct_decl>struct <name>ar_table_struct</name>;</struct_decl>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>ar_hint_t</name>;</typedef>

<enum>enum <name>ruby_rhash_flags</name> <block>{
<decl><name>RHASH_PASS_AS_KEYWORDS</name> <init>= <expr><name>FL_USER1</name></expr></init></decl>, 
<decl><name>RHASH_PROC_DEFAULT</name> <init>= <expr><name>FL_USER2</name></expr></init></decl>, 
<decl><name>RHASH_ST_TABLE_FLAG</name> <init>= <expr><name>FL_USER3</name></expr></init></decl>, 
<decl><name>RHASH_AR_TABLE_SIZE_MASK</name> <init>= <expr><operator>(</operator><name>FL_USER4</name><operator>|</operator><name>FL_USER5</name><operator>|</operator><name>FL_USER6</name><operator>|</operator><name>FL_USER7</name><operator>)</operator></expr></init></decl>, 
<decl><name>RHASH_AR_TABLE_SIZE_SHIFT</name> <init>= <expr><operator>(</operator><name>FL_USHIFT</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>,
<decl><name>RHASH_AR_TABLE_BOUND_MASK</name> <init>= <expr><operator>(</operator><name>FL_USER8</name><operator>|</operator><name>FL_USER9</name><operator>|</operator><name>FL_USER10</name><operator>|</operator><name>FL_USER11</name><operator>)</operator></expr></init></decl>, 
<decl><name>RHASH_AR_TABLE_BOUND_SHIFT</name> <init>= <expr><operator>(</operator><name>FL_USHIFT</name><operator>+</operator><literal type="number">8</literal><operator>)</operator></expr></init></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>
<decl><name>RHASH_TRANSIENT_FLAG</name> <init>= <expr><name>FL_USER12</name></expr></init></decl>, 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_LEV_MASK</name></cpp:macro> <cpp:value>(FL_USER13 | FL_USER14 | FL_USER15 | FL_USER16 | FL_USER17 | FL_USER18 | FL_USER19)</cpp:value></cpp:define>


<decl><name>RHASH_LEV_SHIFT</name> <init>= <expr><operator>(</operator><name>FL_USHIFT</name> <operator>+</operator> <literal type="number">13</literal><operator>)</operator></expr></init></decl>,
<decl><name>RHASH_LEV_MAX</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>, 
}</block>;</enum>

<struct>struct <name>RHash</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>st_table</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_table_struct</name></name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt> 
}</block> <decl><name>as</name></decl>;</union>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>ifnone</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>ar_hint_t</name></type> <name><name>ary</name><index>[<expr><name>RHASH_AR_TABLE_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>word</name></decl>;</decl_stmt>
}</block> <decl><name>ar_hint</name></decl>;</union>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RHash)(obj))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RHASH_IFNONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RHASH_IFNONE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RHASH_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RHASH_SIZE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>void</name></type> <name>rb_hash_st_table_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>st_table</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_hash_default_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_hash_set_default_proc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>rb_dbl_long_hash</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_init_identtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_to_hash_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_hash_key_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_hash_values</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_hash_rehash</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_hash_add_new_element</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_hash_set_pair</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>pair</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_hash_stlike_delete</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>pkey</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>pval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_hash_stlike_foreach_with_replace</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>st_foreach_check_callback_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>st_update_callback_func</name> <modifier>*</modifier></type><name>replace</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_hash_stlike_update</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>st_update_callback_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>RHASH_AR_TABLE_SIZE_RAW</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>RHASH_IFNONE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RHASH_SIZE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>RHASH_AR_TABLE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>RHASH_ST_TABLE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ar_table_struct</name></name> <modifier>*</modifier></type><name>RHASH_AR_TABLE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>st_table</name> <modifier>*</modifier></type><name>RHASH_ST_TABLE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RHASH_ST_SIZE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>RHASH_ST_CLEAR</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>RHASH_TRANSIENT_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>RHASH_SET_TRANSIENT_FLAG</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>RHASH_UNSET_TRANSIENT_FLAG</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>VALUE</name></type> <name>rb_hash_delete_entry</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_ident_hash_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_hash_stlike_foreach</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>st_foreach_callback_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RUBY_SYMBOL_EXPORT_END</name>

<name>MJIT_SYMBOL_EXPORT_BEGIN</name>
<name>VALUE</name></type> <name>rb_hash_new_with_size</name><parameter_list>(<parameter><decl><type><name>st_index_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_hash_resurrect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_hash_stlike_lookup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>pval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_hash_keys</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_hash_has_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_hash_compare_by_id_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RHASH_CONVERT_TABLE_DEBUG</name></expr></cpp:if>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_hash_tbl_raw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_TBL_RAW</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_tbl_raw(h, __FILE__, __LINE__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_hash_tbl_raw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_TBL_RAW</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_tbl_raw(h)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>MJIT_SYMBOL_EXPORT_END</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

static inline bool
RHASH_AR_TABLE_P(VALUE h)
{
extern int rb_hash_ar_table_p(VALUE hash);
return rb_hash_ar_table_p(h)
}

static inline struct ar_table_struct *
RHASH_AR_TABLE(VALUE h)
{
extern struct ar_table_struct *rb_hash_ar_table(VALUE hash);
return rb_hash_ar_table(h)
}

static inline st_table *
RHASH_ST_TABLE(VALUE h)
{
extern st_table *rb_hash_st_table(VALUE hash);
return rb_hash_st_table(h)
}

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>RHASH_AR_TABLE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator> <call><name>FL_TEST_RAW</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>RHASH_ST_TABLE_FLAG</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ar_table_struct</name></name> <modifier>*</modifier></type>
<name>RHASH_AR_TABLE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RHASH</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>ar</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>st_table</name> <modifier>*</modifier></type>
<name>RHASH_ST_TABLE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RHASH</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>st</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>RHASH_IFNONE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RHASH</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ifnone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>RHASH_SIZE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RHASH_AR_TABLE_P</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>RHASH_AR_TABLE_SIZE_RAW</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>RHASH_ST_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>RHASH_ST_TABLE_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator> <call><name>RHASH_AR_TABLE_P</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>RHASH_ST_SIZE</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RHASH_ST_TABLE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num_entries</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>RHASH_ST_CLEAR</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FL_UNSET_RAW</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>RHASH_ST_TABLE_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RHASH</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>ar</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>RHASH_AR_TABLE_SIZE_RAW</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ret</name> <init>= <expr><call><name>FL_TEST_RAW</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>RHASH_AR_TABLE_SIZE_MASK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>&gt;&gt;=</operator> <name>RHASH_AR_TABLE_SIZE_SHIFT</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>RHASH_TRANSIENT_P</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>
<return>return <expr><call><name>FL_TEST_RAW</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>RHASH_TRANSIENT_FLAG</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>RHASH_SET_TRANSIENT_FLAG</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>
<expr_stmt><expr><call><name>FL_SET_RAW</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>RHASH_TRANSIENT_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>RHASH_UNSET_TRANSIENT_FLAG</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>
<expr_stmt><expr><call><name>FL_UNSET_RAW</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>RHASH_TRANSIENT_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
