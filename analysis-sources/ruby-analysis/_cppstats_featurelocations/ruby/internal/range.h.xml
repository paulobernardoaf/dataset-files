<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\internal\range.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERNAL_RANGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL_RANGE_H</name></cpp:macro></cpp:define>









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/struct.h"</cpp:file></cpp:include> 


<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>RANGE_BEG</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>RANGE_END</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>RANGE_EXCL</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>RANGE_BEG</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RSTRUCT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>ary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>RANGE_END</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RSTRUCT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>ary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>RANGE_EXCL</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RSTRUCT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>ary</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
