<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\enum.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/compar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/enum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/imemo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/rational.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby_assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"symbol.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_mEnumerable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_next</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_div</name></cpp:macro> <cpp:value>idDiv</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_each</name></cpp:macro> <cpp:value>idEach</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_eqq</name></cpp:macro> <cpp:value>idEqq</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_cmp</name></cpp:macro> <cpp:value>idCmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_lshift</name></cpp:macro> <cpp:value>idLTLT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_call</name></cpp:macro> <cpp:value>idCall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_size</name></cpp:macro> <cpp:value>idSize</cpp:value></cpp:define>

<function><type><name>VALUE</name></type>
<name>rb_enum_values_pack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_ary_new4</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM_WANT_SVALUE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { i = rb_enum_values_pack(argc, argv); } while (0)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_yield</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_yield_force_blockarg</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_yield_values2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_yield_array</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_yield_force_blockarg</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_yield</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_yield_values2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>grep_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name>id_eqq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>grep_iter_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name>id_eqq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_grep</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>pat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>grep_iter_i</name></expr> </then><else>: <expr><name>grep_i</name></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_grep_v</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>pat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>grep_iter_i</name></expr> </then><else>: <expr><name>grep_i</name></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT_BIGNUM</name></cpp:macro> <cpp:value>IMEMO_FL_USER0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMO_V3_SET</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_WRITE((m), &amp;(m)-&gt;u3.value, (v))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>imemo_count_up</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COUNT_BIGNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V3_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><call><name>rb_int_succ</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>++</operator><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MEMO_V3_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><call><name>rb_big_unpack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>COUNT_BIGNUM</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>imemo_count_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COUNT_BIGNUM</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>value</name></name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>ULONG2NUM</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>count_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_equal</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>imemo_count_up</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>count_iter_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_yield_values2</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>imemo_count_up</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>count_all_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>imemo_count_up</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>item</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_block_call_func</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>count_iter_i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>count_all_i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"given block not used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>count_i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>imemo_count_value</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>find_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>if_none</name></decl>;</decl_stmt>

<expr_stmt><expr><name>if_none</name> <operator>=</operator> <ternary><condition><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>Qundef</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>find_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>if_none</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>if_none</name></expr></argument>, <argument><expr><name>id_call</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>find_index_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_equal</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><call><name>imemo_count_value</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>imemo_count_up</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>find_index_iter_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>memop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_yield_values2</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><call><name>imemo_count_value</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>imemo_count_up</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_find_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VALUE</name></type> <name>condition_value</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_block_call_func</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>find_index_iter_i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>condition_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"given block not used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>find_index_i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>condition_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>find_all_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_size</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>eobj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_check_funcall_default</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>limit_by_enum_size</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>size</name> <init>= <expr><call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>FIX2ULONG</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>n</name> <operator>&gt;</operator> <name>limit</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>long</name><operator>)</operator><name>limit</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>enum_size_over_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>size</name> <init>= <expr><call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>n</name> <operator>&gt;</operator> <call><name>FIX2ULONG</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_find_all</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>find_all_i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>filter_map_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>rb_yield_values2</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_filter_map</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filter_map_i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>reject_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTEST</name><argument_list>(<argument><expr><call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_reject</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reject_i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>collect_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>rb_yield_values2</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>collect_all</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>rb_enum_values_pack</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_collect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_argc</name></decl>, <decl><type ref="prev"/><name>max_argc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_argc</name> <operator>=</operator> <call><name>rb_block_min_max_arity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>max_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_lambda_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>collect_i</name></expr></argument>, <argument><expr><name>min_argc</name></expr></argument>, <argument><expr><name>max_argc</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>flat_map_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>rb_yield_values2</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_check_array_type</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_concat</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_flat_map</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flat_map_i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_to_a</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>collect_all</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_hashify</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>rb_block_call_func</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_to_h_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_hash_set_pair</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_to_h_ii</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>rb_hash_set_pair</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>rb_yield_values2</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_to_h</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_block_call_func</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><ternary><condition><expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>enum_to_h_ii</name></expr> </then><else>: <expr><name>enum_to_h_i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>enum_hashify</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>inject_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>inject_op_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ID</name></type> <name>mid</name> <init>= <expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><call><name>rb_f_send</name><argument_list>(<argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ary_inject_op</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>init</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>init</name> <operator>==</operator> <name>Qundef</name></expr> ?</condition><then> <expr><name>Qnil</name></expr> </then><else>: <expr><name>init</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>init</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>init</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>SYM2ID</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>idPLUS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><name>idPLUS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>rb_obj_respond_to</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>idPLUS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXABLE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_big_plus</name><argument_list>(<argument><expr><call><name>ULONG2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_big_plus</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>not_integer</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_fix_plus</name><argument_list>(<argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>v</name></expr>;</return>

<label><name>not_integer</name>:</label>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_fix_plus</name><argument_list>(<argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_funcallv_public</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>















































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_inject</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>init</name></decl>, <decl><type ref="prev"/><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_block_call_func</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>inject_i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>init</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>init</name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rb_check_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>init</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>init</name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>inject_op_i</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"given block not used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rb_check_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>inject_op_i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>inject_op_i</name> <operator>&amp;&amp;</operator>
<call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id_each</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ary_inject_op</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>init</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>partition_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>arys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>arys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_partition</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>partition_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>group_by_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>values</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_group_by</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>enum_hashify</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>group_by_i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tally_up</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tally</name> <init>= <expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tally</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tally</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>tally</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>tally</name> <operator>&lt;</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>FIXNUM_MAX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tally</name> <operator>+=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>FIXNUM_FLAG</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>tally</name> <operator>=</operator> <call><name>rb_big_plus</name><argument_list>(<argument><expr><name>tally</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>tally</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tally_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tally_up</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_tally</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>enum_hashify</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tally_i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>first_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>enum_take</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_first</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>enum_take</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>first_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_sort</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_ary_sort_bang</name><argument_list>(<argument><expr><call><name>enum_to_a</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT_BY_BUFSIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<struct>struct <name>sort_by_data</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sort_by_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sort_by_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>sort_by_data</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>ary</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"sort_by reentered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SORT_BY_BUFSIZE</name><operator>*</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"sort_by reentered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>n</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>n</name></name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <name>SORT_BY_BUFSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_concat</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sort_by_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmp_opt_data</name></name></type> <name>cmp_opt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"sort_by reentered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>ap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>bp</name></expr>;</expr_stmt>

<return>return <expr><call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>cmp_opt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_sort_by</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>, <decl><type ref="prev"/><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sort_by_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>LONG_MAX</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>RBASIC_CLEAR_CLASS</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><name>SORT_BY_BUFSIZE</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SORT_BY_BUFSIZE</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator>struct <name>sort_by_data</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>ary</name></name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sort_by_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>ary</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_resize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>n</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_concat</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RARRAY_PTR_USE</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
<argument><expr><call><name>ruby_qsort</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>sort_by_cmp</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"sort_by reentered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rb_ary_resize</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC_SET_CLASS_RAW</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUMFUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>argc ? name##_eqq : rb_block_given_p() ? name##_iter_i : name##_i</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMO_ENUM_NEW</name><parameter_list>(<parameter><type><name>v1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_check_arity(argc, 0, 1), MEMO_NEW((v1), (argc ? *argv : 0), 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_ENUMFUNCS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE enum_##name##_func(VALUE result, struct MEMO *memo); static VALUE name##_i(RB_BLOCK_CALL_FUNC_ARGLIST(i, memo)) { return enum_##name##_func(rb_enum_values_pack(argc, argv), MEMO_CAST(memo)); } static VALUE name##_iter_i(RB_BLOCK_CALL_FUNC_ARGLIST(i, memo)) { return enum_##name##_func(rb_yield_values2(argc, argv), MEMO_CAST(memo)); } static VALUE name##_eqq(RB_BLOCK_CALL_FUNC_ARGLIST(i, memo)) { ENUM_WANT_SVALUE(); return enum_##name##_func(rb_funcallv(MEMO_CAST(memo)-&gt;v2, id_eqq, 1, &amp;i), MEMO_CAST(memo)); } static VALUE enum_##name##_func(VALUE result, struct MEMO *memo)</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARN_UNUSED_BLOCK</name><parameter_list>(<parameter><type><name>argc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((argc) &gt; 0 &amp;&amp; rb_block_given_p()) { rb_warn("given block not used"); } } while (0)</cpp:value></cpp:define>





<macro><name>DEFINE_ENUMFUNCS</name><argument_list>(<argument>all</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTEST</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block>

























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_all</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_ENUM_NEW</name><argument_list>(<argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WARN_UNUSED_BLOCK</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>ENUMFUNC</name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</return>
</block_content>}</block></function>

<macro><name>DEFINE_ENUMFUNCS</name><argument_list>(<argument>any</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block>

























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_any</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_ENUM_NEW</name><argument_list>(<argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WARN_UNUSED_BLOCK</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>ENUMFUNC</name><argument_list>(<argument><expr><name>any</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</return>
</block_content>}</block></function>

<macro><name>DEFINE_ENUMFUNCS</name><argument_list>(<argument>one</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name> <operator>==</operator> <name>Qtrue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block>

<struct>struct <name>nmin_data</name> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bufmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>curlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>limit</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmpfunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>rev</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>by</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>cmpint_reenter_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nmin_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RBASIC</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"%s%s reentered"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>rev</name></name></expr> ?</condition><then> <expr><literal type="string">"max"</literal></expr> </then><else>: <expr><literal type="string">"min"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>by</name></name></expr> ?</condition><then> <expr><literal type="string">"_by"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nmin_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmp_opt_data</name></name></type> <name>cmp_opt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nmin_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>nmin_data</name> <operator>*</operator><operator>)</operator><name>_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>VALUE</name> <operator>*</operator><operator>)</operator><name>ap</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>VALUE</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_cmpint</name><parameter_list>(<parameter><type><name>cmp</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_cmpint(cmpint_reenter_check(data, (cmp)), a, b)</cpp:value></cpp:define>
<return>return <expr><call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>cmp_opt</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_cmpint</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nmin_block_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nmin_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>nmin_data</name> <operator>*</operator><operator>)</operator><name>_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>VALUE</name> <operator>*</operator><operator>)</operator><name>ap</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>VALUE</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cmp</name> <init>= <expr><call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cmpint_reenter_check</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_cmpint</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nmin_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nmin_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>beg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eltsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>numelts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>store_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>curlen</name></name> <operator>&lt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>RARRAY_PTR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eltsize</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>by</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>numelts</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>curlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>right</name> <operator>=</operator> <name>numelts</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETPTR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(beg+(i)*eltsize)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { VALUE tmp[2]; memcpy(tmp, GETPTR(i), sizeof(VALUE)*eltsize); memcpy(GETPTR(i), GETPTR(j), sizeof(VALUE)*eltsize); memcpy(GETPTR(j), tmp, sizeof(VALUE)*eltsize); } while (0)</cpp:value></cpp:define>






<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>pivot_index</name> <init>= <expr><name>left</name> <operator>+</operator> <operator>(</operator><name>right</name><operator>-</operator><name>left</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num_pivots</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>pivot_index</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pivot_index</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

<expr_stmt><expr><name>store_index</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>right</name><operator>-</operator><name>num_pivots</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>data</name><operator>-&gt;</operator><name>cmpfunc</name></name><argument_list>(<argument><expr><call><name>GETPTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GETPTR</name><argument_list>(<argument><expr><name>pivot_index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>rev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>right</name><operator>-</operator><name>num_pivots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_pivots</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>store_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>store_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>store_index</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>right</name></expr>;</init> <condition><expr><name>right</name><operator>-</operator><name>num_pivots</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>store_index</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <name>store_index</name><operator>+</operator><name>num_pivots</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>store_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>right</name> <operator>=</operator> <name>store_index</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>store_index</name><operator>+</operator><name>num_pivots</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GETPTR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SWAP</name></cpp:undef>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>store_index</name><operator>*</operator><name>eltsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>curlen</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_resize</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <name>eltsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>nmin_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nmin_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>nmin_data</name> <operator>*</operator><operator>)</operator><name>_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cmpv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>by</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmpv</name> <operator>=</operator> <call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmpv</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>limit</name></name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>data</name><operator>-&gt;</operator><name>cmpfunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmpv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>rev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>by</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>cmpv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>curlen</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>curlen</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>bufmax</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nmin_filter</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>VALUE</name></type>
<name>rb_nmin_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>by</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nmin_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>n</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative size (%ld)"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>LONG_MAX</name><operator>/</operator><literal type="number">4</literal><operator>/</operator><operator>(</operator><ternary><condition><expr><name>by</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>&lt;</operator> <name><name>data</name><operator>.</operator><name>n</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"too big size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>bufmax</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>n</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>bufmax</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>by</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cmpfunc</name></name> <operator>=</operator> <ternary><condition><expr><name>by</name></expr> ?</condition><then> <expr><name>nmin_cmp</name></expr> </then><else>:
<expr><ternary><condition><expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>nmin_block_cmp</name></expr> </then><else>:
<expr><name>nmin_cmp</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>rev</name></name> <operator>=</operator> <name>rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>by</name></name> <operator>=</operator> <name>by</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ary</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nmin_i</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nmin_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>nmin_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>by</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<macro><name>RARRAY_PTR_USE</name><argument_list>(<argument>result</argument>, <argument>ptr</argument>, <argument>{
ruby_qsort(ptr,
RARRAY_LEN(result)/<literal type="number">2</literal>,
sizeof(VALUE)*<literal type="number">2</literal>,
data.cmpfunc, (void *)&amp;data);
for (i=<literal type="number">1</literal>; i&lt;RARRAY_LEN(result); i+=<literal type="number">2</literal>) {
ptr[i/<literal type="number">2</literal>] = ptr[i];
}
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>rb_ary_resize</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<macro><name>RARRAY_PTR_USE</name><argument_list>(<argument>result</argument>, <argument>ptr</argument>, <argument>{
ruby_qsort(ptr, RARRAY_LEN(result), sizeof(VALUE),
data.cmpfunc, (void *)&amp;data);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_reverse</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RBASIC_SET_CLASS</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_one</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_ENUM_NEW</name><argument_list>(<argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WARN_UNUSED_BLOCK</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>ENUMFUNC</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<macro><name>DEFINE_ENUMFUNCS</name><argument_list>(<argument>none</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block>























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_none</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_ENUM_NEW</name><argument_list>(<argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WARN_UNUSED_BLOCK</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>ENUMFUNC</name><argument_list>(<argument><expr><name>none</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>min_t</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cmp_opt_data</name></name></type> <name>cmp_opt</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>min_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>min_t</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>min_t</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>cmp_opt</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>min_ii</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>min_t</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>min_t</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_cmpint</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>min_t</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>NEW_CMP_OPT_MEMO</name><argument_list>(<argument><expr>struct <name>min_t</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>num</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_nmin_run</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cmp_opt</name><operator>.</operator><name>opt_methods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cmp_opt</name><operator>.</operator><name>opt_inited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>min_ii</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>min_i</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>max_t</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cmp_opt_data</name></name></type> <name>cmp_opt</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>max_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>max_t</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>max_t</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>cmp_opt</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>max_ii</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>max_t</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>max_t</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_cmpint</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>max_t</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>NEW_CMP_OPT_MEMO</name><argument_list>(<argument><expr>struct <name>max_t</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>num</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_nmin_run</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cmp_opt</name><operator>.</operator><name>opt_methods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cmp_opt</name><operator>.</operator><name>opt_inited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_ii</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>minmax_t</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cmp_opt_data</name></name></type> <name>cmp_opt</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>minmax_i_update</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>minmax_t</name></name> <modifier>*</modifier></type><name>memo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>cmp_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>cmp_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>minmax_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>_memo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>minmax_t</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>minmax_t</name></expr></argument>, <argument><expr><name>_memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>memo</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>cmp_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>minmax_i_update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>minmax_ii_update</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>minmax_t</name></name> <modifier>*</modifier></type><name>memo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_cmpint</name><argument_list>(<argument><expr><call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_cmpint</name><argument_list>(<argument><expr><call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>minmax_ii</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>_memo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>minmax_t</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>minmax_t</name></expr></argument>, <argument><expr><name>_memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>memo</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_cmpint</name><argument_list>(<argument><expr><call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>minmax_ii_update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_minmax</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>minmax_t</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>NEW_CMP_OPT_MEMO</name><argument_list>(<argument><expr>struct <name>minmax_t</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cmp_opt</name><operator>.</operator><name>opt_methods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cmp_opt</name><operator>.</operator><name>opt_inited</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>minmax_ii</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>last</name></name> <operator>!=</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>minmax_ii_update</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>minmax_i</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>last</name></name> <operator>!=</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>minmax_i_update</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>min</name></name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>min_by_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmp_opt_data</name></name></type> <name>cmp_opt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMO_V2_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name>cmp_opt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMO_V2_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_min_by</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>num</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_nmin_run</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>Qundef</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>min_by_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>max_by_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmp_opt_data</name></name></type> <name>cmp_opt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMO_V2_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name>cmp_opt</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMO_V2_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_max_by</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>num</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_nmin_run</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>Qundef</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_by_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>minmax_by_t</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>min_bv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>max_bv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>last_bv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>last</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>minmax_by_i_update</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>i1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>i2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>minmax_by_t</name></name> <modifier>*</modifier></type><name>memo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmp_opt_data</name></name></type> <name>cmp_opt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>min_bv</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min_bv</name></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max_bv</name></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>min_bv</name></name></expr></argument>, <argument><expr><name>cmp_opt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min_bv</name></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>max_bv</name></name></expr></argument>, <argument><expr><name>cmp_opt</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max_bv</name></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>minmax_by_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>_memo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmp_opt_data</name></name></type> <name>cmp_opt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>minmax_by_t</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>minmax_by_t</name></expr></argument>, <argument><expr><name>_memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vi</name></decl>, <decl><type ref="prev"/><name>vj</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vi</name> <operator>=</operator> <call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>last_bv</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>last_bv</name></name> <operator>=</operator> <name>vi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vj</name> <operator>=</operator> <name><name>memo</name><operator>-&gt;</operator><name>last_bv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>memo</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>last_bv</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>vj</name></expr></argument>, <argument><expr><name>vi</name></expr></argument>, <argument><expr><name>cmp_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vi</name> <operator>=</operator> <name>vj</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>vi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vi</name> <operator>=</operator> <name>vj</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vj</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>minmax_by_i_update</name><argument_list>(<argument><expr><name>vi</name></expr></argument>, <argument><expr><name>vj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_minmax_by</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>minmax_by_t</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>NEW_MEMO_FOR</name><argument_list>(<argument><expr>struct <name>minmax_by_t</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>min_bv</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>max_bv</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>last_bv</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>minmax_by_i</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>last_bv</name></name> <operator>!=</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>minmax_by_i_update</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>last_bv</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>last_bv</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>minmax_by_t</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>member_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_equal</name><argument_list>(<argument><expr><call><name>rb_enum_values_pack</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V2_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_member</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>member_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>each_with_index_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name> <init>= <expr><call><name>imemo_count_value</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>imemo_count_up</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>rb_enum_values_pack</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_each_with_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>each_with_index_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_reverse_each</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>enum_to_a</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>nlen</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>each_val_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_each_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>each_val_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>add_int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>y</name> <init>= <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_int_plus</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>div_int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>y</name> <init>= <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dont_recycle_block_arg</name><parameter_list>(<parameter><type><name>arity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((arity) == 1 || (arity) &lt; 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>each_slice_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>cnt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_yield</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MEMO_V1_SET</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_clear</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_each_slice_size</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>eobj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>slice_size</name> <init>= <expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>infinite_p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONST_ID</name><argument_list>(<argument><expr><name>infinite_p</name></expr></argument>, <argument><expr><literal type="string">"infinite?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slice_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid slice size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>enum_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>infinite_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>add_int</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>slice_size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>div_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>slice_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_each_slice</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arity</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid slice size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>enum_each_slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>limit_by_enum_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arity</name> <operator>=</operator> <call><name>rb_block_arity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>dont_recycle_block_arg</name><argument_list>(<argument><expr><name>arity</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>each_slice_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>each_cons_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>cnt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_shift</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_dup</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_yield</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_each_cons_size</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>eobj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmp_opt_data</name></name></type> <name>cmp_opt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>zero</name> <init>= <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>cons_size</name> <init>= <expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cons_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>enum_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>add_int</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>-</operator> <name>cons_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>OPTIMIZED_CMP</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>cmp_opt</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>zero</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_each_cons</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arity</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>enum_each_cons_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arity</name> <operator>=</operator> <call><name>rb_block_arity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>enum_size_over_p</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dont_recycle_block_arg</name><argument_list>(<argument><expr><name>arity</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>each_cons_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>each_with_object_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_yield_values</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_each_with_object</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>memo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>memo</name></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>each_with_object_i</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>memo</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zip_ary</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>memoval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><operator>(</operator>struct <name>MEMO</name> <operator>*</operator><operator>)</operator><name>memoval</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>args</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>cnt</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>rb_enum_values_pack</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>enum_yield_array</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>call_next</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>w</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>id_next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>call_stop</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>w</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qundef</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zip_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>memoval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><operator>(</operator>struct <name>MEMO</name> <operator>*</operator><operator>)</operator><name>memoval</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>args</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>v2</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>rb_enum_values_pack</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_rescue2</name><argument_list>(<argument><expr><name>call_next</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><name>call_stop</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><name>rb_eStopIteration</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>enum_yield_array</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_zip</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>conv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>args</name> <init>= <expr><call><name>rb_ary_new4</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allary</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>RARRAY_PTR</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><call><name>rb_check_array_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>allary</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ary</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allary</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VALUE</name></type> <name>sym_each</name> <init>= <expr><call><name>STATIC_ID2SYM</name><argument_list>(<argument><expr><name>id_each</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONST_ID</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="string">"to_enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_respond_to</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"wrong argument type %"</literal><name>PRIsVALUE</name><literal type="string">" (must respond to :each)"</literal></expr></argument>,
<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>conv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym_each</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>allary</name></expr> ?</condition><then> <expr><name>zip_ary</name></expr> </then><else>: <expr><name>zip_i</name></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>take_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><call><name>rb_enum_values_pack</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_take</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"attempt to take negative size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>take_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>take_while_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_yield_values2</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_iter_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>rb_enum_values_pack</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_take_while</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>take_while_i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>drop_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><call><name>rb_enum_values_pack</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>cnt</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_drop</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"attempt to drop negative size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>drop_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>drop_while_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>MEMO_CAST</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>state</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RTEST</name><argument_list>(<argument><expr><call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_drop_while</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MEMO</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_NEW</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>drop_while_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>cycle_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><call><name>rb_ary_new_from_values</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>enum_yield</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_cycle_size</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>eobj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>mul</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mul</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>enum_size</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FIXNUM_ZERO_P</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>HUGE_VAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mul</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><name>mul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_cycle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nv</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>enum_cycle_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argc</name> <operator>||</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>nv</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>nv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RBASIC_CLEAR_CLASS</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cycle_i</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <literal type="number">0</literal> <operator>&lt;</operator> <operator>--</operator><name>n</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>enum_yield_array</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>chunk_arg</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>categorize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>prev_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>prev_elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>yielder</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>chunk_ii</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>_argp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>chunk_arg</name></name> <modifier>*</modifier></type><name>argp</name> <init>= <expr><call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>chunk_arg</name></expr></argument>, <argument><expr><name>_argp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>alone</name> <init>= <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"_alone"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>separator</name> <init>= <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"_separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>categorize</name></name></expr></argument>, <argument><expr><name>id_call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>alone</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name></expr></argument>, <argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name> <operator>=</operator> <name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>v</name> <operator>==</operator> <name>separator</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name></expr></argument>, <argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name> <operator>=</operator> <name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <call><name>rb_sym2str</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"symbols beginning with an underscore are reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_equal</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name></expr></argument>, <argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_value</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>chunk_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>yielder</name></expr></argument>, <argument><expr><name>enumerator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>enumerable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>chunk_arg</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>NEW_MEMO_FOR</name><argument_list>(<argument><expr>struct <name>chunk_arg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>enumerable</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"chunk_enumerable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>categorize</name></name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"chunk_categorize"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_value</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>yielder</name></name> <operator>=</operator> <name>yielder</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>enumerable</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>chunk_ii</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>chunk_arg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_value</name></name></expr></argument>, <argument><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

























































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_chunk</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>enumerable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>enumerator</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR</name><argument_list>(<argument><expr><name>enumerable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enumerator</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>rb_cEnumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"chunk_enumerable"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enumerable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"chunk_categorize"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_block_proc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><name>idInitialize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>chunk_i</name></expr></argument>, <argument><expr><name>enumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>enumerator</name></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>slicebefore_arg</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>sep_pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sep_pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>prev_elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>yielder</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>slicebefore_ii</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>_argp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>slicebefore_arg</name></name> <modifier>*</modifier></type><name>argp</name> <init>= <expr><call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>slicebefore_arg</name></expr></argument>, <argument><expr><name>_argp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>header_p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>sep_pat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>header_p</name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>sep_pat</name></name></expr></argument>, <argument><expr><name>id_eqq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>header_p</name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>sep_pred</name></name></expr></argument>, <argument><expr><name>id_call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>header_p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>slicebefore_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>yielder</name></expr></argument>, <argument><expr><name>enumerator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>enumerable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slicebefore_arg</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>NEW_MEMO_FOR</name><argument_list>(<argument><expr>struct <name>slicebefore_arg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>enumerable</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicebefore_enumerable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>sep_pred</name></name> <operator>=</operator> <call><name>rb_attr_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicebefore_sep_pred"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>sep_pat</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>sep_pred</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicebefore_sep_pat"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>yielder</name></name> <operator>=</operator> <name>yielder</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>enumerable</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slicebefore_ii</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>slicebefore_arg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

















































































































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_slice_before</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>enumerable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>enumerator</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_error_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>enumerator</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>rb_cEnumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicebefore_sep_pred"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_block_proc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sep_pat</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sep_pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enumerator</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>rb_cEnumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicebefore_sep_pat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sep_pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicebefore_enumerable"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enumerable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><name>idInitialize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slicebefore_i</name></expr></argument>, <argument><expr><name>enumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>enumerator</name></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>sliceafter_arg</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>prev_elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>yielder</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sliceafter_ii</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>_memo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_MEMO</name></cpp:macro> <cpp:value>((void)(memo = MEMO_FOR(struct sliceafter_arg, _memo)))</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>sliceafter_arg</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>split_p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>UPDATE_MEMO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>split_p</name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>pat</name></name></expr></argument>, <argument><expr><name>id_eqq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UPDATE_MEMO</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>split_p</name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>, <argument><expr><name>id_call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UPDATE_MEMO</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>split_p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UPDATE_MEMO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UPDATE_MEMO</name></cpp:undef>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sliceafter_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>yielder</name></expr></argument>, <argument><expr><name>enumerator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>enumerable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sliceafter_arg</name></name> <modifier>*</modifier></type><name>memo</name> <init>= <expr><call><name>NEW_MEMO_FOR</name><argument_list>(<argument><expr>struct <name>sliceafter_arg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>enumerable</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"sliceafter_enum"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>pat</name></name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"sliceafter_pat"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>pred</name></name> <operator>=</operator> <call><name>rb_attr_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"sliceafter_pred"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>yielder</name></name> <operator>=</operator> <name>yielder</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>enumerable</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sliceafter_ii</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>sliceafter_arg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_slice_after</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>enumerable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>enumerator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>, <decl><type ref="prev"/><name>pred</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"both pattern and block are given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>rb_block_proc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>enumerator</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>rb_cEnumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"sliceafter_enum"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enumerable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"sliceafter_pat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"sliceafter_pred"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><name>idInitialize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sliceafter_i</name></expr></argument>, <argument><expr><name>enumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>enumerator</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>slicewhen_arg</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>prev_elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>prev_elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>yielder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inverted</name></decl>;</decl_stmt> 
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>slicewhen_ii</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>_memo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_MEMO</name></cpp:macro> <cpp:value>((void)(memo = MEMO_FOR(struct slicewhen_arg, _memo)))</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>slicewhen_arg</name></name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>split_p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>UPDATE_MEMO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elt</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elt</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>memo</name><operator>-&gt;</operator><name>prev_elt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>split_p</name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>, <argument><expr><name>id_call</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UPDATE_MEMO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>inverted</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>split_p</name> <operator>=</operator> <operator>!</operator><name>split_p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>split_p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UPDATE_MEMO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elt</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UPDATE_MEMO</name></cpp:undef>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>slicewhen_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>yielder</name></expr></argument>, <argument><expr><name>enumerator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>enumerable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slicewhen_arg</name></name> <modifier>*</modifier></type><name>memo</name> <init>=
<expr><call><name>NEW_PARTIAL_MEMO_FOR</name><argument_list>(<argument><expr>struct <name>slicewhen_arg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>inverted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>enumerable</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicewhen_enum"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>pred</name></name> <operator>=</operator> <call><name>rb_attr_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicewhen_pred"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elt</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>yielder</name></name> <operator>=</operator> <name>yielder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>inverted</name></name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicewhen_inverted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>enumerable</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slicewhen_ii</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>MEMO_FOR</name><argument_list>(<argument><expr>struct <name>slicewhen_arg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>memo</name><operator>-&gt;</operator><name>yielder</name></name></expr></argument>, <argument><expr><name>id_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memo</name><operator>-&gt;</operator><name>prev_elts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_slice_when</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>enumerable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>enumerator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pred</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>rb_block_proc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enumerator</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>rb_cEnumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicewhen_enum"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enumerable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicewhen_pred"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicewhen_inverted"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><name>idInitialize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slicewhen_i</name></expr></argument>, <argument><expr><name>enumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>enumerator</name></expr>;</return>
</block_content>}</block></function>


















































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_chunk_while</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>enumerable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>enumerator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pred</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>rb_block_proc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enumerator</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>rb_cEnumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicewhen_enum"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enumerable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicewhen_pred"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"slicewhen_inverted"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><name>idInitialize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slicewhen_i</name></expr></argument>, <argument><expr><name>enumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>enumerator</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>enum_sum_memo</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_given</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>float_value</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sum_iter</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>enum_sum_memo</name></name> <modifier>*</modifier></type><name>memo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>unused</name> <init>= <expr><operator>(</operator><call><name>assert</name><argument_list>(<argument><expr><name>memo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call>, <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>c</name> <init>= <expr><name><name>memo</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>block_given</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>rb_yield</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>-&gt;</operator><name>float_value</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>float_value</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXABLE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_big_plus</name><argument_list>(<argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_big_plus</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rb_rational_plus</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_fix_plus</name><argument_list>(<argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_fix_plus</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_big_plus</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_rational_plus</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>float_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>float_value</name>;</goto>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>some_value</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<label><name>float_value</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rb_big2dbl</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>rb_num2dbl</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>float_value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>some_value</name>;</goto>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>signbit</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>signbit</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>f</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>f</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>+</operator> <name>x</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>+</operator> <name>f</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<label><name>some_value</name>:</label>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>idPLUS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>unused</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_sum_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_iter</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>enum_sum_memo</name> <operator>*</operator><operator>)</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_sum_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sum_iter</name><argument_list>(<argument><expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator>struct <name>enum_sum_memo</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_sum</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>enum_sum_memo</name></name> <modifier>*</modifier></type><name>memo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>memo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_sum_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>int_range_sum</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>excl</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>init</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>excl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>rb_big_minus</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_int_ge</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_int_plus</name><argument_list>(<argument><expr><call><name>rb_int_minus</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_int_mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>rb_int_plus</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_int_idiv</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_int_plus</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>init</name></expr>;</return>
</block_content>}</block></function>

































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>enum_sum_memo</name></name></type> <name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>beg</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>excl</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>v</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>block_given</name></name> <operator>=</operator> <call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>memo</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name><name>memo</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name><name>memo</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>c</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>f</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>c</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_range_values</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>beg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>excl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>memo</name><operator>.</operator><name>block_given</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>memo</name><operator>.</operator><name>float_value</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>beg</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>int_range_sum</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>excl</name></expr></argument>, <argument><expr><name><name>memo</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id_each</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hash_sum</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enum_sum_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>.</operator><name>float_value</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name><name>memo</name><operator>.</operator><name>f</name></name> <operator>+</operator> <name><name>memo</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>.</operator><name>n</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>rb_fix_plus</name><argument_list>(<argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name><name>memo</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>memo</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>memo</name><operator>.</operator><name>r</name></name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name><name>memo</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>rb_fix_plus</name><argument_list>(<argument><expr><name><name>memo</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>memo</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name><name>memo</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>rb_big_plus</name><argument_list>(<argument><expr><name><name>memo</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>memo</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>memo</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>rb_rational_plus</name><argument_list>(<argument><expr><name><name>memo</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>memo</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>memo</name><operator>.</operator><name>v</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>uniq_func</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_add_new_element</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>uniq_iter</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENUM_WANT_SVALUE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_add_new_element</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>rb_yield_values2</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enum_uniq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_block_call_func</name> <modifier>*</modifier><specifier>const</specifier></type> <name>func</name> <init>=
<expr><ternary><condition><expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>uniq_iter</name></expr> </then><else>: <expr><name>uniq_func</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_obj_hide</name><argument_list>(<argument><expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_hash_values</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_clear</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>void</name></type>
<name>Init_Enumerable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_intern</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_intern_const(str)</cpp:value></cpp:define>

<expr_stmt><expr><name>rb_mEnumerable</name> <operator>=</operator> <call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"Enumerable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"to_a"</literal></expr></argument>, <argument><expr><name>enum_to_a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"entries"</literal></expr></argument>, <argument><expr><name>enum_to_a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"to_h"</literal></expr></argument>, <argument><expr><name>enum_to_h</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><name>enum_sort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"sort_by"</literal></expr></argument>, <argument><expr><name>enum_sort_by</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"grep"</literal></expr></argument>, <argument><expr><name>enum_grep</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"grep_v"</literal></expr></argument>, <argument><expr><name>enum_grep_v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><name>enum_count</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"find"</literal></expr></argument>, <argument><expr><name>enum_find</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"detect"</literal></expr></argument>, <argument><expr><name>enum_find</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"find_index"</literal></expr></argument>, <argument><expr><name>enum_find_index</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"find_all"</literal></expr></argument>, <argument><expr><name>enum_find_all</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"select"</literal></expr></argument>, <argument><expr><name>enum_find_all</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument>, <argument><expr><name>enum_find_all</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"filter_map"</literal></expr></argument>, <argument><expr><name>enum_filter_map</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"reject"</literal></expr></argument>, <argument><expr><name>enum_reject</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"collect"</literal></expr></argument>, <argument><expr><name>enum_collect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"map"</literal></expr></argument>, <argument><expr><name>enum_collect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"flat_map"</literal></expr></argument>, <argument><expr><name>enum_flat_map</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"collect_concat"</literal></expr></argument>, <argument><expr><name>enum_flat_map</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"inject"</literal></expr></argument>, <argument><expr><name>enum_inject</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"reduce"</literal></expr></argument>, <argument><expr><name>enum_inject</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"partition"</literal></expr></argument>, <argument><expr><name>enum_partition</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"group_by"</literal></expr></argument>, <argument><expr><name>enum_group_by</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"tally"</literal></expr></argument>, <argument><expr><name>enum_tally</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>, <argument><expr><name>enum_first</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"all?"</literal></expr></argument>, <argument><expr><name>enum_all</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"any?"</literal></expr></argument>, <argument><expr><name>enum_any</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"one?"</literal></expr></argument>, <argument><expr><name>enum_one</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"none?"</literal></expr></argument>, <argument><expr><name>enum_none</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><name>enum_min</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument>, <argument><expr><name>enum_max</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"minmax"</literal></expr></argument>, <argument><expr><name>enum_minmax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"min_by"</literal></expr></argument>, <argument><expr><name>enum_min_by</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"max_by"</literal></expr></argument>, <argument><expr><name>enum_max_by</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"minmax_by"</literal></expr></argument>, <argument><expr><name>enum_minmax_by</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"member?"</literal></expr></argument>, <argument><expr><name>enum_member</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"include?"</literal></expr></argument>, <argument><expr><name>enum_member</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"each_with_index"</literal></expr></argument>, <argument><expr><name>enum_each_with_index</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"reverse_each"</literal></expr></argument>, <argument><expr><name>enum_reverse_each</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"each_entry"</literal></expr></argument>, <argument><expr><name>enum_each_entry</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"each_slice"</literal></expr></argument>, <argument><expr><name>enum_each_slice</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"each_cons"</literal></expr></argument>, <argument><expr><name>enum_each_cons</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"each_with_object"</literal></expr></argument>, <argument><expr><name>enum_each_with_object</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"zip"</literal></expr></argument>, <argument><expr><name>enum_zip</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"take"</literal></expr></argument>, <argument><expr><name>enum_take</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"take_while"</literal></expr></argument>, <argument><expr><name>enum_take_while</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>, <argument><expr><name>enum_drop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"drop_while"</literal></expr></argument>, <argument><expr><name>enum_drop_while</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"cycle"</literal></expr></argument>, <argument><expr><name>enum_cycle</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"chunk"</literal></expr></argument>, <argument><expr><name>enum_chunk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"slice_before"</literal></expr></argument>, <argument><expr><name>enum_slice_before</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"slice_after"</literal></expr></argument>, <argument><expr><name>enum_slice_after</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"slice_when"</literal></expr></argument>, <argument><expr><name>enum_slice_when</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"chunk_while"</literal></expr></argument>, <argument><expr><name>enum_chunk_while</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"sum"</literal></expr></argument>, <argument><expr><name>enum_sum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEnumerable</name></expr></argument>, <argument><expr><literal type="string">"uniq"</literal></expr></argument>, <argument><expr><name>enum_uniq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_next</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"next"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
