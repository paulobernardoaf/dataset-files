<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\eval_error.c">




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write_warn</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(NIL_P(str) ? warn_print(x) : (void)rb_str_cat_cstr(str, x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write_warn2</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(NIL_P(str) ? warn_print2(x, l) : (void)rb_str_cat(str, x, l))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CONSTANT_P</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn_print</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_GNUC_EXTENSION_BLOCK( (__builtin_constant_p(x)) ? rb_write_error2((x), (long)strlen(x)) : rb_write_error(x) )</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn_print</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_write_error(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn_print2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_write_error2((x),(l))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write_warn_str</name><parameter_list>(<parameter><type><name>str</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NIL_P(str) ? rb_write_error_str(x) : (void)rb_str_concat((str), (x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warn_print_str</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_write_error_str(x)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>error_pos_str</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>error_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pos</name> <init>= <expr><call><name>error_pos_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_warn_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>error_pos_str</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sourceline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sourcefile</name> <init>= <expr><call><name>rb_source_location</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sourceline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>sourcefile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>caller_name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sourceline</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRIsVALUE</name><literal type="string">": "</literal></expr></argument>, <argument><expr><name>sourcefile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>caller_name</name> <operator>=</operator> <call><name>rb_frame_callee</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRIsVALUE</name><literal type="string">":%d:in `%"</literal><name>PRIsVALUE</name><literal type="string">"': "</literal></expr></argument>,
<argument><expr><name>sourcefile</name></expr></argument>, <argument><expr><name>sourceline</name></expr></argument>,
<argument><expr><call><name>rb_id2str</name><argument_list>(<argument><expr><name>caller_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRIsVALUE</name><literal type="string">":%d: "</literal></expr></argument>, <argument><expr><name>sourcefile</name></expr></argument>, <argument><expr><name>sourceline</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_backtrace</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>bt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>set_backtrace</name> <init>= <expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"set_backtrace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_backtrace_p</name><argument_list>(<argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>set_backtrace</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_exc_set_backtrace</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>bt</name> <operator>=</operator> <call><name>rb_backtrace_to_str_ary</name><argument_list>(<argument><expr><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>set_backtrace</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>error_print</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_ec_error_print</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_warnq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>olen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>len</name></expr><operator>,</operator> <expr><operator>++</operator><name>ptr</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <continue>continue;</continue>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>rb_iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <name>beg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_write_error2</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>ruby_escaped_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_write_error2</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_write_error2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\x%02X"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_write_error2</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>beg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <name>beg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>beg</name> <operator>==</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>olen</name> <operator>==</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_write_error_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_write_error2</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_BEGIN</name></cpp:macro> <cpp:value>"\033["</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_SGR</name></cpp:macro> <cpp:value>"m"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>underline</name><index>[]</index></name> <init>= <expr><name>CSI_BEGIN</name><literal type="string">"1;4"</literal><name>CSI_SGR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bold</name><index>[]</index></name> <init>= <expr><name>CSI_BEGIN</name><literal type="string">"1"</literal><name>CSI_SGR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>reset</name><index>[]</index></name> <init>= <expr><name>CSI_BEGIN</name><literal type="string">""</literal><name>CSI_SGR</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_errinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>eclass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>errat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>emesg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>highlight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>einfo</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>elen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mesg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>emesg</name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>errat</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>errat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>NIL_P</name><argument_list>(<argument><expr><name>mesg</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>errat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_pos</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>write_warn_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>emesg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>einfo</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>emesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elen</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>emesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eclass</name> <operator>==</operator> <name>rb_eRuntimeError</name> <operator>&amp;&amp;</operator> <name>elen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>highlight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>underline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"unhandled exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>highlight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_warn2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>epath</name></decl>;</decl_stmt>

<expr_stmt><expr><name>epath</name> <operator>=</operator> <call><name>rb_class_name</name><argument_list>(<argument><expr><name>eclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>highlight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>underline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_warn_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>epath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>highlight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>highlight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>epath</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>epath</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tail</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>einfo</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>elen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_warnq</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>emesg</name></expr></argument>, <argument><expr><name>einfo</name></expr></argument>, <argument><expr><name>tail</name> <operator>-</operator> <name>einfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>write_warnq</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>emesg</name></expr></argument>, <argument><expr><name>einfo</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>epath</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>highlight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>underline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_warn_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>epath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>highlight</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>write_warn2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>highlight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_warn2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>&amp;&amp;</operator> <name>einfo</name><operator>+</operator><name>elen</name> <operator>&gt;</operator> <name>tail</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>highlight</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_warnq</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>emesg</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>einfo</name><operator>+</operator><name>elen</name><operator>-</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>einfo</name><index>[<expr><name>elen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>write_warn2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>elen</name> <operator>-=</operator> <name>tail</name> <operator>-</operator> <name>einfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>einfo</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>elen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>einfo</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>elen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tail</name> <operator>||</operator> <name>tail</name> <operator>&gt;</operator> <name>einfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_warnq</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>emesg</name></expr></argument>, <argument><expr><name>einfo</name></expr></argument>, <argument><expr><ternary><condition><expr><name>tail</name></expr> ?</condition><then> <expr><name>tail</name><operator>-</operator><name>einfo</name></expr> </then><else>: <expr><name>elen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_warn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_warn2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>elen</name> <operator>-=</operator> <name>tail</name> <operator>-</operator> <name>einfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>einfo</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
<do>do<block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>tail</name></expr>;</expr_stmt></block_content></block> while <condition>(<expr><name>tail</name> <operator>&lt;</operator> <name>einfo</name><operator>+</operator><name>elen</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tail</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>;</do>
<expr_stmt><expr><call><name>write_warnq</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>emesg</name></expr></argument>, <argument><expr><name>einfo</name></expr></argument>, <argument><expr><name>tail</name><operator>-</operator><name>einfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elen</name> <operator>-=</operator> <name>tail</name> <operator>-</operator> <name>einfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>einfo</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>epath</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_warn2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_backtrace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>eclass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>errat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>errat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>errat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><name>eclass</name> <operator>==</operator> <name>rb_eSysStackError</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>threshold</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>INT_MIN</name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>log10</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>len</name> <operator>&gt;</operator> <name>threshold</name></expr> ?</condition><then>
<expr><operator>(</operator><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>threshold</name><operator>)</operator></expr> </then><else>:
<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><name>len</name> <operator>&lt;</operator> <name>threshold</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">9</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_MAX</name></cpp:macro> <cpp:value>(TRACE_HEAD+TRACE_TAIL+5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_HEAD</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_TAIL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>line</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>errat</name></expr></argument>, <argument><expr><ternary><condition><expr><name>reverse</name></expr> ?</condition><then> <expr><name>len</name> <operator>-</operator> <name>i</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>bt</name> <init>= <expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reverse</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>bt</name></expr></argument>, <argument><expr><literal type="string">"%*ld: "</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_warn_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>bt</name></expr></argument>, <argument><expr><literal type="string">"from %"</literal><name>PRIsVALUE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>TRACE_HEAD</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name>TRACE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_warn_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"\t ... %ld levels...\n"</literal></expr></argument>,
<argument><expr><name>len</name> <operator>-</operator> <name>TRACE_HEAD</name> <operator>-</operator> <name>TRACE_TAIL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>TRACE_TAIL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>VALUE</name></type> <name>rb_get_message</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>exc</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>shown_cause_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>cause</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>shown_causes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>shown</name> <init>= <expr><operator>*</operator><name>shown_causes</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shown</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>shown_causes</name> <operator>=</operator> <name>shown</name> <operator>=</operator> <call><name>rb_obj_hide</name><argument_list>(<argument><expr><call><name>rb_ident_hash_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_hash_has_key</name><argument_list>(<argument><expr><name>shown</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>shown</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_cause</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>errinfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>highlight</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>reverse</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>shown_causes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cause</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>, <argument><expr><name>id_cause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>cause</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>cause</name></expr></argument>, <argument><expr><name>rb_eException</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>shown_cause_p</name><argument_list>(<argument><expr><name>cause</name></expr></argument>, <argument><expr><name>shown_causes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>eclass</name> <init>= <expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>errat</name> <init>= <expr><call><name>rb_get_backtrace</name><argument_list>(<argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>emesg</name> <init>= <expr><call><name>rb_get_message</name><argument_list>(<argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reverse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_cause</name><argument_list>(<argument><expr><name>cause</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>highlight</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>, <argument><expr><name>shown_causes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_backtrace</name><argument_list>(<argument><expr><name>eclass</name></expr></argument>, <argument><expr><name>errat</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_errinfo</name><argument_list>(<argument><expr><name>eclass</name></expr></argument>, <argument><expr><name>errat</name></expr></argument>, <argument><expr><name>emesg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>highlight</name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_errinfo</name><argument_list>(<argument><expr><name>eclass</name></expr></argument>, <argument><expr><name>errat</name></expr></argument>, <argument><expr><name>emesg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>highlight</name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_backtrace</name><argument_list>(<argument><expr><name>eclass</name></expr></argument>, <argument><expr><name>errat</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_cause</name><argument_list>(<argument><expr><name>cause</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>highlight</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>, <argument><expr><name>shown_causes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_error_write</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>errinfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>emesg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>errat</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>highlight</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>reverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>eclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>shown_causes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errat</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errat</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>eclass</name> <operator>=</operator> <call><name>CLASS_OF</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>reverse</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>highlight</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tty</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>rb_stderr_tty_p</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>reverse</name> <operator>=</operator> <name>tty</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>highlight</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>highlight</name> <operator>=</operator> <name>tty</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reverse</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>traceback</name><index>[]</index></name> <init>= <expr><literal type="string">"Traceback "</literal>
<literal type="string">"(most recent call last):\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bold_part</name> <init>= <expr><call><name>rb_strlen_lit</name><argument_list>(<argument><expr><literal type="string">"Traceback"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>traceback</name></expr></argument>)</argument_list></sizeof><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>bold</name></expr></argument>)</argument_list></sizeof><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>reset</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>buff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>traceback</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>traceback</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>highlight</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(memcpy(p, s, l), p += (l))</cpp:value></cpp:define>
<expr_stmt><expr><call><name>APPEND</name><argument_list>(<argument><expr><name>bold</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bold</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND</name><argument_list>(<argument><expr><name>traceback</name></expr></argument>, <argument><expr><name>bold_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reset</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPEND</name><argument_list>(<argument><expr><name>traceback</name> <operator>+</operator> <name>bold_part</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>traceback</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>bold_part</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APPEND</name></cpp:undef>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>msg</name> <operator>=</operator> <name>buff</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>write_warn2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_cause</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>highlight</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shown_causes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_backtrace</name><argument_list>(<argument><expr><name>eclass</name></expr></argument>, <argument><expr><name>errat</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_errinfo</name><argument_list>(<argument><expr><name>eclass</name></expr></argument>, <argument><expr><name>errat</name></expr></argument>, <argument><expr><name>emesg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>highlight</name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_errinfo</name><argument_list>(<argument><expr><name>eclass</name></expr></argument>, <argument><expr><name>errat</name></expr></argument>, <argument><expr><name>emesg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>highlight</name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_backtrace</name><argument_list>(<argument><expr><name>eclass</name></expr></argument>, <argument><expr><name>errat</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_cause</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>highlight</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shown_causes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_ec_error_print</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>ec</name></decl></parameter>, <parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>errinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>uint8_t</name></type> <name>raised_flag</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>raised_flag</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>errat</name> <init>= <expr><name>Qundef</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>emesg</name> <init>= <expr><name>Qundef</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ec_raised_clear</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errat</name> <operator>=</operator> <call><name>rb_get_backtrace</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>emesg</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>emesg</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emesg</name> <operator>=</operator> <call><name>rb_get_message</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_error_write</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>, <argument><expr><name>emesg</name></expr></argument>, <argument><expr><name>errat</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>=</operator> <name>errinfo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ec_raised_set</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>raised_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>undef_mesg_for</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_fstring_lit("undefined"v" method `%1$s' for "k" `%2$s'")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>undef_mesg</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( is_mod ? undef_mesg_for(v, "module") : undef_mesg_for(v, "class"))</cpp:value></cpp:define>




<function><type><name>void</name></type>
<name>rb_print_undef</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>rb_method_visibility_t</name></type> <name>visi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_mod</name> <init>= <expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_MODULE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mesg</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>visi</name> <operator>&amp;</operator> <name>METHOD_VISI_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>METHOD_VISI_UNDEF</name></expr>:</case>
<case>case <expr><name>METHOD_VISI_PUBLIC</name></expr>:</case> <expr_stmt><expr><name>mesg</name> <operator>=</operator> <call><name>undef_mesg</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>METHOD_VISI_PRIVATE</name></expr>:</case> <expr_stmt><expr><name>mesg</name> <operator>=</operator> <call><name>undef_mesg</name><argument_list>(<argument><expr><literal type="string">" private"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>METHOD_VISI_PROTECTED</name></expr>:</case> <expr_stmt><expr><name>mesg</name> <operator>=</operator> <call><name>undef_mesg</name><argument_list>(<argument><expr><literal type="string">" protected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>rb_name_err_raise_str</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_print_undef_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_mod</name> <init>= <expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_MODULE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_name_err_raise_str</name><argument_list>(<argument><expr><call><name>undef_mesg</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inaccessible_mesg_for</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_fstring_lit("method `%1$s' for "k" `%2$s' is "v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inaccessible_mesg</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( is_mod ? inaccessible_mesg_for(v, "module") : inaccessible_mesg_for(v, "class"))</cpp:value></cpp:define>




<function><type><name>void</name></type>
<name>rb_print_inaccessible</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>rb_method_visibility_t</name></type> <name>visi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_mod</name> <init>= <expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_MODULE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mesg</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>visi</name> <operator>&amp;</operator> <name>METHOD_VISI_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>METHOD_VISI_UNDEF</name></expr>:</case>
<case>case <expr><name>METHOD_VISI_PUBLIC</name></expr>:</case> <expr_stmt><expr><name>mesg</name> <operator>=</operator> <call><name>inaccessible_mesg</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>METHOD_VISI_PRIVATE</name></expr>:</case> <expr_stmt><expr><name>mesg</name> <operator>=</operator> <call><name>inaccessible_mesg</name><argument_list>(<argument><expr><literal type="string">" private"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>METHOD_VISI_PROTECTED</name></expr>:</case> <expr_stmt><expr><name>mesg</name> <operator>=</operator> <call><name>inaccessible_mesg</name><argument_list>(<argument><expr><literal type="string">" protected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>rb_name_err_raise_str</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sysexit_status</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>st</name> <init>= <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>id_status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unknown_longjmp_status</name><parameter_list>(<parameter><type><name>status</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_bug("Unknown longjmp status %d", status)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>error_handle</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>EXIT_FAILURE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_ec_set_raised</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>ex</name> <operator>&amp;</operator> <name>TAG_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>EXIT_SUCCESS</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TAG_RETURN</name></expr>:</case>
<expr_stmt><expr><call><name>error_pos</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>warn_print</name><argument_list>(<argument><expr><literal type="string">"unexpected return\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_NEXT</name></expr>:</case>
<expr_stmt><expr><call><name>error_pos</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>warn_print</name><argument_list>(<argument><expr><literal type="string">"unexpected next\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_BREAK</name></expr>:</case>
<expr_stmt><expr><call><name>error_pos</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>warn_print</name><argument_list>(<argument><expr><literal type="string">"unexpected break\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_REDO</name></expr>:</case>
<expr_stmt><expr><call><name>error_pos</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>warn_print</name><argument_list>(<argument><expr><literal type="string">"unexpected redo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_RETRY</name></expr>:</case>
<expr_stmt><expr><call><name>error_pos</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>warn_print</name><argument_list>(<argument><expr><literal type="string">"retry outside of rescue clause\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_THROW</name></expr>:</case>

<expr_stmt><expr><call><name>error_pos</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>warn_print</name><argument_list>(<argument><expr><literal type="string">"unexpected throw\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAG_RAISE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>errinfo</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>, <argument><expr><name>rb_eSystemExit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sysexit_status</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>rb_obj_is_instance_of</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>, <argument><expr><name>rb_eSignal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>errinfo</name></expr></argument>, <argument><expr><name>id_signo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ec_error_print</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>errinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>TAG_FATAL</name></expr>:</case>
<expr_stmt><expr><call><name>error_print</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>unknown_longjmp_status</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>rb_ec_reset_raised</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
</unit>
