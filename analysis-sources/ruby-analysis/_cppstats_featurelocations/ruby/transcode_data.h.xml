<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\transcode_data.h">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_TRANSCODE_DATA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_TRANSCODE_DATA_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<macro><name>RUBY_SYMBOL_EXPORT_BEGIN</name></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORDINDEX_SHIFT_BITS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORDINDEX2INFO</name><parameter_list>(<parameter><type><name>widx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((widx) &lt;&lt; WORDINDEX_SHIFT_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO2WORDINDEX</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((info) &gt;&gt; WORDINDEX_SHIFT_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_LOOKUP_BASE</name><parameter_list>(<parameter><type><name>bl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bl)[0])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_LOOKUP_INFO</name><parameter_list>(<parameter><type><name>bl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bl)[1])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PType</name></cpp:macro> <cpp:value>(unsigned int)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMAP</name></cpp:macro> <cpp:value>(PType 0x01)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONEbt</name></cpp:macro> <cpp:value>(0x02)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWObt</name></cpp:macro> <cpp:value>(0x03)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREEbt</name></cpp:macro> <cpp:value>(0x05)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOURbt</name></cpp:macro> <cpp:value>(0x06)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID</name></cpp:macro> <cpp:value>(PType 0x07)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNDEF</name></cpp:macro> <cpp:value>(PType 0x09)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERObt</name></cpp:macro> <cpp:value>(PType 0x0A)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNii</name></cpp:macro> <cpp:value>(PType 0x0B)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNsi</name></cpp:macro> <cpp:value>(PType 0x0D)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNio</name></cpp:macro> <cpp:value>(PType 0x0E)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNso</name></cpp:macro> <cpp:value>(PType 0x0F)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR1</name></cpp:macro> <cpp:value>(PType 0x11)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB4bt</name></cpp:macro> <cpp:value>(PType 0x12)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNsio</name></cpp:macro> <cpp:value>(PType 0x13)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR1_LENGTH</name><parameter_list>(<parameter><type><name>byte_addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned int)(*(byte_addr) + 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR1_BYTEINDEX</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w) &gt;&gt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makeSTR1</name><parameter_list>(<parameter><type><name>bi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((bi) &lt;&lt; 6) | STR1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makeSTR1LEN</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((len)-4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o1</name><parameter_list>(<parameter><type><name>b1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PType((((unsigned char)(b1))&lt;&lt;8)|ONEbt))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o2</name><parameter_list>(<parameter><type><name>b1</name></type></parameter>,<parameter><type><name>b2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PType((((unsigned char)(b1))&lt;&lt;8)|(((unsigned char)(b2))&lt;&lt;16)|TWObt))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o3</name><parameter_list>(<parameter><type><name>b1</name></type></parameter>,<parameter><type><name>b2</name></type></parameter>,<parameter><type><name>b3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PType(((((unsigned char)(b1))&lt;&lt;8)|(((unsigned char)(b2))&lt;&lt;16)|(((unsigned int)(unsigned char)(b3))&lt;&lt;24)|THREEbt)&amp;0xffffffffU))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o4</name><parameter_list>(<parameter><type><name>b0</name></type></parameter>,<parameter><type><name>b1</name></type></parameter>,<parameter><type><name>b2</name></type></parameter>,<parameter><type><name>b3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PType(((((unsigned char)(b1))&lt;&lt;8)|(((unsigned char)(b2))&lt;&lt;16)|(((unsigned int)(unsigned char)(b3))&lt;&lt;24)|((((unsigned char)(b0))&amp;0x07)&lt;&lt;5)|FOURbt)&amp;0xffffffffU))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g4</name><parameter_list>(<parameter><type><name>b0</name></type></parameter>,<parameter><type><name>b1</name></type></parameter>,<parameter><type><name>b2</name></type></parameter>,<parameter><type><name>b3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PType(((((unsigned char)(b0))&lt;&lt;8)|(((unsigned char)(b2))&lt;&lt;16)|((((unsigned char)(b1))&amp;0x0f)&lt;&lt;24)|((((unsigned int)(unsigned char)(b3))&amp;0x0f)&lt;&lt;28)|GB4bt)&amp;0xffffffffU))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>funsio</name><parameter_list>(<parameter><type><name>diff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PType((((unsigned int)(diff))&lt;&lt;8)|FUNsio))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getBT1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char)((a)&gt;&gt; 8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getBT2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char)((a)&gt;&gt;16))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getBT3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char)((a)&gt;&gt;24))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getBT0</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned char)((a)&gt;&gt; 5)&amp;0x07)|0xF0)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getGB4bt0</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char)((a)&gt;&gt; 8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getGB4bt1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned char)((a)&gt;&gt;24)&amp;0x0F)|0x30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getGB4bt2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char)((a)&gt;&gt;16))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getGB4bt3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned char)((a)&gt;&gt;28)&amp;0x0F)|0x30)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o2FUNii</name><parameter_list>(<parameter><type><name>b1</name></type></parameter>,<parameter><type><name>b2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PType((((unsigned char)(b1))&lt;&lt;8)|(((unsigned char)(b2))&lt;&lt;16)|FUNii))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONETRAIL</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWOTRAIL</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREETRAIL</name></cpp:macro></cpp:define> 

<typedef>typedef <type><enum>enum <block>{
<decl><name>asciicompat_converter</name></decl>, 
<decl><name>asciicompat_decoder</name></decl>, 
<decl><name>asciicompat_encoder</name></decl> 

}</block></enum></type> <name>rb_transcoder_asciicompat_type_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>rb_transcoder</name></name></type> <name>rb_transcoder</name>;</typedef>


<struct>struct <name>rb_transcoder</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>conv_tree_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>byte_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>byte_array_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>word_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>word_array_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>word_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input_unit_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_transcoder_asciicompat_type_t</name></type> <name>asciicompat_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>state_size</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>state_init_func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>state_fini_func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func_ii</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func_si</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>func_io</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>func_so</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>finish_func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>resetsize_func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>resetstate_func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>func_sio</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl> 
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>rb_declare_transcoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enc1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enc2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_register_transcoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_transcoder</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXTSTATIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>EXTSTATIC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void Init_trans_ ##name(void)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void Init_ ##name(void)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>RUBY_SYMBOL_EXPORT_END</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
