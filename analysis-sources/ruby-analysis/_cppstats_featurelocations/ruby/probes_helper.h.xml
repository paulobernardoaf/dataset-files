<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\probes_helper.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_PROBES_HELPER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_PROBES_HELPER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>

<struct>struct <name>ruby_dtrace_method_hook_args</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>classname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>methodname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>klass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>MJIT_SYMBOL_EXPORT_BEGIN</name></type>
<name>NOINLINE</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> <name>rb_dtrace_setup</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ruby_dtrace_method_hook_args</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<expr><name>MJIT_SYMBOL_EXPORT_END</name></expr>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_DTRACE_METHOD_HOOK</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>ec</name></type></parameter>, <parameter><type><name>klazz</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { struct ruby_dtrace_method_hook_args args; if (rb_dtrace_setup(ec, klazz, id, &amp;args)) { RUBY_DTRACE_##name(args.classname, args.methodname, args.filename, args.line_no); } } } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_DTRACE_METHOD_ENTRY_HOOK</name><parameter_list>(<parameter><type><name>ec</name></type></parameter>, <parameter><type><name>klass</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RUBY_DTRACE_METHOD_HOOK(METHOD_ENTRY, ec, klass, id)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_DTRACE_METHOD_RETURN_HOOK</name><parameter_list>(<parameter><type><name>ec</name></type></parameter>, <parameter><type><name>klass</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RUBY_DTRACE_METHOD_HOOK(METHOD_RETURN, ec, klass, id)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_DTRACE_CMETHOD_ENTRY_HOOK</name><parameter_list>(<parameter><type><name>ec</name></type></parameter>, <parameter><type><name>klass</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RUBY_DTRACE_METHOD_HOOK(CMETHOD_ENTRY, ec, klass, id)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_DTRACE_CMETHOD_RETURN_HOOK</name><parameter_list>(<parameter><type><name>ec</name></type></parameter>, <parameter><type><name>klass</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RUBY_DTRACE_METHOD_HOOK(CMETHOD_RETURN, ec, klass, id)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
