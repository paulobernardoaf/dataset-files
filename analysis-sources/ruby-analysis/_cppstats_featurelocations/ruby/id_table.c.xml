<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\id_table.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id_table.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ID_TABLE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_TABLE_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ID_TABLE_DEBUG</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDEBUG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby_assert.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>rb_id_serial_t</name></type> <name>id_key_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ID</name></type>
<name>key2id</name><parameter_list>(<parameter><decl><type><name>id_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_id_serial_to_id</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>id_key_t</name></type>
<name>id2key</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_id_to_serial</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<typedef>typedef <type><struct>struct <name>rb_id_item</name> <block>{
<decl_stmt><decl><type><name>id_key_t</name></type> <name>key</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_VALUE</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>collision</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>
}</block></struct></type> <name>item_t</name>;</typedef>

<struct>struct <name>rb_id_table</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>capa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>item_t</name> <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_VALUE</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_GET_KEY</name><parameter_list>(<parameter><type><name>tbl</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tbl)-&gt;items[i].key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_KEY_ISSET</name><parameter_list>(<parameter><type><name>tbl</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tbl)-&gt;items[i].key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_COLLIDED</name><parameter_list>(<parameter><type><name>tbl</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tbl)-&gt;items[i].collision)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_SET_COLLIDED</name><parameter_list>(<parameter><type><name>tbl</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tbl)-&gt;items[i].collision = 1)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ITEM_SET_KEY</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>id_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_GET_KEY</name><parameter_list>(<parameter><type><name>tbl</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tbl)-&gt;items[i].key &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_KEY_ISSET</name><parameter_list>(<parameter><type><name>tbl</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tbl)-&gt;items[i].key &gt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_COLLIDED</name><parameter_list>(<parameter><type><name>tbl</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tbl)-&gt;items[i].key &amp; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_SET_COLLIDED</name><parameter_list>(<parameter><type><name>tbl</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tbl)-&gt;items[i].key |= 1)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ITEM_SET_KEY</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>id_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <operator>(</operator><name>key</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>ITEM_COLLIDED</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>round_capa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>capa</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>capa</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>capa</name> <operator>|=</operator> <name>capa</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>capa</name> <operator>|=</operator> <name>capa</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>capa</name> <operator>|=</operator> <name>capa</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>capa</name> <operator>|=</operator> <name>capa</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>capa</name> <operator>|=</operator> <name>capa</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>capa</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type>
<name>rb_id_table_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>capa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MEMZERO</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>struct <name>rb_id_table</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>capa</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>capa</name> <operator>=</operator> <call><name>round_capa</name><argument_list>(<argument><expr><name>capa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>capa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>ZALLOC_N</name><argument_list>(<argument><expr><name>item_t</name></expr></argument>, <argument><expr><name>capa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>tbl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type>
<name>rb_id_table_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><call><name>ALLOC</name><argument_list>(<argument><expr>struct <name>rb_id_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_id_table_init</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>capa</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_id_table_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_id_table_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMZERO</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>item_t</name></expr></argument>, <argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>rb_id_table_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>tbl</name><operator>-&gt;</operator><name>num</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>rb_id_table_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>item_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rb_id_table</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_table_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name><modifier>*</modifier></type> <name>tbl</name></decl></parameter>, <parameter><decl><type><name>id_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ix</name> <init>= <expr><name>key</name> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>key</name> <operator>!=</operator> <call><name>ITEM_GET_KEY</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ITEM_COLLIDED</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ix</name> <operator>=</operator> <operator>(</operator><name>ix</name> <operator>+</operator> <name>d</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ix</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_table_raw_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>id_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ix</name> <init>= <expr><name>key</name> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ITEM_KEY_ISSET</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ITEM_SET_COLLIDED</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ix</name> <operator>=</operator> <operator>(</operator><name>ix</name> <operator>+</operator> <name>d</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ITEM_COLLIDED</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>used</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ITEM_SET_KEY</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>ix</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_delete_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ITEM_COLLIDED</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>used</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>num</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ITEM_SET_KEY</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>ix</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_table_extend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name><modifier>*</modifier></type> <name>tbl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tbl</name><operator>-&gt;</operator><name>used</name></name> <operator>+</operator> <operator>(</operator><name><name>tbl</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_cap</name> <init>= <expr><call><name>round_capa</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <operator>(</operator><name><name>tbl</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>item_t</name><modifier>*</modifier></type> <name>old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_id_table</name></name></type> <name>tmp_tbl</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_cap</name> <operator>&lt;</operator> <name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_cap</name> <operator>=</operator> <call><name>round_capa</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>used</name></name> <operator>+</operator> <operator>(</operator><name><name>tbl</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp_tbl</name><operator>.</operator><name>capa</name></name> <operator>=</operator> <name>new_cap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_tbl</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>ZALLOC_N</name><argument_list>(<argument><expr><name>item_t</name></expr></argument>, <argument><expr><name>new_cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>id_key_t</name></type> <name>key</name> <init>= <expr><call><name>ITEM_GET_KEY</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hash_table_raw_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_tbl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>tbl</name><operator>-&gt;</operator><name>items</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tbl</name> <operator>=</operator> <name>tmp_tbl</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ID_TABLE_DEBUG</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_table_show</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>id_key_t</name> <modifier>*</modifier></type><name>keys</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>keys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>capa</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"tbl: %p (capa: %d, num: %d, used: %d)\n"</literal></expr></argument>, <argument><expr><name>tbl</name></expr></argument>, <argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name></expr></argument>, <argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>capa</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ITEM_KEY_ISSET</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -&gt; [%d] %s %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><call><name>key2id</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>rb_id_table_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>id_key_t</name></type> <name>key</name> <init>= <expr><call><name>id2key</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>hash_table_index</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_id_table_insert_key</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>id_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name> <init>= <expr><call><name>hash_table_index</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>hash_table_extend</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_table_raw_insert</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_id_table_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_id_table_insert_key</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><call><name>id2key</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_id_table_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>id_key_t</name></type> <name>key</name> <init>= <expr><call><name>id2key</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>hash_table_index</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>hash_delete_index</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_id_table_foreach_with_replace</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>rb_id_table_foreach_func_t</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>rb_id_table_update_callback_func_t</name> <modifier>*</modifier></type><name>replace</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>capa</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>capa</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ITEM_KEY_ISSET</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>id_key_t</name></type> <name>key</name> <init>= <expr><call><name>ITEM_GET_KEY</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>rb_id_table_iterator_result</name></name></type> <name>ret</name> <init>= <expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>Qundef</name></expr></argument>, <argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ID_TABLE_REPLACE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name>replace</name>)<argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ID_TABLE_STOP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_id_table_foreach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>rb_id_table_foreach_func_t</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>capa</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>capa</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ITEM_KEY_ISSET</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>id_key_t</name></type> <name>key</name> <init>= <expr><call><name>ITEM_GET_KEY</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>rb_id_table_iterator_result</name></name></type> <name>ret</name> <init>= <expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><call><name>key2id</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ID_TABLE_DELETE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hash_delete_index</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ID_TABLE_STOP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_id_table_foreach_values</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_id_table</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>rb_id_table_foreach_values_func_t</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>capa</name> <init>= <expr><name><name>tbl</name><operator>-&gt;</operator><name>capa</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>capa</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ITEM_KEY_ISSET</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>rb_id_table_iterator_result</name></name></type> <name>ret</name> <init>= <expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ID_TABLE_DELETE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hash_delete_index</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ID_TABLE_STOP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
