<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\timev.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_TIMEV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_TIMEV_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
struct vtm {};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PACKED_STRUCT_UNALIGNED</name><argument_list>(<argument>struct vtm {
VALUE year; 
VALUE subsecx; 
VALUE utc_offset; 
VALUE zone; 
unsigned int yday:<literal type="number">9</literal>; 
unsigned int mon:<literal type="number">4</literal>; 
unsigned int mday:<literal type="number">5</literal>; 
unsigned int hour:<literal type="number">5</literal>; 
unsigned int min:<literal type="number">6</literal>; 
unsigned int sec:<literal type="number">6</literal>; 
unsigned int wday:<literal type="number">3</literal>; 
unsigned int isdst:<literal type="number">2</literal>; 
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_SCALE</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TYPEOF_TIMEVAL_TV_SEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPEOF_TIMEVAL_TV_SEC</name></cpp:macro> <cpp:value>time_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TYPEOF_TIMEVAL_TV_USEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INT_MAX</name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPEOF_TIMEVAL_TV_USEC</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPEOF_TIMEVAL_TV_USEC</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_TIME_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>unsigned_time_t</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_TIME_T</name> <operator>==</operator> <name>SIZEOF_INT</name></expr></cpp:elif>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>unsigned_time_t</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_TIME_T</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:elif>
<typedef>typedef <type><name>unsigned</name> <name>LONG_LONG</name></type> <name>unsigned_time_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> cannot find integer type which size is same as time_t.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_ENCODING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>VALUE</name></type> <name>rb_strftime_timespec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>format_len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_strftime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>format_len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>timev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gmt</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>VALUE</name></type> <name>rb_time_zone_abbreviation</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>zone</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
