<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\node.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_NODE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_NODE_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
} 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>node_type</name> <block>{
<decl><name>NODE_SCOPE</name></decl>,
<decl><name>NODE_BLOCK</name></decl>,
<decl><name>NODE_IF</name></decl>,
<decl><name>NODE_UNLESS</name></decl>,
<decl><name>NODE_CASE</name></decl>,
<decl><name>NODE_CASE2</name></decl>,
<decl><name>NODE_CASE3</name></decl>,
<decl><name>NODE_WHEN</name></decl>,
<decl><name>NODE_IN</name></decl>,
<decl><name>NODE_WHILE</name></decl>,
<decl><name>NODE_UNTIL</name></decl>,
<decl><name>NODE_ITER</name></decl>,
<decl><name>NODE_FOR</name></decl>,
<decl><name>NODE_FOR_MASGN</name></decl>,
<decl><name>NODE_BREAK</name></decl>,
<decl><name>NODE_NEXT</name></decl>,
<decl><name>NODE_REDO</name></decl>,
<decl><name>NODE_RETRY</name></decl>,
<decl><name>NODE_BEGIN</name></decl>,
<decl><name>NODE_RESCUE</name></decl>,
<decl><name>NODE_RESBODY</name></decl>,
<decl><name>NODE_ENSURE</name></decl>,
<decl><name>NODE_AND</name></decl>,
<decl><name>NODE_OR</name></decl>,
<decl><name>NODE_MASGN</name></decl>,
<decl><name>NODE_LASGN</name></decl>,
<decl><name>NODE_DASGN</name></decl>,
<decl><name>NODE_DASGN_CURR</name></decl>,
<decl><name>NODE_GASGN</name></decl>,
<decl><name>NODE_IASGN</name></decl>,
<decl><name>NODE_CDECL</name></decl>,
<decl><name>NODE_CVASGN</name></decl>,
<decl><name>NODE_OP_ASGN1</name></decl>,
<decl><name>NODE_OP_ASGN2</name></decl>,
<decl><name>NODE_OP_ASGN_AND</name></decl>,
<decl><name>NODE_OP_ASGN_OR</name></decl>,
<decl><name>NODE_OP_CDECL</name></decl>,
<decl><name>NODE_CALL</name></decl>,
<decl><name>NODE_OPCALL</name></decl>,
<decl><name>NODE_FCALL</name></decl>,
<decl><name>NODE_VCALL</name></decl>,
<decl><name>NODE_QCALL</name></decl>,
<decl><name>NODE_SUPER</name></decl>,
<decl><name>NODE_ZSUPER</name></decl>,
<decl><name>NODE_LIST</name></decl>,
<decl><name>NODE_ZLIST</name></decl>,
<decl><name>NODE_VALUES</name></decl>,
<decl><name>NODE_HASH</name></decl>,
<decl><name>NODE_RETURN</name></decl>,
<decl><name>NODE_YIELD</name></decl>,
<decl><name>NODE_LVAR</name></decl>,
<decl><name>NODE_DVAR</name></decl>,
<decl><name>NODE_GVAR</name></decl>,
<decl><name>NODE_IVAR</name></decl>,
<decl><name>NODE_CONST</name></decl>,
<decl><name>NODE_CVAR</name></decl>,
<decl><name>NODE_NTH_REF</name></decl>,
<decl><name>NODE_BACK_REF</name></decl>,
<decl><name>NODE_MATCH</name></decl>,
<decl><name>NODE_MATCH2</name></decl>,
<decl><name>NODE_MATCH3</name></decl>,
<decl><name>NODE_LIT</name></decl>,
<decl><name>NODE_STR</name></decl>,
<decl><name>NODE_DSTR</name></decl>,
<decl><name>NODE_XSTR</name></decl>,
<decl><name>NODE_DXSTR</name></decl>,
<decl><name>NODE_EVSTR</name></decl>,
<decl><name>NODE_DREGX</name></decl>,
<decl><name>NODE_ONCE</name></decl>,
<decl><name>NODE_ARGS</name></decl>,
<decl><name>NODE_ARGS_AUX</name></decl>,
<decl><name>NODE_OPT_ARG</name></decl>,
<decl><name>NODE_KW_ARG</name></decl>,
<decl><name>NODE_POSTARG</name></decl>,
<decl><name>NODE_ARGSCAT</name></decl>,
<decl><name>NODE_ARGSPUSH</name></decl>,
<decl><name>NODE_SPLAT</name></decl>,
<decl><name>NODE_BLOCK_PASS</name></decl>,
<decl><name>NODE_DEFN</name></decl>,
<decl><name>NODE_DEFS</name></decl>,
<decl><name>NODE_ALIAS</name></decl>,
<decl><name>NODE_VALIAS</name></decl>,
<decl><name>NODE_UNDEF</name></decl>,
<decl><name>NODE_CLASS</name></decl>,
<decl><name>NODE_MODULE</name></decl>,
<decl><name>NODE_SCLASS</name></decl>,
<decl><name>NODE_COLON2</name></decl>,
<decl><name>NODE_COLON3</name></decl>,
<decl><name>NODE_DOT2</name></decl>,
<decl><name>NODE_DOT3</name></decl>,
<decl><name>NODE_FLIP2</name></decl>,
<decl><name>NODE_FLIP3</name></decl>,
<decl><name>NODE_SELF</name></decl>,
<decl><name>NODE_NIL</name></decl>,
<decl><name>NODE_TRUE</name></decl>,
<decl><name>NODE_FALSE</name></decl>,
<decl><name>NODE_ERRINFO</name></decl>,
<decl><name>NODE_DEFINED</name></decl>,
<decl><name>NODE_POSTEXE</name></decl>,
<decl><name>NODE_DSYM</name></decl>,
<decl><name>NODE_ATTRASGN</name></decl>,
<decl><name>NODE_LAMBDA</name></decl>,
<decl><name>NODE_ARYPTN</name></decl>,
<decl><name>NODE_HSHPTN</name></decl>,
<decl><name>NODE_LAST</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>rb_code_position_struct</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_code_position_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>rb_code_location_struct</name> <block>{
<decl_stmt><decl><type><name>rb_code_position_t</name></type> <name>beg_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_code_position_t</name></type> <name>end_pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_code_location_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_code_location_t</name></type>
<name>code_loc_gen</name><parameter_list>(<parameter><decl><type><name>rb_code_location_t</name> <modifier>*</modifier></type><name>loc1</name></decl></parameter>, <parameter><decl><type><name>rb_code_location_t</name> <modifier>*</modifier></type><name>loc2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_code_location_t</name></type> <name>loc</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>loc</name><operator>.</operator><name>beg_pos</name></name> <operator>=</operator> <name><name>loc1</name><operator>-&gt;</operator><name>beg_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loc</name><operator>.</operator><name>end_pos</name></name> <operator>=</operator> <name><name>loc2</name><operator>-&gt;</operator><name>end_pos</name></name></expr>;</expr_stmt>
<return>return <expr><name>loc</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>RNode</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>RNode</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>
}</block> <decl><name>u1</name></decl>;</union>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>RNode</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name>u2</name></decl>;</union>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>RNode</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_global_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_args_info</name></name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_ary_pattern_info</name></name> <modifier>*</modifier></type><name>apinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name>u3</name></decl>;</union>
<decl_stmt><decl><type><name>rb_code_location_t</name></type> <name>nd_loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>node_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>NODE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RNODE</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RNode)(obj))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_FL_NEWLINE</name></cpp:macro> <cpp:value>(((VALUE)1)&lt;&lt;7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_TYPESHIFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_TYPEMASK</name></cpp:macro> <cpp:value>(((VALUE)0x7f)&lt;&lt;NODE_TYPESHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_type</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) (((n)-&gt;flags &amp; NODE_TYPEMASK)&gt;&gt;NODE_TYPESHIFT))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_set_type</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(n)-&gt;flags=(((n)-&gt;flags&amp;~NODE_TYPEMASK)|((((unsigned long)(t))&lt;&lt;NODE_TYPESHIFT)&amp;NODE_TYPEMASK))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_LSHIFT</name></cpp:macro> <cpp:value>(NODE_TYPESHIFT+7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_LMASK</name></cpp:macro> <cpp:value>(((SIGNED_VALUE)1&lt;&lt;(sizeof(VALUE)*CHAR_BIT-NODE_LSHIFT))-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_line</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(((SIGNED_VALUE)(n)-&gt;flags)&gt;&gt;NODE_LSHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_set_line</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(n)-&gt;flags=(((n)-&gt;flags&amp;~((VALUE)(-1)&lt;&lt;NODE_LSHIFT))|((VALUE)((l)&amp;NODE_LMASK)&lt;&lt;NODE_LSHIFT))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_first_column</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((n)-&gt;nd_loc.beg_pos.column))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_set_first_column</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;nd_loc.beg_pos.column = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_first_lineno</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((n)-&gt;nd_loc.beg_pos.lineno))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_set_first_lineno</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;nd_loc.beg_pos.lineno = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_first_loc</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;nd_loc.beg_pos)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_set_first_loc</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nd_first_loc(n) = (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_last_column</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((n)-&gt;nd_loc.end_pos.column))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_set_last_column</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;nd_loc.end_pos.column = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_last_lineno</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((n)-&gt;nd_loc.end_pos.lineno))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_set_last_lineno</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;nd_loc.end_pos.lineno = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_last_loc</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;nd_loc.end_pos)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_set_last_loc</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nd_last_loc(n) = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_node_id</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;node_id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_set_node_id</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;node_id = (id))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_head</name></cpp:macro> <cpp:value>u1.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_alen</name></cpp:macro> <cpp:value>u2.argc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_next</name></cpp:macro> <cpp:value>u3.node</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_cond</name></cpp:macro> <cpp:value>u1.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_body</name></cpp:macro> <cpp:value>u2.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_else</name></cpp:macro> <cpp:value>u3.node</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_resq</name></cpp:macro> <cpp:value>u2.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_ensr</name></cpp:macro> <cpp:value>u3.node</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_1st</name></cpp:macro> <cpp:value>u1.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_2nd</name></cpp:macro> <cpp:value>u2.node</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_stts</name></cpp:macro> <cpp:value>u1.node</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_entry</name></cpp:macro> <cpp:value>u3.entry</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_vid</name></cpp:macro> <cpp:value>u1.id</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_cflag</name></cpp:macro> <cpp:value>u2.id</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_cval</name></cpp:macro> <cpp:value>u3.value</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_oid</name></cpp:macro> <cpp:value>u1.id</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_tbl</name></cpp:macro> <cpp:value>u1.tbl</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_var</name></cpp:macro> <cpp:value>u1.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_iter</name></cpp:macro> <cpp:value>u3.node</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_value</name></cpp:macro> <cpp:value>u2.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_aid</name></cpp:macro> <cpp:value>u3.id</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_lit</name></cpp:macro> <cpp:value>u1.value</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_rest</name></cpp:macro> <cpp:value>u1.id</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_opt</name></cpp:macro> <cpp:value>u1.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_pid</name></cpp:macro> <cpp:value>u1.id</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_plen</name></cpp:macro> <cpp:value>u2.argc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_recv</name></cpp:macro> <cpp:value>u1.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_mid</name></cpp:macro> <cpp:value>u2.id</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_args</name></cpp:macro> <cpp:value>u3.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_ainfo</name></cpp:macro> <cpp:value>u3.args</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_defn</name></cpp:macro> <cpp:value>u3.node</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_cpath</name></cpp:macro> <cpp:value>u1.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_super</name></cpp:macro> <cpp:value>u3.node</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_beg</name></cpp:macro> <cpp:value>u1.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_end</name></cpp:macro> <cpp:value>u2.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_state</name></cpp:macro> <cpp:value>u3.state</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_rval</name></cpp:macro> <cpp:value>u2.value</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_nth</name></cpp:macro> <cpp:value>u2.argc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_tag</name></cpp:macro> <cpp:value>u1.id</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_alias</name></cpp:macro> <cpp:value>u1.id</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_orig</name></cpp:macro> <cpp:value>u2.id</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_undef</name></cpp:macro> <cpp:value>u2.node</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_brace</name></cpp:macro> <cpp:value>u2.argc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_pconst</name></cpp:macro> <cpp:value>u1.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_pkwargs</name></cpp:macro> <cpp:value>u2.node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_pkwrestarg</name></cpp:macro> <cpp:value>u3.node</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd_apinfo</name></cpp:macro> <cpp:value>u3.apinfo</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_NODE</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>a0</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_NODE_WITH_LOCALS</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>node_newnode_with_locals(p, (t),(VALUE)(a1),(VALUE)(a2),loc)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DEFN</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DEFN,0,i,NEW_SCOPE(a,d,loc),loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DEFS</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DEFS,r,i,NEW_SCOPE(a,d,loc),loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_SCOPE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE_WITH_LOCALS(NODE_SCOPE,b,a,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BLOCK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_BLOCK,a,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_IF</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_IF,c,t,e,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_UNLESS</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_UNLESS,c,t,e,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CASE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_CASE,h,b,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CASE2</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_CASE2,0,b,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CASE3</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_CASE3,h,b,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_WHEN</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_WHEN,c,t,e,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_IN</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_IN,c,t,e,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_WHILE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_WHILE,c,b,n,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_UNTIL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_UNTIL,c,b,n,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_FOR,0,b,i,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_FOR_MASGN</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_FOR_MASGN,v,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_ITER</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_ITER,0,NEW_SCOPE(a,b,loc),0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_LAMBDA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_LAMBDA,0,NEW_SCOPE(a,b,loc),0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BREAK</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_BREAK,s,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_NEXT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_NEXT,s,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_REDO</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_REDO,0,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_RETRY</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_RETRY,0,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BEGIN</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_BEGIN,0,b,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_RESCUE</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>res</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_RESCUE,b,res,e,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_RESBODY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>ex</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_RESBODY,n,ex,a,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_ENSURE</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>en</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_ENSURE,b,0,en,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_RETURN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_RETURN,s,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_YIELD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_YIELD,a,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_LIST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_LIST,a,1,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_ZLIST</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_ZLIST,0,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_HASH</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_HASH,a,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_MASGN</name><parameter_list>(<parameter><type><name>l</name></type></parameter>,<parameter><type><name>r</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_MASGN,l,0,r,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_GASGN</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_LASGN</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_LASGN,v,val,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DASGN</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DASGN,v,val,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DASGN_CURR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DASGN_CURR,v,val,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_IASGN</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_IASGN,v,val,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CDECL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>path</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_CDECL,v,val,path,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CVASGN</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_CVASGN,v,val,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_OP_ASGN1</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>id</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_OP_ASGN1,p,id,a,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_OP_ASGN2</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>o</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_OP_ASGN2,r,val,NEW_OP_ASGN22(i,o,t,loc),loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_OP_ASGN22</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>o</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_OP_ASGN2,i,o,t,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_OP_ASGN_OR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_OP_ASGN_OR,i,val,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_OP_ASGN_AND</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_OP_ASGN_AND,i,val,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_OP_CDECL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>op</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_OP_CDECL,v,val,op,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_GVAR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_LVAR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_LVAR,v,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DVAR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DVAR,v,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_IVAR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_IVAR,v,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CONST</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_CONST,v,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CVAR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_CVAR,v,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_NTH_REF</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_NTH_REF,0,n,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BACK_REF</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_BACK_REF,0,n,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_MATCH</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_MATCH,c,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_MATCH2</name><parameter_list>(<parameter><type><name>n1</name></type></parameter>,<parameter><type><name>n2</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_MATCH2,n1,n2,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_MATCH3</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>n2</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_MATCH3,r,n2,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_LIT</name><parameter_list>(<parameter><type><name>l</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_LIT,l,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_STR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_STR,s,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DSTR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DSTR,s,1,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_XSTR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_XSTR,s,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DXSTR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DXSTR,s,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DSYM</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DSYM,s,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_EVSTR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_EVSTR,0,(n),0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CALL</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_CALL,r,m,a,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_OPCALL</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_OPCALL,r,m,a,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_FCALL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_FCALL,0,m,a,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_VCALL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_VCALL,0,m,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_SUPER</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_SUPER,0,0,a,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_ZSUPER</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_ZSUPER,0,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_ARGS_AUX</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_ARGS_AUX,r,b,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_OPT_ARG</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>v</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_OPT_ARG,i,v,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_KW_ARG</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>v</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_KW_ARG,i,v,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_POSTARG</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>v</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_POSTARG,i,v,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_ARGSCAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_ARGSCAT,a,b,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_ARGSPUSH</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_ARGSPUSH,a,b,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_SPLAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_SPLAT,a,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_BLOCK_PASS</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_BLOCK_PASS,0,b,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_ALIAS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>o</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_ALIAS,n,o,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_VALIAS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>o</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_VALIAS,n,o,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_UNDEF</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_UNDEF,0,i,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_CLASS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_CLASS,n,NEW_SCOPE(0,b,loc),(s),loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_SCLASS</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_SCLASS,r,NEW_SCOPE(0,b,loc),0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_MODULE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_MODULE,n,NEW_SCOPE(0,b,loc),0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_COLON2</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_COLON2,c,i,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_COLON3</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_COLON3,0,i,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DOT2</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DOT2,b,e,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DOT3</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DOT3,b,e,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_SELF</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_SELF,0,0,1,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_NIL</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_NIL,0,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_TRUE</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_TRUE,0,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_FALSE</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_FALSE,0,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_ERRINFO</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_ERRINFO,0,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DEFINED</name><parameter_list>(<parameter><type><name>e</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_DEFINED,e,0,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_PREEXE</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_SCOPE(b,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_POSTEXE</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_POSTEXE,0,b,0,loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_ATTRASGN</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NEW_NODE(NODE_ATTRASGN,r,m,a,loc)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_SPECIAL_REQUIRED_KEYWORD</name></cpp:macro> <cpp:value>((NODE *)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_REQUIRED_KEYWORD_P</name><parameter_list>(<parameter><type><name>node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((node)-&gt;nd_value == NODE_SPECIAL_REQUIRED_KEYWORD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_SPECIAL_NO_NAME_REST</name></cpp:macro> <cpp:value>((NODE *)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_NAMED_REST_P</name><parameter_list>(<parameter><type><name>node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((node) != NODE_SPECIAL_NO_NAME_REST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_SPECIAL_EXCESSIVE_COMMA</name></cpp:macro> <cpp:value>((ID)1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_SPECIAL_NO_REST_KEYWORD</name></cpp:macro> <cpp:value>((NODE *)-1)</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_node_case_when_optimizable_literal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NODE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>RUBY_SYMBOL_EXPORT_BEGIN</name></macro>

<typedef>typedef <type><name><name>struct</name> <name>node_buffer_struct</name></name></type> <name>node_buffer_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>rb_ast_body_struct</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>NODE</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>compile_option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_ast_body_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>rb_ast_struct</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node_buffer_t</name> <modifier>*</modifier></type><name>node_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_ast_body_t</name></type> <name>body</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_ast_t</name>;</typedef>
<function_decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>rb_ast_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_ast_mark</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_ast_update_references</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_ast_dispose</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_ast_free</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>rb_ast_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_ast_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_ast_add_mark_object</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>NODE</name> <modifier>*</modifier></type><name>rb_ast_newnode</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>node_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_ast_delete_node</name><parameter_list>(<parameter><decl><type><name>rb_ast_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>NODE</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_parser_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_parser_end_seen_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_parser_encoding</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_parser_set_yydebug</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_parser_dump_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comment</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_parser_set_options</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>rb_parser_compile_string</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>rb_parser_compile_string_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>vparser</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>rb_parser_compile_file_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>vparser</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rb_ast_t</name> <modifier>*</modifier></type><name>rb_parser_compile_generic</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>vparser</name></decl></parameter>, <parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>lex_gets</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_node_init</name><parameter_list>(<parameter><decl><type><name>NODE</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>node_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a0</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ruby_node_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>kwtable</name></name> <modifier>*</modifier></type><name>rb_reserved_word</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>rb_args_info</name> <block>{
<decl_stmt><decl><type><name>NODE</name> <modifier>*</modifier></type><name>pre_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NODE</name> <modifier>*</modifier></type><name>post_init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pre_args_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>post_args_num</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ID</name></type> <name>first_post_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name>rest_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>block_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NODE</name> <modifier>*</modifier></type><name>kw_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NODE</name> <modifier>*</modifier></type><name>kw_rest_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NODE</name> <modifier>*</modifier></type><name>opt_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>no_kwarg</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ruby2_keywords</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>imemo</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>rb_ary_pattern_info</name> <block>{
<decl_stmt><decl><type><name>NODE</name> <modifier>*</modifier></type><name>pre_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NODE</name> <modifier>*</modifier></type><name>rest_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NODE</name> <modifier>*</modifier></type><name>post_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>imemo</name></decl>;</decl_stmt>
}</block>;</struct>

<struct_decl>struct <name>parser_params</name>;</struct_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>rb_parser_malloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parser_params</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>rb_parser_realloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parser_params</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>rb_parser_calloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parser_params</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_parser_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parser_params</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void rb_parser_printf(struct parser_params *parser, const char *fmt, ...)</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>RUBY_SYMBOL_EXPORT_END</name></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
{ 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
