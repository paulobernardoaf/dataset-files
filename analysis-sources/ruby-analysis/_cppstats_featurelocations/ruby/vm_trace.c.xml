<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\vm_trace.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval_intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/symbol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iseq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>



<typedef>typedef <type><struct>struct <name>rb_event_hook_struct</name> <block>{
<decl_stmt><decl><type><name>rb_event_hook_flag_t</name></type> <name>hook_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_event_hook_struct</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>target_line</name></decl>;</decl_stmt>
}</block> <decl><name>filter</name></decl>;</struct>
}</block></struct></type> <name>rb_event_hook_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rb_event_hook_raw_arg_func_t</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EVENT_NUM</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>rb_hook_list_mark</name><parameter_list>(<parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>hooks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name> <init>= <expr><name><name>hooks</name><operator>-&gt;</operator><name>hooks</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>hook</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>hook</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hook</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clean_hooks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>rb_hook_list_free</name><parameter_list>(<parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>hooks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clean_hooks</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_global_event_hook</name><parameter_list>(<parameter><decl><type><name>rb_event_flag_t</name></type> <name>vm_events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_event_flag_t</name></type> <name>new_iseq_events</name> <init>= <expr><name>vm_events</name> <operator>&amp;</operator> <name>ISEQ_TRACE_EVENTS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_event_flag_t</name></type> <name>enabled_iseq_events</name> <init>= <expr><name>ruby_vm_event_enabled_global_flags</name> <operator>&amp;</operator> <name>ISEQ_TRACE_EVENTS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_iseq_events</name> <operator>&amp;</operator> <operator>~</operator><name>enabled_iseq_events</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MJIT</name></expr></cpp:if>
<expr_stmt><expr><name>mjit_call_p</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>rb_iseq_trace_set_all</name><argument_list>(<argument><expr><name>new_iseq_events</name> <operator>|</operator> <name>enabled_iseq_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ruby_vm_event_flags</name> <operator>=</operator> <name>vm_events</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ruby_vm_event_enabled_global_flags</name> <operator>|=</operator> <name>vm_events</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_objspace_set_event_hook</name><argument_list>(<argument><expr><name>vm_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>rb_event_hook_t</name> <modifier>*</modifier></type>
<name>alloc_event_hook</name><parameter_list>(<parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_flag_t</name></type> <name>hook_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>events</name> <operator>&amp;</operator> <name>RUBY_INTERNAL_EVENT_MASK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>events</name> <operator>&amp;</operator> <operator>~</operator><name>RUBY_INTERNAL_EVENT_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"Can not specify normal event and internal event simultaneously."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hook</name> <operator>=</operator> <call><name>ALLOC</name><argument_list>(<argument><expr><name>rb_event_hook_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hook_flags</name></name> <operator>=</operator> <name>hook_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name>events</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>th</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>target_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>hook</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hook_list_connect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>list_owner</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>global_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>hooks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>hooks</name></name> <operator>=</operator> <name>hook</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>events</name></name> <operator>|=</operator> <name><name>hook</name><operator>-&gt;</operator><name>events</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>global_p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>update_global_event_hook</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>RB_OBJ_WRITTEN</name><argument_list>(<argument><expr><name>list_owner</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>, <argument><expr><name><name>hook</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>connect_event_hook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>rb_vm_global_hooks</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hook_list_connect</name><argument_list>(<argument><expr><name>Qundef</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_threadptr_add_event_hook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>,
<parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_flag_t</name></type> <name>hook_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name> <init>= <expr><call><name>alloc_event_hook</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>hook_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>th</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connect_event_hook</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_add_event_hook</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_add_event_hook</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>RUBY_EVENT_HOOK_FLAG_SAFE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_add_event_hook</name><parameter_list>(<parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name> <init>= <expr><call><name>alloc_event_hook</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>RUBY_EVENT_HOOK_FLAG_SAFE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>connect_event_hook</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_thread_add_event_hook2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_flag_t</name></type> <name>hook_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_add_event_hook</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>hook_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_add_event_hook2</name><parameter_list>(<parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_flag_t</name></type> <name>hook_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name> <init>= <expr><call><name>alloc_event_hook</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>hook_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>connect_event_hook</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clean_hooks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>nextp</name> <init>= <expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>hooks</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>need_clean</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>need_clean</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>hook</name> <operator>=</operator> <operator>*</operator><name>nextp</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>hook_flags</name></name> <operator>&amp;</operator> <name>RUBY_EVENT_HOOK_FLAG_DELETED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nextp</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>events</name></name> <operator>|=</operator> <name><name>hook</name><operator>-&gt;</operator><name>events</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>nextp</name> <operator>=</operator> <operator>&amp;</operator><name><name>hook</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <call><name>rb_vm_global_hooks</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>update_global_event_hook</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clean_hooks_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>need_clean</name></name> <operator>!=</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>running</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clean_hooks</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_ANY_FILTER_TH</name></cpp:macro> <cpp:value>((rb_thread_t *)1)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>remove_event_hook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_thread_t</name> <modifier>*</modifier></type><name>filter_th</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>rb_ec_vm_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>global_hooks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>hooks</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>hook</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>hook</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name>func</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>th</name></name> <operator>==</operator> <name>filter_th</name> <operator>||</operator> <name>filter_th</name> <operator>==</operator> <name>MATCH_ANY_FILTER_TH</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>Qundef</name> <operator>||</operator> <name><name>hook</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hook_flags</name></name> <operator>|=</operator> <name>RUBY_EVENT_HOOK_FLAG_DELETED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>need_clean</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hook</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>clean_hooks_check</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_threadptr_remove_event_hook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_thread_t</name> <modifier>*</modifier></type><name>filter_th</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>remove_event_hook</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>filter_th</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_thread_remove_event_hook</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_threadptr_remove_event_hook</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_thread_remove_event_hook_with_data</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_threadptr_remove_event_hook</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_remove_event_hook</name><parameter_list>(<parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>remove_event_hook</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_remove_event_hook_with_data</name><parameter_list>(<parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>remove_event_hook</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_ec_clear_current_thread_trace_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_remove_event_hook</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><call><name>rb_ec_thread_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_ec_clear_all_trace_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_remove_event_hook</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>MATCH_ANY_FILTER_TH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>exec_hooks_body</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>hook</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>hooks</name></name></expr>;</init> <condition><expr><name>hook</name></expr>;</condition> <incr><expr><name>hook</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>hook_flags</name></name> <operator>&amp;</operator> <name>RUBY_EVENT_HOOK_FLAG_DELETED</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;</operator> <name><name>hook</name><operator>-&gt;</operator><name>events</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>LIKELY</name><argument_list>(<argument><expr><name><name>hook</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>th</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>hook</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>th</name></name> <operator>==</operator> <call><name>rb_ec_thread_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>LIKELY</name><argument_list>(<argument><expr><name><name>hook</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>target_line</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>target_line</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>rb_vm_get_sourceline</name><argument_list>(<argument><expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>hook_flags</name></name> <operator>&amp;</operator> <name>RUBY_EVENT_HOOK_FLAG_RAW_ARG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hook</name><operator>-&gt;</operator><name>func</name></name>)<argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>hook</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>rb_event_hook_raw_arg_func_t</name><operator>)</operator><name><name>hook</name><operator>-&gt;</operator><name>func</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name><name>hook</name><operator>-&gt;</operator><name>data</name></name><operator>,</operator> <name>trace_arg</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>exec_hooks_precheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>running</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>exec_hooks_postcheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>running</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clean_hooks_check</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>exec_hooks_unprotected</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>exec_hooks_precheck</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>exec_hooks_body</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exec_hooks_postcheck</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>exec_hooks_protected</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_tag_type</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>raised</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>exec_hooks_precheck</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>raised</name> <operator>=</operator> <call><name>rb_ec_reset_raised</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exec_hooks_body</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exec_hooks_postcheck</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>raised</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ec_set_raised</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MJIT_FUNC_EXPORTED</name> <name>void</name></type>
<name>rb_exec_event_hooks</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>hooks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pop_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><name><name>trace_arg</name><operator>-&gt;</operator><name>ec</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;</operator> <name>RUBY_INTERNAL_EVENT_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;</operator> <name>RUBY_INTERNAL_EVENT_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>prev_trace_arg</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name> <operator>=</operator> <name>trace_arg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exec_hooks_unprotected</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><call><name>rb_vm_global_hooks</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name> <operator>=</operator> <name>prev_trace_arg</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> 
<name><name>trace_arg</name><operator>-&gt;</operator><name>self</name></name> <operator>!=</operator> <name>rb_mRubyVMFrozenCore</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>errinfo</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>old_recursive</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash</name></name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash_for_trace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name> <operator>=</operator> <name>trace_arg</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>exec_hooks_protected</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>hooks</name></expr></argument>, <argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>=</operator> <name>errinfo</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash_for_trace</name></name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>local_storage_recursive_hash</name></name> <operator>=</operator> <name>old_recursive</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pop_p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VM_FRAME_FINISHED_P</name><argument_list>(<argument><expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>tag</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_vm_pop_frame</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EC_JUMP_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_suppress_tracing</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>raised</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vm</name> <init>= <expr><call><name>rb_ec_vm_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_tag_type</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_trace_arg_t</name></type> <name>dummy_trace_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dummy_trace_arg</name><operator>.</operator><name>event</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name> <operator>=</operator> <operator>&amp;</operator><name>dummy_trace_arg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>raised</name> <operator>=</operator> <call><name>rb_ec_reset_raised</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TAG_NONE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>*</operator><operator>&amp;</operator><name>vm</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>raised</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ec_reset_raised</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name> <operator>==</operator> <operator>&amp;</operator><name>dummy_trace_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>RUBY_USE_SETJMPEX</name> <operator>&amp;&amp;</operator> <name>RUBY_USE_SETJMPEX</name></expr></cpp:if>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>EC_JUMP_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>call_trace_func</name><parameter_list>(<parameter><decl><type><name>rb_event_flag_t</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>






























































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>set_trace_func</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>trace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_remove_event_hook</name><argument_list>(<argument><expr><name>call_trace_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_proc</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"trace_func needs to be Proc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_add_event_hook</name><argument_list>(<argument><expr><name>call_trace_func</name></expr></argument>, <argument><expr><name>RUBY_EVENT_ALL</name></expr></argument>, <argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>trace</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>thread_add_trace_func</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>filter_th</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>trace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_proc</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"trace_func needs to be Proc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_threadptr_add_event_hook</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>filter_th</name></expr></argument>, <argument><expr><name>call_trace_func</name></expr></argument>, <argument><expr><name>RUBY_EVENT_ALL</name></expr></argument>, <argument><expr><name>trace</name></expr></argument>, <argument><expr><name>RUBY_EVENT_HOOK_FLAG_SAFE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_add_trace_func_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>trace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>thread_add_trace_func</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>trace</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_set_trace_func_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>target_thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>trace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>target_thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_threadptr_remove_event_hook</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>call_trace_func</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>thread_add_trace_func</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>trace</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_event_name</name><parameter_list>(<parameter><decl><type><name>rb_event_flag_t</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>event</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RUBY_EVENT_LINE</name></expr>:</case> <return>return <expr><literal type="string">"line"</literal></expr>;</return>
<case>case <expr><name>RUBY_EVENT_CLASS</name></expr>:</case> <return>return <expr><literal type="string">"class"</literal></expr>;</return>
<case>case <expr><name>RUBY_EVENT_END</name></expr>:</case> <return>return <expr><literal type="string">"end"</literal></expr>;</return>
<case>case <expr><name>RUBY_EVENT_CALL</name></expr>:</case> <return>return <expr><literal type="string">"call"</literal></expr>;</return>
<case>case <expr><name>RUBY_EVENT_RETURN</name></expr>:</case> <return>return <expr><literal type="string">"return"</literal></expr>;</return>
<case>case <expr><name>RUBY_EVENT_C_CALL</name></expr>:</case> <return>return <expr><literal type="string">"c-call"</literal></expr>;</return>
<case>case <expr><name>RUBY_EVENT_C_RETURN</name></expr>:</case> <return>return <expr><literal type="string">"c-return"</literal></expr>;</return>
<case>case <expr><name>RUBY_EVENT_RAISE</name></expr>:</case> <return>return <expr><literal type="string">"raise"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ID</name></type>
<name>get_event_id</name><parameter_list>(<parameter><decl><type><name>rb_event_flag_t</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>event</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case RUBY_EVENT_##NAME: CONST_ID(id, #name); return id;</cpp:value></cpp:define>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><name>CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>C</name><argument_list>(<argument>return</argument>, <argument>RETURN</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>c_call</name></expr></argument>, <argument><expr><name>C_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>c_return</name></expr></argument>, <argument><expr><name>C_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>raise</name></expr></argument>, <argument><expr><name>RAISE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>b_call</name></expr></argument>, <argument><expr><name>B_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>b_return</name></expr></argument>, <argument><expr><name>B_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>thread_begin</name></expr></argument>, <argument><expr><name>THREAD_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>thread_end</name></expr></argument>, <argument><expr><name>THREAD_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>fiber_switch</name></expr></argument>, <argument><expr><name>FIBER_SWITCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>script_compiled</name></expr></argument>, <argument><expr><name>SCRIPT_COMPILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>C</name></cpp:undef>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_path_and_lineno</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>pathp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>linep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>cfp</name> <operator>=</operator> <call><name>rb_vm_get_ruby_level_next_cfp</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pathp</name> <operator>=</operator> <call><name>rb_iseq_path</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;</operator> <operator>(</operator><name>RUBY_EVENT_CLASS</name> <operator>|</operator>
<name>RUBY_EVENT_CALL</name> <operator>|</operator>
<name>RUBY_EVENT_B_CALL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>linep</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>rb_iseq_first_lineno</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>linep</name> <operator>=</operator> <call><name>rb_vm_get_sourceline</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pathp</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>linep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>call_trace_func</name><parameter_list>(<parameter><decl><type><name>rb_event_flag_t</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>eventname</name> <init>= <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>get_event_name</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_path_and_lineno</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>klass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ec_frame_method_id_and_class</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>klass</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_ICLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>RBASIC</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>FL_TEST</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>FL_SINGLETON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>id__attached__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>eventname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>self</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>filename</name> <operator>!=</operator> <name>Qnil</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><call><name>rb_binding_new</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>klass</name></expr> ?</condition><then> <expr><name>klass</name></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_proc_call_with_block</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cTracePoint</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>rb_tp_struct</name> <block>{
<decl_stmt><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tracing</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>local_target_set</name></decl>;</decl_stmt> 



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>self</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_tp_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tp_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>local_target_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>target_th</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>target_th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>tp_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>rb_tp_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>tp_data_type</name> <init>= <expr><block>{
<expr><literal type="string">"tracepoint"</literal></expr>,
<expr><block>{<expr><name>tp_mark</name></expr>, <expr><name>RUBY_TYPED_NEVER_FREE</name></expr>, <expr><name>tp_memsize</name></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tp_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<return>return <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>rb_tp_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp_data_type</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_event_flag_t</name></type>
<name>symbol2event_flag</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><call><name>rb_to_symbol_type</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_event_flag_t</name></type> <name>RUBY_EVENT_A_CALL</name> <init>=
<expr><name>RUBY_EVENT_CALL</name> <operator>|</operator> <name>RUBY_EVENT_B_CALL</name> <operator>|</operator> <name>RUBY_EVENT_C_CALL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_event_flag_t</name></type> <name>RUBY_EVENT_A_RETURN</name> <init>=
<expr><name>RUBY_EVENT_RETURN</name> <operator>|</operator> <name>RUBY_EVENT_B_RETURN</name> <operator>|</operator> <name>RUBY_EVENT_C_RETURN</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CONST_ID(id, #name); if (sym == ID2SYM(id)) return RUBY_EVENT_##NAME</cpp:value></cpp:define>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><name>CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>C</name><argument_list>(<argument>return</argument>, <argument>RETURN</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>c_call</name></expr></argument>, <argument><expr><name>C_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>c_return</name></expr></argument>, <argument><expr><name>C_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>raise</name></expr></argument>, <argument><expr><name>RAISE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>b_call</name></expr></argument>, <argument><expr><name>B_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>b_return</name></expr></argument>, <argument><expr><name>B_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>thread_begin</name></expr></argument>, <argument><expr><name>THREAD_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>thread_end</name></expr></argument>, <argument><expr><name>THREAD_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>fiber_switch</name></expr></argument>, <argument><expr><name>FIBER_SWITCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>script_compiled</name></expr></argument>, <argument><expr><name>SCRIPT_COMPILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>a_call</name></expr></argument>, <argument><expr><name>A_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>a_return</name></expr></argument>, <argument><expr><name>A_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>C</name></cpp:undef>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unknown event: %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><call><name>rb_sym2str</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_tp_t</name> <modifier>*</modifier></type>
<name>tpptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>, <argument><expr><name>rb_tp_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp_data_type</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_trace_arg_t</name> <modifier>*</modifier></type>
<name>get_trace_arg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>trace_arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>trace_arg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"access from outside"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>trace_arg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>rb_trace_arg_struct</name></name> <modifier>*</modifier></type>
<name>rb_tracearg_from_tracepoint</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>rb_event_flag_t</name></type>
<name>rb_tracearg_event_flag</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_event</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>get_event_id</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_path_and_lineno</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_path_and_lineno</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trace_arg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trace_arg</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_lineno</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fill_path_and_lineno</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>VALUE</name></type>
<name>rb_tracearg_path</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fill_path_and_lineno</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>trace_arg</name><operator>-&gt;</operator><name>path</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_id_and_klass</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trace_arg</name><operator>-&gt;</operator><name>klass_solved</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_vm_control_frame_id_and_class</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trace_arg</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trace_arg</name><operator>-&gt;</operator><name>called_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name></expr></argument>, <argument><expr><name>T_ICLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name> <operator>=</operator> <call><name>RBASIC</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>klass_solved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_parameters</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RUBY_EVENT_CALL</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_RETURN</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_B_CALL</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_B_RETURN</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><call><name>rb_vm_get_ruby_level_next_cfp</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cfp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_proc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VM_FRAME_MAGIC_BLOCK</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VM_FRAME_LAMBDA_P</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_proc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_iseq_parameters</name><argument_list>(<argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></argument>, <argument><expr><name>is_proc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>RUBY_EVENT_C_CALL</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_C_RETURN</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>fill_id_and_klass</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name> <operator>&amp;&amp;</operator> <name><name>trace_arg</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_method_entry_t</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>iclass</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>rb_method_entry_without_refinements</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name></expr></argument>, <argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_unnamed_parameters</name><argument_list>(<argument><expr><call><name>rb_method_entry_arity</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>RUBY_EVENT_RAISE</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_LINE</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_CLASS</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_END</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_SCRIPT_COMPILED</name></expr>:</case>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not supported by this event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_method_id</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fill_id_and_klass</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>id</name></name></expr> ?</condition><then> <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_callee_id</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fill_id_and_klass</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>called_id</name></name></expr> ?</condition><then> <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>called_id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_defined_class</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fill_id_and_klass</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>trace_arg</name><operator>-&gt;</operator><name>klass</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_binding</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cfp</name> <operator>=</operator> <call><name>rb_vm_get_binding_creatable_next_cfp</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_vm_make_binding</name><argument_list>(<argument><expr><name><name>trace_arg</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_self</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>trace_arg</name><operator>-&gt;</operator><name>self</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_return_value</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;</operator> <operator>(</operator><name>RUBY_EVENT_RETURN</name> <operator>|</operator> <name>RUBY_EVENT_C_RETURN</name> <operator>|</operator> <name>RUBY_EVENT_B_RETURN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not supported by this event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"rb_tracearg_return_value: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>trace_arg</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_raised_exception</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;</operator> <operator>(</operator><name>RUBY_EVENT_RAISE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not supported by this event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"rb_tracearg_raised_exception: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>trace_arg</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_eval_script</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>data</name> <init>= <expr><name><name>trace_arg</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;</operator> <operator>(</operator><name>RUBY_EVENT_SCRIPT_COMPILED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not supported by this event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"rb_tracearg_raised_exception: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_iseq</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_instruction_sequence</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>data</name> <init>= <expr><name><name>trace_arg</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;</operator> <operator>(</operator><name>RUBY_EVENT_SCRIPT_COMPILED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not supported by this event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"rb_tracearg_raised_exception: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_iseq</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_iseqw_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>rb_iseq_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>rb_obj_is_iseq</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>rb_iseqw_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>rb_iseq_t</name> <operator>*</operator><operator>)</operator><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracearg_object</name><parameter_list>(<parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;</operator> <operator>(</operator><name>RUBY_INTERNAL_EVENT_NEWOBJ</name> <operator>|</operator> <name>RUBY_INTERNAL_EVENT_FREEOBJ</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not supported by this event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"rb_tracearg_object: unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>trace_arg</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_event</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_event</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_lineno</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_lineno</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_path</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_path</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_parameters</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_parameters</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_method_id</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_method_id</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_callee_id</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_callee_id</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_defined_class</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_defined_class</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_binding</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_binding</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_self</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_self</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_return_value</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_return_value</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_raised_exception</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_raised_exception</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_eval_script</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_eval_script</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_attr_instruction_sequence</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracearg_instruction_sequence</name><argument_list>(<argument><expr><call><name>get_trace_arg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tp_call_trace</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>, <parameter><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>tpptr</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>func</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>tp</name><operator>-&gt;</operator><name>func</name></name>)<argument_list>(<argument><expr><name>tpval</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_proc_call_with_block</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name><name>tp</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tpval</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracepoint_enable</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>tpptr</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>local_target_set</name></name> <operator>!=</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"can't nest-enable a targeting TracePoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>target_th</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_add_event_hook2</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>target_th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator><name>tp_call_trace</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>,
<argument><expr><name>RUBY_EVENT_HOOK_FLAG_SAFE</name> <operator>|</operator> <name>RUBY_EVENT_HOOK_FLAG_RAW_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_add_event_hook2</name><argument_list>(<argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator><name>tp_call_trace</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>,
<argument><expr><name>RUBY_EVENT_HOOK_FLAG_SAFE</name> <operator>|</operator> <name>RUBY_EVENT_HOOK_FLAG_RAW_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tracing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>Qundef</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type>
<name>iseq_of</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>iseqv</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>rb_cISeq</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"of"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>iseqv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"specified target is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_iseqw_to_iseq</name><argument_list>(<argument><expr><name>iseqv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>const</specifier> <name>rb_method_definition_t</name> <modifier>*</modifier></type><name>rb_method_def</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>method</name></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_tracepoint_enable_for_target</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>target_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>tpptr</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><call><name>iseq_of</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tracing</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"can't nest-enable a targeting TracePoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>target_line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>RUBY_EVENT_LINE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"target_line is specified, but line event is not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>NUM2UINT</name><argument_list>(<argument><expr><name>target_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>local_target_set</name></name> <operator>==</operator> <name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>local_target_set</name></name> <operator>=</operator> <call><name>rb_obj_hide</name><argument_list>(<argument><expr><call><name>rb_ident_hash_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_iseq_add_local_tracepoint_recursively</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>local_target_set</name></name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>iseq</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_method</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_method_definition_t</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>rb_method_definition_t</name> <operator>*</operator><operator>)</operator><call><name>rb_method_def</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VM_METHOD_TYPE_BMETHOD</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <operator>(</operator><name>RUBY_EVENT_CALL</name> <operator>|</operator> <name>RUBY_EVENT_RETURN</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>bmethod</name><operator>.</operator><name>hooks</name></name> <operator>=</operator> <call><name>ZALLOC</name><argument_list>(<argument><expr><name>rb_hook_list_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hook_list_connect_tracepoint</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>bmethod</name><operator>.</operator><name>hooks</name></name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>local_target_set</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"can not enable any hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ruby_vm_event_local_num</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tracing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>disable_local_event_iseq_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>iseq_p</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iseq_p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_iseq_remove_local_tracepoint_recursively</name><argument_list>(<argument><expr><operator>(</operator><name>rb_iseq_t</name> <operator>*</operator><operator>)</operator><name>target</name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>rb_method_definition_t</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>rb_method_definition_t</name> <operator>*</operator><operator>)</operator><call><name>rb_method_def</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>hooks</name> <init>= <expr><name><name>def</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>bmethod</name><operator>.</operator><name>hooks</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name>hooks</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hook_list_remove_tracepoint</name><argument_list>(<argument><expr><name>hooks</name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hooks</name><operator>-&gt;</operator><name>running</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hook_list_free</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>bmethod</name><operator>.</operator><name>hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>bmethod</name><operator>.</operator><name>hooks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracepoint_disable</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>tpptr</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>local_target_set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>local_target_set</name></name></expr></argument>, <argument><expr><name>disable_local_event_iseq_i</name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>local_target_set</name></name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ruby_vm_event_local_num</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>target_th</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_remove_event_hook_with_data</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>target_th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator><name>tp_call_trace</name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_remove_event_hook_with_data</name><argument_list>(<argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator><name>tp_call_trace</name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tracing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>target_th</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>Qundef</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_hook_list_connect_tracepoint</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>target_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>tpptr</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name> <init>= <expr><call><name>alloc_event_hook</name><argument_list>(<argument><expr><operator>(</operator><name>rb_event_hook_func_t</name><operator>)</operator><name>tp_call_trace</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>,
<argument><expr><name>RUBY_EVENT_HOOK_FLAG_SAFE</name> <operator>|</operator> <name>RUBY_EVENT_HOOK_FLAG_RAW_ARG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>target_line</name></name> <operator>=</operator> <name>target_line</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hook_list_connect</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>hook</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_hook_list_remove_tracepoint</name><parameter_list>(<parameter><decl><type><name>rb_hook_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>hooks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_event_flag_t</name></type> <name>events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>hook</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>tpval</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hook</name><operator>-&gt;</operator><name>hook_flags</name></name> <operator>|=</operator> <name>RUBY_EVENT_HOOK_FLAG_DELETED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>need_clean</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>events</name> <operator>|=</operator> <name><name>hook</name><operator>-&gt;</operator><name>events</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>hook</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name>events</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_enable_m</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>target_line</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>target_thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>tpptr</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>previous_tracing</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>tracing</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>target_thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>target_th</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"can not override target_thread filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>target_th</name></name> <operator>=</operator> <call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>target_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>target_th</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>target_line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"only target_line is specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_tracepoint_enable</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_tracepoint_enable_for_target</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>previous_tracing</name></expr> ?</condition><then> <expr><name>rb_tracepoint_enable</name></expr> </then><else>: <expr><name>rb_tracepoint_disable</name></expr></else></ternary></expr></argument>,
<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>previous_tracing</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_disable_m</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>tpptr</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>previous_tracing</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>tracing</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>local_target_set</name></name> <operator>!=</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"can't disable a targeting TracePoint in a block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_tracepoint_disable</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>previous_tracing</name></expr> ?</condition><then> <expr><name>rb_tracepoint_enable</name></expr> </then><else>: <expr><name>rb_tracepoint_disable</name></expr></else></ternary></expr></argument>,
<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_tracepoint_disable</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>previous_tracing</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_tracepoint_enabled_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>tpptr</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>tp</name><operator>-&gt;</operator><name>tracing</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_enabled_p</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_tracepoint_enabled_p</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<name>func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tpval</name> <init>= <expr><call><name>tp_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>, <argument><expr><name>rb_tp_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp_data_type</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name>events</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>self</name></name> <operator>=</operator> <name>tpval</name></expr>;</expr_stmt>

<return>return <expr><name>tpval</name></expr>;</return>
</block_content>}</block></function>































<function><type><name>VALUE</name></type>
<name>rb_tracepoint_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>target_thval</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>target_thval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target_th</name> <operator>=</operator> <call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>target_thval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>tracepoint_new</name><argument_list>(<argument><expr><name>rb_cTracePoint</name></expr></argument>, <argument><expr><name>target_th</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_new_s</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_event_flag_t</name></type> <name>events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>argc</name> <init>= <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>events</name> <operator>|=</operator> <call><name>symbol2event_flag</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>events</name> <operator>=</operator> <name>RUBY_EVENT_TRACEPOINT_ALL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"must be called with a block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>tracepoint_new</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>rb_block_proc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_trace_s</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>trace</name> <init>= <expr><call><name>tracepoint_new_s</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_tracepoint_enable</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>trace</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_inspect</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_tp_t</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>tpptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>trace_arg</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>trace_arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>trace_arg</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>trace_arg</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RUBY_EVENT_LINE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sym</name> <init>= <expr><call><name>rb_tracearg_method_id</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>default_inspect</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"#&lt;TracePoint:%"</literal><name>PRIsVALUE</name><literal type="string">"@%"</literal><name>PRIsVALUE</name><literal type="string">":%d in `%"</literal><name>PRIsVALUE</name><literal type="string">"'&gt;"</literal></expr></argument>,
<argument><expr><call><name>rb_tracearg_event</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_tracearg_path</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>rb_tracearg_lineno</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>RUBY_EVENT_CALL</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_C_CALL</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_RETURN</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_C_RETURN</name></expr>:</case>
<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"#&lt;TracePoint:%"</literal><name>PRIsVALUE</name><literal type="string">" `%"</literal><name>PRIsVALUE</name><literal type="string">"'@%"</literal><name>PRIsVALUE</name><literal type="string">":%d&gt;"</literal></expr></argument>,
<argument><expr><call><name>rb_tracearg_event</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_tracearg_method_id</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_tracearg_path</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>rb_tracearg_lineno</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>RUBY_EVENT_THREAD_BEGIN</name></expr>:</case>
<case>case <expr><name>RUBY_EVENT_THREAD_END</name></expr>:</case>
<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"#&lt;TracePoint:%"</literal><name>PRIsVALUE</name><literal type="string">" %"</literal><name>PRIsVALUE</name><literal type="string">"&gt;"</literal></expr></argument>,
<argument><expr><call><name>rb_tracearg_event</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_tracearg_self</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<label><name>default_inspect</name>:</label>
<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"#&lt;TracePoint:%"</literal><name>PRIsVALUE</name><literal type="string">"@%"</literal><name>PRIsVALUE</name><literal type="string">":%d&gt;"</literal></expr></argument>,
<argument><expr><call><name>rb_tracearg_event</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_tracearg_path</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>rb_tracearg_lineno</name><argument_list>(<argument><expr><name>trace_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"#&lt;TracePoint:%s&gt;"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tp</name><operator>-&gt;</operator><name>tracing</name></name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>: <expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tracepoint_stat_event_hooks</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>rb_event_hook_t</name> <modifier>*</modifier></type><name>hook</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>active</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>deleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>hook</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>hook_flags</name></name> <operator>&amp;</operator> <name>RUBY_EVENT_HOOK_FLAG_DELETED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>deleted</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>active</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>hook</name> <operator>=</operator> <name><name>hook</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>deleted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tracepoint_stat_s</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>GET_VM</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>stat</name> <init>= <expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tracepoint_stat_event_hooks</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><name><name>vm</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>-&gt;</operator><name>global_hooks</name><operator>.</operator><name>hooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>stat</name></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace_point.rbinc"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>Init_vm_trace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"set_trace_func"</literal></expr></argument>, <argument><expr><name>set_trace_func</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"set_trace_func"</literal></expr></argument>, <argument><expr><name>thread_set_trace_func_m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"add_trace_func"</literal></expr></argument>, <argument><expr><name>thread_add_trace_func_m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_cTracePoint</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"TracePoint"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_undef_alloc_func</name><argument_list>(<argument><expr><name>rb_cTracePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>rb_postponed_job_struct</name> <block>{
<decl_stmt><decl><type><name>rb_postponed_job_func_t</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_postponed_job_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_POSTPONED_JOB</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_POSTPONED_JOB_SPECIAL_ADDITION</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<struct>struct <name>rb_workqueue_job</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>list_node</name></name></type> <name>jnode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>rb_postponed_job_t</name></type> <name>job</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type>
<name>Init_vm_postponed_job</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>GET_VM</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vm</name><operator>-&gt;</operator><name>postponed_job_buffer</name></name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>rb_postponed_job_t</name></expr></argument>, <argument><expr><name>MAX_POSTPONED_JOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>-&gt;</operator><name>postponed_job_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<enum>enum <name>postponed_job_register_result</name> <block>{
<decl><name>PJRR_SUCCESS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PJRR_FULL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>PJRR_INTERRUPTED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>


<function><type><specifier>static</specifier> <name><name>enum</name> <name>postponed_job_register_result</name></name></type>
<name>postponed_job_register</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>rb_postponed_job_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>rb_atomic_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>rb_atomic_t</name></type> <name>expected_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_postponed_job_t</name> <modifier>*</modifier></type><name>pjob</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expected_index</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PJRR_FULL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ATOMIC_CAS</name><argument_list>(<argument><expr><name><name>vm</name><operator>-&gt;</operator><name>postponed_job_index</name></name></expr></argument>, <argument><expr><name>expected_index</name></expr></argument>, <argument><expr><name>expected_index</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>expected_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pjob</name> <operator>=</operator> <operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>postponed_job_buffer</name><index>[<expr><name>expected_index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>PJRR_INTERRUPTED</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>pjob</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pjob</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RUBY_VM_SET_POSTPONED_JOB_INTERRUPT</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PJRR_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>rb_postponed_job_register</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>rb_postponed_job_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>rb_ec_vm_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<label><name>begin</name>:</label>
<switch>switch <condition>(<expr><call><name>postponed_job_register</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>vm</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>MAX_POSTPONED_JOB</name></expr></argument>, <argument><expr><name><name>vm</name><operator>-&gt;</operator><name>postponed_job_index</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PJRR_SUCCESS</name></expr> :</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>PJRR_FULL</name></expr> :</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>PJRR_INTERRUPTED</name></expr>:</case> <goto>goto <name>begin</name>;</goto>
<default>default:</default> <expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"unreachable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>rb_postponed_job_register_one</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>rb_postponed_job_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>rb_ec_vm_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_postponed_job_t</name> <modifier>*</modifier></type><name>pjob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_atomic_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<label><name>begin</name>:</label>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>vm</name><operator>-&gt;</operator><name>postponed_job_index</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pjob</name> <operator>=</operator> <operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>postponed_job_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pjob</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name>func</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RUBY_VM_SET_POSTPONED_JOB_INTERRUPT</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<switch>switch <condition>(<expr><call><name>postponed_job_register</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>vm</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>MAX_POSTPONED_JOB</name> <operator>+</operator> <name>MAX_POSTPONED_JOB_SPECIAL_ADDITION</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PJRR_SUCCESS</name></expr> :</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>PJRR_FULL</name></expr> :</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>PJRR_INTERRUPTED</name></expr>:</case> <goto>goto <name>begin</name>;</goto>
<default>default:</default> <expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"unreachable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>rb_workqueue_register</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>rb_postponed_job_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_workqueue_job</name></name> <modifier>*</modifier></type><name>wq_job</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wq_job</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>GET_VM</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wq_job</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wq_job</name><operator>-&gt;</operator><name>job</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wq_job</name><operator>-&gt;</operator><name>job</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_nativethread_lock_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wq_job</name><operator>-&gt;</operator><name>jnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_nativethread_lock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RUBY_VM_SET_POSTPONED_JOB_INTERRUPT</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_postponed_job_flush</name><parameter_list>(<parameter><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_atomic_t</name></type> <name>block_mask</name> <init>= <expr><name>POSTPONED_JOB_INTERRUPT_MASK</name><operator>|</operator><name>TRAP_INTERRUPT_MASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>rb_atomic_t</name></type> <name>saved_mask</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>interrupt_mask</name></name> <operator>&amp;</operator> <name>block_mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <specifier>volatile</specifier></type> <name>saved_errno</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>list_head</name></name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>list_head_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_nativethread_lock_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_nativethread_lock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>interrupt_mask</name></name> <operator>|=</operator> <name>block_mask</name></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_atomic_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_workqueue_job</name></name> <modifier>*</modifier></type><name>wq_job</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>index</name> <operator>=</operator> <name><name>vm</name><operator>-&gt;</operator><name>postponed_job_index</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ATOMIC_CAS</name><argument_list>(<argument><expr><name><name>vm</name><operator>-&gt;</operator><name>postponed_job_index</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>index</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_postponed_job_t</name> <modifier>*</modifier></type><name>pjob</name> <init>= <expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>postponed_job_buffer</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>pjob</name><operator>-&gt;</operator><name>func</name></name>)<argument_list>(<argument><expr><name><name>pjob</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><operator>(</operator><name>wq_job</name> <operator>=</operator> <call><name>list_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr>struct <name>rb_workqueue_job</name></expr></argument>, <argument><expr><name>jnode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_postponed_job_t</name></type> <name>pjob</name> <init>= <expr><name><name>wq_job</name><operator>-&gt;</operator><name>job</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wq_job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name><name>pjob</name><operator>.</operator><name>func</name></name><operator>)</operator><operator>(</operator><name><name>pjob</name><operator>.</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>interrupt_mask</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>saved_mask</name> <operator>^</operator> <name>block_mask</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_nativethread_lock_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_prepend_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_nativethread_lock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>-&gt;</operator><name>workqueue_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RUBY_VM_SET_POSTPONED_JOB_INTERRUPT</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
