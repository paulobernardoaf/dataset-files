<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\random.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSCALL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syscall.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_SYS_SYSCALL_H</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_GETRANDOM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/random.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__linux__</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>__NR_getrandom</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/random.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/compilers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/random.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/sanitizers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby_atomic.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>int</name></type> <name><name>int_must_be_32bit_at_least</name><index>[<expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>&lt;</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"missing/mt19937.c"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>int_pair_to_real_exclusive</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>genrand_real</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name> <init>= <expr><call><name>genrand_int32</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><call><name>genrand_int32</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>int_pair_to_real_exclusive</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>int_pair_to_real_exclusive</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>a</name><operator>*</operator><literal type="number">67108864.0</literal><operator>+</operator><name>b</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">9007199254740992.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>int_pair_to_real_inclusive</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static double
genrand_real2(struct MT *mt)
{

uint32_t a = genrand_int32(mt), b = genrand_int32(mt);
return int_pair_to_real_inclusive(a, b);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>N</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M</name></cpp:undef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>seed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MT</name></name></type> <name>mt</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_random_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SEED_CNT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>rb_random_t</name></type> <name>default_rand</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rand_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vseed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>random_seed</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>rb_random_t</name> <modifier>*</modifier></type>
<name>rand_start</name><parameter_list>(<parameter><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>mt</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>genrand_initialized</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>rand_init</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><call><name>random_seed</name><argument_list>(<argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type>
<name>default_mt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><call><name>rand_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_rand</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>mt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>rb_genrand_int32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><call><name>default_mt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>genrand_int32</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name>rb_genrand_real</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><call><name>default_mt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>genrand_real</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_INT32</name></cpp:macro> <cpp:value>(31/CHAR_BIT + 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>int_pair_to_real_inclusive</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
<enum>enum <block>{<decl><name>dig</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>dig_u</name> <init>= <expr><name>dig</name><operator>-</operator><literal type="number">32</literal></expr></init></decl>, <decl><name>dig_r64</name> <init>= <expr><literal type="number">64</literal><operator>-</operator><name>dig</name></expr></init></decl>, <decl><name>bmask</name> <init>= <expr><operator>~</operator><operator>(</operator><operator>~</operator><literal type="number">0u</literal><operator>&lt;&lt;</operator><operator>(</operator><name>dig_r64</name><operator>)</operator><operator>)</operator></expr></init></decl>}</block>;</enum>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_UINT128_T</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint128_t</name></type> <name>m</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint128_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>dig</name><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint128_t</name></type> <name>x</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint128_t</name><operator>)</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>*</operator> <name>m</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_UINT64_T</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>MSC_VERSION_BEFORE</name><argument_list>(<argument><expr><literal type="number">1300</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>a</name> <operator>&lt;&lt;</operator> <name>dig_u</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>b</name> <operator>+</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <name>dig_u</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>dig_r64</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <name>dig_r64</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <name>dig_u</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <name>bmask</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>dig_r64</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>a</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>dig_u</name><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>ldexp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>-</operator><name>dig</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_cRandom</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_minus</name></cpp:macro> <cpp:value>'-'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_plus</name></cpp:macro> <cpp:value>'+'</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_rand</name></decl>, <decl><type ref="prev"/><name>id_bytes</name></decl>;</decl_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>static void domain_error(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>random_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>rb_random_t</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>random_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <operator>&amp;</operator><name>default_rand</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>random_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>rb_random_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>random_mt_type</name> <init>= <expr><block>{
<expr><literal type="string">"random/MT"</literal></expr>,
<expr><block>{
<expr><name>random_mark</name></expr>,
<expr><name>random_free</name></expr>,
<expr><name>random_memsize</name></expr>,
}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>rb_random_t</name> <modifier>*</modifier></type>
<name>get_rnd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rb_random_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>random_mt_type</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rand_start</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_random_t</name> <modifier>*</modifier></type>
<name>try_get_rnd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>rb_cRandom</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rand_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_rand</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_typeddata_is_kind_of</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>random_mt_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rand_start</name><argument_list>(<argument><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>rb_random_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>random_mt_type</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rnd</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rand_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>buf0</name><index>[<expr><name>SIZEOF_LONG</name> <operator>/</operator> <name>SIZEOF_INT32</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>buf0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rb_absint_numwords</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>rb_integer_pack</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>INTEGER_PACK_LSWORD_FIRST</name><operator>|</operator><name>INTEGER_PACK_NATIVE_BYTE_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><name>sign</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_genrand</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>init_by_array</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>explicit_bzero</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>buf0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>seed</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vseed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_check_frozen</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vseed</name> <operator>=</operator> <call><name>random_seed</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>vseed</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_check_copyable</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>vseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vseed</name> <operator>=</operator> <call><name>rb_to_int</name><argument_list>(<argument><expr><name>vseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rnd</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>rand_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>, <argument><expr><name>vseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SEED_LEN</name></cpp:macro> <cpp:value>(DEFAULT_SEED_CNT * (int)sizeof(int32_t))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_ISCHR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DOSISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_DEV_URANDOM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_DEV_URANDOM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_DEV_URANDOM</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>fill_random_bytes_urandom</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>rb_cloexec_open</name><argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>O_NONBLOCK</name><operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NOCTTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>O_NOCTTY</name><operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>seed</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ret</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill_random_bytes_urandom</name><parameter_list>(<parameter><type><name>seed</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>defined</name> <name>HAVE_GETRANDOM</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>__linux__</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>__NR_getrandom</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRND_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRND_NONBLOCK</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getrandom</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ssize_t)syscall(__NR_getrandom, (ptr), (size), (flags))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETRANDOM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>MAC_OS_X_VERSION_10_7</name> <operator>&amp;&amp;</operator> <name>MAC_OS_X_VERSION_MIN_REQUIRED</name> <operator>&gt;=</operator> <name>MAC_OS_X_VERSION_10_7</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/Security.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fill_random_bytes_syscall</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>SecRandomCopyBytes</name><argument_list>(<argument><expr><name>kSecRandomDefault</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>errSecSuccess</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
CFStringRef s = SecCopyErrorMessageString(status, NULL);
const char *m = s ? CFStringGetCStringPtr(s, kCFStringEncodingUTF8) : NULL;
fprintf(stderr, "SecRandomCopyBytes failed: %d: %s\n", status,
m ? m : "unknown");
if (s) CFRelease(s);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARC4RANDOM_BUF</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>fill_random_bytes_syscall</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>OpenBSD</name> <operator>&gt;=</operator> <literal type="number">201411</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__NetBSD_Version__</name> <operator>&gt;=</operator> <literal type="number">700000000</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__FreeBSD_version</name> <operator>&gt;=</operator> <literal type="number">1200079</literal><operator>)</operator></expr></cpp:if>


<expr_stmt><expr><call><name>arc4random_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>release_crypt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>prov</name> <init>= <expr><operator>(</operator><name>HCRYPTPROV</name><operator>)</operator><call><name>ATOMIC_PTR_EXCHANGE</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>HCRYPTPROV</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prov</name> <operator>&amp;&amp;</operator> <name>prov</name> <operator>!=</operator> <operator>(</operator><name>HCRYPTPROV</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name>prov</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fill_random_bytes_syscall</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>HCRYPTPROV</name></type> <name>perm_prov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>prov</name> <init>= <expr><name>perm_prov</name></expr></init></decl>, <decl><type ref="prev"/><name>old_prov</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prov</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prov</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROV_RSA_FULL</name></expr></argument>, <argument><expr><name>CRYPT_VERIFYCONTEXT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prov</name> <operator>=</operator> <operator>(</operator><name>HCRYPTPROV</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>old_prov</name> <operator>=</operator> <operator>(</operator><name>HCRYPTPROV</name><operator>)</operator><call><name>ATOMIC_PTR_CAS</name><argument_list>(<argument><expr><name>perm_prov</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>old_prov</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>prov</name> <operator>!=</operator> <operator>(</operator><name>HCRYPTPROV</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><call><name>Data_Wrap_Struct</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>release_crypt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>perm_prov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>prov</name> <operator>!=</operator> <operator>(</operator><name>HCRYPTPROV</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name>prov</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prov</name> <operator>=</operator> <name>old_prov</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prov</name> <operator>==</operator> <operator>(</operator><name>HCRYPTPROV</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CryptGenRandom</name><argument_list>(<argument><expr><name>prov</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_GETRANDOM</name></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>fill_random_bytes_syscall</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_secure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>rb_atomic_t</name></type> <name>try_syscall</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>try_syscall</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_secure</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>GRND_NONBLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><call><name>getrandom</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>seed</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ATOMIC_SET</name><argument_list>(<argument><expr><name>try_syscall</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ret</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>;</do>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill_random_bytes_syscall</name><parameter_list>(<parameter><type><name>seed</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>need_secure</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>ruby_fill_random_bytes</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_secure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fill_random_bytes_syscall</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>need_secure</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>fill_random_bytes_urandom</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill_random_bytes</name></cpp:macro> <cpp:value>ruby_fill_random_bytes</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_random_seed</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_CLOCK_GETTIME</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>tv</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_GETTIMEOFDAY</name></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>cnt</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>seed</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_random_bytes</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_CLOCK_GETTIME</name></expr></cpp:if>
<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>tv</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_GETTIMEOFDAY</name></expr></cpp:elif>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>seed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_TIME_T</name> <operator>&gt;</operator> <name>SIZEOF_INT</name></expr></cpp:if>
<expr_stmt><expr><name><name>seed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;&gt;</operator> <name>SIZEOF_INT</name> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>seed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <call><name>getpid</name><argument_list>()</argument_list></call> <operator>^</operator> <operator>(</operator><name>n</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seed</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>seed</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_VOIDP</name> <operator>&gt;</operator> <name>SIZEOF_INT</name></expr></cpp:if>
<expr_stmt><expr><name><name>seed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>seed</name> <operator>&gt;&gt;</operator> <name>SIZEOF_INT</name> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>make_seed_value</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>seed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <call><name>rb_integer_unpack</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>INTEGER_PACK_LSWORD_FIRST</name><operator>|</operator><name>INTEGER_PACK_NATIVE_BYTE_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>seed</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>with_random_seed</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (uint32_t seedbuf[(size)+(add)], loop = (fill_random_seed(seedbuf, (size)), 1); loop; explicit_bzero(seedbuf, (size)*sizeof(seedbuf[0])), loop = 0)</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_seed</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>
<macro><name>with_random_seed</name><argument_list>(<argument>DEFAULT_SEED_CNT</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>make_seed_value</name><argument_list>(<argument><expr><name>seedbuf</name></expr></argument>, <argument><expr><name>DEFAULT_SEED_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_raw_seed</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><call><name>NUM2ULONG</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>buf</name> <init>= <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>buf</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fill_random_bytes</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to get urandom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_get_seed</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>seed</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>orig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rnd2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OBJ_INIT_COPY</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>obj</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rnd1</name> <operator>=</operator> <call><name>get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd2</name> <operator>=</operator> <call><name>get_rnd</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mt</name> <operator>=</operator> <operator>&amp;</operator><name><name>rnd1</name><operator>-&gt;</operator><name>mt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rnd1</name> <operator>=</operator> <operator>*</operator><name>rnd2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>mt</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>mt</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>mt_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_integer_unpack</name><argument_list>(<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>INTEGER_PACK_LSWORD_FIRST</name><operator>|</operator><name>INTEGER_PACK_NATIVE_BYTE_ORDER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_state</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>mt_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_s_state</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mt_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>default_rand</name><operator>.</operator><name>mt</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_left</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>rnd</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_s_left</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>default_rand</name><operator>.</operator><name>mt</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_dump</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dump</name> <init>= <expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><call><name>mt_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>rnd</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><name><name>rnd</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dump</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_load</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dump</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>state</name></decl>, <decl><type ref="prev"/><name>left</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>seed</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_copyable</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"wrong dump data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>rb_integer_pack</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>INTEGER_PACK_LSWORD_FIRST</name><operator>|</operator><name>INTEGER_PACK_NATIVE_BYTE_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>NUM2ULONG</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"wrong value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>mt</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnd</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>rb_to_int</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_f_srand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>seed</name></decl>, <decl><type ref="prev"/><name>old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name>default_rand</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <call><name>random_seed</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <call><name>rb_to_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>seed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>rand_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>make_mask</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">4</literal> <operator>&lt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>limited_rand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>limit</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>make_mask</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">4</literal> <operator>&lt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><literal type="number">0xffffffff</literal> <operator>&lt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<label><name>retry</name>:</label>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SIZEOF_LONG</name><operator>/</operator><name>SIZEOF_INT32</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>genrand_int32</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<do>do <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>genrand_int32</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>limit</name> <operator>&lt;</operator> <name>val</name></expr>)</condition>;</do>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>limited_big_rand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>boundary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lim_array</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rnd_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vtmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rb_absint_numwords</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>, <argument><expr><name>len</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lim_array</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd_array</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_integer_pack</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>lim_array</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>INTEGER_PACK_LSWORD_FIRST</name><operator>|</operator><name>INTEGER_PACK_NATIVE_BYTE_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry</name>:</label>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>boundary</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lim</name> <init>= <expr><name><name>lim_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <ternary><condition><expr><name>mask</name></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>make_mask</name><argument_list>(<argument><expr><name>lim</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rnd</name> <operator>=</operator> <call><name>genrand_int32</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>boundary</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lim</name> <operator>&lt;</operator> <name>rnd</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rnd</name> <operator>&lt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>boundary</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rnd_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>rnd</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_integer_unpack</name><argument_list>(<argument><expr><name>rnd_array</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>INTEGER_PACK_LSWORD_FIRST</name><operator>|</operator><name>INTEGER_PACK_NATIVE_BYTE_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>unsigned</name> <name>long</name></type>
<name>rb_genrand_ulong_limited</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>limited_rand</name><argument_list>(<argument><expr><call><name>default_mt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>obj_random_bytes</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>len</name> <init>= <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rb_funcallv_public</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"random data too short %ld"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"random data too long %ld"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>random_int32</name><parameter_list>(<parameter><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>genrand_int32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>rb_random_int32</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>try_get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rnd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obj_random_bytes</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>x</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>random_int32</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>random_real</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>excl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rnd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>obj_random_bytes</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>random_int32</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>random_int32</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>excl</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>int_pair_to_real_exclusive</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>int_pair_to_real_inclusive</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name>rb_random_real</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>try_get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rnd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_rand</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"random number too small %g"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"random number too big %g"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>genrand_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>ulong_to_num_plus_1</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>
<return>return <expr><call><name>ULL2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>LONG_LONG</name><operator>)</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>ULONG_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_big_plus</name><argument_list>(<argument><expr><call><name>ULONG2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ULONG2NUM</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>random_ulong_limited</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>limit</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rnd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>-</operator> <call><name>nlz_long</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name>w</name> <operator>&gt;</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>mask</name> <init>= <expr><operator>~</operator><operator>(</operator><operator>~</operator><literal type="number">0UL</literal> <operator>&lt;&lt;</operator> <name>w</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>full</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name> <operator>&gt;=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><literal type="number">0UL</literal></expr> </then><else>:
<expr><operator>~</operator><operator>(</operator><operator>~</operator><literal type="number">0UL</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>~</operator><name>rest</name></expr>)</condition> <block>{<block_content>
<union>union <block>{<decl_stmt><decl><type><name>uint32_t</name></type> <name>u32</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ul</name></decl>;</decl_stmt>}</block> <decl><name>buf</name></decl>;</union>
<expr_stmt><expr><call><name>obj_random_bytes</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>full</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ?</condition><then> <expr><name><name>buf</name><operator>.</operator><name>u32</name></name></expr> </then><else>: <expr><name><name>buf</name><operator>.</operator><name>ul</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>&gt;&gt;=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rest</name> <operator>&gt;&gt;=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>limit</name> <operator>&lt;</operator> <name>val</name></expr>)</condition>;</do>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>limited_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type>
<name>rb_random_ulong_limited</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>try_get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rnd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>lim</name> <init>= <expr><call><name>ulong_to_num_plus_1</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rb_to_int</name><argument_list>(<argument><expr><call><name>rb_funcallv_public</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_rand</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name> <init>= <expr><call><name>NUM2ULONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_num_negative_p</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"random number too small %ld"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"random number too big %ld"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>limited_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_ulong_limited_big</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vmax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rnd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>vtmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nlz</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>rb_absint_numwords</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><literal type="number">0</literal> <operator>&gt;&gt;</operator> <name>nlz</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>lim_array</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rnd_array</name> <init>= <expr><name>tmp</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><name>INTEGER_PACK_MSWORD_FIRST</name><operator>|</operator><name>INTEGER_PACK_NATIVE_BYTE_ORDER</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_integer_pack</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>, <argument><expr><name>lim_array</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry</name>:</label>
<expr_stmt><expr><call><name>obj_random_bytes</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd_array</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rnd_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lim_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>rnd_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rnd_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>lim_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_integer_unpack</name><argument_list>(<argument><expr><name>rnd_array</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>limited_big_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>, <argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>genrand_bytes</name><parameter_list>(<parameter><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_bytes</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>genrand_bytes</name><argument_list>(<argument><expr><call><name>get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><call><name>rb_to_int</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>genrand_bytes</name><parameter_list>(<parameter><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;=</operator> <name>SIZEOF_INT32</name></expr>;</condition> <incr><expr><name>n</name> <operator>-=</operator> <name>SIZEOF_INT32</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>genrand_int32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>SIZEOF_INT32</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&gt;&gt;=</operator> <name>CHAR_BIT</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>i</name></expr>)</condition>;</do>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>genrand_int32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&gt;&gt;=</operator> <name>CHAR_BIT</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>n</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_random_bytes</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>try_get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rnd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>obj_random_bytes</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>genrand_bytes</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_s_bytes</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>rand_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_rand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>genrand_bytes</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>, <argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><call><name>rb_to_int</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>range_values</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>vmax</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>begp</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>endp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>exclp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>beg</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_range_values</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>beg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>exclp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>begp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>begp</name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>beg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>endp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>endp</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_check_funcall_default</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>id_minus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>begp</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rand_int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vmax</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>restrictive</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>max</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>restrictive</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>-</operator><name>max</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>random_ulong_limited</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>max</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ULONG2NUM</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_bigzero_p</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BIGNUM_SIGN</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>restrictive</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <call><name>rb_big_uminus</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <call><name>rb_big_minus</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>random_ulong_limited</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>random_ulong_limited_big</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>domain_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>error</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>EDOM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><call><name>rb_class_new_instance</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>rb_eSystemCallError</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>NORETURN</name><argument_list>(<argument>static void invalid_argument(VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>invalid_argument</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid argument - %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>check_random_number</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Qfalse</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>NUM2LONG</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Qnil</name></expr>:</case>
<expr_stmt><expr><call><name>invalid_argument</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>float_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>domain_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>rand_range</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>rb_random_t</name><modifier>*</modifier></type> <name>rnd</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>beg</name> <init>= <expr><name>Qundef</name></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name>Qundef</name></expr></init></decl>, <decl><type ref="prev"/><name>vmax</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>excl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <name>vmax</name> <operator>=</operator> <call><name>range_values</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>beg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>excl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>Qfalse</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>domain_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>v</name> <operator>=</operator> <call><name>rb_check_to_int</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call><operator>,</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>max</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>fixnum</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>max</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>excl</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name> <init>= <expr><call><name>random_ulong_limited</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>ULONG2NUM</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>BUILTIN_TYPE</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_BIGNUM</name> <operator>&amp;&amp;</operator> <call><name>BIGNUM_SIGN</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>rb_bigzero_p</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <ternary><condition><expr><name>excl</name></expr> ?</condition><then> <expr><call><name>rb_big_minus</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>rb_big_norm</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>excl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fixnum</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>random_ulong_limited_big</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>v</name> <operator>=</operator> <call><name>rb_check_to_float</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>max</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>mid</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>min</name> <init>= <expr><call><name>float_value</name><argument_list>(<argument><expr><call><name>rb_to_float</name><argument_list>(<argument><expr><name>beg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>float_value</name><argument_list>(<argument><expr><call><name>rb_to_float</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <name>max</name> <operator>+</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>-=</operator> <name>min</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>domain_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>random_real</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>excl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><operator>+</operator><operator>(</operator><operator>+</operator><operator>(</operator><operator>+</operator><operator>(</operator><name>r</name> <operator>-</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <name>max</name><operator>)</operator> <operator>*</operator> <name>scale</name><operator>)</operator> <operator>+</operator> <name>mid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_float_new</name><argument_list>(<argument><expr><name>r</name> <operator>*</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>excl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_float_new</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>beg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>x</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>beg</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_NIL</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<return>return <expr><call><name>rb_big_plus</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>T_FLOAT</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name> <init>= <expr><call><name>rb_check_to_float</name><argument_list>(<argument><expr><name>beg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<default>default:</default>
<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>id_plus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rand_random</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name></decl></parameter>)</parameter_list>;</function_decl>






























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_rand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rand_random</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_random_number</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rand_random</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vmax</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><call><name>random_real</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_check_to_int</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rand_int</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_check_to_float</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>max</name> <init>= <expr><call><name>float_value</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><call><name>random_real</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>*=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rand_range</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rand_random_number</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>try_get_rnd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rand_random</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rand_random</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>invalid_argument</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_equal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>r1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r2</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>rb_obj_class</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>get_rnd</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>get_rnd</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>r1</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>r2</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r1</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r1</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>next</name></name> <operator>-</operator> <name><name>r1</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>state</name></name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>r2</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>next</name></name> <operator>-</operator> <name><name>r2</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>state</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r1</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>left</name></name> <operator>!=</operator> <name><name>r2</name><operator>-&gt;</operator><name>mt</name><operator>.</operator><name>left</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_equal</name><argument_list>(<argument><expr><name><name>r1</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>, <argument><expr><name><name>r2</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_f_rand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>rnd</name> <init>= <expr><call><name>rand_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_rand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>vmax</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rand_range</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>Qfalse</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <call><name>rb_to_int</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>!=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rand_int</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>vmax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>genrand_real</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rnd</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>random_s_rand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rand_random</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><call><name>rand_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_rand</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_random_number</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIP_HASH_STREAMING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sip_hash13</name></cpp:macro> <cpp:value>ruby_sip_hash13</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_WIN32</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>BYTE_ORDER</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_ORDER</name></cpp:macro> <cpp:value>BIG_ENDIAN</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_ORDER</name></cpp:macro> <cpp:value>LITTLE_ENDIAN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITTLE_ENDIAN</name></cpp:macro> <cpp:value>1234</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_ENDIAN</name></cpp:macro> <cpp:value>4321</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"siphash.c"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>st_index_t</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sip</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>hash_salt_t</name>;</typedef>

<union><specifier>static</specifier> union <block>{
<decl_stmt><decl><type><name>hash_salt_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>u32</name><index>[<expr><call><name>type_roomof</name><argument_list>(<argument><expr><name>hash_salt_t</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>hash_salt</name></decl>;</union>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_hash_salt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>hash_salt</name><operator>.</operator><name>u32</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hash_salt</name><operator>.</operator><name>u32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>genrand_int32</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<macro><name>NO_SANITIZE</name><argument_list>(<argument><literal type="string">"unsigned-integer-overflow"</literal></argument>, <argument>extern st_index_t rb_hash_start(st_index_t h)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function><type><name>st_index_t</name></type>
<name>rb_hash_start</name><parameter_list>(<parameter><decl><type><name>st_index_t</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>st_hash_start</name><argument_list>(<argument><expr><name><name>hash_salt</name><operator>.</operator><name>key</name><operator>.</operator><name>hash</name></name> <operator>+</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>st_index_t</name></type>
<name>rb_memhash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sip_uint64_t</name></type> <name>h</name> <init>= <expr><call><name>sip_hash13</name><argument_list>(<argument><expr><name><name>hash_salt</name><operator>.</operator><name>key</name><operator>.</operator><name>sip</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UINT64_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>st_index_t</name><operator>)</operator><name>h</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>st_index_t</name><operator>)</operator><operator>(</operator><name><name>h</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>h</name><operator>.</operator><name>u32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>Init_RandomSeedCore</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fill_random_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_salt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_salt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>








<decl_stmt><decl><type><name><name>struct</name> <name>MT</name></name></type> <name>mt</name></decl>;</decl_stmt>

<macro><name>with_random_seed</name><argument_list>(<argument>DEFAULT_SEED_CNT</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>init_by_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mt</name></expr></argument>, <argument><expr><name>seedbuf</name></expr></argument>, <argument><expr><name>DEFAULT_SEED_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>init_hash_salt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>explicit_bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>Init_Random_default</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name>default_rand</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MT</name></name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>mt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>random_mt_type</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>with_random_seed</name><argument_list>(<argument>DEFAULT_SEED_CNT</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>init_by_array</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><name>seedbuf</name></expr></argument>, <argument><expr><name>DEFAULT_SEED_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>make_seed_value</name><argument_list>(<argument><expr><name>seedbuf</name></expr></argument>, <argument><expr><name>DEFAULT_SEED_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_reset_random_seed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_random_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name>default_rand</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>uninit_genrand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

























<function><type><name>void</name></type>
<name>InitVM_Random</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"srand"</literal></expr></argument>, <argument><expr><name>rb_f_srand</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"rand"</literal></expr></argument>, <argument><expr><name>rb_f_rand</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_cRandom</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Random"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><name>random_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>random_init</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"rand"</literal></expr></argument>, <argument><expr><name>random_rand</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><name>random_bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"seed"</literal></expr></argument>, <argument><expr><name>random_get_seed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>random_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"marshal_dump"</literal></expr></argument>, <argument><expr><name>random_dump</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"marshal_load"</literal></expr></argument>, <argument><expr><name>random_load</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>, <argument><expr><name>random_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"left"</literal></expr></argument>, <argument><expr><name>random_left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><name>random_equal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rand_default</name> <init>= <expr><call><name>Init_Random_default</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><name>rand_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"srand"</literal></expr></argument>, <argument><expr><name>rb_f_srand</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"rand"</literal></expr></argument>, <argument><expr><name>random_s_rand</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><name>random_s_bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"new_seed"</literal></expr></argument>, <argument><expr><name>random_seed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"urandom"</literal></expr></argument>, <argument><expr><name>random_raw_seed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>, <argument><expr><name>random_s_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"left"</literal></expr></argument>, <argument><expr><name>random_s_left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>m</name> <init>= <expr><call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><literal type="string">"Formatter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_include_module</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_extend_object</name><argument_list>(<argument><expr><name>rb_cRandom</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"random_number"</literal></expr></argument>, <argument><expr><name>rand_random_number</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"rand"</literal></expr></argument>, <argument><expr><name>rand_random_number</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<function><type><name>void</name></type>
<name>Init_Random</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>id_rand</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"rand"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_bytes</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitVM</name><argument_list>(<argument><expr><name>Random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
