<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\vm_args.c">









<macro><name>NORETURN</name><argument_list>(<argument>static void raise_argument_error(rb_execution_context_t *ec, const rb_iseq_t *iseq, const VALUE exc)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>static void argument_arity_error(rb_execution_context_t *ec, const rb_iseq_t *iseq, const int miss_argc, const int min_argc, const int max_argc)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>static void argument_kw_error(rb_execution_context_t *ec, const rb_iseq_t *iseq, const char *error, const VALUE keys)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>VALUE</name></type> <name>rb_keyword_error_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keys</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>method_missing</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>method_missing_reason</name></name></type> <name>call_status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kw_splat</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MJIT_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>MJIT_FUNC_EXPORTED</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<specifier>const</specifier> <name>rb_callable_method_entry_t</name> <modifier>*</modifier></type><name>rb_resolve_refined_method_callable</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>refinements</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_callable_method_entry_t</name> <modifier>*</modifier></type><name>me</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>args_info</name> <block>{

<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>rest_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rest_dupped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_callinfo_kwarg</name></name> <modifier>*</modifier></type><name>kw_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>kw_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rest</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>arg_setup_type</name> <block>{
<decl><name>arg_setup_method</name></decl>,
<decl><name>arg_setup_block</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arg_rest_dup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>rest_dupped</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <call><name>rb_ary_dup</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest_dupped</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>args_argc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>+</operator> <call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>args_extend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>min_argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>arg_rest_dup</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>+</operator> <call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>min_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>min_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>args_reduce</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>over_argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>len</name> <init>= <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>over_argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>arg_rest_dup</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_resize</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>over_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>
<expr_stmt><expr><name>over_argc</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <name>over_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>-=</operator> <name>over_argc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>args_check_block_arg0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name> <operator>&amp;&amp;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg0</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_check_array_type</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg0</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_check_array_type</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>arg0</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <name>ary</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>args_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name> <operator>!=</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arg_rest_dup</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





















<while>while <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><operator>--</operator><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>--</operator><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_unshift</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>--</operator><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <call><name>rb_ary_new_from_values</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest_dupped</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type>
<name>args_rest_argv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RARRAY_CONST_PTR_TRANSIENT</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>args_rest_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_behead</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>args_kw_argv_to_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_callinfo_kwarg</name></name> <modifier>*</modifier></type><name>kw_arg</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>kw_arg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>passed_keywords</name> <init>= <expr><name><name>kw_arg</name><operator>-&gt;</operator><name>keywords</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kw_len</name> <init>= <expr><name><name>kw_arg</name><operator>-&gt;</operator><name>keyword_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>h</name> <init>= <expr><call><name>rb_hash_new_with_size</name><argument_list>(<argument><expr><name>kw_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kw_start</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <name>kw_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>kw_argv</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>argv</name></name> <operator>+</operator> <name>kw_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>kw_start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>kw_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>passed_keywords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>kw_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<return>return <expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>args_setup_lead_parameters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>locals</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>-=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name></name> <operator>+=</operator> <name>argc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>args_rest_argv</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr><operator>,</operator> <expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>locals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name> <operator>+=</operator> <name>argc</name> <operator>-</operator> <name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>args_setup_post_parameters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>locals</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name>locals</name></expr></argument>, <argument><expr><call><name>RARRAY_CONST_PTR_TRANSIENT</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>-</operator> <name>argc</name></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_resize</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>args_setup_opt_parameters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_max</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>locals</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <name>opt_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>-=</operator> <name>opt_max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name></name> <operator>+=</operator> <name>opt_max</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>opt_max</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>RARRAY_CONST_PTR_TRANSIENT</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>opt_max</name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>locals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>j</name><operator>=</operator><name>i</name></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>opt_max</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>locals</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>args_setup_rest_parameter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>args_info</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>locals</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>locals</name> <operator>=</operator> <call><name>args_rest_array</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>make_unknown_kw_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>passed_keywords</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passed_keyword_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>kw_argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>passed_keyword_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>kw_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>passed_keywords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>make_rest_kw_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>passed_keywords</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passed_keyword_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>kw_argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>rb_hash_new_with_size</name><argument_list>(<argument><expr><name>passed_keyword_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>passed_keyword_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>kw_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>passed_keywords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>kw_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>args_setup_kw_parameters_lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ID</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>passed_keywords</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>passed_values</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>passed_keyword_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>keyname</name> <init>= <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>passed_keyword_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>keyname</name> <operator>==</operator> <name><name>passed_keywords</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name><name>passed_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>passed_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KW_SPECIFIED_BITS_MAX</name></cpp:macro> <cpp:value>(32-1)</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>void</name></type>
<name>args_setup_kw_parameters</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>iseq</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>passed_values</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>passed_keyword_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>passed_keywords</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>locals</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ID</name> <modifier>*</modifier></type><name>acceptable_keywords</name> <init>= <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>keyword</name><operator>-&gt;</operator><name>table</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>req_key_num</name> <init>= <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>keyword</name><operator>-&gt;</operator><name>required_num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>key_num</name> <init>= <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>keyword</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>default_values</name> <init>= <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>keyword</name><operator>-&gt;</operator><name>default_values</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>missing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>di</name></decl>, <decl><type ref="prev"/><name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unspecified_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>unspecified_bits_value</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>req_key_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>key</name> <init>= <expr><name><name>acceptable_keywords</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>args_setup_kw_parameters_lookup</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>locals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>passed_keywords</name></expr></argument>, <argument><expr><name>passed_values</name></expr></argument>, <argument><expr><name>passed_keyword_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>missing</name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>missing</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>missing</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>argument_kw_error</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><literal type="string">"missing"</literal></expr></argument>, <argument><expr><name>missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>di</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>key_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>di</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>args_setup_kw_parameters_lookup</name><argument_list>(<argument><expr><name><name>acceptable_keywords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>locals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>passed_keywords</name></expr></argument>, <argument><expr><name>passed_values</name></expr></argument>, <argument><expr><name>passed_keyword_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>default_values</name><index>[<expr><name>di</name></expr>]</index></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>locals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>KW_SPECIFIED_BITS_MAX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unspecified_bits</name> <operator>|=</operator> <literal type="number">0x01</literal> <operator>&lt;&lt;</operator> <name>di</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>unspecified_bits_value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unspecified_bits_value</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>KW_SPECIFIED_BITS_MAX</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>unspecified_bits</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x01</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>unspecified_bits_value</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>unspecified_bits_value</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>locals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>default_values</name><index>[<expr><name>di</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kwrest</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rest_hash_index</name> <init>= <expr><name>key_num</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>locals</name><index>[<expr><name>rest_hash_index</name></expr>]</index></name> <operator>=</operator> <call><name>make_rest_kw_hash</name><argument_list>(<argument><expr><name>passed_keywords</name></expr></argument>, <argument><expr><name>passed_keyword_len</name></expr></argument>, <argument><expr><name>passed_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>!=</operator> <name>passed_keyword_len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keys</name> <init>= <expr><call><name>make_unknown_kw_hash</name><argument_list>(<argument><expr><name>passed_keywords</name></expr></argument>, <argument><expr><name>passed_keyword_len</name></expr></argument>, <argument><expr><name>passed_values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>argument_kw_error</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>unspecified_bits_value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unspecified_bits_value</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>unspecified_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>locals</name><index>[<expr><name>key_num</name></expr>]</index></name> <operator>=</operator> <name>unspecified_bits_value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>args_setup_kw_rest_parameter</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>keyword_hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>locals</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kw_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keyword_hash</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>kw_flag</name> <operator>&amp;</operator> <name>VM_CALL_KW_SPLAT_MUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keyword_hash</name> <operator>=</operator> <call><name>rb_hash_dup</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>locals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>keyword_hash</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>args_setup_block_parameter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_calling_info</name></name> <modifier>*</modifier></type><name>calling</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>locals</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>block_handler</name> <init>= <expr><name><name>calling</name><operator>-&gt;</operator><name>block_handler</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>locals</name> <operator>=</operator> <call><name>rb_vm_bh_to_procval</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>block_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>fill_values_arg</name> <block>{
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>vals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fill_keys_values</name><parameter_list>(<parameter><decl><type><name>st_data_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fill_values_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator>struct <name>fill_values_arg</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ignore_keyword_hash_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>keyword_hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>iseq</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type> <name>kw_flag</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type> <name>converted_keyword_hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keyword_hash</name> <operator>=</operator> <call><name>rb_to_hash_type</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>kw_flag</name> <operator>&amp;</operator> <name>VM_CALL_KW_SPLAT_MUT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kwrest</name></name> <operator>||</operator>
<name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>ruby2_keywords</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>kw_flag</name> <operator>|=</operator> <name>VM_CALL_KW_SPLAT_MUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keyword_hash</name> <operator>=</operator> <call><name>rb_hash_dup</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>converted_keyword_hash</name> <operator>=</operator> <name>keyword_hash</name></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><operator>(</operator><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kw</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kwrest</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>RHASH_EMPTY_P</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>setup_parameters_complex</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>iseq</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rb_calling_info</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>calling</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_callinfo</name></name> <modifier>*</modifier></type><name>ci</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>locals</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>arg_setup_type</name></name></type> <name>arg_setup_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>min_argc</name> <init>= <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>lead_num</name></name> <operator>+</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>post_num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_argc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_rest</name></name> <operator>==</operator> <name>FALSE</name><operator>)</operator></expr> ?</condition><then> <expr><name>min_argc</name> <operator>+</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>opt_num</name></name></expr> </then><else>: <expr><name>UNLIMITED_ARGUMENTS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>given_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>kw_flag</name> <init>= <expr><call><name>vm_ci_flag</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>VM_CALL_KWARG</name> <operator>|</operator> <name>VM_CALL_KW_SPLAT</name> <operator>|</operator> <name>VM_CALL_KW_SPLAT_MUT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_pc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>allow_autosplat</name> <init>= <expr><operator>!</operator><name>kw_flag</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>args_info</name></name></type> <name>args_body</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keyword_hash</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>orig_sp</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name><operator>-&gt;</operator><name>sp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>flag_keyword_hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>converted_keyword_hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vm_check_canary</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>orig_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>














<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>calling</name><operator>-&gt;</operator><name>argc</name></name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>locals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name><operator>-&gt;</operator><name>sp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>locals</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>args</name> <operator>=</operator> <operator>&amp;</operator><name>args_body</name></expr>;</expr_stmt>
<expr_stmt><expr><name>given_argc</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name><name>calling</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>locals</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest_dupped</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kw_flag</name> <operator>&amp;</operator> <name>VM_CALL_KWARG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>kw_arg</name></name> <operator>=</operator> <call><name>vm_ci_kwarg</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kw</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>kw_len</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>kw_arg</name><operator>-&gt;</operator><name>keyword_len</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>kw_argv</name></name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>kw_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>-=</operator> <name>kw_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>given_argc</name> <operator>-=</operator> <name>kw_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>kw_argv</name></name></expr></argument>, <argument><expr><name>locals</name> <operator>+</operator> <name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>kw_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>kw_argv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>given_argc</name> <operator>=</operator> <call><name>args_kw_argv_to_hash</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kw_flag</name> <operator>|=</operator> <name>VM_CALL_KW_SPLAT</name> <operator>|</operator> <name>VM_CALL_KW_SPLAT_MUT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>kw_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>kw_argv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vm_ci_flag</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>VM_CALL_ARGS_SPLAT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rest_last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <name><name>locals</name><index>[<expr><operator>--</operator><name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>given_argc</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rest_last</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kw_flag</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>rest_last</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator>struct <name>RHash</name> <operator>*</operator><operator>)</operator><name>rest_last</name><operator>)</operator><operator>-&gt;</operator><name><name>basic</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RHASH_PASS_AS_KEYWORDS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rest_last</name> <operator>=</operator> <call><name>rb_hash_dup</name><argument_list>(<argument><expr><name>rest_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kw_flag</name> <operator>|=</operator> <name>VM_CALL_KW_SPLAT</name> <operator>|</operator> <name>VM_CALL_KW_SPLAT_MUT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rest_last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kw_flag</name> <operator>&amp;</operator> <name>VM_CALL_KW_SPLAT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ignore_keyword_hash_p</name><argument_list>(<argument><expr><name>rest_last</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kw_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>converted_keyword_hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>arg_rest_dup</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_pop</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>given_argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>kw_flag</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VM_CALL_KW_SPLAT</name> <operator>|</operator> <name>VM_CALL_KW_SPLAT_MUT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rest_last</name> <operator>!=</operator> <name>converted_keyword_hash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rest_last</name> <operator>=</operator> <name>converted_keyword_hash</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arg_rest_dup</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RARRAY_ASET</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rest_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>ruby2_keywords</name></name> <operator>&amp;&amp;</operator> <name>rest_last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag_keyword_hash</name> <operator>=</operator> <name>rest_last</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kw</name></name> <operator>||</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kwrest</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>arg_rest_dup</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_pop</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>given_argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>keyword_hash</name> <operator>=</operator> <name>rest_last</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>kw_flag</name> <operator>&amp;</operator> <name>VM_CALL_KW_SPLAT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>last_arg</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ignore_keyword_hash_p</name><argument_list>(<argument><expr><name>last_arg</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kw_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>converted_keyword_hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>given_argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>kw_flag</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VM_CALL_KW_SPLAT</name> <operator>|</operator> <name>VM_CALL_KW_SPLAT_MUT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>last_arg</name> <operator>!=</operator> <name>converted_keyword_hash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_arg</name> <operator>=</operator> <name>converted_keyword_hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>last_arg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>ruby2_keywords</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag_keyword_hash</name> <operator>=</operator> <name>last_arg</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kw</name></name> <operator>||</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kwrest</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>given_argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>keyword_hash</name> <operator>=</operator> <name>last_arg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag_keyword_hash</name> <operator>&amp;&amp;</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>flag_keyword_hash</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>RHash</name> <operator>*</operator><operator>)</operator><name>flag_keyword_hash</name><operator>)</operator><operator>-&gt;</operator><name><name>basic</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>RHASH_PASS_AS_KEYWORDS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kw_flag</name> <operator>&amp;&amp;</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>accepts_no_kwarg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"no keywords accepted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name>arg_setup_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>arg_setup_method</name></expr>:</case>
<break>break;</break> 
<case>case <expr><name>arg_setup_block</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>given_argc</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>keyword_hash</name> <operator>==</operator> <name>Qnil</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator> <operator>&amp;&amp;</operator>
<name>allow_autosplat</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>min_argc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>opt_num</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>ambiguous_param0</name></name> <operator>&amp;&amp;</operator>
<call><name>args_check_block_arg0</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>given_argc</name> <operator>=</operator> <call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>given_argc</name> <operator>&lt;</operator> <name>min_argc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>arg_setup_type</name> <operator>==</operator> <name>arg_setup_block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_VM_STACK_OVERFLOW</name><argument_list>(<argument><expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>, <argument><expr><name>min_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>given_argc</name> <operator>=</operator> <name>min_argc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>args_extend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>min_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>argument_arity_error</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name>given_argc</name></expr></argument>, <argument><expr><name>min_argc</name></expr></argument>, <argument><expr><name>max_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>given_argc</name> <operator>&gt;</operator> <name>max_argc</name> <operator>&amp;&amp;</operator> <name>max_argc</name> <operator>!=</operator> <name>UNLIMITED_ARGUMENTS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>arg_setup_type</name> <operator>==</operator> <name>arg_setup_block</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>args_reduce</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>given_argc</name> <operator>-</operator> <name>max_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>given_argc</name> <operator>=</operator> <name>max_argc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>argument_arity_error</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name>given_argc</name></expr></argument>, <argument><expr><name>min_argc</name></expr></argument>, <argument><expr><name>max_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_lead</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>args_setup_lead_parameters</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>lead_num</name></name></expr></argument>, <argument><expr><name>locals</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_rest</name></name> <operator>||</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_post</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>args_copy</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_post</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>args_setup_post_parameters</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>post_num</name></name></expr></argument>, <argument><expr><name>locals</name> <operator>+</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>post_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_opt</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><call><name>args_setup_opt_parameters</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>opt_num</name></name></expr></argument>, <argument><expr><name>locals</name> <operator>+</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>lead_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>opt_pc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>opt_table</name><index>[<expr><name>opt</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_rest</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>args_setup_rest_parameter</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>locals</name> <operator>+</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rest_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kw</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>klocals</name> <init>= <expr><name>locals</name> <operator>+</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>keyword</name><operator>-&gt;</operator><name>bits_start</name></name> <operator>-</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>keyword</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>kw_argv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_callinfo_kwarg</name></name> <modifier>*</modifier></type><name>kw_arg</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>kw_arg</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>args_setup_kw_parameters</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>kw_argv</name></name></expr></argument>, <argument><expr><name><name>kw_arg</name><operator>-&gt;</operator><name>keyword_len</name></name></expr></argument>, <argument><expr><name><name>kw_arg</name><operator>-&gt;</operator><name>keywords</name></name></expr></argument>, <argument><expr><name>klocals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>kw_len</name> <init>= <expr><call><name>rb_long2int</name><argument_list>(<argument><expr><call><name>RHASH_SIZE</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fill_values_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>keys</name></name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>kw_argv</name></name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>kw_len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>vals</name></name> <operator>=</operator> <name><name>arg</name><operator>.</operator><name>keys</name></name> <operator>+</operator> <name>kw_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>, <argument><expr><name>fill_keys_values</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>argc</name></name> <operator>==</operator> <name>kw_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>args_setup_kw_parameters</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name><name>arg</name><operator>.</operator><name>vals</name></name></expr></argument>, <argument><expr><name>kw_len</name></expr></argument>, <argument><expr><name><name>arg</name><operator>.</operator><name>keys</name></name></expr></argument>, <argument><expr><name>klocals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>args_argc</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>args_setup_kw_parameters</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>klocals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kwrest</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>args_setup_kw_rest_parameter</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>, <argument><expr><name>locals</name> <operator>+</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>keyword</name><operator>-&gt;</operator><name>rest_start</name></name></expr></argument>, <argument><expr><name>kw_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RHASH_SIZE</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arg_setup_type</name> <operator>==</operator> <name>arg_setup_method</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>argument_kw_error</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><call><name>rb_hash_keys</name><argument_list>(<argument><expr><name>keyword_hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_block</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>local_iseq</name></name> <operator>==</operator> <name>iseq</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>args_setup_block_parameter</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>calling</name></expr></argument>, <argument><expr><name>locals</name> <operator>+</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>block_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
{
int i;
for (i=0; i&lt;iseq-&gt;body-&gt;param.size; i++) {
fprintf(stderr, "local[%d] = %p\n", i, (void *)locals[i]);
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name><operator>-&gt;</operator><name>sp</name></name> <operator>=</operator> <name>orig_sp</name></expr>;</expr_stmt>
<return>return <expr><name>opt_pc</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>rb_backtrace_use_iseq_first_lineno_for_last_location</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><specifier>static</specifier> <name>void</name></type>
<name>raise_argument_error</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>exc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iseq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vm_push_frame</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name>VM_FRAME_MAGIC_DUMMY</name> <operator>|</operator> <name>VM_ENV_FLAG_LOCAL</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument> ,
<argument><expr><name>VM_BLOCK_HANDLER_NONE</name></expr></argument> , <argument><expr><name>Qfalse</name></expr></argument> ,
<argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>iseq_encoded</name></name></expr></argument>,
<argument><expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>rb_ec_backtrace_object</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_backtrace_use_iseq_first_lineno_for_last_location</name><argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_vm_pop_frame</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>rb_ec_backtrace_object</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>idBt_locations</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_exc_set_backtrace</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>argument_arity_error</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>miss_argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>min_argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>exc</name> <init>= <expr><call><name>rb_arity_error_new</name><argument_list>(<argument><expr><name>miss_argc</name></expr></argument>, <argument><expr><name>min_argc</name></expr></argument>, <argument><expr><name>max_argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_kw</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_iseq_param_keyword</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>kw</name> <init>= <expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>keyword</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ID</name> <modifier>*</modifier></type><name>keywords</name> <init>= <expr><name><name>kw</name><operator>-&gt;</operator><name>table</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>req_key_num</name> <init>= <expr><name><name>kw</name><operator>-&gt;</operator><name>required_num</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>req_key_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>required</name><index>[]</index></name> <init>= <expr><literal type="string">"; required keywords"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mesg</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>idMesg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><name>required</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>required</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>req_key_num</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><call><name>rb_id2str</name><argument_list>(<argument><expr><operator>*</operator><name>keywords</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>req_key_num</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call><index>[<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>raise_argument_error</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>argument_kw_error</name><parameter_list>(<parameter><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>raise_argument_error</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><call><name>rb_keyword_error_new</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>vm_caller_setup_arg_splat</name><parameter_list>(<parameter><decl><type><name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_calling_info</name></name> <modifier>*</modifier></type><name>calling</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><name><name>calling</name><operator>-&gt;</operator><name>argc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name> <operator>-</operator> <name>argc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name> <init>= <expr><name><name>argv</name><index>[<expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vm_check_canary</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>RARRAY_CONST_PTR_TRANSIENT</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_VM_STACK_OVERFLOW</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name><operator>++</operator> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>calling</name><operator>-&gt;</operator><name>argc</name></name> <operator>+=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>vm_caller_setup_arg_kw</name><parameter_list>(<parameter><decl><type><name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_calling_info</name></name> <modifier>*</modifier></type><name>calling</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_callinfo</name></name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>passed_keywords</name> <init>= <expr><call><name>vm_ci_kwarg</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>keywords</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kw_len</name> <init>= <expr><call><name>vm_ci_kwarg</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>keyword_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>h</name> <init>= <expr><call><name>rb_hash_new_with_size</name><argument_list>(<argument><expr><name>kw_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>kw_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>passed_keywords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>sp</name> <operator>-</operator> <name>kw_len</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>sp</name><operator>-</operator><name>kw_len</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name> <operator>-=</operator> <name>kw_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>calling</name><operator>-&gt;</operator><name>argc</name></name> <operator>-=</operator> <name>kw_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>calling</name><operator>-&gt;</operator><name>kw_splat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>vm_to_proc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>rb_obj_is_proc</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_callable_method_entry_t</name> <modifier>*</modifier></type><name>me</name> <init>=
<expr><call><name>rb_callable_method_entry_with_refinements</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idTo_proc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>me</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>rb_vm_call0</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name>idTo_proc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>me</name></expr></argument>, <argument><expr><name>RB_NO_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>rb_check_convert_type_with_id</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>T_DATA</name></expr></argument>, <argument><expr><literal type="string">"Proc"</literal></expr></argument>, <argument><expr><name>idTo_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>rb_obj_is_proc</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>,
<argument><expr><literal type="string">"wrong argument type %s (expected Proc)"</literal></expr></argument>,
<argument><expr><call><name>rb_obj_classname</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>proc</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>refine_sym_proc_call</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>yielded_arg</name></expr></argument>, <argument><expr><name>callback_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>mid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_callable_method_entry_t</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>symbol</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>callback_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>refinements</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>callback_arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kw_splat</name> <init>= <expr><name>RB_PASS_CALLED_KEYWORDS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name><operator>--</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"no receiver given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>*</operator><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>SYM2ID</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>klass</name> <operator>=</operator> <call><name>CLASS_OF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>klass</name></expr>;</condition> <incr><expr><name>klass</name> <operator>=</operator> <call><name>RCLASS_SUPER</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>rb_callable_method_entry</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>me</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>rb_resolve_refined_method_callable</name><argument_list>(<argument><expr><name>refinements</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>me</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>GET_EC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>blockarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vm_passed_block_handler_set</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>blockarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>me</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>method_missing</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>MISSING_NOENTRY</name></expr></argument>, <argument><expr><name>kw_splat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_vm_call0</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>me</name></expr></argument>, <argument><expr><name>kw_splat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>vm_caller_setup_arg_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>rb_control_frame_t</name> <modifier>*</modifier></type><name>reg_cfp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rb_callinfo</name></name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>blockiseq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_super</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vm_ci_flag</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>VM_CALL_ARGS_BLOCKARG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>block_code</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><name><name>reg_cfp</name><operator>-&gt;</operator><name>sp</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>block_code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VM_BLOCK_HANDLER_NONE</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>block_code</name> <operator>==</operator> <name>rb_block_param_proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>VM_CFP_IN_HEAP_P</name><argument_list>(<argument><expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>reg_cfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>handler</name> <init>= <expr><call><name>VM_CF_BLOCK_HANDLER</name><argument_list>(<argument><expr><name>reg_cfp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>reg_cfp</name><operator>-&gt;</operator><name>block_code</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <name>handler</name></expr>;</expr_stmt>
<return>return <expr><name>handler</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>block_code</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rb_method_basic_definition_p</name><argument_list>(<argument><expr><name>rb_cSymbol</name></expr></argument>, <argument><expr><name>idTo_proc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_cref_t</name> <modifier>*</modifier></type><name>cref</name> <init>= <expr><call><name>vm_env_cref</name><argument_list>(<argument><expr><name><name>reg_cfp</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cref</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>cref</name><operator>-&gt;</operator><name>refinements</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ref</name> <init>= <expr><name><name>cref</name><operator>-&gt;</operator><name>refinements</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>func</name> <init>= <expr><call><name>rb_hash_lookup</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>block_code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>callback_arg</name> <init>= <expr><call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>callback_arg</name></expr></argument>, <argument><expr><name>block_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>callback_arg</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>callback_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>rb_func_lambda_new</name><argument_list>(<argument><expr><name>refine_sym_proc_call</name></expr></argument>, <argument><expr><name>callback_arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UNLIMITED_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>block_code</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>block_code</name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>block_code</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>vm_to_proc</name><argument_list>(<argument><expr><name>block_code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>blockiseq</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name><name>struct</name> <name>rb_captured_block</name></name> <modifier>*</modifier></type><name>captured</name> <init>= <expr><call><name>VM_CFP_TO_CAPTURED_BLOCK</name><argument_list>(<argument><expr><name>reg_cfp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>captured</name><operator>-&gt;</operator><name>code</name><operator>.</operator><name>iseq</name></name> <operator>=</operator> <name>blockiseq</name></expr>;</expr_stmt>
<return>return <expr><call><name>VM_BH_FROM_ISEQ_BLOCK</name><argument_list>(<argument><expr><name>captured</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_super</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>GET_BLOCK_HANDLER</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>VM_BLOCK_HANDLER_NONE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
