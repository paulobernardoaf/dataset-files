<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\cont.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> COROUTINE_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval_intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/cont.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/mjit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/warnings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id_table.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>DEBUG</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_PAGE_SIZE</name></cpp:macro> <cpp:value>(pagesize)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_PAGE_MASK</name></cpp:macro> <cpp:value>(~(RB_PAGE_SIZE - 1))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>pagesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>cont_data_type</name></decl>, <decl><type ref="prev"/><name>fiber_data_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cContinuation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cFiber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_eFiberError</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RB_EXPERIMENTAL_FIBER_POOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cFiberPool</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPTURE_JUST_VALID_VM_STACK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COROUTINE_LIMITED_ADDRESS_SPACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_POOL_ALLOCATION_FREE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_POOL_INITIAL_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_POOL_ALLOCATION_MAXIMUM_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_POOL_INITIAL_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_POOL_ALLOCATION_MAXIMUM_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>context_type</name> <block>{
<decl><name>CONTINUATION_CONTEXT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FIBER_CONTEXT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>cont_saved_vm_stack</name> <block>{
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAPTURE_JUST_VALID_VM_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>slen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct_decl>struct <name>fiber_pool</name>;</struct_decl>


<struct>struct <name>fiber_pool_stack</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>current</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>available</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>pool</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_allocation</name></name> <modifier>*</modifier></type> <name>allocation</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>fiber_pool_vacancy</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_stack</name></name></type> <name>stack</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>previous</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
}</block>;</struct>

























<struct>struct <name>fiber_pool_allocation</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>stride</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>pool</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_allocation</name></name> <modifier>*</modifier></type> <name>previous</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_allocation</name></name> <modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>fiber_pool</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_allocation</name></name> <modifier>*</modifier></type> <name>allocations</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancies</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>initial_count</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>free_stacks</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>vm_stack_size</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>rb_context_struct</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>context_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kw_splat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cont_saved_vm_stack</name></name></type> <name>saved_vm_stack</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>stack_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stack_size</name></decl>;</decl_stmt>
}</block> <decl><name>machine</name></decl>;</struct>
<decl_stmt><decl><type><name>rb_execution_context_t</name></type> <name>saved_ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_jmpbuf_t</name></type> <name>jmpbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_ensure_entry_t</name> <modifier>*</modifier></type><name>ensure_array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mjit_cont</name></name> <modifier>*</modifier></type><name>mjit_cont</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_context_t</name>;</typedef>














<enum>enum <name>fiber_status</name> <block>{
<decl><name>FIBER_CREATED</name></decl>,
<decl><name>FIBER_RESUMED</name></decl>,
<decl><name>FIBER_SUSPENDED</name></decl>,
<decl><name>FIBER_TERMINATED</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_CREATED_P</name><parameter_list>(<parameter><type><name>fiber</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fiber)-&gt;status == FIBER_CREATED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_RESUMED_P</name><parameter_list>(<parameter><type><name>fiber</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fiber)-&gt;status == FIBER_RESUMED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_SUSPENDED_P</name><parameter_list>(<parameter><type><name>fiber</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fiber)-&gt;status == FIBER_SUSPENDED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_TERMINATED_P</name><parameter_list>(<parameter><type><name>fiber</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fiber)-&gt;status == FIBER_TERMINATED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_RUNNABLE_P</name><parameter_list>(<parameter><type><name>fiber</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FIBER_CREATED_P(fiber) || FIBER_SUSPENDED_P(fiber))</cpp:value></cpp:define>

<struct>struct <name>rb_fiber_struct</name> <block>{
<decl_stmt><decl><type><name>rb_context_t</name></type> <name>cont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>first_proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_fiber_struct</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BITFIELD</name><argument_list>(<argument><expr>enum <name>fiber_status</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>transferred</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>coroutine_context</name></name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_stack</name></name></type> <name>stack</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>fiber_pool</name></name></type> <name>shared_fiber_pool</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAP_STACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD_kernel__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_STACK_FLAGS</name></cpp:macro> <cpp:value>(MAP_PRIVATE | MAP_ANON | MAP_STACK)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_STACK_FLAGS</name></cpp:macro> <cpp:value>(MAP_PRIVATE | MAP_ANON)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRNOMSG</name></cpp:macro> <cpp:value>strerror(errno)</cpp:value></cpp:define>



<function><type><specifier>inline</specifier> <specifier>static</specifier> <name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type>
<name>fiber_pool_vacancy_pointer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>STACK_GROW_DIR_DETECTION</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator>struct <name>fiber_pool_vacancy</name> <operator>*</operator><operator>)</operator><operator>(</operator>
<operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>base</name> <operator>+</operator> <call><name>STACK_DIR_UPPER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>RB_PAGE_SIZE</name></expr></argument>)</argument_list></call>
<operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>fiber_pool_stack_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool_stack</name></name> <modifier>*</modifier></type> <name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>STACK_GROW_DIR_DETECTION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <call><name>STACK_DIR_UPPER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>available</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>fiber_pool_stack_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool_stack</name></name> <modifier>*</modifier></type> <name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>STACK_GROW_DIR_DETECTION</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>STACK_DIR_UPPER</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>current</name></name> <operator>-</operator> <name><name>stack</name><operator>-&gt;</operator><name>available</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>fiber_pool_stack_alloca</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool_stack</name></name> <modifier>*</modifier></type> <name>stack</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>STACK_GROW_DIR_DETECTION</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fiber_pool_stack_alloca(%p): %"</literal><name>PRIuSIZE</name><literal type="string">"/%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>stack</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>available</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>available</name></name> <operator>&gt;=</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pointer</name> <init>= <expr><call><name>STACK_DIR_UPPER</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>current</name></name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <call><name>STACK_DIR_UPPER</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>current</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>current</name></name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>available</name></name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>pointer</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>fiber_pool_vacancy_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fiber_pool_stack_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fiber_pool_stack_alloca</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>RB_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type>
<name>fiber_pool_vacancy_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancy</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>head</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>vacancy</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>head</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>vacancy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>vacancy</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_pool_vacancy_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vacancy</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vacancy</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name><name>vacancy</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vacancy</name><operator>-&gt;</operator><name>previous</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vacancy</name><operator>-&gt;</operator><name>previous</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>vacancy</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>pool</name><operator>-&gt;</operator><name>vacancies</name></name> <operator>=</operator> <name><name>vacancy</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type>
<name>fiber_pool_vacancy_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancy</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>vacancies</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vacancy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fiber_pool_vacancy_remove</name><argument_list>(<argument><expr><name>vacancy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>vacancy</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type>
<name>fiber_pool_vacancy_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancy</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>vacancies</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vacancy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>vacancies</name></name> <operator>=</operator> <name><name>vacancy</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>vacancy</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>inline</specifier> <specifier>static</specifier> <name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type>
<name>fiber_pool_vacancy_initialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>fiber_pool</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancies</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancy</name> <init>= <expr><call><name>fiber_pool_vacancy_pointer</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fiber_pool_vacancy_reset</name><argument_list>(<argument><expr><name>vacancy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>pool</name></name> <operator>=</operator> <name>fiber_pool</name></expr>;</expr_stmt>

<return>return <expr><call><name>fiber_pool_vacancy_push</name><argument_list>(<argument><expr><name>vacancy</name></expr></argument>, <argument><expr><name>vacancies</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>fiber_pool_allocate_memory</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<while>while <condition>(<expr><operator>*</operator><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>base</name> <init>= <expr><call><name>VirtualAlloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>MEM_COMMIT</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>count</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>base</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>base</name> <init>= <expr><call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>FIBER_STACK_FLAGS</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>count</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>base</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>fiber_pool_allocation</name></name> <modifier>*</modifier></type>
<name>fiber_pool_expand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>fiber_pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>STACK_GROW_DIR_DETECTION</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stride</name> <init>= <expr><name>size</name> <operator>+</operator> <name>RB_PAGE_SIZE</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>base</name> <init>= <expr><call><name>fiber_pool_allocate_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"can't alloc machine stack to fiber (%"</literal><name>PRIuSIZE</name><literal type="string">" x %"</literal><name>PRIuSIZE</name><literal type="string">" bytes): %s"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ERRNOMSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancies</name> <init>= <expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>vacancies</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_allocation</name></name> <modifier>*</modifier></type> <name>allocation</name> <init>= <expr><call><name>RB_ALLOC</name><argument_list>(<argument><expr>struct <name>fiber_pool_allocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>fiber_pool</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fiber_pool_expand(%"</literal><name>PRIuSIZE</name><literal type="string">"): %p, %"</literal><name>PRIuSIZE</name><literal type="string">"/%"</literal><name>PRIuSIZE</name><literal type="string">" x [%"</literal><name>PRIuSIZE</name><literal type="string">":%"</literal><name>PRIuSIZE</name><literal type="string">"]\n"</literal></expr></argument>,
<argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>fiber_pool</name></expr></argument>, <argument><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>used</name></name></expr></argument>, <argument><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>vm_stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>base</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>allocation</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <operator>(</operator><name>stride</name> <operator>*</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>page</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>base</name> <operator>+</operator> <call><name>STACK_DIR_UPPER</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>old_protect</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VirtualProtect</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>RB_PAGE_SIZE</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name> <operator>|</operator> <name>PAGE_GUARD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_protect</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VirtualFree</name><argument_list>(<argument><expr><name><name>allocation</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"can't set a guard page: %s"</literal></expr></argument>, <argument><expr><name>ERRNOMSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>mprotect</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>RB_PAGE_SIZE</name></expr></argument>, <argument><expr><name>PROT_NONE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>allocation</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>count</name><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"can't set a guard page: %s"</literal></expr></argument>, <argument><expr><name>ERRNOMSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>vacancies</name> <operator>=</operator> <call><name>fiber_pool_vacancy_initialize</name><argument_list>(
<argument><expr><name>fiber_pool</name></expr></argument>, <argument><expr><name>vacancies</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>base</name> <operator>+</operator> <call><name>STACK_DIR_UPPER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RB_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>size</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>vacancies</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>allocation</name></name> <operator>=</operator> <name>allocation</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>


<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>fiber_pool</name><operator>-&gt;</operator><name>allocations</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>allocation</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>allocation</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>allocations</name></name> <operator>=</operator> <name>allocation</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>vacancies</name></name> <operator>=</operator> <name>vacancies</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<return>return <expr><name>allocation</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_pool_initialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>fiber_pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vm_stack_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name>vm_stack_size</name> <operator>&lt;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>allocations</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>vacancies</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>/</operator> <name>RB_PAGE_SIZE</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>RB_PAGE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>initial_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>free_stacks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>vm_stack_size</name></name> <operator>=</operator> <name>vm_stack_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fiber_pool_expand</name><argument_list>(<argument><expr><name>fiber_pool</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_pool_allocation_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool_allocation</name></name> <modifier>*</modifier></type> <name>allocation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>STACK_GROW_DIR_DETECTION</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>allocation</name><operator>-&gt;</operator><name>used</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fiber_pool_allocation_free: %p base=%p count=%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>allocation</name></expr></argument>, <argument><expr><name><name>allocation</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>allocation</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>allocation</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>base</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>allocation</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <operator>(</operator><name><name>allocation</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>+</operator> <call><name>STACK_DIR_UPPER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RB_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancy</name> <init>= <expr><call><name>fiber_pool_vacancy_pointer</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>allocation</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>fiber_pool_vacancy_remove</name><argument_list>(<argument><expr><name>vacancy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>VirtualFree</name><argument_list>(<argument><expr><name><name>allocation</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>allocation</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>allocation</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <name><name>allocation</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>allocation</name><operator>-&gt;</operator><name>previous</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>previous</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>allocation</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>allocations</name></name> <operator>=</operator> <name><name>allocation</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>allocation</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name><name>allocation</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>count</name></name> <operator>-=</operator> <name><name>allocation</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>allocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>fiber_pool_stack</name></name></type>
<name>fiber_pool_stack_acquire</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>fiber_pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancy</name> <init>= <expr><call><name>fiber_pool_vacancy_pop</name><argument_list>(<argument><expr><name>fiber_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fiber_pool_stack_acquire: %p used=%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>fiber_pool</name><operator>-&gt;</operator><name>vacancies</name></name></expr></argument>, <argument><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vacancy</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>maximum</name> <init>= <expr><name>FIBER_POOL_ALLOCATION_MAXIMUM_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>minimum</name> <init>= <expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>initial_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>count</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>maximum</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name> <operator>=</operator> <name>maximum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>minimum</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name> <operator>=</operator> <name>minimum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fiber_pool_expand</name><argument_list>(<argument><expr><name>fiber_pool</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>vacancies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vacancy</name> <operator>=</operator> <call><name>fiber_pool_vacancy_pop</name><argument_list>(<argument><expr><name>fiber_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name>vacancy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>used</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>allocation</name><operator>-&gt;</operator><name>used</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fiber_pool_stack_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>fiber_pool_stack_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool_stack</name></name> <modifier>*</modifier></type> <name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>base</name> <init>= <expr><call><name>fiber_pool_stack_base</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>available</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <operator>(</operator><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>RB_PAGE_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fiber_pool_stack_free: %p+%"</literal><name>PRIuSIZE</name><literal type="string">" [base=%p, size=%"</literal><name>PRIuSIZE</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VM_CHECK_MODE</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MADV_DONTNEED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>MADV_DONTNEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MADV_FREE_REUSABLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>MADV_FREE_REUSABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MADV_FREE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>MADV_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MADV_DONTNEED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>MADV_DONTNEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>VirtualAlloc</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>MEM_RESET</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_pool_stack_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fiber_pool_stack</name></name> <modifier>*</modifier></type> <name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>pool</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_vacancy</name></name> <modifier>*</modifier></type> <name>vacancy</name> <init>= <expr><call><name>fiber_pool_vacancy_pointer</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fiber_pool_stack_release: %p used=%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <operator>*</operator><name>stack</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>fiber_pool_vacancy_reset</name><argument_list>(<argument><expr><name>vacancy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>vacancies</name></name> <operator>=</operator> <call><name>fiber_pool_vacancy_push</name><argument_list>(<argument><expr><name>vacancy</name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>vacancies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>used</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIBER_POOL_ALLOCATION_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool_allocation</name></name> <modifier>*</modifier></type> <name>allocation</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>allocation</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>allocation</name><operator>-&gt;</operator><name>used</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>allocation</name><operator>-&gt;</operator><name>used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fiber_pool_allocation_free</name><argument_list>(<argument><expr><name>allocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>stack</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>free_stacks</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fiber_pool_stack_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>stack</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>free_stacks</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fiber_pool_stack_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vacancy</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>COROUTINE</name></type>
<name>fiber_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>from</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_fiber_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name> <modifier>*</modifier></type>
<name>fiber_initialize_coroutine</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type> <name>vm_stack_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>fiber_pool</name> <init>= <expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>sec</name> <init>= <expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>vm_stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name>fiber_pool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <call><name>fiber_pool_stack_acquire</name><argument_list>(<argument><expr><name>fiber_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vm_stack</name> <operator>=</operator> <call><name>fiber_pool_stack_alloca</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>vm_stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>vm_stack_size</name> <operator>=</operator> <name><name>fiber_pool</name><operator>-&gt;</operator><name>vm_stack_size</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COROUTINE_PRIVATE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>coroutine_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>fiber_entry</name></expr></argument>, <argument><expr><call><name>fiber_pool_stack_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>available</name></name></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>sec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_maxsize</name></name> <operator>&gt;</operator> <name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>available</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_maxsize</name></name> <operator>=</operator> <name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>available</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>coroutine_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>fiber_entry</name></expr></argument>, <argument><expr><call><name>fiber_pool_stack_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>available</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name> <operator>=</operator> <name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>current</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_maxsize</name></name> <operator>=</operator> <name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>available</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>vm_stack</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_stack_release</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type> <name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fiber_stack_release: %p, stack.base=%p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>fiber</name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fiber_pool_stack_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rb_ec_clear_vm_stack</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fiber_status_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>fiber_status</name></name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FIBER_CREATED</name></expr>:</case> <return>return <expr><literal type="string">"created"</literal></expr>;</return>
<case>case <expr><name>FIBER_RESUMED</name></expr>:</case> <return>return <expr><literal type="string">"resumed"</literal></expr>;</return>
<case>case <expr><name>FIBER_SUSPENDED</name></expr>:</case> <return>return <expr><literal type="string">"suspended"</literal></expr>;</return>
<case>case <expr><name>FIBER_TERMINATED</name></expr>:</case> <return>return <expr><literal type="string">"terminated"</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>VM_UNREACHABLE</name><argument_list>(<argument><expr><name>fiber_status_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VM_CHECK_MODE</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>fiber_ptr</name></name> <operator>==</operator> <name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FIBER_RESUMED</name></expr>:</case>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>vm_stack</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FIBER_SUSPENDED</name></expr>:</case>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>vm_stack</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FIBER_CREATED</name></expr>:</case>
<case>case <expr><name>FIBER_TERMINATED</name></expr>:</case>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>VM_UNREACHABLE</name><argument_list>(<argument><expr><name>fiber_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>fiber_status_set</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>fiber_status</name></name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>FIBER_TERMINATED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fiber_verify</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ec_switch</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ruby_current_execution_context_ptr</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name></name> <operator>=</operator> <name>ec</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>main_thread</name></name> <operator>==</operator> <name>th</name> <operator>&amp;&amp;</operator> <call><name>rb_signal_buff_size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RUBY_VM_SET_TRAP_INTERRUPT</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>self</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_context_t</name> <modifier>*</modifier></type>
<name>cont_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rb_context_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cont_data_type</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cont</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_fiber_t</name> <modifier>*</modifier></type>
<name>fiber_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rb_fiber_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiber_data_type</name></expr></argument>, <argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fiber</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"uninitialized fiber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>fiber</name></expr>;</return>
</block_content>}</block></function>

<macro><name>NOINLINE</name><argument_list>(<argument>static VALUE cont_capture(volatile int *volatile stat)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_MUST_BE_RUNNING</name><parameter_list>(<parameter><type><name>th</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(th)-&gt;ec-&gt;tag) rb_raise(rb_eThreadError, "not running thread"); } while (0)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>cont_thread_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>thread_ptr</name><operator>-&gt;</operator><name>self</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cont_compact</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>self</name></name> <operator>=</operator> <call><name>rb_gc_location</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>rb_gc_location</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_execution_context_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cont_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RUBY_MARK_ENTER</name><argument_list>(<argument><expr><literal type="string">"cont"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_gc_mark_movable</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_gc_mark_movable</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_execution_context_mark</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><call><name>cont_thread_value</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAPTURE_JUST_VALID_VM_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_gc_mark_locations</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>slen</name></name> <operator>+</operator> <name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>clen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>rb_gc_mark_locations</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CONTINUATION_CONTEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_gc_mark_locations</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name></expr></argument>,
<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name> <operator>+</operator> <name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><operator>(</operator><name>rb_fiber_t</name><operator>*</operator><operator>)</operator><name>cont</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIBER_TERMINATED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_gc_mark_locations</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name></expr></argument>,
<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name> <operator>+</operator> <name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RUBY_MARK_LEAVE</name><argument_list>(<argument><expr><literal type="string">"cont"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fiber_is_root_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>fiber</name> <operator>==</operator> <name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>thread_ptr</name><operator>-&gt;</operator><name>root_fiber</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cont_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RUBY_FREE_ENTER</name><argument_list>(<argument><expr><literal type="string">"cont"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CONTINUATION_CONTEXT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>vm_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>ensure_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_FREE_UNLESS_NULL</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><operator>(</operator><name>rb_fiber_t</name><operator>*</operator><operator>)</operator><name>cont</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>coroutine_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fiber_is_root_p</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fiber_stack_release</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RUBY_FREE_UNLESS_NULL</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mjit_enabled</name> <operator>&amp;&amp;</operator> <name><name>cont</name><operator>-&gt;</operator><name>mjit_cont</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mjit_cont_free</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>mjit_cont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_FREE_LEAVE</name><argument_list>(<argument><expr><literal type="string">"cont"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>cont_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cont</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAPTURE_JUST_VALID_VM_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>slen</name></name> <operator>+</operator> <name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>clen</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>vm_stack_size</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fiber_update_self</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>self</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>self</name></name> <operator>=</operator> <call><name>rb_gc_location</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_execution_context_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fiber_mark_self</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>self</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_gc_mark_movable</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_execution_context_mark</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_compact</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>first_proc</name></name> <operator>=</operator> <call><name>rb_gc_location</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>first_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_fiber_update_self</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cont_compact</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fiber_verify</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUBY_MARK_ENTER</name><argument_list>(<argument><expr><literal type="string">"cont"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fiber_verify</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark_movable</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>first_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_fiber_mark_self</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cont_mark</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_MARK_LEAVE</name><argument_list>(<argument><expr><literal type="string">"cont"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUBY_FREE_ENTER</name><argument_list>(<argument><expr><literal type="string">"fiber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>local_storage</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_id_table_free</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>local_storage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cont_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUBY_FREE_LEAVE</name><argument_list>(<argument><expr><literal type="string">"fiber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>fiber_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fiber</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>saved_ec</name> <init>= <expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>rb_ec_thread_ptr</name><argument_list>(<argument><expr><name>saved_ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>saved_ec</name><operator>-&gt;</operator><name>local_storage</name></name> <operator>&amp;&amp;</operator> <name>fiber</name> <operator>!=</operator> <name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>rb_id_table_memsize</name><argument_list>(<argument><expr><name><name>saved_ec</name><operator>-&gt;</operator><name>local_storage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>cont_memsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_obj_is_fiber</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_typeddata_is_kind_of</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiber_data_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cont_save_machine_stack</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_MACHINE_STACK_END</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name> <operator>&gt;</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_size</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name> <operator>-</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_src</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_size</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name> <operator>-</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_src</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>REALLOC_N</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>FLUSH_REGISTER_WINDOWS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_src</name></name></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>cont_data_type</name> <init>= <expr><block>{
<expr><literal type="string">"continuation"</literal></expr>,
<expr><block>{<expr><name>cont_mark</name></expr>, <expr><name>cont_free</name></expr>, <expr><name>cont_memsize</name></expr>, <expr><name>cont_compact</name></expr>}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>cont_save_thread</name><parameter_list>(<parameter><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name></decl></parameter>, <parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>sec</name> <init>= <expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>THREAD_RUNNABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>sec</name> <operator>=</operator> <operator>*</operator><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cont_init_mjit_cont</name><parameter_list>(<parameter><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>mjit_cont</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mjit_enabled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>mjit_cont</name></name> <operator>=</operator> <call><name>mjit_cont_new</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cont_init</name><parameter_list>(<parameter><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name></decl></parameter>, <parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>cont_save_thread</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>thread_ptr</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>local_storage</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>local_storage_recursive_hash</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>local_storage_recursive_hash_for_trace</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cont_init_mjit_cont</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_context_t</name> <modifier>*</modifier></type>
<name>cont_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>contval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>THREAD_MUST_BE_RUNNING</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>contval</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>rb_context_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cont_data_type</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>self</name></name> <operator>=</operator> <name>contval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cont_init</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cont</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fiber_init_mjit_cont</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_fiber_struct</name></name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>cont_init_mjit_cont</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
void
show_vm_stack(const rb_execution_context_t *ec)
{
VALUE *p = ec-&gt;vm_stack;
while (p &lt; ec-&gt;cfp-&gt;sp) {
fprintf(stderr, "%3d ", (int)(p - ec-&gt;vm_stack));
rb_obj_info_dump(*p);
p++;
}
}

void
show_vm_pcs(const rb_control_frame_t *cfp,
const rb_control_frame_t *end_of_cfp)
{
int i=0;
while (cfp != end_of_cfp) {
int pc = 0;
if (cfp-&gt;iseq) {
pc = cfp-&gt;pc - cfp-&gt;iseq-&gt;body-&gt;iseq_encoded;
}
fprintf(stderr, "%2d pc: %d\n", i++, pc);
cfp = RUBY_VM_PREVIOUS_CONTROL_FRAME(cfp);
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>COMPILER_WARNING_PUSH</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>COMPILER_WARNING_IGNORED</name><argument_list>(<argument><expr><operator>-</operator><name>Wduplicate</name><operator>-</operator><name>decl</name><operator>-</operator><name>specifier</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
static <name>VALUE</name>
<name>cont_capture</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>int</name> <operator>*</operator><specifier>volatile</specifier> <name>stat</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_context_t</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>cont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>contval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>THREAD_MUST_BE_RUNNING</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_vm_stack_to_heap</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cont</name> <operator>=</operator> <call><name>cont_new</name><argument_list>(<argument><expr><name>rb_cContinuation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>contval</name> <operator>=</operator> <name><name>cont</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAPTURE_JUST_VALID_VM_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>slen</name></name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>cfp</name><operator>-&gt;</operator><name>sp</name></name> <operator>-</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>clen</name></name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name> <operator>+</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack_size</name></name> <operator>-</operator> <operator>(</operator><name>VALUE</name><operator>*</operator><operator>)</operator><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>slen</name></name> <operator>+</operator> <name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>clen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name></expr></argument>,
<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>slen</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>VALUE</name><operator>*</operator><operator>)</operator><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>,
<argument><expr><name>VALUE</name></expr></argument>,
<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>clen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>vm_stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>vm_stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_ec_set_vm_stack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>cfp</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cont_save_machine_stack</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>rb_ensure_list_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_ensure_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name><operator>=</operator><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>ensure_list</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>cont</name><operator>-&gt;</operator><name>ensure_array</name></name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>rb_ensure_entry_t</name></expr></argument>,<argument><expr><name>size</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name><operator>=</operator><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>ensure_list</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>marker</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>marker</name></name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><operator>*</operator><name>entry</name><operator>++</operator> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>marker</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><call><name>ruby_setjmp</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>jmpbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VAR_INITIALIZED</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>cont</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>stat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>stat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>contval</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>
<function><type><name>COMPILER_WARNING_POP</name>

<specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>fiber_restore_thread</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ec_switch</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name> <operator>==</operator> <name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>cont_restore_thread</name><parameter_list>(<parameter><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CONTINUATION_CONTEXT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>sec</name> <init>= <expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sec</name><operator>-&gt;</operator><name>fiber_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fiber</name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fiber</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>&amp;&amp;</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ec_switch</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>trace_arg</name></name> <operator>!=</operator> <name><name>sec</name><operator>-&gt;</operator><name>trace_arg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"can't call across trace_func"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAPTURE_JUST_VALID_VM_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name></expr></argument>,
<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name> <operator>+</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>vm_stack_size</name></name> <operator>-</operator> <name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>clen</name></name></expr></argument>,
<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>slen</name></name></expr></argument>,
<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>clen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>vm_stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>cfp</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>cfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>raised_flag</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>raised_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>protect_tag</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>protect_tag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>root_lep</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>root_lep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>root_svar</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>root_svar</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>ensure_list</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>ensure_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>=</operator> <name><name>sec</name><operator>-&gt;</operator><name>errinfo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fiber_restore_thread</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>(</operator><name>rb_fiber_t</name><operator>*</operator><operator>)</operator><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<macro><name>NOINLINE</name><argument_list>(<argument>static void fiber_setcontext(rb_fiber_t *new_fiber, rb_fiber_t *old_fiber)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_setcontext</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>new_fiber</name></decl></parameter>, <parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>old_fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIBER_TERMINATED_P</name><argument_list>(<argument><expr><name>old_fiber</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>STACK_GROW_DIR_DETECTION</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_MACHINE_STACK_END</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STACK_DIR_UPPER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>old_fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>machine</name><operator>.</operator><name>stack_size</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name> <operator>-</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>machine</name><operator>.</operator><name>stack</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>old_fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>machine</name><operator>.</operator><name>stack_size</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name> <operator>-</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>machine</name><operator>.</operator><name>stack</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>old_fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>machine</name><operator>.</operator><name>stack_start</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>old_fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>machine</name><operator>.</operator><name>stack_end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fiber_restore_thread</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>new_fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>coroutine_transfer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></function>

<expr_stmt><expr><call><name>NOINLINE</name><argument_list>(<argument><expr><macro><name>NORETURN</name><argument_list>(<argument>static void cont_restore_1(rb_context_t *)</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cont_restore_1</name><parameter_list>(<parameter><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cont_restore_thread</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>jmp_buf</name></type> <name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setjmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_JUMP_BUFFER</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>jmpbuf</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>Frame</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>_JUMP_BUFFER</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>Frame</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_src</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>FLUSH_REGISTER_WINDOWS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_src</name></name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack</name></name></expr></argument>,
<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ruby_longjmp</name><argument_list>(<argument><expr><name><name>cont</name><operator>-&gt;</operator><name>jmpbuf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>NORETURN</name><argument_list>(<argument><expr><macro><name>NOINLINE</name><argument_list>(<argument>static void cont_restore_0(rb_context_t *, VALUE *)</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cont_restore_0</name><parameter_list>(<parameter><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>addr_in_prev_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_src</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALLOCA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PAD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PAD_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>space</name><index>[<expr><name>STACK_PAD_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>STACK_GROW_DIRECTION</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>addr_in_prev_frame</name> <operator>&gt;</operator> <operator>&amp;</operator><name><name>space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STACK_GROW_DIRECTION</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>end</name> <init>= <expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_src</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALLOCA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>cont_restore_0</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>STACK_GROW_DIRECTION</name></expr></cpp:if>
</block_content>}</block></if>
<else>else <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STACK_GROW_DIRECTION</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier><specifier>const</specifier></type> <name>end</name> <init>= <expr><name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_src</name></name> <operator>+</operator> <name><name>cont</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>space</name><index>[<expr><name>STACK_PAD_SIZE</name></expr>]</index></name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALLOCA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <operator>&amp;</operator><name><name>space</name><index>[<expr><name>STACK_PAD_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>space</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>cont_restore_0</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>space</name><index>[<expr><name>STACK_PAD_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>STACK_GROW_DIRECTION</name></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cont_restore_1</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




















































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_callcc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>called</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>val</name> <init>= <expr><call><name>cont_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>called</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>called</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>make_passing_arg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><name>Qnil</name></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>rb_ary_new4</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>VALUE</name></type> <name>e_proc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>



<function><type><name>void</name></type>
<name>ruby_register_rollback_func_for_ensure</name><parameter_list>(<parameter><decl><type><name>e_proc</name> <modifier>*</modifier></type><name>ensure_func</name></decl></parameter>, <parameter><decl><type><name>e_proc</name> <modifier>*</modifier></type><name>rollback_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_table</name> <modifier>*</modifier><modifier>*</modifier></type><name>table_p</name> <init>= <expr><operator>&amp;</operator><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ensure_rollback_table</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>*</operator><name>table_p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>table_p</name> <operator>=</operator> <call><name>st_init_numtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>st_insert</name><argument_list>(<argument><expr><operator>*</operator><name>table_p</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>ensure_func</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>rollback_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>e_proc</name> <modifier>*</modifier></type>
<name>lookup_rollback_func</name><parameter_list>(<parameter><decl><type><name>e_proc</name> <modifier>*</modifier></type><name>ensure_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_table</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>GET_VM</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ensure_rollback_table</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st_data_t</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>table</name> <operator>&amp;&amp;</operator> <call><name>st_lookup</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>ensure_func</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>e_proc</name> <operator>*</operator><operator>)</operator> <name>val</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>e_proc</name> <operator>*</operator><operator>)</operator> <name>Qundef</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>rollback_ensure_stack</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>,<parameter><decl><type><name>rb_ensure_list_t</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,<parameter><decl><type><name>rb_ensure_entry_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_ensure_list_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_ensure_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cur_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>target_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>base_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>e_proc</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name><operator>=</operator><name>current</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>target_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>entry</name><operator>=</operator><name>target</name></expr>;</init> <condition><expr><name><name>entry</name><operator>-&gt;</operator><name>marker</name></name></expr>;</condition> <incr><expr><name>entry</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>target_size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
<expr_stmt><expr><name>base_point</name> <operator>=</operator> <name>cur_size</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>base_point</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>target_size</name> <operator>&gt;=</operator> <name>base_point</name> <operator>&amp;&amp;</operator>
<name><name>p</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>marker</name></name> <operator>==</operator> <name><name>target</name><index>[<expr><name>target_size</name> <operator>-</operator> <name>base_point</name></expr>]</index></name><operator>.</operator><name>marker</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>base_point</name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>target_size</name> <operator>-</operator> <name>base_point</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lookup_rollback_func</name><argument_list>(<argument><expr><name><name>target</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>e_proc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"continuation called from out of critical rb_ensure scope"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name>cur_size</name> <operator>&gt;</operator> <name>base_point</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>current</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>e_proc</name></name>)<argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>data2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_size</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>lookup_rollback_func</name><argument_list>(<argument><expr><name><name>target</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>e_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>func</name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name><name>target</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_cont_call</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>contval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><call><name>cont_ptr</name><argument_list>(<argument><expr><name>contval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cont_thread_value</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"continuation called across threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>protect_tag</name></name> <operator>!=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>protect_tag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"continuation called across stack rewinding barrier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>fiber_ptr</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name> <operator>!=</operator> <name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>fiber_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"continuation called across fiber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rollback_ensure_stack</name><argument_list>(<argument><expr><name>contval</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>ensure_list</name></name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>ensure_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>make_passing_arg</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cont_restore_0</name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return> 
</block_content>}</block></function>




































































<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>fiber_data_type</name> <init>= <expr><block>{
<expr><literal type="string">"fiber"</literal></expr>,
<expr><block>{<expr><name>fiber_mark</name></expr>, <expr><name>fiber_free</name></expr>, <expr><name>fiber_memsize</name></expr>, <expr><name>fiber_compact</name></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fiber_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiber_data_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_fiber_t</name><modifier>*</modifier></type>
<name>fiber_t_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fiber_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize twice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>THREAD_MUST_BE_RUNNING</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>ZALLOC</name><argument_list>(<argument><expr><name>rb_fiber_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>self</name></name> <operator>=</operator> <name>fiber_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>FIBER_CONTEXT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cont_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name></name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>fiber_ptr</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ec_clear_vm_stack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>FIBER_CREATED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>

<return>return <expr><name>fiber</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fiber_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>fiber_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>fiber_t_alloc</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>first_proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>pool</name></name> <operator>=</operator> <name>fiber_pool</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_prepare_stack</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>sec</name> <init>= <expr><operator>&amp;</operator><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vm_stack_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>vm_stack</name> <init>= <expr><call><name>fiber_initialize_coroutine</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm_stack_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>saved_vm_stack</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ec_initialize_vm_stack</name><argument_list>(<argument><expr><name>sec</name></expr></argument>, <argument><expr><name>vm_stack</name></expr></argument>, <argument><expr><name>vm_stack_size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>local_storage</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>local_storage_recursive_hash</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>local_storage_recursive_hash_for_trace</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_fiber_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>fiber_initialize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_block_proc</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>shared_fiber_pool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_fiber_new</name><parameter_list>(<parameter><decl><type><name>rb_block_call_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>fiber_initialize</name><argument_list>(<argument><expr><call><name>fiber_alloc</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_proc_new</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>shared_fiber_pool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rb_fiber_terminate</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_interrupt</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>rb_fiber_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_proc_t</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ruby_tag_type</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_interrupt</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name> <operator>==</operator> <name>ruby_current_execution_context_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>FIBER_RESUMED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_PUSH_TAG</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>EC_EXEC_TAG</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>TAG_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><operator>&amp;</operator><call><name>VAR_FROM_MEMORY</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>cont</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl>, <decl><type ref="prev"/><name>args</name> <init>= <expr><name><name>cont</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetProcPtr</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>first_proc</name></name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>argc</name> <operator>=</operator> <name><name>cont</name><operator>-&gt;</operator><name>argc</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>RARRAY_CONST_PTR</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>&amp;</operator><name>args</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>root_lep</name></name> <operator>=</operator> <call><name>rb_vm_proc_local_ep</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>first_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>root_svar</name></name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXEC_EVENT_HOOK</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>RUBY_EVENT_FIBER_SWITCH</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>rb_vm_invoke_proc</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>kw_splat</name></name></expr></argument>, <argument><expr><name>VM_BLOCK_HANDLER_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EC_POP_TAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>err</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>errinfo</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>FIBER_RESUMED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>TAG_RAISE</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>TAG_FATAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_pending_interrupt_enque</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>rb_vm_make_jump_tag_but_local_jump</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_threadptr_pending_interrupt_enque</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>need_interrupt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_fiber_terminate</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>need_interrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_UNREACHABLE</name><argument_list>(<argument><expr><name>rb_fiber_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_fiber_t</name> <modifier>*</modifier></type>
<name>root_fiber_alloc</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>fiber_value</name> <init>= <expr><call><name>fiber_alloc</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>FIBER_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FIBER_RESUMED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>self</name></name> <operator>=</operator> <name>fiber_value</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COROUTINE_PRIVATE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <call><name>fiber_pool_stack_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shared_fiber_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>coroutine_initialize_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><call><name>fiber_pool_stack_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>available</name></name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>coroutine_initialize_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>fiber</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_threadptr_root_fiber_setup</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>ruby_mimmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rb_fiber_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fiber</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MEMZERO</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>rb_fiber_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>FIBER_CONTEXT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>fiber_ptr</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>thread_ptr</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fiber_status_set</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>FIBER_RESUMED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_threadptr_root_fiber_release</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>FIBER_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>self</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name> <operator>==</operator> <name>ruby_current_execution_context_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ruby_current_execution_context_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_threadptr_root_fiber_terminate</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_TERMINATED</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_ec_clear_vm_stack</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_fiber_t</name><modifier>*</modifier></type>
<name>fiber_current</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>self</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>root_fiber_alloc</name><argument_list>(<argument><expr><call><name>rb_ec_thread_ptr</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_fiber_t</name><modifier>*</modifier></type>
<name>return_fiber</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>fiber_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>fiber</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>root_fiber</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><name>root_fiber</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>root_fiber</name> <operator>==</operator> <name>fiber</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"can't yield from root fiber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>root_fiber</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>prev</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_fiber_current</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>fiber_current</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>cont</name><operator>.</operator><name>self</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>fiber_store</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>next_fiber</name></decl></parameter>, <parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fiber</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>root_fiber_alloc</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIBER_CREATED_P</name><argument_list>(<argument><expr><name>next_fiber</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fiber_prepare_stack</name><argument_list>(<argument><expr><name>next_fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>FIBER_RESUMED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FIBER_TERMINATED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>FIBER_RUNNABLE_P</name><argument_list>(<argument><expr><name>next_fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIBER_RESUMED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fiber_status_set</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>FIBER_SUSPENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fiber_status_set</name><argument_list>(<argument><expr><name>next_fiber</name></expr></argument>, <argument><expr><name>FIBER_RESUMED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fiber_setcontext</name><argument_list>(<argument><expr><name>next_fiber</name></expr></argument>, <argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fiber</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>argc</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>value</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>fiber_switch</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_resume</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kw_splat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_context_t</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>cont</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>root_fiber_alloc</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name> <operator>==</operator> <name>fiber</name></expr>)</condition> <block>{<block_content>



<return>return <expr><call><name>make_passing_arg</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cont_thread_value</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"fiber called across threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cont</name><operator>-&gt;</operator><name>saved_ec</name><operator>.</operator><name>protect_tag</name></name> <operator>!=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>protect_tag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"fiber called across stack rewinding barrier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>FIBER_TERMINATED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>rb_exc_new2</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"dead fiber called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIBER_TERMINATED_P</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VM_UNREACHABLE</name><argument_list>(<argument><expr><name>fiber_switch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>



<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>FIBER_SUSPENDED_P</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cont</name> <operator>=</operator> <operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name><operator>-&gt;</operator><name>cont</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fiber_setcontext</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VM_UNREACHABLE</name><argument_list>(<argument><expr><name>fiber_switch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_resume</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <call><name>fiber_current</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>FIBER_RUNNABLE_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>kw_splat</name></name> <operator>=</operator> <name>kw_splat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cont</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>make_passing_arg</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>fiber_store</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_resume</name> <operator>&amp;&amp;</operator> <call><name>FIBER_TERMINATED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fiber_stack_release</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RUBY_VM_CHECK_INTS</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXEC_EVENT_HOOK</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>RUBY_EVENT_FIBER_SWITCH</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_fiber_transfer</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fiber_value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>fiber_switch</name><argument_list>(<argument><expr><call><name>fiber_ptr</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RB_NO_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fiber_close</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fiber_status_set</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>FIBER_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_fiber_terminate</name><parameter_list>(<parameter><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_interrupt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name> <init>= <expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>next_fiber</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VM_ASSERT</name><argument_list>(<argument><expr><call><name>FIBER_RESUMED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fiber_close</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coroutine_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>machine</name><operator>.</operator><name>stack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>machine</name><operator>.</operator><name>stack_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next_fiber</name> <operator>=</operator> <call><name>return_fiber</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_interrupt</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RUBY_VM_SET_INTERRUPT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next_fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fiber_switch</name><argument_list>(<argument><expr><name>next_fiber</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RB_NO_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_fiber_resume_kw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fiber_value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kw_splat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>fiber_ptr</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>FIBER_CREATED_P</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"cannot raise exception on unborn fiber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>fiber_is_root_p</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"double resume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>transferred</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiberError</name></expr></argument>, <argument><expr><literal type="string">"cannot resume transferred Fiber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>fiber_switch</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>kw_splat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_fiber_resume</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fiber_value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_fiber_resume_kw</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>RB_NO_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_fiber_yield_kw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kw_splat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>fiber_switch</name><argument_list>(<argument><expr><call><name>return_fiber</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>kw_splat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_fiber_yield</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>fiber_switch</name><argument_list>(<argument><expr><call><name>return_fiber</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RB_NO_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_fiber_reset_root_local_storage</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name> <operator>&amp;&amp;</operator> <name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name> <operator>!=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>local_storage</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>root_fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name><operator>.</operator><name>local_storage</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>










<function><type><name>VALUE</name></type>
<name>rb_fiber_alive_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fiber_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>FIBER_TERMINATED_P</name><argument_list>(<argument><expr><call><name>fiber_ptr</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_fiber_m_resume</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_fiber_resume_kw</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>rb_keyword_given_p</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_fiber_raise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>exc</name> <init>= <expr><call><name>rb_make_exception</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_fiber_resume_kw</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>exc</name></expr></argument>, <argument><expr><name>RB_NO_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





















































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_fiber_m_transfer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fiber_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>fiber_ptr</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>transferred</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>fiber_switch</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>rb_keyword_given_p</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_fiber_s_yield</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_fiber_yield_kw</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>rb_keyword_given_p</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_fiber_s_current</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_fiber_current</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fiber_to_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fiber_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_fiber_t</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>fiber_ptr</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_proc_t</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>status_info</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>transferred</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>status_info</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="string">" (%s, transferred)"</literal></expr></argument>, <argument><expr><call><name>fiber_status_name</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>status_info</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><call><name>fiber_status_name</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_proc</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>first_proc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_any_to_s</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>status_info</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>status_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>status_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetProcPtr</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>first_proc</name></name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_block_to_s</name><argument_list>(<argument><expr><name>fiber_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>status_info</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WORKING_FORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>rb_fiber_atfork</name><parameter_list>(<parameter><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name><operator>-&gt;</operator><name>cont</name><operator>.</operator><name>saved_ec</name></name> <operator>!=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>fiber_ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>root_fiber</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RB_EXPERIMENTAL_FIBER_POOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fiber_pool_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>fiber_pool</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUBY_FREE_ENTER</name><argument_list>(<argument><expr><literal type="string">"fiber_pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fiber_pool_free_allocations</name><argument_list>(<argument><expr><name><name>fiber_pool</name><operator>-&gt;</operator><name>allocations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>fiber_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RUBY_FREE_LEAVE</name><argument_list>(<argument><expr><literal type="string">"fiber_pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>fiber_pool_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>fiber_pool</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fiber_pool</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>fiber_pool</name><operator>-&gt;</operator><name>count</name></name> <operator>*</operator> <name><name>fiber_pool</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>FiberPoolDataType</name> <init>= <expr><block>{
<expr><literal type="string">"fiber_pool"</literal></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>fiber_pool_free</name></expr>, <expr><name>fiber_pool_memsize</name></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fiber_pool_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>fiber_pool</name> <init>= <expr><call><name>RB_ALLOC</name><argument_list>(<argument><expr>struct <name>fiber_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FiberPoolDataType</name></expr></argument>, <argument><expr><name>fiber_pool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_fiber_pool_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>size</name> <init>= <expr><name>Qnil</name></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><name>Qnil</name></expr></init></decl>, <decl><type ref="prev"/><name>vm_stack_size</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fiber_pool</name></name> <modifier>*</modifier></type> <name>fiber_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"03"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm_stack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>default_params</name><operator>.</operator><name>fiber_machine_stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>vm_stack_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vm_stack_size</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>default_params</name><operator>.</operator><name>fiber_vm_stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>fiber_pool</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FiberPoolDataType</name></expr></argument>, <argument><expr><name>fiber_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fiber_pool_initialize</name><argument_list>(<argument><expr><name>fiber_pool</name></expr></argument>, <argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>vm_stack_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<function><type><name>void</name></type>
<name>Init_Cont</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>GET_THREAD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>vm_stack_size</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>default_params</name><operator>.</operator><name>fiber_vm_stack_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>machine_stack_size</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>vm</name><operator>-&gt;</operator><name>default_params</name><operator>.</operator><name>fiber_machine_stack_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stack_size</name> <init>= <expr><name>machine_stack_size</name> <operator>+</operator> <name>vm_stack_size</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pagesize</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>dwPageSize</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><name>pagesize</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SET_MACHINE_STACK_END</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>machine</name><operator>.</operator><name>stack_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fiber_pool_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shared_fiber_pool</name></expr></argument>, <argument><expr><name>stack_size</name></expr></argument>, <argument><expr><name>FIBER_POOL_INITIAL_SIZE</name></expr></argument>, <argument><expr><name>vm_stack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>fiber_shared_fiber_pool_free_stacks</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"RUBY_SHARED_FIBER_POOL_FREE_STACKS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fiber_shared_fiber_pool_free_stacks</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shared_fiber_pool</name><operator>.</operator><name>free_stacks</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>fiber_shared_fiber_pool_free_stacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rb_cFiber</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Fiber"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>, <argument><expr><name>fiber_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_eFiberError</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"FiberError"</literal></expr></argument>, <argument><expr><name>rb_eStandardError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>, <argument><expr><literal type="string">"yield"</literal></expr></argument>, <argument><expr><name>rb_fiber_s_yield</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>rb_fiber_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>, <argument><expr><literal type="string">"resume"</literal></expr></argument>, <argument><expr><name>rb_fiber_m_resume</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>, <argument><expr><literal type="string">"raise"</literal></expr></argument>, <argument><expr><name>rb_fiber_raise</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>fiber_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RB_EXPERIMENTAL_FIBER_POOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rb_cFiberPool</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Pool"</literal></expr></argument>, <argument><expr><name>rb_cFiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cFiberPool</name></expr></argument>, <argument><expr><name>fiber_pool_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFiberPool</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>rb_fiber_pool_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>void</name></type>
<name>ruby_Init_Continuation_body</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>rb_cContinuation</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Continuation"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_undef_alloc_func</name><argument_list>(<argument><expr><name>rb_cContinuation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cContinuation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cContinuation</name></expr></argument>, <argument><expr><literal type="string">"call"</literal></expr></argument>, <argument><expr><name>rb_cont_call</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cContinuation</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>rb_cont_call</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"callcc"</literal></expr></argument>, <argument><expr><name>rb_callcc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ruby_Init_Fiber_as_Coroutine</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>, <argument><expr><literal type="string">"transfer"</literal></expr></argument>, <argument><expr><name>rb_fiber_m_transfer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>, <argument><expr><literal type="string">"alive?"</literal></expr></argument>, <argument><expr><name>rb_fiber_alive_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cFiber</name></expr></argument>, <argument><expr><literal type="string">"current"</literal></expr></argument>, <argument><expr><name>rb_fiber_s_current</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr><name>RUBY_SYMBOL_EXPORT_END</name></expr>
</unit>
