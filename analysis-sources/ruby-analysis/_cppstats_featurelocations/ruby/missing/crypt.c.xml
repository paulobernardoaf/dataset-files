<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\missing\crypt.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sccsid</name><index>[]</index></name> <init>= <expr><literal type="string">"@(#)crypt.c 8.1 (Berkeley) 6/4/93"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/missing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crypt.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PWD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_PASSWORD_EFMT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PASSWORD_EFMT1</name></cpp:macro> <cpp:value>'_'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>numberof</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>numberof</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(sizeof(array) / sizeof((array)[0]))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>vax</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUST_ALIGN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHAR_BITS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CHAR_BITS</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> C_block structure assumes 8 bit characters</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INIT_DES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>DUMP</name> <operator>||</operator> <name>defined</name> <name>NO_DES_TABLES</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_DES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_DES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>INIT_DES</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"des_tables.c"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DES_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_des</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INIT_DES</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_DES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_SIX_BIT</name><parameter_list>(<parameter><type><name>rslt</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ C_block cvt; cvt.b[0] = (unsigned char)(src); (src) &gt;&gt;= 6; cvt.b[1] = (unsigned char)(src); (src) &gt;&gt;= 6; cvt.b[2] = (unsigned char)(src); (src) &gt;&gt;= 6; cvt.b[3] = (unsigned char)(src); (rslt) = (cvt.b32.i0 &amp; 0x3f3f3f3fL) &lt;&lt; 2; }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d0) = 0, (d1) = 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>bl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d0) = (bl).b32.i0, (d1) = (bl).b32.i1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOADREG</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d0) = (s0), (d1) = (s1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>bl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d0) |= (bl).b32.i0, (d1) |= (bl).b32.i1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>bl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bl).b32.i0 = (s0), (bl).b32.i1 = (s1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCL_BLOCK</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>long d0, d1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LARGEDATA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERM6464</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>cpp</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOAD((d),(d0),(d1),(p)[(0&lt;&lt;CHUNKBITS)+(cpp)[0]]); OR ((d),(d0),(d1),(p)[(1&lt;&lt;CHUNKBITS)+(cpp)[1]]); OR ((d),(d0),(d1),(p)[(2&lt;&lt;CHUNKBITS)+(cpp)[2]]); OR ((d),(d0),(d1),(p)[(3&lt;&lt;CHUNKBITS)+(cpp)[3]]); OR (d),(d0),(d1),(p)[(4&lt;&lt;CHUNKBITS)+(cpp)[4]]); OR (d),(d0),(d1),(p)[(5&lt;&lt;CHUNKBITS)+(cpp)[5]]); OR (d),(d0),(d1),(p)[(6&lt;&lt;CHUNKBITS)+(cpp)[6]]); OR (d),(d0),(d1),(p)[(7&lt;&lt;CHUNKBITS)+(cpp)[7]]);</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERM3264</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>cpp</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOAD((d),(d0),(d1),(p)[(0&lt;&lt;CHUNKBITS)+(cpp)[0]]); OR ((d),(d0),(d1),(p)[(1&lt;&lt;CHUNKBITS)+(cpp)[1]]); OR ((d),(d0),(d1),(p)[(2&lt;&lt;CHUNKBITS)+(cpp)[2]]); OR ((d),(d0),(d1),(p)[(3&lt;&lt;CHUNKBITS)+(cpp)[3]]);</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERM6464</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>cpp</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ C_block tblk; permute((cpp),&amp;tblk,(p),8); LOAD ((d),(d0),(d1),tblk); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERM3264</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>cpp</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ C_block tblk; permute((cpp),&amp;tblk,(p),4); LOAD ((d),(d0),(d1),tblk); }</cpp:value></cpp:define>


<function><type><name>STATIC</name> <name>void</name></type>
<name>permute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>C_block</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>C_block</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chars_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><specifier>register</specifier> <call><name>DCL_BLOCK</name><argument_list>(<argument><expr><name>D</name></expr></argument>,<argument><expr><name>D0</name></expr></argument>,<argument><expr><name>D1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>C_block</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZERO</name><argument_list>(<argument><expr><name>D</name></expr></argument>,<argument><expr><name>D0</name></expr></argument>,<argument><expr><name>D1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><index>[<expr><name>t</name><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>OR</name><argument_list>(<argument><expr><name>D</name></expr></argument>,<argument><expr><name>D0</name></expr></argument>,<argument><expr><name>D1</name></expr></argument>,<argument><expr><operator>*</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CHUNKBITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><index>[<expr><name>t</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>OR</name><argument_list>(<argument><expr><name>D</name></expr></argument>,<argument><expr><name>D0</name></expr></argument>,<argument><expr><name>D1</name></expr></argument>,<argument><expr><operator>*</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CHUNKBITS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>chars_in</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>D</name></expr></argument>,<argument><expr><name>D0</name></expr></argument>,<argument><expr><name>D1</name></expr></argument>,<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STATIC</name> <name>void</name></type> <name>prtab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rows</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INIT_DES</name></expr></cpp:if>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>IP</name><index>[]</index></name> <init>= <expr><block>{ 
<expr><literal type="number">58</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">62</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">59</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">61</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">63</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ExpandTr</name><index>[]</index></name> <init>= <expr><block>{ 
<expr><literal type="number">32</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>,
<expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>,
<expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>,
<expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>PC1</name><index>[]</index></name> <init>= <expr><block>{ 
<expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">27</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>,

<expr><literal type="number">63</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">29</literal></expr>,
<expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>Rotates</name><index>[]</index></name> <init>= <expr><block>{ 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INIT_DES</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>PC2</name><index>[]</index></name> <init>= <expr><block>{ 
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">22</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">43</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">55</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">48</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">53</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">32</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>S</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ 
<expr><block>{

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">13</literal></expr>,
}</block></expr>,
<expr><block>{

<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,
}</block></expr>,
<expr><block>{

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>,
}</block></expr>,
<expr><block>{

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>,
}</block></expr>,
<expr><block>{

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>,
}</block></expr>,
<expr><block>{

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>,
}</block></expr>,
<expr><block>{

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>,
}</block></expr>,
<expr><block>{

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>P32Tr</name><index>[]</index></name> <init>= <expr><block>{ 
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>,
<expr><literal type="number">29</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">14</literal></expr>,
<expr><literal type="number">32</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">22</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">25</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>CIFP</name><index>[]</index></name> <init>= <expr><block>{ 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>,

<expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>,
<expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>,
<expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>,
<expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">64</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>itoa64</name><index>[]</index></name> <init>= 
<expr><literal type="string">"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>a64toi</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A64TOI1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == '.' ? 0 : (c) == '/' ? 1 : ('0' &lt;= (c) &amp;&amp; (c) &lt;= '9') ? (c) - '0' + 2 : ('A' &lt;= (c) &amp;&amp; (c) &lt;= 'Z') ? (c) - 'A' + 12 : ('a' &lt;= (c) &amp;&amp; (c) &lt;= 'z') ? (c) - 'a' + 38 : 0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A64TOI4</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>A64TOI1(base+0), A64TOI1(base+1), A64TOI1(base+2), A64TOI1(base+3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A64TOI16</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>A64TOI4(base+0), A64TOI4(base+4), A64TOI4(base+8), A64TOI4(base+12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A64TOI64</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>A64TOI16(base+0x00), A64TOI16(base+0x10), A64TOI16(base+0x20), A64TOI16(base+0x30)</cpp:value></cpp:define>
<expr><call><name>A64TOI64</name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>A64TOI64</name><argument_list>(<argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>A64TOI64</name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>A64TOI64</name><argument_list>(<argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INIT_DES</name></expr></cpp:if>


<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>C_block</name></type> <name><name>PC1ROT</name><index>[<expr><literal type="number">64</literal><operator>/</operator><name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CHUNKBITS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>C_block</name></type> <name><name>PC2ROT</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal><operator>/</operator><name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CHUNKBITS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>C_block</name></type> <name><name>IE3264</name><index>[<expr><literal type="number">32</literal><operator>/</operator><name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CHUNKBITS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>SPE</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>C_block</name></type> <name><name>CF6464</name><index>[<expr><literal type="number">64</literal><operator>/</operator><name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CHUNKBITS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ready</name></decl>;</decl_stmt>
}</block></struct></type> <name>des_tables_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>des_tables_t</name></type> <name><name>des_tables</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>des_tables</name></cpp:macro> <cpp:value>((const des_tables_t *)des_tables)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PC1ROT</name></cpp:macro> <cpp:value>(des_tables-&gt;PC1ROT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PC2ROT</name></cpp:macro> <cpp:value>(des_tables-&gt;PC2ROT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IE3264</name></cpp:macro> <cpp:value>(des_tables-&gt;IE3264)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPE</name></cpp:macro> <cpp:value>(des_tables-&gt;SPE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CF6464</name></cpp:macro> <cpp:value>(des_tables-&gt;CF6464)</cpp:value></cpp:define>

<function_decl><type><name>STATIC</name> <name>void</name></type> <name>init_des</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>void</name></type> <name>init_perm</name><parameter_list>(<parameter><decl><type><name>C_block</name></type> <name><name>perm</name><index>[<expr><literal type="number">64</literal><operator>/</operator><name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CHUNKBITS</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>p</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chars_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chars_out</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>C_block</name></type> <name>constdatablock</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KS</name></cpp:macro> <cpp:value>(data-&gt;KS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cryptresult</name></cpp:macro> <cpp:value>(data-&gt;cryptresult)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>des_setkey_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crypt_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>des_cipher_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crypt_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NONREENTRANT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>crypt_data</name></name></type> <name>default_crypt_data</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NONREENTRANT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>char</name> <modifier>*</modifier></type>
<name>crypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>crypt_r</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>setting</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>default_crypt_data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>char</name> <modifier>*</modifier></type>
<name>crypt_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setting</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crypt_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>encp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>salt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_iter</name></decl>, <decl><type ref="prev"/><name>salt_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>C_block</name></type> <name>keyblock</name></decl>, <decl><type ref="prev"/><name>rsltblock</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>key</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>keyblock</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>des_setkey_r</name><argument_list>(<argument><expr><name><name>keyblock</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>encp</name> <operator>=</operator> <operator>&amp;</operator><name><name>cryptresult</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>setting</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_PASSWORD_EFMT1</name></expr>:</case>



<while>while <condition>(<expr><operator>*</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>des_cipher_r</name><argument_list>(<argument><expr><name><name>keyblock</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>keyblock</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>key</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>keyblock</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>des_setkey_r</name><argument_list>(<argument><expr><name><name>keyblock</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>encp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>setting</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>num_iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>setting</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_iter</name> <operator>=</operator> <operator>(</operator><name>num_iter</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name><name>a64toi</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>setting</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>encp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>salt_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>num_iter</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>salt_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>salt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>salt_size</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>setting</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>salt</name> <operator>=</operator> <operator>(</operator><name>salt</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name><name>a64toi</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>encp</name> <operator>+=</operator> <name>salt_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>des_cipher_r</name><argument_list>(<argument><expr><name><name>constdatablock</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>rsltblock</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>num_iter</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name><operator>&amp;</operator><literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name><operator>&amp;</operator><literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name><operator>&amp;</operator><literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>encp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name><operator>&amp;</operator><literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name><operator>&amp;</operator><literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name><operator>&amp;</operator><literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>encp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name><operator>&amp;</operator><literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name><operator>&amp;</operator><literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>cryptresult</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>des_setkey_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crypt_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><specifier>register</specifier> <call><name>DCL_BLOCK</name><argument_list>(<argument><expr><name>K</name></expr></argument>, <argument><expr><name>K0</name></expr></argument>, <argument><expr><name>K1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>C_block</name> <modifier>*</modifier></type><name>ptabp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>C_block</name> <modifier>*</modifier></type><name>ksp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_des</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PERM6464</name><argument_list>(<argument><expr><name>K</name></expr></argument>,<argument><expr><name>K0</name></expr></argument>,<argument><expr><name>K1</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name><name>PC1ROT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ksp</name> <operator>=</operator> <operator>&amp;</operator><name><name>KS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>K</name><operator>&amp;</operator><operator>~</operator><literal type="number">0x03030303L</literal></expr></argument>, <argument><expr><name>K0</name><operator>&amp;</operator><operator>~</operator><literal type="number">0x03030303L</literal></expr></argument>, <argument><expr><name>K1</name></expr></argument>, <argument><expr><operator>*</operator><name>ksp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>KS</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ksp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>K</name></expr></argument>,<argument><expr><name>K0</name></expr></argument>,<argument><expr><name>K1</name></expr></argument>,<argument><expr><operator>*</operator><name>ksp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptabp</name> <operator>=</operator> <name><name>PC2ROT</name><index>[<expr><name><name>Rotates</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PERM6464</name><argument_list>(<argument><expr><name>K</name></expr></argument>,<argument><expr><name>K0</name></expr></argument>,<argument><expr><name>K1</name></expr></argument>,<argument><expr><name><name>ksp</name><operator>-&gt;</operator><name>b</name></name></expr></argument>,<argument><expr><name>ptabp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>K</name><operator>&amp;</operator><operator>~</operator><literal type="number">0x03030303L</literal></expr></argument>, <argument><expr><name>K0</name><operator>&amp;</operator><operator>~</operator><literal type="number">0x03030303L</literal></expr></argument>, <argument><expr><name>K1</name></expr></argument>, <argument><expr><operator>*</operator><name>ksp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>des_cipher_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crypt_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>pdp11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name></type> <name>L0</name></decl>, <decl><type ref="prev"/><name>L1</name></decl>, <decl><type ref="prev"/><name>R0</name></decl>, <decl><type ref="prev"/><name>R1</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>C_block</name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>ks_inc</name></decl>, <decl><type ref="prev"/><name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>C_block</name></type> <name>B</name></decl>;</decl_stmt>

<expr_stmt><expr><name>L0</name> <operator>=</operator> <name>salt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TO_SIX_BIT</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>vax</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>pdp11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>salt</name> <operator>=</operator> <operator>~</operator><name>salt</name></expr>;</expr_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SALT</name></cpp:macro> <cpp:value>(~salt)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SALT</name></cpp:macro> <cpp:value>salt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MUST_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L0</name></expr></argument>,<argument><expr><name>L1</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LOAD</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L0</name></expr></argument>,<argument><expr><name>L1</name></expr></argument>,<argument><expr><operator>*</operator><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>LOADREG</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>R0</name></expr></argument>,<argument><expr><name>R1</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L0</name></expr></argument>,<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>L0</name> <operator>&amp;=</operator> <literal type="number">0x55555555L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>L1</name> <operator>&amp;=</operator> <literal type="number">0x55555555L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>L0</name> <operator>=</operator> <operator>(</operator><name>L0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>L1</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>R0</name> <operator>&amp;=</operator> <literal type="number">0xaaaaaaaaL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>R1</name> <operator>=</operator> <operator>(</operator><name>R1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>L1</name> <operator>=</operator> <name>R0</name> <operator>|</operator> <name>R1</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L0</name></expr></argument>,<argument><expr><name>L1</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PERM3264</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L0</name></expr></argument>,<argument><expr><name>L1</name></expr></argument>,<argument><expr><name><name>B</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>IE3264</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>PERM3264</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>R0</name></expr></argument>,<argument><expr><name>R1</name></expr></argument>,<argument><expr><name><name>B</name><operator>.</operator><name>b</name></name><operator>+</operator><literal type="number">4</literal></expr></argument>,<argument><expr><name><name>IE3264</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>num_iter</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><name>kp</name> <operator>=</operator> <operator>&amp;</operator><name><name>KS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ks_inc</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<expr_stmt><expr><name>num_iter</name> <operator>=</operator> <operator>-</operator><name>num_iter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kp</name> <operator>=</operator> <operator>&amp;</operator><name><name>KS</name><index>[<expr><name>KS_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ks_inc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>--</operator><name>num_iter</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>loop_count</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTAB</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(const unsigned long *)((const unsigned char *)(t) + (i)*(sizeof(long)/4)))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>gould</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOXOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)^=SPTAB(SPE[0][(i)],B.b[(i)]); (y)^=SPTAB(SPE[1][(i)],B.b[(i)]);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>pdp11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOXOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>j=B.b[(i)]; (x)^=SPTAB(SPE[0][(i)],j); (y)^=SPTAB(SPE[1][(i)],j);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOXOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>k=B.b[(i)]; (x)^=SPTAB(SPE[0][(i)],k); (y)^=SPTAB(SPE[1][(i)],k);</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRUNCH</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>q0</name></type></parameter>, <parameter><type><name>q1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>k = ((q0) ^ (q1)) &amp; SALT; B.b32.i0 = k ^ (q0) ^ kp-&gt;b32.i0; B.b32.i1 = k ^ (q1) ^ kp-&gt;b32.i1; kp += ks_inc; DOXOR((p0), (p1), 0); DOXOR((p0), (p1), 1); DOXOR((p0), (p1), 2); DOXOR((p0), (p1), 3); DOXOR((p0), (p1), 4); DOXOR((p0), (p1), 5); DOXOR((p0), (p1), 6); DOXOR((p0), (p1), 7);</cpp:value></cpp:define>














<expr_stmt><expr><call><name>CRUNCH</name><argument_list>(<argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>, <argument><expr><name>R0</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CRUNCH</name><argument_list>(<argument><expr><name>R0</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>loop_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><name>kp</name> <operator>-=</operator> <operator>(</operator><name>ks_inc</name><operator>*</operator><name>KS_SIZE</name><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>L0</name> <operator>^=</operator> <name>R0</name></expr>;</expr_stmt> <expr_stmt><expr><name>L1</name> <operator>^=</operator> <name>R1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>R0</name> <operator>^=</operator> <name>L0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1</name> <operator>^=</operator> <name>L1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>L0</name> <operator>^=</operator> <name>R0</name></expr>;</expr_stmt> <expr_stmt><expr><name>L1</name> <operator>^=</operator> <name>R1</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>L0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>L0</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f0f0f0fL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>L1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0f0f0f0L</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>L1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>R0</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f0f0f0fL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>R1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0f0f0f0L</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L0</name></expr></argument>,<argument><expr><name>L1</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PERM6464</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L0</name></expr></argument>,<argument><expr><name>L1</name></expr></argument>,<argument><expr><name><name>B</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>CF6464</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MUST_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L0</name></expr></argument>,<argument><expr><name>L1</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L0</name></expr></argument>,<argument><expr><name>L1</name></expr></argument>,<argument><expr><operator>*</operator><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>des_tables</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>KS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>cryptresult</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INIT_DES</name></expr></cpp:if>




<function><type><name>STATIC</name> <name>void</name></type>
<name>init_des</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>tableno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>perm</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp32</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>des_tables</name><operator>-&gt;</operator><name>ready</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>=</operator> <name><name>PC2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <name><name>Rotates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name><operator>%</operator><literal type="number">28</literal><operator>)</operator> <operator>&lt;</operator> <name><name>Rotates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">28</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>PC1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name><operator>|</operator><literal type="number">07</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">07</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>prtab</name><argument_list>(<argument><expr><literal type="string">"pc1tab"</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>init_perm</name><argument_list>(<argument><expr><name>PC1ROT</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pc2inv</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pc2inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>=</operator> <name><name>PC2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pc2inv</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>=</operator> <name><name>PC2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name><operator>%</operator><literal type="number">28</literal><operator>)</operator> <operator>&lt;=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">28</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pc2inv</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>prtab</name><argument_list>(<argument><expr><literal type="string">"pc2tab"</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>init_perm</name><argument_list>(<argument><expr><name><name>PC2ROT</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><name><name>IP</name><index>[<expr><name><name>ExpandTr</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name><operator>|</operator><literal type="number">07</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">07</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>prtab</name><argument_list>(<argument><expr><literal type="string">"ietab"</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>init_perm</name><argument_list>(<argument><expr><name>IE3264</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>IP</name><index>[<expr><name><name>CIFP</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name><operator>|</operator><literal type="number">07</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">07</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>perm</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>prtab</name><argument_list>(<argument><expr><literal type="string">"cftab"</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>init_perm</name><argument_list>(<argument><expr><name>CF6464</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>P32Tr</name><index>[<expr><name><name>ExpandTr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>tableno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tableno</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>tableno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>S</name><index>[<expr><name>tableno</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp32</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>tableno</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">24</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name><name>tmp32</name><index>[<expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TO_SIX_BIT</name><argument_list>(<argument><expr><name><name>SPE</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>tableno</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">24</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name><name>tmp32</name><index>[<expr><name><name>perm</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">24</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TO_SIX_BIT</name><argument_list>(<argument><expr><name><name>SPE</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>tableno</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>des_tables</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>STATIC</name> <name>void</name></type>
<name>init_perm</name><parameter_list>(<parameter><decl><type><name>C_block</name></type> <name><name>perm</name><index>[<expr><literal type="number">64</literal><operator>/</operator><name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CHUNKBITS</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>p</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chars_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chars_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>chars_out</name><operator>*</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>l</name><operator>&gt;&gt;</operator><name>LGCHUNKBITS</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>l</name><operator>&amp;</operator><operator>(</operator><name>CHUNKBITS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CHUNKBITS</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>b</name><index>[<expr><name>k</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">07</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NONREENTRANT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>setkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>setkey_r</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>default_crypt_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>setkey_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crypt_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>C_block</name></type> <name>keyblock</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>key</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>keyblock</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>des_setkey_r</name><argument_list>(<argument><expr><name><name>keyblock</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NONREENTRANT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>encrypt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>encrypt_r</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>default_crypt_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>encrypt_r</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crypt_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>C_block</name></type> <name>cblock</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>block</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cblock</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>des_cipher_r</name><argument_list>(<argument><expr><name><name>cblock</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>cblock</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>cblock</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>block</name> <operator>=</operator> <name>k</name><operator>&amp;</operator><literal type="number">01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STATIC</name> <name>void</name></type>
<name>prtab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%3d"</literal></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>dump_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>C_block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%3d,"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"}},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_des</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#ifndef HAVE_DES_TABLES\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* Initial key schedule permutation */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const C_block PC1ROT[64/CHUNKBITS][1&lt;&lt;CHUNKBITS] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>PC1ROT</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>PC1ROT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PC1ROT</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* Subsequent key schedule rotation permutations */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const C_block PC2ROT[2][64/CHUNKBITS][1&lt;&lt;CHUNKBITS] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>PC2ROT</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>PC2ROT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>PC2ROT</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PC2ROT</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* Initial permutation/expansion table */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const C_block IE3264[32/CHUNKBITS][1&lt;&lt;CHUNKBITS] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>IE3264</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>IE3264</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>IE3264</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* Table that combines the S, P, and E operations. */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const unsigned long SPE[2][8][64] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>SPE</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>SPE</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>SPE</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\t\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%#10lx,"</literal></expr></argument>, <argument><expr><name><name>SPE</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>r</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\t\t},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* compressed/interleaved =&gt; final permutation table */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const C_block CF6464[64/CHUNKBITS][1&lt;&lt;CHUNKBITS] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>CF6464</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name><name>CF6464</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CF6464</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>printf</name><argument_list>(<argument><literal type="string">"#define HAVE_DES_TABLES 1\n""</literal>#endif\n<literal type="string">"</literal></argument></argument_list></macro></block_content></block></function>);

return 0;
}
#endif
</unit>
