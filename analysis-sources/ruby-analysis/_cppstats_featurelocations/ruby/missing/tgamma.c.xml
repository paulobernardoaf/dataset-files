<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\missing\tgamma.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/missing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>__MINGW32__</name> <operator>||</operator> <name>defined</name> <name>__NO_ISOCEXT</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>isnan</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isnan</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_isnan(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>isinf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isinf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!_finite(x) &amp;&amp; !_isnan(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>finite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>finite</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_finite(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LGAMMA_R</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265358979324</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_2PI</name></cpp:macro> <cpp:value>1.83787706640934548</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B1</name></cpp:macro> <cpp:value>(-1.0 / 2.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B2</name></cpp:macro> <cpp:value>( 1.0 / 6.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B4</name></cpp:macro> <cpp:value>(-1.0 / 30.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B6</name></cpp:macro> <cpp:value>( 1.0 / 42.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B8</name></cpp:macro> <cpp:value>(-1.0 / 30.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B10</name></cpp:macro> <cpp:value>( 5.0 / 66.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B12</name></cpp:macro> <cpp:value>(-691.0 / 2730.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B14</name></cpp:macro> <cpp:value>( 7.0 / 6.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B16</name></cpp:macro> <cpp:value>(-3617.0 / 510.0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>loggamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>N</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>v</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>x</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>B16</name> <operator>/</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>w</name> <operator>+</operator> <operator>(</operator><name>B14</name> <operator>/</operator> <operator>(</operator><literal type="number">14</literal> <operator>*</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>w</name>
<operator>+</operator> <operator>(</operator><name>B12</name> <operator>/</operator> <operator>(</operator><literal type="number">12</literal> <operator>*</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>w</name> <operator>+</operator> <operator>(</operator><name>B10</name> <operator>/</operator> <operator>(</operator><literal type="number">10</literal> <operator>*</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>w</name>
<operator>+</operator> <operator>(</operator><name>B8</name> <operator>/</operator> <operator>(</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>w</name> <operator>+</operator> <operator>(</operator><name>B6</name> <operator>/</operator> <operator>(</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>w</name>
<operator>+</operator> <operator>(</operator><name>B4</name> <operator>/</operator> <operator>(</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>w</name> <operator>+</operator> <operator>(</operator><name>B2</name> <operator>/</operator> <operator>(</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <name>x</name>
<operator>+</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>LOG_2PI</name> <operator>-</operator> <call><name>log</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>double</name></type> <name>tgamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><literal type="number">1</literal><operator>/</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>HUGE_VAL</name></expr> </then><else>: <expr><name>HUGE_VAL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>domain_error</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>zero</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>modf</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content> 
<label><name>domain_error</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EDOM</name></expr>;</expr_stmt>
<return>return <expr><name>zero</name><operator>/</operator><name>zero</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LGAMMA_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>fmod</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0.0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>sign</name> <operator>*</operator> <name>PI</name> <operator>/</operator> <operator>(</operator><call><name>sin</name><argument_list>(<argument><expr><name>PI</name> <operator>*</operator> <name>f</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><call><name>loggamma</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LGAMMA_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>exp</name><argument_list>(<argument><expr><call><name>loggamma</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>lgamma_r</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sign</name> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
