<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\missing\procstat_vm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libprocstat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>KVME_TYPE_MGTDEVICE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVME_TYPE_MGTDEVICE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type>
<name>procstat_vm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>procstat</name></name> <modifier>*</modifier></type><name>procstat</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>kipp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_vmentry</name></name> <modifier>*</modifier></type><name>freep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kve</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ptrwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ptrwidth</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ptrwidth</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>fprintf</name><argument_list>(<argument>stderr</argument>, <argument><literal type="string">"%*s %*s %3s %4s %4s %3s %3s %4s %-2s %-s\n"</literal></argument>,
<argument>ptrwidth</argument>, <argument><literal type="string">"START"</literal></argument>, <argument>ptrwidth</argument>, <argument><literal type="string">"END"</literal></argument>, <argument><literal type="string">"PRT"</literal></argument>, <argument><literal type="string">"RES"</literal></argument>,
<argument><literal type="string">"P""</literal>RES<literal type="string">", "</literal>REF<literal type="string">", "</literal>SHD<literal type="string">", "</literal>FL<literal type="string">", "</literal>TP<literal type="string">", "</literal>PATH<literal type="string">");

#if defined(HAVE_PROCSTAT_GETVMMAP)
freep = procstat_getvmmap(procstat, kipp, &amp;cnt);
#else
freep = kinfo_getvmmap(kipp-&gt;ki_pid, &amp;cnt);
#endif
if (freep == NULL)
return;
for (i = 0; i &lt; cnt; i++) {
kve = &amp;freep[i];
fprintf(stderr, "</literal>%#*jx <literal type="string">", ptrwidth, (uintmax_t)kve-&gt;kve_start);
fprintf(stderr, "</literal>%#*jx <literal type="string">", ptrwidth, (uintmax_t)kve-&gt;kve_end);
fprintf(stderr, "</literal>%s<literal type="string">", kve-&gt;kve_protection &amp; KVME_PROT_READ ? "</literal>r<literal type="string">" : "</literal>-<literal type="string">");
fprintf(stderr, "</literal>%s<literal type="string">", kve-&gt;kve_protection &amp; KVME_PROT_WRITE ? "</literal>w<literal type="string">" : "</literal>-<literal type="string">");
fprintf(stderr, "</literal>%s <literal type="string">", kve-&gt;kve_protection &amp; KVME_PROT_EXEC ? "</literal>x<literal type="string">" : "</literal>-<literal type="string">");
fprintf(stderr, "</literal>%<literal type="number">4d</literal> <literal type="string">", kve-&gt;kve_resident);
fprintf(stderr, "</literal>%<literal type="number">4d</literal> <literal type="string">", kve-&gt;kve_private_resident);
fprintf(stderr, "</literal>%<literal type="number">3d</literal> <literal type="string">", kve-&gt;kve_ref_count);
fprintf(stderr, "</literal>%<literal type="number">3d</literal> <literal type="string">", kve-&gt;kve_shadow_count);
fprintf(stderr, "</literal>%-<literal type="number">1s</literal><literal type="string">", kve-&gt;kve_flags &amp; KVME_FLAG_COW ? "</literal>C<literal type="string">" : "</literal>-<literal type="string">");
fprintf(stderr, "</literal>%-<literal type="number">1s</literal><literal type="string">", kve-&gt;kve_flags &amp; KVME_FLAG_NEEDS_COPY ? "</literal>N<literal type="string">" :
"</literal>-<literal type="string">");
fprintf(stderr, "</literal>%-<literal type="number">1s</literal><literal type="string">", kve-&gt;kve_flags &amp; KVME_FLAG_SUPER ? "</literal>S<literal type="string">" : "</literal>-<literal type="string">");
fprintf(stderr, "</literal>%-<literal type="number">1s</literal> <literal type="string">", kve-&gt;kve_flags &amp; KVME_FLAG_GROWS_UP ? "</literal><literal type="string">U" :
kve-&gt;kve_flags &amp; KVME_FLAG_GROWS_DOWN ? "</literal>D<literal type="string">" : "</literal>-<literal type="string">");
switch (kve-&gt;kve_type) {
case KVME_TYPE_NONE:
str = "</literal>--<literal type="string">";
break;
case KVME_TYPE_DEFAULT:
str = "</literal>df<literal type="string">";
break;
case KVME_TYPE_VNODE:
str = "</literal>vn<literal type="string">";
break;
case KVME_TYPE_SWAP:
str = "</literal>sw<literal type="string">";
break;
case KVME_TYPE_DEVICE:
str = "</literal>dv<literal type="string">";
break;
case KVME_TYPE_PHYS:
str = "</literal>ph<literal type="string">";
break;
case KVME_TYPE_DEAD:
str = "</literal>dd<literal type="string">";
break;
case KVME_TYPE_SG:
str = "</literal>sg<literal type="string">";
break;
case KVME_TYPE_MGTDEVICE:
str = "</literal>md<literal type="string">";
break;
case KVME_TYPE_UNKNOWN:
default:
str = "</literal>??<literal type="string">";
break;
}
fprintf(stderr, "</literal>%-<literal type="number">2s</literal> <literal type="string">", str);
fprintf(stderr, "</literal>%-s\n<literal type="string">"</literal></argument></argument_list></macro></block_content></block></function>, kve-&gt;kve_path);
}
free(freep);
}
</unit>
