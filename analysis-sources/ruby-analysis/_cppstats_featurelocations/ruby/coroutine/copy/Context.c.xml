<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\coroutine\copy\Context.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Context.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__asm__</name></cpp:macro> <cpp:value>asm</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(noinline)</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>coroutine_flush_register_windows</name><parameter_list>()</parameter_list> <block>{<block_content>
<asm>__asm__
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<specifier>__volatile__</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparcv9</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sparc_v9__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
("flushw" : : : "%o7")
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
("flushw")
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
("ta 0x03")
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</asm>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>coroutine_flush_register_windows</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>coroutine_save_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stack_pointer</name> <init>= <expr><operator>&amp;</operator><name>stack_pointer</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>coroutine_flush_register_windows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>stack_pointer</name> <operator>&lt;</operator> <name><name>context</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>base</name></name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>stack_pointer</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>stack_pointer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>stack_pointer</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<return>return <expr><call><name>_setjmp</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>__attribute__</name><argument_list>(<argument>(noreturn, noinline)</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>void</name></type> <name>coroutine_restore_stack_padded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stack_pointer</name> <init>= <expr><operator>&amp;</operator><name>stack_pointer</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>stack_pointer</name> <operator>&lt;</operator> <name><name>context</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>bottom</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>base</name></name> <operator>-</operator> <name><name>context</name><operator>-&gt;</operator><name>used</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bottom</name> <operator>&gt;</operator> <name>stack_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>top</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <name><name>context</name><operator>-&gt;</operator><name>used</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>top</name> <operator>&lt;</operator> <name>stack_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><call><name>_longjmp</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <operator>(</operator><name>int</name><operator>)</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>GAP</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>




<macro><name>__attribute__</name><argument_list>(<argument>(noreturn)</argument>)</argument_list></macro>
<function><type><name>void</name></type> <name>coroutine_restore_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stack_pointer</name> <init>= <expr><operator>&amp;</operator><name>stack_pointer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>stack_pointer</name> <operator>&lt;</operator> <name><name>context</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>stack_pointer</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>base</name></name> <operator>-</operator> <name><name>context</name><operator>-&gt;</operator><name>used</name></name><operator>)</operator> <operator>+</operator> <name>GAP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <name><name>context</name><operator>-&gt;</operator><name>used</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>stack_pointer</name> <operator>+</operator> <name>GAP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coroutine_restore_stack_padded</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>coroutine_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>coroutine_context</name></name> <modifier>*</modifier></type><name>previous</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>from</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>base</name></name> <operator>==</operator> <name><name>target</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>current</name> <operator>!=</operator> <name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>coroutine_save_stack</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>coroutine_restore_stack</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>coroutine_restore_stack</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>previous</name></expr>;</expr_stmt>

<return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>
</unit>
