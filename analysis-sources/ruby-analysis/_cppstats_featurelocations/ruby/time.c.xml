<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\time.c">










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BSD_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRINGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/compar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/rational.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/variable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timev.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_submicro</name></decl>, <decl><type ref="prev"/><name>id_nano_num</name></decl>, <decl><type ref="prev"/><name>id_nano_den</name></decl>, <decl><type ref="prev"/><name>id_offset</name></decl>, <decl><type ref="prev"/><name>id_zone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_nanosecond</name></decl>, <decl><type ref="prev"/><name>id_microsecond</name></decl>, <decl><type ref="prev"/><name>id_millisecond</name></decl>, <decl><type ref="prev"/><name>id_nsec</name></decl>, <decl><type ref="prev"/><name>id_usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_local_to_utc</name></decl>, <decl><type ref="prev"/><name>id_utc_to_local</name></decl>, <decl><type ref="prev"/><name>id_find_timezone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_year</name></decl>, <decl><type ref="prev"/><name>id_mon</name></decl>, <decl><type ref="prev"/><name>id_mday</name></decl>, <decl><type ref="prev"/><name>id_hour</name></decl>, <decl><type ref="prev"/><name>id_min</name></decl>, <decl><type ref="prev"/><name>id_sec</name></decl>, <decl><type ref="prev"/><name>id_isdst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>str_utc</name></decl>, <decl><type ref="prev"/><name>str_empty</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_quo</name></cpp:macro> <cpp:value>idQuo</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_div</name></cpp:macro> <cpp:value>idDiv</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_divmod</name></cpp:macro> <cpp:value>idDivmod</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>id_name</name></cpp:macro> <cpp:value>idName</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTC_ZONE</name></cpp:macro> <cpp:value>Qundef</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TM_IS_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM_IS_TIME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDIV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(-(-((x)+1)/(y))-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMOD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y)-(-((x)+1)%(y))-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)&lt;0 ? NDIV((n),(d)) : (n)/(d))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)&lt;0 ? NMOD((n),(d)) : (n)%(d))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTM_WDAY_INITVAL</name></cpp:macro> <cpp:value>(7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTM_ISDST_INITVAL</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>eq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x</name> <operator>==</operator> <name>y</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>idEq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>x</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>rb_big_cmp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_cmpint</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>idCmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ne</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!eq((x),(y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cmp((x),(y)) &lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cmp((x),(y)) &gt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>le</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cmp((x),(y)) &lt;= 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ge</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cmp((x),(y)) &gt;= 0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>addv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_big_plus</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>subv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_big_minus</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>mulv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_fix_mul_fix</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_big_mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>divv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_fix_div_fix</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_big_div</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>modv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_num_zerodiv</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_fix_mod_fix</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_big_modulo</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>neg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(subv(INT2FIX(0), (x)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>quor</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_num_zerodiv</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>FIXNUM_MIN</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>*</operator> <name>b</name> <operator>==</operator> <name>a</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_numeric_quo</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>quov</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name> <init>= <expr><call><name>quor</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>RRATIONAL</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>den</name> <operator>==</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RRATIONAL</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mulquov</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((y) == (z)) ? (x) : quov(mulv((x),(y)),(z)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>divmodv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>ary</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_num_zerodiv</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fix_divmod_fix</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>id_divmod</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_check_array_type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"unexpected divmod result: into %"</literal><name>PRIsVALUE</name></expr></argument>,
<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64toNUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LONG2NUM(x)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SIZEOF_LONG_LONG</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64toNUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL2NUM(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UINT64_T</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SIZEOF_LONG</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;=</operator> <name>SIZEOF_UINT64_T</name></expr></cpp:if>
<typedef>typedef <type><name>uint64_t</name></type> <name>uwideint_t</name>;</typedef>
<typedef>typedef <type><name>int64_t</name></type> <name>wideint_t</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>WIDEVALUE</name>;</typedef>
<typedef>typedef <type><name>int64_t</name></type> <name>SIGNED_WIDEVALUE</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDEVALUE_IS_WIDER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UWIDEINT_MAX</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDEINT_MAX</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDEINT_MIN</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWINT_P</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tv) &amp; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWVtoINT64</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RSHIFT((SIGNED_WIDEVALUE)(tv), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64toFIXWV</name><parameter_list>(<parameter><type><name>wi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((WIDEVALUE)((SIGNED_WIDEVALUE)(wi) &lt;&lt; 1 | FIXNUM_FLAG))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWV_MAX</name></cpp:macro> <cpp:value>(((int64_t)1 &lt;&lt; 62) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWV_MIN</name></cpp:macro> <cpp:value>(-((int64_t)1 &lt;&lt; 62))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWVABLE</name><parameter_list>(<parameter><type><name>wi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(POSFIXWVABLE(wi) &amp;&amp; NEGFIXWVABLE(wi))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT2FIXWV</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>WIDEVAL_WRAP(INT64toFIXWV(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWV2WINT</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIXWVtoINT64(WIDEVAL_GET(w))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>uwideint_t</name>;</typedef>
<typedef>typedef <type><name>long</name></type> <name>wideint_t</name>;</typedef>
<typedef>typedef <type><name>VALUE</name></type> <name>WIDEVALUE</name>;</typedef>
<typedef>typedef <type><name>SIGNED_VALUE</name></type> <name>SIGNED_WIDEVALUE</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDEVALUE_IS_WIDER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UWIDEINT_MAX</name></cpp:macro> <cpp:value>ULONG_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDEINT_MAX</name></cpp:macro> <cpp:value>LONG_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDEINT_MIN</name></cpp:macro> <cpp:value>LONG_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWINT_P</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIXNUM_P(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWV_MAX</name></cpp:macro> <cpp:value>FIXNUM_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWV_MIN</name></cpp:macro> <cpp:value>FIXNUM_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWVABLE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIXABLE(i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT2FIXWV</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>WIDEVAL_WRAP(LONG2FIX(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWV2WINT</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIX2LONG(WIDEVAL_GET(w))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSFIXWVABLE</name><parameter_list>(<parameter><type><name>wi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((wi) &lt; FIXWV_MAX+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEGFIXWVABLE</name><parameter_list>(<parameter><type><name>wi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((wi) &gt;= FIXWV_MIN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXWV_P</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIXWINT_P(WIDEVAL_GET(w))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_FIXWV_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL_OVERFLOW_SIGNED_INTEGER_P(a, b, FIXWV_MIN, FIXWV_MAX)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRUCT_WIDEVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>WIDEVALUE</name></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>wideval_t</name>;</typedef>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>wideval_t</name></type> <name>WIDEVAL_WRAP</name><parameter_list>(<parameter><decl><type><name>WIDEVALUE</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>wideval_t</name></type> <name>w</name> <init>= <expr><block>{ <expr><name>v</name></expr> }</block></expr></init></decl>;</decl_stmt> <return>return <expr><name>w</name></expr>;</return> </block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDEVAL_GET</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w).value)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>WIDEVALUE</name></type> <name>wideval_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDEVAL_WRAP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDEVAL_GET</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(w)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>wideval_t</name></type>
<name>wint2wv</name><parameter_list>(<parameter><decl><type><name>wideint_t</name></type> <name>wi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXWVABLE</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>WIDEVAL_WRAP</name><argument_list>(<argument><expr><call><name>INT64toNUM</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT2WV</name><parameter_list>(<parameter><type><name>wi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wint2wv(wi)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT2WV</name><parameter_list>(<parameter><type><name>wi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>WIDEVAL_WRAP(LONG2NUM(wi))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>w2v</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT64toNUM</name><argument_list>(<argument><expr><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>WIDEVAL_GET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>WIDEVAL_GET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>v2w_bignum</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uwideint_t</name></type> <name>u</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>rb_integer_pack</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>INTEGER_PACK_NATIVE_BYTE_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>sign</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;=</operator> <operator>-</operator><name>FIXWV_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>wideint_t</name><operator>)</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>sign</name> <operator>==</operator> <operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;=</operator> <name>FIXWV_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><operator>(</operator><name>wideint_t</name><operator>)</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>WIDEVAL_WRAP</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>wideval_t</name></type>
<name>v2w</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>den</name> <operator>!=</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>WIDEVAL_WRAP</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>RRATIONAL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>WIDEVAL_WRAP</name><argument_list>(<argument><expr><operator>(</operator><name>WIDEVALUE</name><operator>)</operator><operator>(</operator><name>SIGNED_WIDEVALUE</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>rb_absint_size</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WIDEVALUE</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>v2w_bignum</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>WIDEVAL_WRAP</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>weq</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>WIDEVAL_GET</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>WIDEVAL_GET</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idEq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>eq</name><argument_list>(<argument><expr><call><name>WIDEVAL_GET</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>WIDEVAL_GET</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wcmp</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>cmp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wne</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!weq((x),(y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wlt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(wcmp((x),(y)) &lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wgt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(wcmp((x),(y)) &gt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wle</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(wcmp((x),(y)) &lt;= 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wge</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(wcmp((x),(y)) &gt;= 0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>wadd</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>r</name> <init>= <expr><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>WINT2WV</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>addv</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>wsub</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>r</name> <init>= <expr><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>WINT2WV</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>subv</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>wmul</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MUL_OVERFLOW_FIXWV_P</name><argument_list>(<argument><expr><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>WINT2WV</name><argument_list>(<argument><expr><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>mulv</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>wquo</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_num_zerodiv</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>*</operator> <name>b</name> <operator>==</operator> <name>a</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>WINT2WV</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>quov</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wmulquo</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((WIDEVAL_GET(y) == WIDEVAL_GET(z)) ? (x) : wquo(wmul((x),(y)),(z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wmulquoll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((y) == (z)) ? (x) : wquo(wmul((x),WINT2WV(y)),WINT2WV(z)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>wdivmod0</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wn</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wd</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name> <modifier>*</modifier></type><name>wq</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXWV_P</name><argument_list>(<argument><expr><name>wd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_num_zerodiv</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>wq</name> <operator>=</operator> <name>wn</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wr</name> <operator>=</operator> <call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>xneg</name> <init>= <expr><operator>-</operator><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>wq</name> <operator>=</operator> <call><name>WINT2WV</name><argument_list>(<argument><expr><name>xneg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wr</name> <operator>=</operator> <call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>wq</name> <operator>=</operator> <call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wr</name> <operator>=</operator> <call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>n</name> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>n</name> <operator>%</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></else></ternary></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>wq</name> <operator>=</operator> <call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wr</name> <operator>=</operator> <call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wdivmod</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wn</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wd</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name> <modifier>*</modifier></type><name>wq</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vq</name></decl>, <decl><type ref="prev"/><name>vr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>wdivmod0</name><argument_list>(<argument><expr><name>wn</name></expr></argument>, <argument><expr><name>wd</name></expr></argument>, <argument><expr><name>wq</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>divmodv</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>vq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wq</name> <operator>=</operator> <call><name>v2w</name><argument_list>(<argument><expr><name>vq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wr</name> <operator>=</operator> <call><name>v2w</name><argument_list>(<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wmuldivmod</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wy</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wz</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name> <modifier>*</modifier></type><name>wq</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WIDEVAL_GET</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>WIDEVAL_GET</name><argument_list>(<argument><expr><name>wz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>wq</name> <operator>=</operator> <name>wx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wr</name> <operator>=</operator> <call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wdivmod</name><argument_list>(<argument><expr><call><name>wmul</name><argument_list>(<argument><expr><name>wx</name></expr></argument>,<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wz</name></expr></argument>, <argument><expr><name>wq</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>wdiv</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>dmy</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wdivmod0</name><argument_list>(<argument><expr><name>wx</name></expr></argument>, <argument><expr><name>wy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>q</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>divv</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>wmod</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>wy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>dmy</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wdivmod0</name><argument_list>(<argument><expr><name>wx</name></expr></argument>, <argument><expr><name>wy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>modv</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>wy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>num_exact</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert nil into an exact number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>rational</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>typeerror</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>idTo_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_respond_to</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>idTo_int</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>typeerror</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name> <operator>=</operator> <call><name>rb_check_to_int</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<goto>goto <name>typeerror</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<label><name>rational</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>den</name> <operator>==</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>RRATIONAL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<label><name>typeerror</name>:</label>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert %"</literal><name>PRIsVALUE</name><literal type="string">" into an exact number"</literal></expr></argument>,
<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>rb_time_magnify</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>wmul</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_time_unmagnify_to_rational</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>quor</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>rb_time_unmagnify</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>rb_time_unmagnify_to_rational</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_time_unmagnify_to_float</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>TIME_SCALE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>*</operator> <name>b</name> <operator>==</operator> <name>a</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>quov</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_Float</name><argument_list>(<argument><expr><call><name>quov</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>quov</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>split_second</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>timew</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name> <modifier>*</modifier></type><name>timew_p</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>subsecx_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wdivmod</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>timew_p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>subsecx_p</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>timet2wv</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>TIMET_MIN</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uwideint_t</name></type> <name>wi</name> <init>= <expr><operator>(</operator><name>uwideint_t</name><operator>)</operator><name>t</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wi</name> <operator>&lt;=</operator> <name>FIXWV_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>wi</name> <init>= <expr><operator>(</operator><name>wideint_t</name><operator>)</operator><name>t</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>FIXWV_MIN</name> <operator>&lt;=</operator> <name>wi</name> <operator>&amp;&amp;</operator> <name>wi</name> <operator>&lt;=</operator> <name>FIXWV_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>TIMET2NUM</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMET2WV</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>timet2wv(t)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>wv2timet</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>wi</name> <init>= <expr><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>TIMET_MIN</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wi</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"negative value to convert into `time_t'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>TIMET_MAX</name> <operator>&lt;</operator> <operator>(</operator><name>uwideint_t</name><operator>)</operator><name>wi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"too big to convert into `time_t'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wi</name> <operator>&lt;</operator> <name>TIMET_MIN</name> <operator>||</operator> <name>TIMET_MAX</name> <operator>&lt;</operator> <name>wi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"too big to convert into `time_t'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>wi</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>NUM2TIMET</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WV2TIMET</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wv2timet(t)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_cTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cTimeTM</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>obj2int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>obj2ubits</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>obj2vint</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>month_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>validate_utc_offset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>utc_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>validate_zone_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>zone_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>validate_vtm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>obj2subsecx</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>subsecx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>time_gmtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>time_localtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>time_fixoff</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>time_zonelocal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>time_t</name></type> <name>timegm_noleapsecond</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tmcmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vtmcmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_time_t</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>utc_p</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>localtimew</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>timew</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>leap_year_p</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>leap_year_v_p</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>leap_year_p(NUM2LONG(modv((y), INT2FIX(400))))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>tm_from_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>ruby_tz_uptodate_p</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>ruby_reset_leap_second_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>ruby_reset_timezone</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>ruby_tz_uptodate_p</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ruby_reset_leap_second_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_tz</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ruby_tz_uptodate_p</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ruby_tz_uptodate_p</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>rb_localtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__APPLE__</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>__LP64__</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>!=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>update_tz</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MKTIME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LOCALTIME_OVERFLOW_PROBLEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>gmtoff1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>gmtoff2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>result</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_GMTOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gmtoff1</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff2</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>+</operator> <name>gmtoff1</name> <operator>!=</operator> <name>t2</name> <operator>+</operator> <name>gmtoff2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCALTIME</name><parameter_list>(<parameter><type><name>tm</name></type></parameter>, <parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_localtime_r((tm), &amp;(result))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_GMTOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>rb_gmtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gmtime_r</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>gmtime</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMEGM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LOCALTIME_OVERFLOW_PROBLEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>t</name> <operator>!=</operator> <call><name>timegm</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMTIME</name><parameter_list>(<parameter><type><name>tm</name></type></parameter>, <parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_gmtime_r((tm), &amp;(result))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>common_year_yday_offset</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal></expr>

}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>leap_year_yday_offset</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">29</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">29</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">29</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">29</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">29</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">29</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">29</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">29</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">29</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">29</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">30</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>common_year_days_in_month</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>leap_year_days_in_month</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">31</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M28</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(m),(m),(m),(m),(m),(m),(m),(m),(m),(m), (m),(m),(m),(m),(m),(m),(m),(m),(m),(m), (m),(m),(m),(m),(m),(m),(m),(m)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M29</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(m),(m),(m),(m),(m),(m),(m),(m),(m),(m), (m),(m),(m),(m),(m),(m),(m),(m),(m),(m), (m),(m),(m),(m),(m),(m),(m),(m),(m)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M30</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(m),(m),(m),(m),(m),(m),(m),(m),(m),(m), (m),(m),(m),(m),(m),(m),(m),(m),(m),(m), (m),(m),(m),(m),(m),(m),(m),(m),(m),(m)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M31</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(m),(m),(m),(m),(m),(m),(m),(m),(m),(m), (m),(m),(m),(m),(m),(m),(m),(m),(m),(m), (m),(m),(m),(m),(m),(m),(m),(m),(m),(m), (m)</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>common_year_mon_of_yday</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M28</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M30</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M30</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M30</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M30</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>, <macro><name>M31</name><argument_list>(<argument><literal type="number">12</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>leap_year_mon_of_yday</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M29</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M30</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M30</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M30</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M31</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>M30</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>, <macro><name>M31</name><argument_list>(<argument><literal type="number">12</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M28</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M29</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M30</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M31</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D28</name></cpp:macro> <cpp:value>1,2,3,4,5,6,7,8,9, 10,11,12,13,14,15,16,17,18,19, 20,21,22,23,24,25,26,27,28</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D29</name></cpp:macro> <cpp:value>1,2,3,4,5,6,7,8,9, 10,11,12,13,14,15,16,17,18,19, 20,21,22,23,24,25,26,27,28,29</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D30</name></cpp:macro> <cpp:value>1,2,3,4,5,6,7,8,9, 10,11,12,13,14,15,16,17,18,19, 20,21,22,23,24,25,26,27,28,29,30</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D31</name></cpp:macro> <cpp:value>1,2,3,4,5,6,7,8,9, 10,11,12,13,14,15,16,17,18,19, 20,21,22,23,24,25,26,27,28,29,30,31</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>common_year_mday_of_yday</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>D31</name></expr>, <expr><name>D28</name></expr>, <expr><name>D31</name></expr>, <expr><name>D30</name></expr>, <expr><name>D31</name></expr>, <expr><name>D30</name></expr>, <expr><name>D31</name></expr>, <expr><name>D31</name></expr>, <expr><name>D30</name></expr>, <expr><name>D31</name></expr>, <expr><name>D30</name></expr>, <expr><name>D31</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>leap_year_mday_of_yday</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>D31</name></expr>, <expr><name>D29</name></expr>, <expr><name>D31</name></expr>, <expr><name>D30</name></expr>, <expr><name>D31</name></expr>, <expr><name>D30</name></expr>, <expr><name>D31</name></expr>, <expr><name>D31</name></expr>, <expr><name>D30</name></expr>, <expr><name>D31</name></expr>, <expr><name>D30</name></expr>, <expr><name>D31</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D28</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D29</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D30</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D31</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>calc_tm_yday</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>tm_year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tm_mon</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tm_mday</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tm_year_mod400</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MOD</name><argument_list>(<argument><expr><name>tm_year</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_yday</name> <init>= <expr><name>tm_mday</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>leap_year_p</name><argument_list>(<argument><expr><name>tm_year_mod400</name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tm_yday</name> <operator>+=</operator> <name><name>leap_year_yday_offset</name><index>[<expr><name>tm_mon</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tm_yday</name> <operator>+=</operator> <name><name>common_year_yday_offset</name><index>[<expr><name>tm_mon</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>tm_yday</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>timegmw_noleapsecond</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>year1900</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>q400</name></decl>, <decl><type ref="prev"/><name>r400</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>year_mod400</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yday</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>days_in400</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vdays</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>wret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>year1900</name> <operator>=</operator> <call><name>subv</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1900</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>divmodv</name><argument_list>(<argument><expr><name>year1900</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>q400</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r400</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>year_mod400</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>r400</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yday</name> <operator>=</operator> <call><name>calc_tm_yday</name><argument_list>(<argument><expr><name>year_mod400</name></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>LONG2NUM</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name>
<operator>+</operator> <name><name>vtm</name><operator>-&gt;</operator><name>min</name></name><operator>*</operator><literal type="number">60</literal>
<operator>+</operator> <name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name><operator>*</operator><literal type="number">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>days_in400</name> <operator>=</operator> <name>yday</name>
<operator>-</operator> <literal type="number">70</literal><operator>*</operator><literal type="number">365</literal>
<operator>+</operator> <call><name>DIV</name><argument_list>(<argument><expr><name>year_mod400</name> <operator>-</operator> <literal type="number">69</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>
<operator>-</operator> <call><name>DIV</name><argument_list>(<argument><expr><name>year_mod400</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><name>year_mod400</name> <operator>+</operator> <literal type="number">299</literal><operator>)</operator> <operator>/</operator> <literal type="number">400</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vdays</name> <operator>=</operator> <call><name>LONG2NUM</name><argument_list>(<argument><expr><name>days_in400</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vdays</name> <operator>=</operator> <call><name>addv</name><argument_list>(<argument><expr><name>vdays</name></expr></argument>, <argument><expr><call><name>mulv</name><argument_list>(<argument><expr><name>q400</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">97</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vdays</name> <operator>=</operator> <call><name>addv</name><argument_list>(<argument><expr><name>vdays</name></expr></argument>, <argument><expr><call><name>mulv</name><argument_list>(<argument><expr><name>year1900</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">365</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wret</name> <operator>=</operator> <call><name>wadd</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>wmul</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name>vdays</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wret</name> <operator>=</operator> <call><name>wadd</name><argument_list>(<argument><expr><name>wret</name></expr></argument>, <argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>wret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zone_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ascii_only</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>zone</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_fstring_lit</name><argument_list>(<argument><expr><literal type="string">"(NO-TIMEZONE-ABBREVIATION)"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>zone</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISASCII</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ascii_only</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>zone</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ascii_only</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_usascii_str_new</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_enc_str_new</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>rb_locale_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>rb_fstring</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gmtimew_noleapsecond</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>timew</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wday</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>timev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew2</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsecx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>split_second</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timew2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name> <operator>=</operator> <name>subsecx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wdivmod</name><argument_list>(<argument><expr><name>timew2</name></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>w2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timev</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>modv</name><argument_list>(<argument><expr><name>timev</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>=</operator> <operator>(</operator><name>wday</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>divmodv</name><argument_list>(<argument><expr><name>timev</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">400</literal><operator>*</operator><literal type="number">365</literal> <operator>+</operator> <literal type="number">97</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>timev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name> <operator>=</operator> <call><name>mulv</name><argument_list>(<argument><expr><name>timev</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1970</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><literal type="number">30</literal><operator>*</operator><literal type="number">365</literal><operator>+</operator><literal type="number">7</literal><operator>+</operator><literal type="number">31</literal><operator>+</operator><literal type="number">29</literal><operator>-</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">31</literal><operator>*</operator><literal type="number">365</literal><operator>+</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">30</literal><operator>*</operator><literal type="number">365</literal><operator>+</operator><literal type="number">7</literal></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>n</name> <operator>/</operator> <operator>(</operator><literal type="number">365</literal><operator>*</operator><literal type="number">100</literal> <operator>+</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <operator>(</operator><literal type="number">365</literal><operator>*</operator><literal type="number">100</literal> <operator>+</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">30</literal><operator>*</operator><literal type="number">365</literal><operator>+</operator><literal type="number">7</literal><operator>+</operator><literal type="number">31</literal><operator>+</operator><literal type="number">29</literal><operator>-</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">31</literal><operator>*</operator><literal type="number">365</literal><operator>+</operator><literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">30</literal><operator>*</operator><literal type="number">365</literal><operator>+</operator><literal type="number">7</literal></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>n</name> <operator>/</operator> <operator>(</operator><literal type="number">365</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <operator>(</operator><literal type="number">365</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">365</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">31</literal><operator>+</operator><literal type="number">29</literal><operator>-</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">365</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">366</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">365</literal><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>n</name> <operator>/</operator> <literal type="number">365</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">365</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<label><name>found</name>:</label>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>yday</name></name> <operator>=</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name> <operator>=</operator> <call><name>addv</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>leap_year_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>=</operator> <name><name>leap_year_mon_of_yday</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <name><name>leap_year_mday_of_yday</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>=</operator> <name><name>common_year_mon_of_yday</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <name><name>common_year_mday_of_yday</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>utc_offset</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>zone</name></name> <operator>=</operator> <name>str_utc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>gmtime_with_leapsecond</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>timep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_GMTOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gmtoff_sec</name></decl>, <decl><type ref="prev"/><name>gmtoff_min</name></decl>, <decl><type ref="prev"/><name>gmtoff_hour</name></decl>, <decl><type ref="prev"/><name>gmtoff_day</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>gmtoff</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>LOCALTIME</name><argument_list>(<argument><expr><name>timep</name></expr></argument>, <argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>tm_gmtoff</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff</name> <operator>=</operator> <operator>-</operator><name><name>t</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>gmtoff_sec</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>gmtoff</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff</name> <operator>=</operator> <name>gmtoff</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff_min</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>gmtoff</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff</name> <operator>=</operator> <name>gmtoff</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff_hour</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>gmtoff</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>gmtoff_sec</name> <operator>*=</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff_min</name> <operator>*=</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff_hour</name> <operator>*=</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gmtoff_day</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gmtoff_sec</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>+=</operator> <name>gmtoff_sec</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>+=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff_min</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">60</literal> <operator>&lt;=</operator> <name><name>result</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>-=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff_min</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gmtoff_min</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>+=</operator> <name>gmtoff_min</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>+=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff_hour</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">60</literal> <operator>&lt;=</operator> <name><name>result</name><operator>-&gt;</operator><name>tm_min</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>-=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff_hour</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gmtoff_hour</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+=</operator> <name>gmtoff_hour</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff_day</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">24</literal> <operator>&lt;=</operator> <name><name>result</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>-=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gmtoff_day</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gmtoff_day</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gmtoff_day</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <ternary><condition><expr><call><name>leap_year_p</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">365</literal></expr> </then><else>: <expr><literal type="number">364</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>days_in_month</name> <init>= <expr><ternary><condition><expr><call><name>leap_year_p</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>leap_year_days_in_month</name></expr> </then><else>:
<expr><name>common_year_days_in_month</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>days_in_month</name><index>[<expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>leap</name> <init>= <expr><call><name>leap_year_p</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>leap</name></expr> ?</condition><then> <expr><literal type="number">365</literal></expr> </then><else>: <expr><literal type="number">364</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>leap</name></expr> ?</condition><then> <expr><name>leap_year_days_in_month</name></expr> </then><else>:
<expr><name>common_year_days_in_month</name></expr></else></ternary><operator>)</operator><index>[<expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_gmtoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TM_ZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_zone</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"UTC"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>GMTIME</name><argument_list>(<argument><expr><name>timep</name></expr></argument>, <argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>this_year</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>known_leap_seconds_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>number_of_leap_seconds_known</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_leap_second_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>this_year</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew</name></decl>;</decl_stmt>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>gmtime_with_leapsecond</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>this_year</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>TIMET_MAX</name> <operator>-</operator> <name>now</name> <operator>&lt;</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><literal type="number">366</literal><operator>*</operator><literal type="number">86400</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>known_leap_seconds_limit</name> <operator>=</operator> <name>TIMET_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>known_leap_seconds_limit</name> <operator>=</operator> <name>now</name> <operator>+</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><literal type="number">366</literal><operator>*</operator><literal type="number">86400</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gmtime_with_leapsecond</name><argument_list>(<argument><expr><operator>&amp;</operator><name>known_leap_seconds_limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>year</name></name> <operator>=</operator> <call><name>LONG2NUM</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>mon</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>mday</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>hour</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>tm_hour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>min</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>tm_min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>subsecx</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>utc_offset</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timew</name> <operator>=</operator> <call><name>timegmw_noleapsecond</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>number_of_leap_seconds_known</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><call><name>wsub</name><argument_list>(<argument><expr><call><name>TIMET2WV</name><argument_list>(<argument><expr><name>known_leap_seconds_limit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ruby_reset_leap_second_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>this_year</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>timegmw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>gt</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1972</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>timegmw_noleapsecond</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_leap_second_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timew</name> <operator>=</operator> <call><name>timegmw_noleapsecond</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>number_of_leap_seconds_known</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<return>return <expr><name>timew</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>wlt</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>TIMET2WV</name><argument_list>(<argument><expr><name>known_leap_seconds_limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>wadd</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>WINT2WV</name><argument_list>(<argument><expr><name>number_of_leap_seconds_known</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <call><name>rb_long2int</name><argument_list>(<argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>find_time_t</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>wadd</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>TIMET2WV</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type>
<name>gmtimew</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>timew</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsecx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wlt</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gmtimew_noleapsecond</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_leap_second_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>number_of_leap_seconds_known</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>gmtimew_noleapsecond</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>wlt</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>TIMET2WV</name><argument_list>(<argument><expr><name>known_leap_seconds_limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timew</name> <operator>=</operator> <call><name>wsub</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>WINT2WV</name><argument_list>(<argument><expr><name>number_of_leap_seconds_known</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gmtimew_noleapsecond</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>split_second</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timew2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>WV2TIMET</name><argument_list>(<argument><expr><name>timew2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gmtime_with_leapsecond</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>year</name></name> <operator>=</operator> <call><name>LONG2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>mon</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>hour</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sec</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>subsecx</name></name> <operator>=</operator> <name>subsecx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>utc_offset</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>wday</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_wday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>yday</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_yday</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>isdst</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
result-&gt;zone = rb_fstring_lit("UTC");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMTIMEW</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(gmtimew(w, v) ? (void)0 : rb_raise(rb_eArgError, "gmtime error"))</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>localtime_with_gmtoff_zone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>gmtoff</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>;</function_decl>


































<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>compat_common_month_table</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">2034</literal></expr>, <expr><literal type="number">2035</literal></expr>, <expr><literal type="number">2036</literal></expr>, <expr><literal type="number">2031</literal></expr>, <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2027</literal></expr>, <expr><literal type="number">2033</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2026</literal></expr>, <expr><literal type="number">2027</literal></expr>, <expr><literal type="number">2033</literal></expr>, <expr><literal type="number">2034</literal></expr>, <expr><literal type="number">2035</literal></expr>, <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">2031</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2026</literal></expr>, <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2033</literal></expr>, <expr><literal type="number">2034</literal></expr>, <expr><literal type="number">2035</literal></expr>, <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">2036</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2035</literal></expr>, <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">2036</literal></expr>, <expr><literal type="number">2026</literal></expr>, <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2033</literal></expr>, <expr><literal type="number">2034</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2033</literal></expr>, <expr><literal type="number">2034</literal></expr>, <expr><literal type="number">2035</literal></expr>, <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">2036</literal></expr>, <expr><literal type="number">2026</literal></expr>, <expr><literal type="number">2032</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2036</literal></expr>, <expr><literal type="number">2026</literal></expr>, <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2033</literal></expr>, <expr><literal type="number">2034</literal></expr>, <expr><literal type="number">2035</literal></expr>, <expr><literal type="number">2030</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2035</literal></expr>, <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">2036</literal></expr>, <expr><literal type="number">2026</literal></expr>, <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2033</literal></expr>, <expr><literal type="number">2034</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2033</literal></expr>, <expr><literal type="number">2034</literal></expr>, <expr><literal type="number">2035</literal></expr>, <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">2036</literal></expr>, <expr><literal type="number">2026</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">2036</literal></expr>, <expr><literal type="number">2026</literal></expr>, <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2033</literal></expr>, <expr><literal type="number">2034</literal></expr>, <expr><literal type="number">2035</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2034</literal></expr>, <expr><literal type="number">2035</literal></expr>, <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">2036</literal></expr>, <expr><literal type="number">2026</literal></expr>, <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2033</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2026</literal></expr>, <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2033</literal></expr>, <expr><literal type="number">2034</literal></expr>, <expr><literal type="number">2035</literal></expr>, <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">2036</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">2036</literal></expr>, <expr><literal type="number">2026</literal></expr>, <expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2033</literal></expr>, <expr><literal type="number">2034</literal></expr>, <expr><literal type="number">2035</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>


























<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>compat_leap_month_table</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">2032</literal></expr>, <expr><literal type="number">2016</literal></expr>, <expr><literal type="number">2028</literal></expr>, <expr><literal type="number">2012</literal></expr>, <expr><literal type="number">2024</literal></expr>, <expr><literal type="number">2036</literal></expr>, <expr><literal type="number">2020</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>calc_wday</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year_mod400</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wday</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <name>month</name><operator>)</operator> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>year_mod400</name> <operator>+</operator> <literal type="number">4800</literal> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>month</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>a</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wday</name> <operator>=</operator> <name>day</name> <operator>+</operator> <operator>(</operator><literal type="number">153</literal><operator>*</operator><name>m</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">365</literal><operator>*</operator><name>y</name> <operator>+</operator> <name>y</name><operator>/</operator><literal type="number">4</literal> <operator>-</operator> <name>y</name><operator>/</operator><literal type="number">100</literal> <operator>+</operator> <name>y</name><operator>/</operator><literal type="number">400</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wday</name> <operator>=</operator> <name>wday</name> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<return>return <expr><name>wday</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>guess_local_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm_utc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>isdst_ret</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>zone_ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>gmtoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>timev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>year_mod400</name></decl>, <decl><type ref="prev"/><name>wday</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name><name>vtm_utc</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1916</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>off</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isdst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <call><name>rb_fstring_lit</name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEGATIVE_TIME_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_TIME_T</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THE_TIME_OLD_ENOUGH</name></cpp:macro> <cpp:value>((time_t)0x80000000)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THE_TIME_OLD_ENOUGH</name></cpp:macro> <cpp:value>((time_t)(1600-1970)*366*24*60*60)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>localtime_with_gmtoff_zone</name><argument_list>(<argument><expr><operator>(</operator><name>t</name> <operator>=</operator> <name>THE_TIME_OLD_ENOUGH</name><operator>,</operator> <operator>&amp;</operator><name>t</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gmtoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><name>gmtoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>isdst</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>localtime_with_gmtoff_zone</name><argument_list>(<argument><expr><operator>(</operator><name>t</name> <operator>=</operator> <literal type="number">0</literal><operator>,</operator> <operator>&amp;</operator><name>t</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gmtoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><name>gmtoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>isdst</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>isdst_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>isdst_ret</name> <operator>=</operator> <name>isdst</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>zone_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>zone_ret</name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>vtm2</name> <operator>=</operator> <operator>*</operator><name>vtm_utc</name></expr>;</expr_stmt>


<expr_stmt><expr><name>year_mod400</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>modv</name><argument_list>(<argument><expr><name><name>vtm_utc</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>calc_wday</name><argument_list>(<argument><expr><name>year_mod400</name></expr></argument>, <argument><expr><name><name>vtm_utc</name><operator>-&gt;</operator><name>mon</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtm_utc</name><operator>-&gt;</operator><name>mon</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>leap_year_p</name><argument_list>(<argument><expr><name>year_mod400</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vtm2</name><operator>.</operator><name>year</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>compat_leap_month_table</name><index>[<expr><name>wday</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vtm2</name><operator>.</operator><name>year</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>compat_common_month_table</name><index>[<expr><name><name>vtm_utc</name><operator>-&gt;</operator><name>mon</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>wday</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>timev</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><call><name>timegmw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>NUM2TIMET</name><argument_list>(<argument><expr><name>timev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <name>str_utc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>localtime_with_gmtoff_zone</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gmtoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isdst_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>isdst_ret</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>zone_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>zone_ret</name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>gmtoff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>now</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>now_gmtoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>now_isdst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>now_zone</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name></decl>;</decl_stmt>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>localtime_with_gmtoff_zone</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now_gmtoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>now_isdst</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <call><name>rb_fstring</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>now_zone</name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>isdst_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>isdst_ret</name> <operator>=</operator> <name>now_isdst</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>zone_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>zone_ret</name> <operator>=</operator> <name>now_zone</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>now_gmtoff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>small_vtm_sub</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>vtm1</name><operator>-&gt;</operator><name>sec</name></name> <operator>-</operator> <name><name>vtm2</name><operator>-&gt;</operator><name>sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <operator>(</operator><name><name>vtm1</name><operator>-&gt;</operator><name>min</name></name> <operator>-</operator> <name><name>vtm2</name><operator>-&gt;</operator><name>min</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <operator>(</operator><name><name>vtm1</name><operator>-&gt;</operator><name>hour</name></name> <operator>-</operator> <name><name>vtm2</name><operator>-&gt;</operator><name>hour</name></name><operator>)</operator> <operator>*</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ne</name><argument_list>(<argument><expr><name><name>vtm1</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>vtm2</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <ternary><condition><expr><call><name>lt</name><argument_list>(<argument><expr><name><name>vtm1</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>vtm2</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">24</literal><operator>*</operator><literal type="number">3600</literal></expr> </then><else>: <expr><literal type="number">24</literal><operator>*</operator><literal type="number">3600</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>vtm1</name><operator>-&gt;</operator><name>mon</name></name> <operator>!=</operator> <name><name>vtm2</name><operator>-&gt;</operator><name>mon</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <ternary><condition><expr><name><name>vtm1</name><operator>-&gt;</operator><name>mon</name></name> <operator>&lt;</operator> <name><name>vtm2</name><operator>-&gt;</operator><name>mon</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">24</literal><operator>*</operator><literal type="number">3600</literal></expr> </then><else>: <expr><literal type="number">24</literal><operator>*</operator><literal type="number">3600</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>vtm1</name><operator>-&gt;</operator><name>mday</name></name> <operator>!=</operator> <name><name>vtm2</name><operator>-&gt;</operator><name>mday</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <ternary><condition><expr><name><name>vtm1</name><operator>-&gt;</operator><name>mday</name></name> <operator>&lt;</operator> <name><name>vtm2</name><operator>-&gt;</operator><name>mday</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">24</literal><operator>*</operator><literal type="number">3600</literal></expr> </then><else>: <expr><literal type="number">24</literal><operator>*</operator><literal type="number">3600</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>timelocalw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew1</name></decl>, <decl><type ref="prev"/><name>timew2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm1</name></decl>, <decl><type ref="prev"/><name>vtm2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>l</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1900</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>INT_MIN</name> <operator>||</operator> <name>INT_MAX</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_localtime</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>subv</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1900</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INT_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>lt</name><argument_list>(<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_localtime</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <ternary><condition><expr><name><name>vtm</name><operator>-&gt;</operator><name>isdst</name></name> <operator>==</operator> <name>VTM_ISDST_INITVAL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>vtm</name><operator>-&gt;</operator><name>isdst</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_time_t</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_localtime</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><call><name>wadd</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>TIMET2WV</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<label><name>no_localtime</name>:</label>
<expr_stmt><expr><name>timew1</name> <operator>=</operator> <call><name>timegmw</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>localtimew</name><argument_list>(<argument><expr><name>timew1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"localtimew error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vtmcmp</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timew1</name> <operator>=</operator> <call><name>wsub</name><argument_list>(<argument><expr><name>timew1</name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">12</literal><operator>*</operator><literal type="number">3600</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>localtimew</name><argument_list>(<argument><expr><name>timew1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"localtimew error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timew2</name> <operator>=</operator> <name>timew1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vtm2</name> <operator>=</operator> <name>vtm1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>timew1</name> <operator>=</operator> <call><name>wsub</name><argument_list>(<argument><expr><name>timew1</name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">24</literal><operator>*</operator><literal type="number">3600</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>localtimew</name><argument_list>(<argument><expr><name>timew1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"localtimew error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>timew2</name> <operator>=</operator> <call><name>wadd</name><argument_list>(<argument><expr><name>timew1</name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">24</literal><operator>*</operator><literal type="number">3600</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>localtimew</name><argument_list>(<argument><expr><name>timew2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"localtimew error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>timew1</name> <operator>=</operator> <call><name>wadd</name><argument_list>(<argument><expr><name>timew1</name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>small_vtm_sub</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timew2</name> <operator>=</operator> <call><name>wadd</name><argument_list>(<argument><expr><name>timew2</name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>small_vtm_sub</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>weq</name><argument_list>(<argument><expr><name>timew1</name></expr></argument>, <argument><expr><name>timew2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>timew1</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>localtimew</name><argument_list>(<argument><expr><name>timew1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"localtimew error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name> <operator>!=</operator> <name><name>vtm1</name><operator>.</operator><name>hour</name></name> <operator>||</operator> <name><name>vtm</name><operator>-&gt;</operator><name>min</name></name> <operator>!=</operator> <name><name>vtm1</name><operator>.</operator><name>min</name></name> <operator>||</operator> <name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name> <operator>!=</operator> <name><name>vtm1</name><operator>.</operator><name>sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>timew2</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>localtimew</name><argument_list>(<argument><expr><name>timew2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"localtimew error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name> <operator>!=</operator> <name><name>vtm2</name><operator>.</operator><name>hour</name></name> <operator>||</operator> <name><name>vtm</name><operator>-&gt;</operator><name>min</name></name> <operator>!=</operator> <name><name>vtm2</name><operator>.</operator><name>min</name></name> <operator>||</operator> <name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name> <operator>!=</operator> <name><name>vtm2</name><operator>.</operator><name>sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>timew1</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>isdst</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>lt</name><argument_list>(<argument><expr><name><name>vtm1</name><operator>.</operator><name>utc_offset</name></name></expr></argument>, <argument><expr><name><name>vtm2</name><operator>.</operator><name>utc_offset</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>timew2</name></expr> </then><else>: <expr><name>timew1</name></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>lt</name><argument_list>(<argument><expr><name><name>vtm1</name><operator>.</operator><name>utc_offset</name></name></expr></argument>, <argument><expr><name><name>vtm2</name><operator>.</operator><name>utc_offset</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>timew1</name></expr> </then><else>: <expr><name>timew2</name></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>localtime_with_gmtoff_zone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>gmtoff</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LOCALTIME</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_GMTOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>gmtoff</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>u</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>&amp;</operator><name>tm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>GMTIME</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>u</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>!=</operator> <name><name>u</name><operator>-&gt;</operator><name>tm_year</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <ternary><condition><expr><name><name>l</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <name><name>u</name><operator>-&gt;</operator><name>tm_year</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>!=</operator> <name><name>u</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <ternary><condition><expr><name><name>l</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;</operator> <name><name>u</name><operator>-&gt;</operator><name>tm_mon</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>!=</operator> <name><name>u</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <ternary><condition><expr><name><name>l</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&lt;</operator> <name><name>u</name><operator>-&gt;</operator><name>tm_mday</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>off</name> <operator>*</operator> <literal type="number">24</literal> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>-</operator> <name><name>u</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>off</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>-</operator> <name><name>u</name><operator>-&gt;</operator><name>tm_min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>off</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>-</operator> <name><name>u</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gmtoff</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>zone</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TM_ZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>zone</name> <operator>=</operator> <call><name>zone_str</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_zone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TZNAME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DAYLIGHT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">140</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tzname</name></cpp:macro> <cpp:value>_tzname</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>daylight</name></cpp:macro> <cpp:value>_daylight</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>zone</name> <operator>=</operator> <call><name>zone_str</name><argument_list>(<argument><expr><name><name>tzname</name><index>[<expr><name>daylight</name> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>zone</name> <operator>=</operator> <call><name>zone_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>timew_out_of_timet_range</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>timew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>timexv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WIDEVALUE_IS_WIDER</name> <operator>&amp;&amp;</operator> <name>SIZEOF_TIME_T</name> <operator>&lt;</operator> <name>SIZEOF_INT64_T</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>t</name> <init>= <expr><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>TIME_SCALE</name> <operator>*</operator> <operator>(</operator><name>wideint_t</name><operator>)</operator><name>TIMET_MIN</name> <operator>||</operator>
<name>TIME_SCALE</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>wideint_t</name><operator>)</operator><name>TIMET_MAX</name><operator>)</operator> <operator>&lt;=</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_TIME_T</name> <operator>==</operator> <name>SIZEOF_INT64_T</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FIXWV_P</name><argument_list>(<argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wideint_t</name></type> <name>t</name> <init>= <expr><call><name>FIXWV2WINT</name><argument_list>(<argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>~</operator><operator>(</operator><name>time_t</name><operator>)</operator><literal type="number">0</literal> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>timexv</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>timexv</name></expr></argument>, <argument><expr><call><name>mulv</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TIMET2NUM</name><argument_list>(<argument><expr><name>TIMET_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>le</name><argument_list>(<argument><expr><call><name>mulv</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>addv</name><argument_list>(<argument><expr><call><name>TIMET2NUM</name><argument_list>(<argument><expr><name>TIMET_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timexv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type>
<name>localtimew</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>timew</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsecx</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isdst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>timew_out_of_timet_range</name><argument_list>(<argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>gmtoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>split_second</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timew2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>WV2TIMET</name><argument_list>(<argument><expr><name>timew2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>localtime_with_gmtoff_zone</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gmtoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>year</name></name> <operator>=</operator> <call><name>LONG2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>mon</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>hour</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sec</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>subsecx</name></name> <operator>=</operator> <name>subsecx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>wday</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_wday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>yday</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_yday</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>isdst</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>utc_offset</name></name> <operator>=</operator> <call><name>LONG2NUM</name><argument_list>(<argument><expr><name>gmtoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>zone</name></name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gmtimew</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>guess_local_offset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isdst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gmtimew</name><argument_list>(<argument><expr><call><name>wadd</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>utc_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>isdst</name></name> <operator>=</operator> <name>isdst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>zone</name></name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_TZMODE_LOCALTIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_TZMODE_UTC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_TZMODE_FIXOFF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_TZMODE_UNINITIALIZED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<macro><name>PACKED_STRUCT_UNALIGNED</name><argument_list>(<argument>struct time_object {
wideval_t timew; 
struct vtm vtm;
unsigned int tzmode:<literal type="number">3</literal>; 
unsigned int tm_got:<literal type="number">1</literal>;
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetTimeval</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>tobj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tobj) = get_timeval(obj))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetNewTimeval</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>tobj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tobj) = get_new_timeval(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsTimeval</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_typeddata_is_kind_of((obj), &amp;time_data_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_INIT_P</name><parameter_list>(<parameter><type><name>tobj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tobj)-&gt;tzmode != TIME_TZMODE_UNINITIALIZED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TZMODE_UTC_P</name><parameter_list>(<parameter><type><name>tobj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tobj)-&gt;tzmode == TIME_TZMODE_UTC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TZMODE_SET_UTC</name><parameter_list>(<parameter><type><name>tobj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tobj)-&gt;tzmode = TIME_TZMODE_UTC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TZMODE_LOCALTIME_P</name><parameter_list>(<parameter><type><name>tobj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tobj)-&gt;tzmode == TIME_TZMODE_LOCALTIME)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TZMODE_SET_LOCALTIME</name><parameter_list>(<parameter><type><name>tobj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tobj)-&gt;tzmode = TIME_TZMODE_LOCALTIME)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TZMODE_FIXOFF_P</name><parameter_list>(<parameter><type><name>tobj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tobj)-&gt;tzmode == TIME_TZMODE_FIXOFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TZMODE_SET_FIXOFF</name><parameter_list>(<parameter><type><name>tobj</name></type></parameter>, <parameter><type><name>off</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tobj)-&gt;tzmode = TIME_TZMODE_FIXOFF, (tobj)-&gt;vtm.utc_offset = (off))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TZMODE_COPY</name><parameter_list>(<parameter><type><name>tobj1</name></type></parameter>, <parameter><type><name>tobj2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tobj1)-&gt;tzmode = (tobj2)-&gt;tzmode, (tobj1)-&gt;vtm.utc_offset = (tobj2)-&gt;vtm.utc_offset, (tobj1)-&gt;vtm.zone = (tobj2)-&gt;vtm.zone)</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>time_get_tm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_TM</name><parameter_list>(<parameter><type><name>time</name></type></parameter>, <parameter><type><name>tobj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((tobj)-&gt;tm_got == 0) { time_get_tm((time), (tobj)); } } while (0)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>time_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXWV_P</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>subsecx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>utc_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>time_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tobj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>time_object</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>time_data_type</name> <init>= <expr><block>{
<expr><literal type="string">"time"</literal></expr>,
<expr><block>{<expr><name>time_mark</name></expr>, <expr><name>RUBY_TYPED_DEFAULT_FREE</name></expr>, <expr><name>time_memsize</name></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_s_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>time_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_data_type</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tzmode</name></name> <operator>=</operator> <name>TIME_TZMODE_UNINITIALIZED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type>
<name>get_timeval</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>time_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_data_type</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TIME_INIT_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"uninitialized %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>tobj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type>
<name>get_new_timeval</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>time_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_data_type</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TIME_INIT_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"already initialized %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>tobj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>time_modify</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_check_frozen</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>timespec2timew</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew</name></decl>;</decl_stmt>

<expr_stmt><expr><name>timew</name> <operator>=</operator> <call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>TIMET2WV</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timew</name> <operator>=</operator> <call><name>wadd</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><call><name>wmulquoll</name><argument_list>(<argument><expr><call><name>WINT2WV</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TIME_SCALE</name></expr></argument>, <argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>timew</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>timespec</name></name></type>
<name>timew2timespec</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>timew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsecx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>timew_out_of_timet_range</name><argument_list>(<argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"time out of system range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>split_second</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timew2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>WV2TIMET</name><argument_list>(<argument><expr><name>timew2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><call><name>mulquov</name><argument_list>(<argument><expr><name>subsecx</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type>
<name>timew2timespec_exact</name><parameter_list>(<parameter><decl><type><name>wideval_t</name></type> <name>timew</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsecx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nsecv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>timew_out_of_timet_range</name><argument_list>(<argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>split_second</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timew2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>WV2TIMET</name><argument_list>(<argument><expr><name>timew2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsecv</name> <operator>=</operator> <call><name>mulquov</name><argument_list>(<argument><expr><name>subsecx</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>nsecv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>nsecv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_timespec_now</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"clock_gettime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"gettimeofday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_init_0</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time_modify</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetNewTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tzmode</name></name> <operator>=</operator> <name>TIME_TZMODE_LOCALTIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_timespec_now</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <call><name>timespec2timew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_set_utc_offset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>num_exact</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_modify</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_SET_FIXOFF</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vtm_add_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsec</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sec</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>hour</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>neg</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>divmodv</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>divmodv</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>divmodv</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>divmodv</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hour</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>subsec</name> <operator>=</operator> <call><name>neg</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <operator>-</operator><name>sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>-</operator><name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hour</name> <operator>=</operator> <operator>-</operator><name>hour</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>day</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_equal</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name> <operator>=</operator> <call><name>addv</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name> <operator>=</operator> <call><name>addv</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>le</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name> <operator>=</operator> <call><name>subv</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>not_zero_sec</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name></expr>)</condition> <block>{<block_content>
<label><name>not_zero_sec</name>:</label>


<expr_stmt><expr><name>sec</name> <operator>+=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sec</name> <operator>+=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">60</literal> <operator>&lt;=</operator> <name>sec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sec</name> <operator>-=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>min</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>+=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>+=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hour</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">60</literal> <operator>&lt;=</operator> <name>min</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>-=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hour</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hour</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hour</name> <operator>+=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hour</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hour</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>day</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">24</literal> <operator>&lt;=</operator> <name>hour</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hour</name> <operator>-=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>day</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name> <operator>=</operator> <name>hour</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>day</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>day</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name> <operator>=</operator> <call><name>subv</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>yday</name></name> <operator>=</operator> <ternary><condition><expr><call><name>leap_year_v_p</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">366</literal></expr> </then><else>: <expr><literal type="number">365</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>days_in_month</name> <init>= <expr><ternary><condition><expr><call><name>leap_year_v_p</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>leap_year_days_in_month</name></expr> </then><else>:
<expr><name>common_year_days_in_month</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <name><name>days_in_month</name><index>[<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>yday</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>yday</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>=</operator> <operator>(</operator><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>leap</name> <init>= <expr><call><name>leap_year_v_p</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name> <operator>=</operator> <call><name>addv</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>yday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>leap</name></expr> ?</condition><then> <expr><name>leap_year_days_in_month</name></expr> </then><else>:
<expr><name>common_year_days_in_month</name></expr></else></ternary><operator>)</operator><index>[<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>yday</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>yday</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>=</operator> <operator>(</operator><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>maybe_tzobj_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<macro><name>NORETURN</name><argument_list>(<argument>static void invalid_utc_offset(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>invalid_utc_offset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>message</name><index>[]</index></name> <init>= <expr><literal type="string">"\"+HH:MM\", \"-HH:MM\", \"UTC\" "</literal>
<literal type="string">"or \"A\"..\"I\",\"K\"..\"Z\" expected for utc_offset"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_usascii_str_new_static</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><call><name>rb_exc_new_str</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>utc_offset_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name> <operator>=</operator> <call><name>rb_check_string_type</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_enc_str_asciicompat_p</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>invalid_utc_offset</name>:</label>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UTC_ZONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'I'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'N'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Y'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="char">'M'</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<goto>goto <name>invalid_utc_offset</name>;</goto>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>STRNCASECMP</name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UTC_ZONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<goto>goto <name>invalid_utc_offset</name>;</goto>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid_utc_offset</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid_utc_offset</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal> <operator>*</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid_utc_offset</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid_utc_offset</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid_utc_offset</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid_utc_offset</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'5'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid_utc_offset</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>invalid_utc_offset</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal> <operator>*</operator> <literal type="number">11</literal><operator>)</operator> <operator>*</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal> <operator>*</operator> <literal type="number">11</literal><operator>)</operator> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>num_exact</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_set_offset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>zone</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl></parameter>,
<parameter><decl><type><name>wideval_t</name></type> <name>tlocal</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>tutc</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>wideval_t</name></type> <name>w</name> <init>= <expr><call><name>wsub</name><argument_list>(<argument><expr><name>tlocal</name></expr></argument>, <argument><expr><name>tutc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>off</name> <init>= <expr><call><name>w2v</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>validate_utc_offset</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>utc_offset</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tzmode</name></name> <operator>=</operator> <name>TIME_TZMODE_LOCALTIME</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>extract_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ID</name></type> <name>id_to_i</name> <init>= <expr><name>idTo_i</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_TIME</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { t = v2w(rb_Integer(AREF(to_i))); } while (0)</cpp:value></cpp:define>



<if_stmt><if>if <condition>(<expr><call><name>rb_typeddata_is_kind_of</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_data_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time_gmtime</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>T_STRUCT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_struct_aref(time, ID2SYM(id_##x))</cpp:value></cpp:define>
<expr_stmt><expr><call><name>EXTRACT_TIME</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AREF</name></cpp:undef>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcallv(time, id_##x, 0, 0)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>EXTRACT_TIME</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AREF</name></cpp:undef>
</block_content>}</block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXTRACT_TIME</name></cpp:undef>

<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>extract_vtm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>subsecx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ID</name></type> <name>id_to_i</name> <init>= <expr><name>idTo_i</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_VTM</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { VALUE subsecx; vtm-&gt;year = obj2vint(AREF(year)); vtm-&gt;mon = month_arg(AREF(mon)); vtm-&gt;mday = obj2ubits(AREF(mday), 5); vtm-&gt;hour = obj2ubits(AREF(hour), 5); vtm-&gt;min = obj2ubits(AREF(min), 6); vtm-&gt;sec = obj2subsecx(AREF(sec), &amp;subsecx); vtm-&gt;isdst = RTEST(AREF(isdst)); vtm-&gt;utc_offset = Qnil; t = v2w(rb_Integer(AREF(to_i))); } while (0)</cpp:value></cpp:define>












<if_stmt><if>if <condition>(<expr><call><name>rb_typeddata_is_kind_of</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_data_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time_get_tm</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>vtm</name> <operator>=</operator> <name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TZMODE_FIXOFF_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>vtm</name><operator>-&gt;</operator><name>utc_offset</name></name> <operator>!=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>wadd</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>utc_offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>T_STRUCT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_struct_aref(time, ID2SYM(id_##x))</cpp:value></cpp:define>
<expr_stmt><expr><call><name>EXTRACT_VTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AREF</name></cpp:undef>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>rb_integer_type_p</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>v2w</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GMTIMEW</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcallv(time, id_##x, 0, 0)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>EXTRACT_VTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AREF</name></cpp:undef>
</block_content>}</block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXTRACT_VTM</name></cpp:undef>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name> <operator>=</operator> <name>subsecx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_vtm</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_set_dst</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>zone</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>id_dst_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONST_ID</name><argument_list>(<argument><expr><name>id_dst_p</name></expr></argument>, <argument><expr><literal type="string">"dst?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>id_dst_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>isdst</name></name> <operator>=</operator> <operator>(</operator><name>dst</name> <operator>!=</operator> <name>Qundef</name> <operator>&amp;&amp;</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zone_timelocal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>zone</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>utc</name></decl>, <decl><type ref="prev"/><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>tm_from_time</name><argument_list>(<argument><expr><name>rb_cTimeTM</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utc</name> <operator>=</operator> <call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>id_local_to_utc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>utc</name> <operator>==</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>extract_time</name><argument_list>(<argument><expr><name>utc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zone_set_offset</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_time_magnify</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>subsecx</name></name> <operator>!=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>wadd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>subsecx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zone_set_dst</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zone_localtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>zone</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>local</name></decl>, <decl><type ref="prev"/><name>tm</name></decl>, <decl><type ref="prev"/><name>subsecx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>split_second</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>tm_from_time</name><argument_list>(<argument><expr><name>rb_cTimeTM</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>local</name> <operator>=</operator> <call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>id_utc_to_local</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>local</name> <operator>==</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>extract_vtm</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name></expr></argument>, <argument><expr><name>subsecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zone_set_offset</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zone_set_dst</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>find_timezone</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name> <init>= <expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_check_funcall_default</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>id_find_timezone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zone</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_init_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>utc</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>v</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>wday</name></name> <operator>=</operator> <name>VTM_WDAY_INITVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>yday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>zone</name></name> <operator>=</operator> <name>str_empty</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"16"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>year</name></name> <operator>=</operator> <call><name>obj2vint</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>mon</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>month_arg</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>mday</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>obj2ubits</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>hour</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>obj2ubits</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>min</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>obj2ubits</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>subsecx</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsecx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <call><name>obj2subsecx</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>subsecx</name></name> <operator>=</operator> <name>subsecx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>isdst</name></name> <operator>=</operator> <name>VTM_ISDST_INITVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>utc_offset</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"dst"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>isdst</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>arg</name> <operator>==</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"std"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>maybe_tzobj_p</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>utc</name> <operator>=</operator> <call><name>utc_offset_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>utc_offset</name></name> <operator>=</operator> <ternary><condition><expr><name>utc</name> <operator>==</operator> <name>UTC_ZONE</name></expr> ?</condition><then> <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>utc</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name> <operator>=</operator> <call><name>find_timezone</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>invalid_utc_offset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>validate_vtm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_modify</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetNewTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <call><name>timegmw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name> <operator>=</operator> <name>vtm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_SET_LOCALTIME</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zone_timelocal</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>utc_offset</name></name> <operator>=</operator> <call><name>utc_offset_arg</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name> <operator>=</operator> <call><name>find_timezone</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>zone_timelocal</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>invalid_utc_offset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>utc</name> <operator>==</operator> <name>UTC_ZONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <call><name>timegmw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name> <operator>=</operator> <name>vtm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_SET_UTC</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tzmode</name></name> <operator>=</operator> <name>TIME_TZMODE_LOCALTIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>utc_offset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>off</name> <init>= <expr><name><name>vtm</name><operator>.</operator><name>utc_offset</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vtm_add_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>utc_offset</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <call><name>timegmw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>time_set_utc_offset</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <call><name>timelocalw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>time_localtime</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


















































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>time_init_0</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>time_init_1</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>time_overflow_p</name><parameter_list>(<parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>secp</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>nsecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec</name> <init>= <expr><operator>*</operator><name>secp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>nsec</name> <init>= <expr><operator>*</operator><name>nsecp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sec2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nsec</name> <operator>&gt;=</operator> <literal type="number">1000000000</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>sec2</name> <operator>=</operator> <name>nsec</name> <operator>/</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>TIMET_MAX</name> <operator>-</operator> <name>sec2</name> <operator>&lt;</operator> <name>sec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"out of Time range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nsec</name> <operator>-=</operator> <name>sec2</name> <operator>*</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>+=</operator> <name>sec2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>nsec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>sec2</name> <operator>=</operator> <call><name>NDIV</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>,<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&lt;</operator> <name>TIMET_MIN</name> <operator>-</operator> <name>sec2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"out of Time range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nsec</name> <operator>-=</operator> <name>sec2</name> <operator>*</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>+=</operator> <name>sec2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NEGATIVE_TIME_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"time must be positive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>secp</name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nsecp</name> <operator>=</operator> <name>nsec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wideval_t</name></type>
<name>nsec2timew</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>time_overflow_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name>nsec</name></expr>;</expr_stmt>
<return>return <expr><call><name>timespec2timew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_new_timew</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>timew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>time</name> <init>= <expr><call><name>time_s_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tobj</name> <operator>=</operator> <call><name>DATA_PTR</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tzmode</name></name> <operator>=</operator> <name>TIME_TZMODE_LOCALTIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <name>timew</name></expr>;</expr_stmt>

<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_time_new</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>usec</name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>sec2</name> <init>= <expr><name>usec</name> <operator>/</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&gt;</operator> <name>TIMET_MAX</name> <operator>-</operator> <name>sec2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"out of Time range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>usec</name> <operator>-=</operator> <name>sec2</name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>+=</operator> <name>sec2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>usec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>sec2</name> <init>= <expr><call><name>NDIV</name><argument_list>(<argument><expr><name>usec</name></expr></argument>,<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&lt;</operator> <name>TIMET_MIN</name> <operator>-</operator> <name>sec2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"out of Time range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>usec</name> <operator>-=</operator> <name>sec2</name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>+=</operator> <name>sec2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timew</name> <operator>=</operator> <call><name>nsec2timew</name><argument_list>(<argument><expr><name>sec</name></expr></argument>, <argument><expr><name>usec</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>time_new_timew</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VALUE</name></type>
<name>rb_time_nano_new</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>time_new_timew</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><call><name>nsec2timew</name><argument_list>(<argument><expr><name>sec</name></expr></argument>, <argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>VALUE</name></type>
<name>rb_time_timespec_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>time</name> <init>= <expr><call><name>time_new_timew</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><call><name>nsec2timew</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">86400</literal> <operator>&lt;</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">86400</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_SET_FIXOFF</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>offset</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>offset</name> <operator>==</operator> <name>INT_MAX</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_SET_UTC</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"utc_offset out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_time_num_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>timev</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>time</name> <init>= <expr><call><name>time_new_timew</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name>timev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name> <init>= <expr><name>off</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>maybe_tzobj_p</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>time_gmtime</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zone_timelocal</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>time</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>off</name> <operator>=</operator> <call><name>utc_offset_arg</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name> <operator>=</operator> <call><name>find_timezone</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>invalid_utc_offset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>time_gmtime</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zone_timelocal</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>invalid_utc_offset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>off</name> <operator>==</operator> <name>UTC_ZONE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>time_gmtime</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>validate_utc_offset</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time_set_utc_offset</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>timespec</name></name></type>
<name>time_timespec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tstr</name> <init>= <expr><ternary><condition><expr><name>interval</name></expr> ?</condition><then> <expr><literal type="string">"time interval"</literal></expr> </then><else>: <expr><literal type="string">"time"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>ary</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NEGATIVE_TIME_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>arg_range_check</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &lt; 0) ? rb_raise(rb_eArgError, "%s must not be negative", tstr) : (void)0)</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>arg_range_check</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((interval &amp;&amp; (v) &lt; 0) ? rb_raise(rb_eArgError, "time interval must not be negative") : (void)0)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>NUM2TIMET</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arg_range_check</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_FLOAT_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>arg_range_check</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>modf</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name><operator>*</operator><literal type="number">1e9</literal><operator>+</operator><literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>.</operator><name>tv_nsec</name></name> <operator>&gt;=</operator> <literal type="number">1000000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_nsec</name></name> <operator>-=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>t</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>d</name><operator>*</operator><literal type="number">1e9</literal><operator>+</operator><literal type="number">0.5</literal><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">1000000000</literal> <operator>-</operator> <name><name>t</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>f</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name><name>t</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"%f out of Time range"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>NUM2TIMET</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arg_range_check</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>id_divmod</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ary</name> <operator>!=</operator> <name>Qundef</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>ary</name> <operator>=</operator> <call><name>rb_check_array_type</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>NUM2TIMET</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arg_range_check</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert %"</literal><name>PRIsVALUE</name><literal type="string">" into %s"</literal></expr></argument>,
<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>t</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>arg_range_check</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type>
<name>time_timeval</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>time_timespec</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>TYPEOF_TIMEVAL_TV_SEC</name><operator>)</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>TYPEOF_TIMEVAL_TV_USEC</name><operator>)</operator><operator>(</operator><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>tv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>timeval</name></name></type>
<name>rb_time_interval</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>time_timeval</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>timeval</name></name></type>
<name>rb_time_timeval</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>timew2timespec</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>TYPEOF_TIMEVAL_TV_SEC</name><operator>)</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>TYPEOF_TIMEVAL_TV_USEC</name><operator>)</operator><operator>(</operator><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>time_timeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>timespec</name></name></type>
<name>rb_time_timespec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>timew2timespec</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>time_timespec</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>timespec</name></name></type>
<name>rb_time_timespec_interval</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>time_timespec</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
<decl><name>TMOPT_IN</name></decl>,
<decl><name>TMOPT_MAX_</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>get_tmopt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name><name>vals</name><index>[<expr><name>TMOPT_MAX_</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name><name>ids</name><index>[<expr><name>TMOPT_MAX_</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CONST_ID</name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>TMOPT_IN</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_get_kwargs</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMOPT_MAX_</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_s_now</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>vals</name><index>[<expr><name>TMOPT_MAX_</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>opts</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>zone</name> <init>= <expr><name>Qundef</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_tmopt</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zone</name> <operator>=</operator> <name><name>vals</name><index>[<expr><name>TMOPT_IN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>rb_class_new_instance</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zone</name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>time_zonelocal</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_scale</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>id_nanosecond</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>unit</name> <operator>==</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>id_nsec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1000000000</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>unit</name> <operator>==</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>id_microsecond</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>unit</name> <operator>==</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>id_usec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1000000</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>unit</name> <operator>==</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>id_millisecond</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1000</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unexpected unit: %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



















































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_s_at</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>time</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>unit</name> <init>= <expr><name>Qundef</name></expr></init></decl>, <decl><type ref="prev"/><name>zone</name> <init>= <expr><name>Qundef</name></expr></init></decl>, <decl><type ref="prev"/><name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>vals</name><index>[<expr><name>TMOPT_MAX_</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew</name></decl>;</decl_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"12:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_tmopt</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <name><name>vals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><ternary><condition><expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><call><name>get_scale</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1000000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>num_exact</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>num_exact</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timew</name> <operator>=</operator> <call><name>wadd</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>wmulquoll</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TIME_SCALE</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>time_new_timew</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tobj2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>time_new_timew</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tobj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_COPY</name><argument_list>(<argument><expr><name>tobj2</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>timew</name> <operator>=</operator> <call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><call><name>num_exact</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>time_new_timew</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>zone</name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>time_zonelocal</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>months</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"jan"</literal></expr>, <expr><literal type="string">"feb"</literal></expr>, <expr><literal type="string">"mar"</literal></expr>, <expr><literal type="string">"apr"</literal></expr>, <expr><literal type="string">"may"</literal></expr>, <expr><literal type="string">"jun"</literal></expr>,
<expr><literal type="string">"jul"</literal></expr>, <expr><literal type="string">"aug"</literal></expr>, <expr><literal type="string">"sep"</literal></expr>, <expr><literal type="string">"oct"</literal></expr>, <expr><literal type="string">"nov"</literal></expr>, <expr><literal type="string">"dec"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>obj2int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_str_to_inum</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>obj2ubits</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>usable_mask</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rv</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>obj2int</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>&amp;</operator> <name>usable_mask</name><operator>)</operator> <operator>!=</operator> <name>rv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"argument out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>obj2vint</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_str_to_inum</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_to_int</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>obj2subsecx</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>subsecx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_str_to_inum</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>subsecx</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>divmodv</name><argument_list>(<argument><expr><call><name>num_exact</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>subsecx</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>obj2ubits</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>usec2subsecx</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_str_to_inum</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>mulquov</name><argument_list>(<argument><expr><call><name>num_exact</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>month_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>obj2ubits</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name> <init>= <expr><call><name>rb_check_string_type</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>
<call><name>STRNCASECMP</name><argument_list>(<argument><expr><name><name>months</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>mon</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>obj2ubits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>obj2ubits</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>mon</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>validate_utc_offset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>utc_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>le</name><argument_list>(<argument><expr><name>utc_offset</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">86400</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ge</name><argument_list>(<argument><expr><name>utc_offset</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"utc_offset out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>utc_offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>validate_zone_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>zone_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>zone_name</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>validate_vtm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>validate_vtm_range</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtm-&gt;mem &lt; b || vtm-&gt;mem &gt; e) ? rb_raise(rb_eArgError, #mem" out of range") : (void)0)</cpp:value></cpp:define>


<expr_stmt><expr><call><name>validate_vtm_range</name><argument_list>(<argument><expr><name>mon</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_vtm_range</name><argument_list>(<argument><expr><name>mday</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_vtm_range</name><argument_list>(<argument><expr><name>hour</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_vtm_range</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name> <operator>==</operator> <literal type="number">24</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">59</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_vtm_range</name><argument_list>(<argument><expr><name>sec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name> <operator>==</operator> <literal type="number">24</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">60</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ge</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"subsecx out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>utc_offset</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>validate_utc_offset</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>utc_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>validate_vtm_range</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>time_arg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>v</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsecx</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>utc_offset</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>yday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>zone</name></name> <operator>=</operator> <name>str_empty</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>isdst</name></name> <operator>=</operator> <ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"17"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>=</operator> <name>VTM_WDAY_INITVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>isdst</name></name> <operator>=</operator> <name>VTM_ISDST_INITVAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name> <operator>=</operator> <call><name>obj2vint</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>=</operator> <call><name>month_arg</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <call><name>obj2ubits</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<switch>switch <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mday2</name> <init>= <expr><ternary><condition><expr><call><name>leap_year_v_p</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">29</literal></expr> </then><else>: <expr><literal type="number">28</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>&gt;</operator> <name>mday2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>-=</operator> <name>mday2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><call><name>obj2ubits</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><call><name>obj2ubits</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><call><name>obj2ubits</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>subsecx</name> <operator>=</operator> <call><name>usec2subsecx</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name> <operator>=</operator> <call><name>obj2subsecx</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>-&gt;</operator><name>subsecx</name></name> <operator>=</operator> <name>subsecx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_vtm</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>subsecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>leap_year_p</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>uy</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>y</name></expr> </then><else>: <expr><operator>-</operator><name>y</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>uy</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>century</name> <init>= <expr><name>uy</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>uy</name> <operator>!=</operator> <name>century</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>century</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>timegm_noleapsecond</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>tm_year</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_yday</name> <init>= <expr><call><name>calc_tm_yday</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>







<return>return <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name><operator>*</operator><literal type="number">60</literal> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name><operator>*</operator><literal type="number">3600</literal> <operator>+</operator>
<operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>tm_yday</name> <operator>+</operator>
<operator>(</operator><name>tm_year</name><operator>-</operator><literal type="number">70</literal><operator>)</operator><operator>*</operator><literal type="number">365</literal> <operator>+</operator>
<call><name>DIV</name><argument_list>(<argument><expr><name>tm_year</name><operator>-</operator><literal type="number">69</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>DIV</name><argument_list>(<argument><expr><name>tm_year</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>DIV</name><argument_list>(<argument><expr><name>tm_year</name><operator>+</operator><literal type="number">299</literal></expr></argument>,<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><literal type="number">86400</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_FIND_TIME_NUMGUESS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_GUESSRANGE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GUESSRANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_REPORT_GUESSRANGE</name></cpp:macro> <cpp:value>fprintf(stderr, "find time guess range: %ld - %ld : %"PRI_TIMET_PREFIX"u\n", guess_lo, guess_hi, (unsigned_time_t)(guess_hi-guess_lo))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_REPORT_GUESSRANGE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_FIND_TIME_NUMGUESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_FIND_TIME_NUMGUESS_INC</name></cpp:macro> <cpp:value>find_time_numguess++,</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>find_time_numguess</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>find_time_numguess_getter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ULL2NUM</name><argument_list>(<argument><expr><name>find_time_numguess</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_FIND_TIME_NUMGUESS_INC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>find_time_t</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>utc_p</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>guess</name></decl>, <decl><type ref="prev"/><name>guess0</name></decl>, <decl><type ref="prev"/><name>guess_lo</name></decl>, <decl><type ref="prev"/><name>guess_hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>, <decl><type ref="prev"/><name>tm0</name></decl>, <decl><type ref="prev"/><name>tm_lo</name></decl>, <decl><type ref="prev"/><name>tm_hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>find_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tptr_tm_yday</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUESS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DEBUG_FIND_TIME_NUMGUESS_INC (utc_p ? gmtime_with_leapsecond((p), &amp;result) : LOCALTIME((p), result)))</cpp:value></cpp:define>

<expr_stmt><expr><name>guess_lo</name> <operator>=</operator> <name>TIMET_MIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>guess_hi</name> <operator>=</operator> <name>TIMET_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>find_dst</name> <operator>=</operator> <literal type="number">0</literal> <operator>&lt;</operator> <name><name>tptr</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>update_tz</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tm0</name> <operator>=</operator> <operator>*</operator><name>tptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tm0</name><operator>.</operator><name>tm_mon</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">11</literal> <operator>&lt;</operator> <name><name>tm0</name><operator>.</operator><name>tm_mon</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">59</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>tm0</name><operator>.</operator><name>tm_mday</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>leap_year_p</name><argument_list>(<argument><expr><literal type="number">1900</literal> <operator>+</operator> <name><name>tm0</name><operator>.</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>leap_year_days_in_month</name></expr> </then><else>:
<expr><name>common_year_days_in_month</name></expr></else></ternary><operator>)</operator><index>[<expr><name><name>tm0</name><operator>.</operator><name>tm_mon</name></name></expr>]</index><operator>)</operator> <operator>&lt;</operator> <name><name>tm0</name><operator>.</operator><name>tm_mday</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">59</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>tm0</name><operator>.</operator><name>tm_hour</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">23</literal> <operator>&lt;</operator> <name><name>tm0</name><operator>.</operator><name>tm_hour</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">59</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>tm0</name><operator>.</operator><name>tm_min</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">59</literal> <operator>&lt;</operator> <name><name>tm0</name><operator>.</operator><name>tm_min</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">59</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">60</literal> <operator>&lt;</operator> <name><name>tm0</name><operator>.</operator><name>tm_sec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm0</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>DEBUG_REPORT_GUESSRANGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>guess0</name> <operator>=</operator> <name>guess</name> <operator>=</operator> <call><name>timegm_noleapsecond</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>GUESS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>tmcmp</name><argument_list>(<argument><expr><name>tptr</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>found</name>;</goto> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>guess_hi</name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt>
<expr_stmt><expr><name>guess</name> <operator>-=</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>guess_lo</name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt>
<expr_stmt><expr><name>guess</name> <operator>+=</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>DEBUG_REPORT_GUESSRANGE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>guess_lo</name> <operator>&lt;</operator> <name>guess</name> <operator>&amp;&amp;</operator> <name>guess</name> <operator>&lt;</operator> <name>guess_hi</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tm</name> <operator>=</operator> <call><name>GUESS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guess</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>tmcmp</name><argument_list>(<argument><expr><name>tptr</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>found</name>;</goto> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>guess_hi</name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>guess_lo</name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>DEBUG_REPORT_GUESSRANGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>GUESS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guess_lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>tmcmp</name><argument_list>(<argument><expr><name>tptr</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>out_of_range</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>guess</name> <operator>=</operator> <name>guess_lo</name></expr>;</expr_stmt> <goto>goto <name>found</name>;</goto> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tm_lo</name> <operator>=</operator> <operator>*</operator><name>tm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>GUESS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guess_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>tmcmp</name><argument_list>(<argument><expr><name>tptr</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>out_of_range</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>guess</name> <operator>=</operator> <name>guess_hi</name></expr>;</expr_stmt> <goto>goto <name>found</name>;</goto> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tm_hi</name> <operator>=</operator> <operator>*</operator><name>tm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DEBUG_REPORT_GUESSRANGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>guess_lo</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>guess_hi</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<label><name>binsearch</name>:</label>
<expr_stmt><expr><name>guess</name> <operator>=</operator> <name>guess_lo</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>guess_hi</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>&lt;=</operator> <name>guess_lo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>guess</name> <operator>=</operator> <name>guess_lo</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>guess</name> <operator>&gt;=</operator> <name>guess_hi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>guess</name> <operator>=</operator> <name>guess_hi</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>guess0_hi</name> <init>= <expr><call><name>timegm_noleapsecond</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm_hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>guess</name> <operator>=</operator> <name>guess_hi</name> <operator>-</operator> <operator>(</operator><name>guess0_hi</name> <operator>-</operator> <name>guess0</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>==</operator> <name>guess_hi</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>guess</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>guess0_lo</name> <init>= <expr><call><name>timegm_noleapsecond</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm_lo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>guess</name> <operator>=</operator> <name>guess_lo</name> <operator>+</operator> <operator>(</operator><name>guess0</name> <operator>-</operator> <name>guess0_lo</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>==</operator> <name>guess_lo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>guess</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>&lt;=</operator> <name>guess_lo</name> <operator>||</operator> <name>guess_hi</name> <operator>&lt;=</operator> <name>guess</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GUESSRANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>&lt;=</operator> <name>guess_lo</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"too small guess: %ld &lt;= %ld\n"</literal></expr></argument>, <argument><expr><name>guess</name></expr></argument>, <argument><expr><name>guess_lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>guess_hi</name> <operator>&lt;=</operator> <name>guess</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"too big guess: %ld &lt;= %ld\n"</literal></expr></argument>, <argument><expr><name>guess_hi</name></expr></argument>, <argument><expr><name>guess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>binsearch</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>GUESS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>tmcmp</name><argument_list>(<argument><expr><name>tptr</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>guess_hi</name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm_hi</name> <operator>=</operator> <operator>*</operator><name>tm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DEBUG_REPORT_GUESSRANGE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>guess_lo</name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm_lo</name> <operator>=</operator> <operator>*</operator><name>tm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DEBUG_REPORT_GUESSRANGE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<label><name>found</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utc_p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>guess2</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>find_dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>guess2</name> <operator>=</operator> <name>guess</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>LOCALTIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guess2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tptr</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>!=</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">24</literal> <operator>||</operator>
<name><name>tptr</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>!=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>||</operator>
<name><name>tptr</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>!=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>guess2</name> <operator>-=</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>-</operator> <name><name>tptr</name><operator>-&gt;</operator><name>tm_hour</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator>
<operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>-</operator> <name><name>tptr</name><operator>-&gt;</operator><name>tm_min</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator>
<operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>-</operator> <name><name>tptr</name><operator>-&gt;</operator><name>tm_sec</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tptr</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>!=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>guess2</name> <operator>+=</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>!=</operator> <name>guess2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>LOCALTIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guess2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>&amp;&amp;</operator> <call><name>tmcmp</name><argument_list>(<argument><expr><name>tptr</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>&lt;</operator> <name>guess2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <name>guess2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>guess2</name> <operator>=</operator> <name>guess</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>LOCALTIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guess2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tptr</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">24</literal> <operator>!=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>||</operator>
<name><name>tptr</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>!=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>||</operator>
<name><name>tptr</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>!=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>guess2</name> <operator>-=</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>-</operator> <name><name>tptr</name><operator>-&gt;</operator><name>tm_hour</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator>
<operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>-</operator> <name><name>tptr</name><operator>-&gt;</operator><name>tm_min</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator>
<operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>-</operator> <name><name>tptr</name><operator>-&gt;</operator><name>tm_sec</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tptr</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>!=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>guess2</name> <operator>-=</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>!=</operator> <name>guess2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>LOCALTIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guess2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>&amp;&amp;</operator> <call><name>tmcmp</name><argument_list>(<argument><expr><name>tptr</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>&lt;</operator> <name>guess2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <name>guess2</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>









<expr_stmt><expr><name>tptr_tm_yday</name> <operator>=</operator> <call><name>calc_tm_yday</name><argument_list>(<argument><expr><name><name>tptr</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tptr</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tptr</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <name>guess_lo</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name><name>tptr</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <name><name>tm_lo</name><operator>.</operator><name>tm_year</name></name><operator>)</operator> <operator>*</operator> <literal type="number">365</literal> <operator>+</operator>
<call><name>DIV</name><argument_list>(<argument><expr><operator>(</operator><name><name>tptr</name><operator>-&gt;</operator><name>tm_year</name></name><operator>-</operator><literal type="number">69</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>DIV</name><argument_list>(<argument><expr><operator>(</operator><name><name>tptr</name><operator>-&gt;</operator><name>tm_year</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>DIV</name><argument_list>(<argument><expr><operator>(</operator><name><name>tptr</name><operator>-&gt;</operator><name>tm_year</name></name><operator>+</operator><literal type="number">299</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>DIV</name><argument_list>(<argument><expr><operator>(</operator><name><name>tm_lo</name><operator>.</operator><name>tm_year</name></name><operator>-</operator><literal type="number">69</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>DIV</name><argument_list>(<argument><expr><operator>(</operator><name><name>tm_lo</name><operator>.</operator><name>tm_year</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>DIV</name><argument_list>(<argument><expr><operator>(</operator><name><name>tm_lo</name><operator>.</operator><name>tm_year</name></name><operator>+</operator><literal type="number">299</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<name>tptr_tm_yday</name> <operator>-</operator>
<name><name>tm_lo</name><operator>.</operator><name>tm_yday</name></name><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal> <operator>+</operator>
<operator>(</operator><name><name>tptr</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>-</operator> <name><name>tm_lo</name><operator>.</operator><name>tm_hour</name></name><operator>)</operator> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator>
<operator>(</operator><name><name>tptr</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>-</operator> <name><name>tm_lo</name><operator>.</operator><name>tm_min</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator>
<operator>(</operator><name><name>tptr</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>tm_lo</name><operator>.</operator><name>tm_sec</name></name> <operator>==</operator> <literal type="number">60</literal></expr> ?</condition><then> <expr><literal type="number">59</literal></expr> </then><else>: <expr><name><name>tm_lo</name><operator>.</operator><name>tm_sec</name></name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

<label><name>out_of_range</name>:</label>
<return>return <expr><literal type="string">"time out of range"</literal></expr>;</return>

<label><name>error</name>:</label>
<return>return <expr><literal type="string">"gmtime/localtime error"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vtmcmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ne</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>lt</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>mon</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>mon</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>mon</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>mon</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>mday</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>mday</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>mday</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>mday</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>hour</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>hour</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>hour</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>hour</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>min</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>min</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>min</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>sec</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>sec</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>sec</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>ne</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>lt</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>subsecx</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tmcmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_year</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_year</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_mon</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_mday</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_hour</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_min</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_min</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_sec</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_s_mkutc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time_arg</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>time_gmtime</name><argument_list>(<argument><expr><call><name>time_new_timew</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><call><name>timegmw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_s_mktime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time_arg</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>time_localtime</name><argument_list>(<argument><expr><call><name>time_new_timew</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><call><name>timelocalw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_to_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>w2v</name><argument_list>(<argument><expr><call><name>wdiv</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_to_f</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_Float</name><argument_list>(<argument><expr><call><name>rb_time_unmagnify_to_float</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_to_r</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_time_unmagnify_to_rational</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_Rational1</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_usec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>wmod</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><call><name>WINT2WV</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmuldivmod</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_to_int</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_nsec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_to_int</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><call><name>wmulquoll</name><argument_list>(<argument><expr><call><name>wmod</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><call><name>WINT2WV</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000000000</literal></expr></argument>, <argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_subsec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>quov</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><call><name>wmod</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_cmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tobj2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time1</name></expr></argument>, <argument><expr><name>tobj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsTimeval</name><argument_list>(<argument><expr><name>time2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time2</name></expr></argument>, <argument><expr><name>tobj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>wcmp</name><argument_list>(<argument><expr><name><name>tobj1</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><name><name>tobj2</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_invcmp</name><argument_list>(<argument><expr><name>time1</name></expr></argument>, <argument><expr><name>time2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_eql</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tobj2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time1</name></expr></argument>, <argument><expr><name>tobj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsTimeval</name><argument_list>(<argument><expr><name>time2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time2</name></expr></argument>, <argument><expr><name>tobj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_equal</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name><name>tobj1</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name><name>tobj2</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_utc_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_hash</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_hash</name><argument_list>(<argument><expr><call><name>w2v</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_init_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tcopy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OBJ_INIT_COPY</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>copy</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetNewTimeval</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>tcopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name>tcopy</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr>struct <name>time_object</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>copy</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_dup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dup</name> <init>= <expr><call><name>time_s_alloc</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>time_init_copy</name><argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_localtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TZMODE_LOCALTIME_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>time</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>time_modify</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>zone</name> <operator>=</operator> <name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>maybe_tzobj_p</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>zone_localtime</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>localtimew</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"localtime error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name> <operator>=</operator> <name>vtm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_SET_LOCALTIME</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_zonelocal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name> <init>= <expr><name>off</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zone_localtime</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>time</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>off</name> <operator>=</operator> <call><name>utc_offset_arg</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name> <operator>=</operator> <call><name>find_timezone</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>invalid_utc_offset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zone_localtime</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>invalid_utc_offset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>off</name> <operator>==</operator> <name>UTC_ZONE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>time_gmtime</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>validate_utc_offset</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_set_utc_offset</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>time_fixoff</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_localtime_m</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>off</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>time_zonelocal</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>time_localtime</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_gmtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>time</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>time_modify</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>zone</name></name> <operator>=</operator> <name>str_utc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GMTIMEW</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name> <operator>=</operator> <name>vtm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_SET_UTC</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_fixoff</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>zone</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TZMODE_FIXOFF_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>time</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>time_modify</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TZMODE_FIXOFF_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>utc_offset</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GMTIMEW</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zone</name> <operator>=</operator> <name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name> <operator>=</operator> <name>vtm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vtm_add_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_SET_FIXOFF</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_getlocaltime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>off</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name> <init>= <expr><name>off</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>maybe_tzobj_p</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>t</name> <init>= <expr><call><name>time_dup</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zone_localtime</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>t</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>off</name> <operator>=</operator> <call><name>utc_offset_arg</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name> <operator>=</operator> <call><name>find_timezone</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>invalid_utc_offset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>time_dup</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zone_localtime</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>invalid_utc_offset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>off</name> <operator>==</operator> <name>UTC_ZONE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>time_gmtime</name><argument_list>(<argument><expr><call><name>time_dup</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>validate_utc_offset</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>time_dup</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time_set_utc_offset</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>time_fixoff</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>time_localtime</name><argument_list>(<argument><expr><call><name>time_dup</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_getgmtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>time_gmtime</name><argument_list>(<argument><expr><call><name>time_dup</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_get_tm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>time_gmtime</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TZMODE_FIXOFF_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>time_fixoff</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>time_localtime</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>strftime_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strftimev</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>time</name></type></parameter>, <parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strftime_cstr((fmt), rb_strlen_lit(fmt), (time), (enc))</cpp:value></cpp:define>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_asctime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%a %b %e %T %Y"</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_to_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S UTC"</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S %z"</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>subsec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subsec</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><call><name>wmod</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>TIME_SCALE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_enc_sprintf</name><argument_list>(<argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIsVALUE</name><literal type="string">".%09ld"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>len</name><operator>=</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subsec</name> <operator>=</operator> <call><name>quov</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>rb_obj_as_string</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" UTC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">" %z"</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_add0</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>torig</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>result_tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>num_exact</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>time_new_timew</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><call><name>wsub</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>time_new_timew</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><call><name>wadd</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>v2w</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result_tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_COPY</name><argument_list>(<argument><expr><name>result_tobj</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>torig</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>time_add0</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>torig</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_plus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time1</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsTimeval</name><argument_list>(<argument><expr><name>time2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"time + time?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>time_add</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>time1</name></expr></argument>, <argument><expr><name>time2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_minus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time1</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsTimeval</name><argument_list>(<argument><expr><name>time2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time2</name></expr></argument>, <argument><expr><name>tobj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_Float</name><argument_list>(<argument><expr><call><name>rb_time_unmagnify_to_float</name><argument_list>(<argument><expr><call><name>wsub</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><name><name>tobj2</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>time_add</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>time1</name></expr></argument>, <argument><expr><name>time2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><name>VALUE</name></type>
<name>rb_time_succ</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"Time#succ is obsolete; use time + 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>time_new_timew</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><call><name>wadd</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_COPY</name><argument_list>(<argument><expr><name>tobj2</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TZMODE_LOCALTIME_P</name><argument_list>(<argument><expr><name>tobj2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>maybe_tzobj_p</name><argument_list>(<argument><expr><name><name>tobj2</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zone_localtime</name><argument_list>(<argument><expr><name><name>tobj2</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>time_succ</name></cpp:macro> <cpp:value>rb_time_succ</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ndigits_denominator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ndigits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>nd</name> <init>= <expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>ndigits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative ndigits given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_rational_new</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_int_positive_pow</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>nd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_round</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ndigits</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>ndigits</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>ndigits_denominator</name><argument_list>(<argument><expr><name>ndigits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>modv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>quov</name><argument_list>(<argument><expr><name>den</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>time_add</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>time_add</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><call><name>subv</name><argument_list>(<argument><expr><name>den</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_floor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ndigits</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>ndigits</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>ndigits_denominator</name><argument_list>(<argument><expr><name>ndigits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>modv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>time_add</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_ceil</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ndigits</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>ndigits</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>ndigits_denominator</name><argument_list>(<argument><expr><name>ndigits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>modv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>time_add</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><call><name>subv</name><argument_list>(<argument><expr><name>den</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_sec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_min</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_hour</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>hour</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_mday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>mday</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_mon</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>mon</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_year</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>year</name></name></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_wday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>wday</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wday_p</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{struct time_object *tobj;GetTimeval(time, tobj);MAKE_TM(time, tobj);return (tobj-&gt;vtm.wday == (n)) ? Qtrue : Qfalse;}</cpp:value></cpp:define>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_sunday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wday_p</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_monday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wday_p</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_tuesday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wday_p</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_wednesday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wday_p</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_thursday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wday_p</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_friday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wday_p</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_saturday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wday_p</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_yday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>yday</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_isdst</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>isdst</name></name> <operator>==</operator> <name>VTM_ISDST_INITVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"isdst is not set yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>isdst</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_zone</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_usascii_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>zone</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>VALUE</name></type>
<name>rb_time_utc_offset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>utc_offset</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_to_a</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>min</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>hour</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>mday</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>mon</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>year</name></name></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>wday</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>yday</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>isdst</name></name></expr>?</condition><then><expr><name>Qtrue</name></expr></then><else>:<expr><name>Qfalse</name></expr></else></ternary></expr></argument>,
<argument><expr><call><name>time_zone</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_strftime_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>format_len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>, <parameter><decl><type><name>wideval_t</name></type> <name>timew</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>timev</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>timew2timespec_exact</name><argument_list>(<argument><expr><name>timew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timev</name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><name>timew</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>timev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_strftime_timespec</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>format_len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>vtm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>gmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_strftime</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>format_len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>vtm</name></expr></argument>, <argument><expr><name>timev</name></expr></argument>, <argument><expr><name>gmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>strftime_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_strftime_alloc</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name></expr></argument>, <argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid format: %s"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>




























































































































































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_strftime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_TM</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_enc_str_asciicompat_p</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"format should have ASCII compatible encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_str_tmp_frozen_acquire</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_enc_get</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"strftime called with empty format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_enc_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_strftime_alloc</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name></expr></argument>, <argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>,
<argument><expr><call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_str_tmp_frozen_release</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid format: %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ruby_marshal_write_long</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <block>{<decl><name>base_dump_size</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>}</block>;</enum>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_mdump</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>base_dump_size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>year</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>usec</name></decl>, <decl><type ref="prev"/><name>nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsecx</name></decl>, <decl><type ref="prev"/><name>nano</name></decl>, <decl><type ref="prev"/><name>subnano</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>zone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>year_extend</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_year</name> <init>= <expr><literal type="number">1900</literal><operator>+</operator><literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gmtimew</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>year</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>year</name> <operator>&gt;</operator> <name>max_year</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>year_extend</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>year</name> <operator>-</operator> <name>max_year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>year</name> <operator>=</operator> <name>max_year</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>year</name> <operator>&lt;</operator> <literal type="number">1900</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>year_extend</name> <operator>=</operator> <call><name>LONG2NUM</name><argument_list>(<argument><expr><literal type="number">1900</literal> <operator>-</operator> <name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>year</name> <operator>=</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_int_positive_p</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>year_extend</name> <operator>=</operator> <call><name>rb_int_minus</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>max_year</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>year</name> <operator>=</operator> <name>max_year</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>year_extend</name> <operator>=</operator> <call><name>rb_int_minus</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1900</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vtm</name><operator>.</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>year</name> <operator>=</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>subsecx</name> <operator>=</operator> <name><name>vtm</name><operator>.</operator><name>subsecx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nano</name> <operator>=</operator> <call><name>mulquov</name><argument_list>(<argument><expr><name>subsecx</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>divmodv</name><argument_list>(<argument><expr><name>nano</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subnano</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usec</name> <operator>=</operator> <name>nsec</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <name>nsec</name> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nano</name> <operator>=</operator> <call><name>addv</name><argument_list>(<argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subnano</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0x1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal> <operator>|</operator> 
<call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">30</literal> <operator>|</operator> 
<operator>(</operator><name>year</name><operator>-</operator><literal type="number">1900</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal> <operator>|</operator> 
<operator>(</operator><name><name>vtm</name><operator>.</operator><name>mon</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal> <operator>|</operator> 
<name><name>vtm</name><operator>.</operator><name>mday</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator> 
<name><name>vtm</name><operator>.</operator><name>hour</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>vtm</name><operator>.</operator><name>min</name></name> <operator>&lt;&lt;</operator> <literal type="number">26</literal> <operator>|</operator> 
<name><name>vtm</name><operator>.</operator><name>sec</name></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal> <operator>|</operator> 
<name>usec</name></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>RSHIFT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSHIFT</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>year_extend</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<decl_stmt><decl><type><name>size_t</name></type> <name>ysize</name> <init>= <expr><call><name>rb_absint_size</name><argument_list>(<argument><expr><name>year_extend</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type>const <name>buf_year_extend</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>base_dump_size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ysize</name> <operator>&gt;</operator> <name>LONG_MAX</name> <operator>||</operator>
<operator>(</operator><name>i</name> <operator>=</operator> <call><name>ruby_marshal_write_long</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>ysize</name></expr></argument>, <argument><expr><name>buf_year_extend</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"year too %s to marshal: %"</literal><name>PRIsVALUE</name><literal type="string">" UTC"</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>year</name> <operator>==</operator> <literal type="number">1900</literal></expr> ?</condition><then> <expr><literal type="string">"small"</literal></expr> </then><else>: <expr><literal type="string">"big"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>vtm</name><operator>.</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>base_dump_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>ysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_integer_pack</name><argument_list>(<argument><expr><name>year_extend</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_PACK_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>base_dump_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_copy_generic_ivar</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_equal</name><argument_list>(<argument><expr><name>nano</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>nano</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>id_nano_num</name></expr></argument>, <argument><expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>nano</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>id_nano_den</name></expr></argument>, <argument><expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>nano</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>id_nano_num</name></expr></argument>, <argument><expr><name>nano</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>id_nano_den</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec</name></expr>)</condition> <block>{<block_content> 







<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nsec</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nsec</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>nsec</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nsec</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nsec</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>id_submicro</name></expr></argument>, <argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>off</name> <init>= <expr><call><name>rb_time_utc_offset</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>div</name></decl>, <decl><type ref="prev"/><name>mod</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>divmodv</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>div</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_equal</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>rb_Integer</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>id_offset</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>maybe_tzobj_p</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>id_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>id_zone</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_dump</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>time_mdump</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>mload_findzone</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argp</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>time</name> <init>= <expr><name><name>argp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>zone</name> <init>= <expr><name><name>argp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>find_timezone</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>mload_zone</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>rb_rescue</name><argument_list>(<argument><expr><name>mload_findzone</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_fstring</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_fstring</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>long</name></type> <name>ruby_marshal_read_long</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_mload</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>gmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>submicro</name></decl>, <decl><type ref="prev"/><name>nano_num</name></decl>, <decl><type ref="prev"/><name>nano_den</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>zone</name></decl>, <decl><type ref="prev"/><name>year</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>timew</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time_modify</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_attr</name><parameter_list>(<parameter><type><name>attr</name></type></parameter>, <parameter><type><name>iffound</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>attr = rb_attr_delete(str, id_##attr); if (!NIL_P(attr)) { iffound; }</cpp:value></cpp:define>





<macro><name>get_attr</name><argument_list>(<argument>nano_num</argument>, <argument>{}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>get_attr</name><argument_list>(<argument>nano_den</argument>, <argument>{}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>get_attr</name><argument_list>(<argument>submicro</argument>, <argument>{}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>get_attr</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>offset</name> <operator>=</operator> <call><name>rb_rescue</name><argument_list>(<argument><expr><name>validate_utc_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_attr</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><operator>(</operator><name>zone</name> <operator>=</operator> <call><name>rb_rescue</name><argument_list>(<argument><expr><name>validate_zone_name</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>get_attr</name><argument_list>(<argument>year</argument>, <argument>{}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>get_attr</name></cpp:undef>

<expr_stmt><expr><call><name>rb_copy_generic_ivar</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>base_dump_size</name></expr>)</condition> <block>{<block_content>
<label><name>invalid_format</name>:</label>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"marshaled time format differ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">8</literal><operator>*</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>usec</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <name>usec</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>timew</name> <operator>=</operator> <call><name>wadd</name><argument_list>(<argument><expr><call><name>rb_time_magnify</name><argument_list>(<argument><expr><call><name>TIMET2WV</name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>wmulquoll</name><argument_list>(<argument><expr><call><name>WINT2FIXWV</name><argument_list>(<argument><expr><name>usec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TIME_SCALE</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gmt</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>year</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>base_dump_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>base_dump_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ysize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>year_extend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ybuf</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+=</operator> <name>base_dump_size</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ysize</name> <operator>=</operator> <call><name>ruby_marshal_read_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ybuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ybuf</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ysize</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ysize</name></expr></argument> &gt;</argument_list></name> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid_format</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>year_extend</name> <operator>=</operator> <call><name>rb_integer_unpack</name><argument_list>(<argument><expr><name>ybuf</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_PACK_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>year</name> <operator>==</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1900</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>year</name> <operator>=</operator> <call><name>rb_int_minus</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>year_extend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>year</name> <operator>=</operator> <call><name>rb_int_plus</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>year_extend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>year</name></name> <operator>=</operator> <name>year</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>mon</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>mday</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>hour</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>p</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>min</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>utc_offset</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>yday</name></name> <operator>=</operator> <name><name>vtm</name><operator>.</operator><name>wday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>zone</name></name> <operator>=</operator> <name>str_empty</name></expr>;</expr_stmt>

<expr_stmt><expr><name>usec</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>s</name> <operator>&amp;</operator> <literal type="number">0xfffff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <name>usec</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>subsecx</name></name> <operator>=</operator> <call><name>mulquov</name><argument_list>(<argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nano_num</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nano</name> <init>= <expr><call><name>quov</name><argument_list>(<argument><expr><call><name>num_exact</name><argument_list>(<argument><expr><name>nano_num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>num_exact</name><argument_list>(<argument><expr><name>nano_den</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>subsecx</name></name> <operator>=</operator> <call><name>addv</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>subsecx</name></name></expr></argument>, <argument><expr><call><name>mulquov</name><argument_list>(<argument><expr><name>nano</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>submicro</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>digit</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>submicro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>submicro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">10</literal> <operator>&lt;=</operator> <operator>(</operator><name>digit</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end_submicro</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nsec</name> <operator>+=</operator> <name>digit</name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">10</literal> <operator>&lt;=</operator> <operator>(</operator><name>digit</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end_submicro</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nsec</name> <operator>+=</operator> <name>digit</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">10</literal> <operator>&lt;=</operator> <operator>(</operator><name>digit</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end_submicro</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nsec</name> <operator>+=</operator> <name>digit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vtm</name><operator>.</operator><name>subsecx</name></name> <operator>=</operator> <call><name>addv</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>subsecx</name></name></expr></argument>, <argument><expr><call><name>mulquov</name><argument_list>(<argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>TIME_SCALE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end_submicro</name>:</label> <empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>timew</name> <operator>=</operator> <call><name>timegmw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GetNewTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tzmode</name></name> <operator>=</operator> <name>TIME_TZMODE_LOCALTIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <name>timew</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TZMODE_SET_UTC</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>time_set_utc_offset</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time_fixoff</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <call><name>mload_zone</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name><operator>.</operator><name>zone</name></name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zone_localtime</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_load</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>time</name> <init>= <expr><call><name>time_s_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time_mload</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tm_from_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TM_IS_TIME</name></expr></cpp:if>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>ttm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>time_s_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ttm</name> <operator>=</operator> <call><name>DATA_PTR</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>&amp;</operator><name>vtm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GMTIMEW</name><argument_list>(<argument><expr><name><name>ttm</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>subsecx</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zone</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ttm</name><operator>-&gt;</operator><name>vtm</name></name> <operator>=</operator> <operator>*</operator><name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ttm</name><operator>-&gt;</operator><name>tm_got</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TZMODE_SET_UTC</name><argument_list>(<argument><expr><name>ttm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tm</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTimeval</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tobj</name><operator>-&gt;</operator><name>tm_got</name></name> <operator>&amp;&amp;</operator> <call><name>TZMODE_UTC_P</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>&amp;</operator><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GMTIMEW</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>, <argument><expr><name>v</name> <operator>=</operator> <operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>year</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>mon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>hour</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>isdst</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>w2v</name><argument_list>(<argument><expr><call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_class_new_instance</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tm_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vtm</name></name></type> <name>vtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wideval_t</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>time_arg</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>timegmw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TM_IS_TIME</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>tzmode</name></name> <operator>=</operator> <name>TIME_TZMODE_UTC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>timew</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tobj</name><operator>-&gt;</operator><name>vtm</name></name> <operator>=</operator> <name>vtm</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>min</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>hour</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>mday</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>vtm</name><operator>.</operator><name>mon</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name><name>vtm</name><operator>.</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRUCT_SET</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><call><name>w2v</name><argument_list>(<argument><expr><call><name>rb_time_unmagnify</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<return>return <expr><name>tm</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tm_to_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TM_IS_TIME</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>torig</name> <init>= <expr><call><name>get_timeval</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dup</name> <init>= <expr><call><name>time_s_alloc</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>time_object</name></name> <modifier>*</modifier></type><name>tobj</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>tobj</name> <operator>=</operator> <operator>*</operator><name>torig</name></expr>;</expr_stmt>
<return>return <expr><name>dup</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>t</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>RSTRUCT_CONST_PTR</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><call><name>numberof</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>time_s_mkutc</name><argument_list>(<argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>rb_cTime</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TM_IS_TIME</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tm_zero</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tm_subsec</name></cpp:macro> <cpp:value>tm_zero</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tm_utc_offset</name></cpp:macro> <cpp:value>tm_zero</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tm_isdst</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tm_to_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>RSTRUCT_CONST_PTR</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"%.4"</literal><name>PRIsVALUE</name><literal type="string">"-%.2"</literal><name>PRIsVALUE</name><literal type="string">"-%.2"</literal><name>PRIsVALUE</name><literal type="string">" "</literal>
<literal type="string">"%.2"</literal><name>PRIsVALUE</name><literal type="string">":%.2"</literal><name>PRIsVALUE</name><literal type="string">":%.2"</literal><name>PRIsVALUE</name><literal type="string">" "</literal>
<literal type="string">"UTC"</literal></expr></argument>,
<argument><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tm_plus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tm</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>time_add0</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_timeval</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tm_minus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tm</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>time_add0</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_timeval</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>Init_tm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>outer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tm</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TM_IS_TIME</name></expr></cpp:if>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>outer</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>time_s_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name>time_sec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><name>time_min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><name>time_hour</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><name>time_mday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"day"</literal></expr></argument>, <argument><expr><name>time_mday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><name>time_mon</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"month"</literal></expr></argument>, <argument><expr><name>time_mon</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>time_year</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"isdst"</literal></expr></argument>, <argument><expr><name>time_isdst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"dst?"</literal></expr></argument>, <argument><expr><name>time_isdst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name>time_zone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"gmtoff"</literal></expr></argument>, <argument><expr><name>rb_time_utc_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"gmt_offset"</literal></expr></argument>, <argument><expr><name>rb_time_utc_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"utc_offset"</literal></expr></argument>, <argument><expr><name>rb_time_utc_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"utc?"</literal></expr></argument>, <argument><expr><name>time_utc_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"gmt?"</literal></expr></argument>, <argument><expr><name>time_utc_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>time_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>time_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"to_a"</literal></expr></argument>, <argument><expr><name>time_to_a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"tv_sec"</literal></expr></argument>, <argument><expr><name>time_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"tv_usec"</literal></expr></argument>, <argument><expr><name>time_usec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"usec"</literal></expr></argument>, <argument><expr><name>time_usec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"tv_nsec"</literal></expr></argument>, <argument><expr><name>time_nsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"nsec"</literal></expr></argument>, <argument><expr><name>time_nsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"subsec"</literal></expr></argument>, <argument><expr><name>time_subsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"to_i"</literal></expr></argument>, <argument><expr><name>time_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"to_f"</literal></expr></argument>, <argument><expr><name>time_to_f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"to_r"</literal></expr></argument>, <argument><expr><name>time_to_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>tm_plus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>tm_minus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>rb_struct_define_under</name><argument_list>(<argument><expr><name>outer</name></expr></argument>, <argument><expr><literal type="string">"tm"</literal></expr></argument>,
<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><literal type="string">"hour"</literal></expr></argument>,
<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>,
<argument><expr><literal type="string">"to_i"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"subsec"</literal></expr></argument>, <argument><expr><name>tm_subsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"utc_offset"</literal></expr></argument>, <argument><expr><name>tm_utc_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>tm_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>tm_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"isdst"</literal></expr></argument>, <argument><expr><name>tm_isdst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"dst?"</literal></expr></argument>, <argument><expr><name>tm_isdst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>tm_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"utc"</literal></expr></argument>, <argument><expr><name>tm_to_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_alias</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"to_time"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"utc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="string">"from_time"</literal></expr></argument>, <argument><expr><name>tm_from_time</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>tm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_time_zone_abbreviation</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>zone</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tm</name></decl>, <decl><type ref="prev"/><name>abbr</name></decl>, <decl><type ref="prev"/><name><name>strftime_args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>abbr</name> <operator>=</operator> <call><name>rb_check_string_type</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>abbr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>abbr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>tm_from_time</name><argument_list>(<argument><expr><name>rb_cTimeTM</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>abbr</name> <operator>=</operator> <call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"abbr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abbr</name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_TZINFO_ZONE_ABBREVIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>abbr</name> <operator>=</operator> <call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"period_for_utc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abbr</name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>abbr</name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name>abbr</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"abbreviation"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>strftime_args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_fstring_lit</name><argument_list>(<argument><expr><literal type="string">"%Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strftime_args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>abbr</name> <operator>=</operator> <call><name>rb_check_funcall</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"strftime"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>strftime_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abbr</name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>abbr</name> <operator>=</operator> <call><name>rb_check_funcall_default</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>idName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>found</name>:</label>
<return>return <expr><call><name>rb_obj_as_string</name><argument_list>(<argument><expr><name>abbr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



































































































































<function><type><name>void</name></type>
<name>Init_Time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_intern</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_intern_const(str)</cpp:value></cpp:define>

<expr_stmt><expr><name>id_submicro</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"submicro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_nano_num</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"nano_num"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_nano_den</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"nano_den"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_offset</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_zone</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_nanosecond</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"nanosecond"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_microsecond</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"microsecond"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_millisecond</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"millisecond"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_nsec</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"nsec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_usec</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"usec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_local_to_utc</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"local_to_utc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_utc_to_local</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"utc_to_local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_year</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_mon</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_mday</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_hour</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_min</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_sec</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_isdst</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"isdst"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_find_timezone</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"find_timezone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str_utc</name> <operator>=</operator> <call><name>rb_fstring_lit</name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>str_utc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str_empty</name> <operator>=</operator> <call><name>rb_fstring_lit</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>str_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_cTime</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Time"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_include_module</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><name>rb_mComparable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><name>time_s_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"now"</literal></expr></argument>, <argument><expr><name>time_s_now</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"at"</literal></expr></argument>, <argument><expr><name>time_s_at</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"utc"</literal></expr></argument>, <argument><expr><name>time_s_mkutc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"gm"</literal></expr></argument>, <argument><expr><name>time_s_mkutc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>, <argument><expr><name>time_s_mktime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"mktime"</literal></expr></argument>, <argument><expr><name>time_s_mktime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"to_i"</literal></expr></argument>, <argument><expr><name>time_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"to_f"</literal></expr></argument>, <argument><expr><name>time_to_f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"to_r"</literal></expr></argument>, <argument><expr><name>time_to_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"&lt;=&gt;"</literal></expr></argument>, <argument><expr><name>time_cmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"eql?"</literal></expr></argument>, <argument><expr><name>time_eql</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><name>time_hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>time_init</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>time_init_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"localtime"</literal></expr></argument>, <argument><expr><name>time_localtime_m</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"gmtime"</literal></expr></argument>, <argument><expr><name>time_gmtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"utc"</literal></expr></argument>, <argument><expr><name>time_gmtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"getlocal"</literal></expr></argument>, <argument><expr><name>time_getlocaltime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"getgm"</literal></expr></argument>, <argument><expr><name>time_getgmtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"getutc"</literal></expr></argument>, <argument><expr><name>time_getgmtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"ctime"</literal></expr></argument>, <argument><expr><name>time_asctime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"asctime"</literal></expr></argument>, <argument><expr><name>time_asctime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>time_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>time_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"to_a"</literal></expr></argument>, <argument><expr><name>time_to_a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>time_plus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>time_minus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"succ"</literal></expr></argument>, <argument><expr><name>time_succ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"round"</literal></expr></argument>, <argument><expr><name>time_round</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"floor"</literal></expr></argument>, <argument><expr><name>time_floor</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"ceil"</literal></expr></argument>, <argument><expr><name>time_ceil</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name>time_sec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><name>time_min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><name>time_hour</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><name>time_mday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"day"</literal></expr></argument>, <argument><expr><name>time_mday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><name>time_mon</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"month"</literal></expr></argument>, <argument><expr><name>time_mon</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>time_year</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"wday"</literal></expr></argument>, <argument><expr><name>time_wday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><name>time_yday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"isdst"</literal></expr></argument>, <argument><expr><name>time_isdst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"dst?"</literal></expr></argument>, <argument><expr><name>time_isdst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name>time_zone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"gmtoff"</literal></expr></argument>, <argument><expr><name>rb_time_utc_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"gmt_offset"</literal></expr></argument>, <argument><expr><name>rb_time_utc_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"utc_offset"</literal></expr></argument>, <argument><expr><name>rb_time_utc_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"utc?"</literal></expr></argument>, <argument><expr><name>time_utc_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"gmt?"</literal></expr></argument>, <argument><expr><name>time_utc_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"sunday?"</literal></expr></argument>, <argument><expr><name>time_sunday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"monday?"</literal></expr></argument>, <argument><expr><name>time_monday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"tuesday?"</literal></expr></argument>, <argument><expr><name>time_tuesday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"wednesday?"</literal></expr></argument>, <argument><expr><name>time_wednesday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"thursday?"</literal></expr></argument>, <argument><expr><name>time_thursday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"friday?"</literal></expr></argument>, <argument><expr><name>time_friday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"saturday?"</literal></expr></argument>, <argument><expr><name>time_saturday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"tv_sec"</literal></expr></argument>, <argument><expr><name>time_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"tv_usec"</literal></expr></argument>, <argument><expr><name>time_usec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"usec"</literal></expr></argument>, <argument><expr><name>time_usec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"tv_nsec"</literal></expr></argument>, <argument><expr><name>time_nsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"nsec"</literal></expr></argument>, <argument><expr><name>time_nsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"subsec"</literal></expr></argument>, <argument><expr><name>time_subsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"strftime"</literal></expr></argument>, <argument><expr><name>time_strftime</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"_dump"</literal></expr></argument>, <argument><expr><name>time_dump</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>rb_singleton_class</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"_load"</literal></expr></argument>, <argument><expr><name>time_load</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

rb_define_private_method(rb_cTime, "marshal_dump", time_mdump, 0);
rb_define_private_method(rb_cTime, "marshal_load", time_mload, 1);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_FIND_TIME_NUMGUESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_virtual_variable</name><argument_list>(<argument><expr><literal type="string">"$find_time_numguess"</literal></expr></argument>, <argument><expr><name>find_time_numguess_getter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rb_cTimeTM</name> <operator>=</operator> <call><name>Init_tm</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"tm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
