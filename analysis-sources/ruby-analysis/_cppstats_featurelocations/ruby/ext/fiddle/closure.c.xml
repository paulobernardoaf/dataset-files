<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\fiddle\closure.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fiddle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby/thread.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>ruby_thread_has_gvl_p</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>cFiddleClosure</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_closure</name> <modifier>*</modifier></type><name>pcl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_cif</name></type> <name>cif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
}</block></struct></type> <name>fiddle_closure</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FFI_CLOSURE_ALLOC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FFI_CLOSURE_ALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FFI_CLOSURE_ALLOC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FFI_CLOSURE_ALLOC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FFI_CLOSURE_ALLOC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fiddle_closure</name> <modifier>*</modifier></type> <name>cls</name> <init>= <expr><operator>(</operator><name>fiddle_closure</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FFI_CLOSURE_ALLOC</name></expr></cpp:if>
<expr_stmt><expr><call><name>ffi_closure_free</name><argument_list>(<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>pcl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>pcl</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cls</name><operator>-&gt;</operator><name>pcl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>cls</name><operator>-&gt;</operator><name>argv</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>closure_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fiddle_closure</name> <modifier>*</modifier></type> <name>cls</name> <init>= <expr><operator>(</operator><name>fiddle_closure</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cls</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FFI_NO_RAW_API</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>FFI_NO_RAW_API</name></expr></cpp:if>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ffi_raw_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cls</name><operator>-&gt;</operator><name>cif</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cls</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_closure</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_data_type_t</name></type> <name>closure_data_type</name> <init>= <expr><block>{
<expr><literal type="string">"fiddle/closure"</literal></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>dealloc</name></expr>, <expr><name>closure_memsize</name></expr>,}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>callback_args</name> <block>{
<decl_stmt><decl><type><name>ffi_cif</name> <modifier>*</modifier></type><name>cif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>with_gvl_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>callback_args</name></name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>self</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rbargs</name> <init>= <expr><call><name>rb_iv_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@args"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ctype</name> <init>= <expr><call><name>rb_iv_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@ctype"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name>rbargs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>params</name> <init>= <expr><call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cPointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cPointer</name> <operator>=</operator> <call><name>rb_const_get</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"Pointer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>rbargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TYPE_VOID</name></expr>:</case>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_INT</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_INT</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>UINT2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_VOIDP</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>,
<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>cPointer</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>PTR2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_LONG</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_LONG</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>ULONG2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_CHAR</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_CHAR</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>UINT2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_SHORT</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>signed</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_SHORT</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>UINT2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_DOUBLE</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>rb_float_new</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_FLOAT</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>rb_float_new</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>
<case>case <expr><name>TYPE_LONG_LONG</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>LL2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>LONG_LONG</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_LONG_LONG</name></expr>:</case>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>ULL2NUM</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>LONG_LONG</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"closure args: %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_funcall2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><call><name>RARRAY_CONST_PTR</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TYPE_VOID</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>TYPE_LONG</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_LONG</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <call><name>NUM2ULONG</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_CHAR</name></expr>:</case>
<case>case <expr><name>TYPE_SHORT</name></expr>:</case>
<case>case <expr><name>TYPE_INT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ffi_sarg</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_CHAR</name></expr>:</case>
<case>case <expr><operator>-</operator><name>TYPE_SHORT</name></expr>:</case>
<case>case <expr><operator>-</operator><name>TYPE_INT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ffi_arg</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <call><name>NUM2UINT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_VOIDP</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <call><name>NUM2PTR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_DOUBLE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_FLOAT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>
<case>case <expr><name>TYPE_LONG_LONG</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>LONG_LONG</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <call><name>NUM2LL</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_LONG_LONG</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>LONG_LONG</name> <operator>*</operator><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>resp</name></name> <operator>=</operator> <call><name>NUM2ULL</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"closure retval: %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>callback</name><parameter_list>(<parameter><decl><type><name>ffi_cif</name> <modifier>*</modifier></type><name>cif</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>callback_args</name></name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><operator>.</operator><name>cif</name></name> <operator>=</operator> <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>.</operator><name>resp</name></name> <operator>=</operator> <name>resp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>.</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ruby_thread_has_gvl_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>with_gvl_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rb_thread_call_with_gvl</name><argument_list>(<argument><expr><name>with_gvl_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fiddle_closure</name> <modifier>*</modifier></type> <name>closure</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>i</name> <init>= <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>fiddle_closure</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>closure_data_type</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FFI_CLOSURE_ALLOC</name></expr></cpp:if>
<expr_stmt><expr><name><name>closure</name><operator>-&gt;</operator><name>pcl</name></name> <operator>=</operator> <call><name>ffi_closure_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ffi_closure</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>closure</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>closure</name><operator>-&gt;</operator><name>pcl</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ffi_closure</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>,
<argument><expr><name>MAP_ANON</name> <operator>|</operator> <name>MAP_PRIVATE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rbargc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>abi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fiddle_closure</name> <modifier>*</modifier></type> <name>cl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_cif</name> <modifier>*</modifier></type> <name>cif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_closure</name> <modifier>*</modifier></type><name>pcl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_status</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>argc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <call><name>rb_scan_args</name><argument_list>(<argument><expr><name>rbargc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"21"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>abi</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name>FFI_DEFAULT_ABI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>fiddle_closure</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>closure_data_type</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <operator>(</operator><name>ffi_type</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>xcalloc</name><argument_list>(<argument><expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ffi_type</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>INT2FFI_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_iv_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@ctype"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_iv_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@args"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cif</name> <operator>=</operator> <operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>cif</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pcl</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>pcl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ffi_prep_cif</name><argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>abi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>,
<argument><expr><call><name>INT2FFI_TYPE</name><argument_list>(<argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>FFI_OK</name> <operator>!=</operator> <name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"error prepping CIF %d"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FFI_CLOSURE_ALLOC</name></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ffi_prep_closure_loc</name><argument_list>(<argument><expr><name>pcl</name></expr></argument>, <argument><expr><name>cif</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ffi_prep_closure</name><argument_list>(<argument><expr><name>pcl</name></expr></argument>, <argument><expr><name>cif</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pcl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mprotect</name><argument_list>(<argument><expr><name>pcl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pcl</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"mprotect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>FFI_OK</name> <operator>!=</operator> <name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"error prepping closure %d"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>to_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fiddle_closure</name> <modifier>*</modifier></type> <name>cl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>fiddle_closure</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>closure_data_type</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>PTR2NUM</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Init_fiddle_closure</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
mFiddle = rb_define_module("Fiddle"); 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





















<expr_stmt><expr><name>cFiddleClosure</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"Closure"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cFiddleClosure</name></expr></argument>, <argument><expr><name>allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cFiddleClosure</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cFiddleClosure</name></expr></argument>, <argument><expr><literal type="string">"to_i"</literal></expr></argument>, <argument><expr><name>to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
