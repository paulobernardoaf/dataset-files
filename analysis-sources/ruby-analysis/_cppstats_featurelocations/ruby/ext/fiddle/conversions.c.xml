<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\fiddle\conversions.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fiddle.h&gt;</cpp:file></cpp:include>

<function><type><name>ffi_type</name> <modifier>*</modifier></type>
<name>int_to_ffi_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>signed_p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>signed_p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_ffi_type_of</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(signed_p ? &amp;ffi_type_s##t : &amp;ffi_type_u##t)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TYPE_VOID</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name>ffi_type_void</name></expr>;</return>
<case>case <expr><name>TYPE_VOIDP</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name>ffi_type_pointer</name></expr>;</return>
<case>case <expr><name>TYPE_CHAR</name></expr>:</case>
<return>return <expr><call><name>rb_ffi_type_of</name><argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TYPE_SHORT</name></expr>:</case>
<return>return <expr><call><name>rb_ffi_type_of</name><argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TYPE_INT</name></expr>:</case>
<return>return <expr><call><name>rb_ffi_type_of</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TYPE_LONG</name></expr>:</case>
<return>return <expr><call><name>rb_ffi_type_of</name><argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>
<case>case <expr><name>TYPE_LONG_LONG</name></expr>:</case>
<return>return <expr><call><name>rb_ffi_type_of</name><argument_list>(<argument><expr><name>long_long</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>TYPE_FLOAT</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name>ffi_type_float</name></expr>;</return>
<case>case <expr><name>TYPE_DOUBLE</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name>ffi_type_double</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"unknown type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><operator>&amp;</operator><name>ffi_type_pointer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>value_to_generic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>fiddle_generic</name> <modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TYPE_VOID</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>TYPE_VOIDP</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <call><name>NUM2PTR</name><argument_list>(<argument><expr><call><name>rb_Integer</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_CHAR</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>schar</name></name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><call><name>NUM2INT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_CHAR</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>uchar</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>NUM2UINT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_SHORT</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sshort</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><call><name>NUM2INT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_SHORT</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sshort</name></name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>short</name><operator>)</operator><call><name>NUM2UINT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_INT</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sint</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_INT</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>uint</name></name> <operator>=</operator> <call><name>NUM2UINT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_LONG</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>slong</name></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_LONG</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ulong</name></name> <operator>=</operator> <call><name>NUM2ULONG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>
<case>case <expr><name>TYPE_LONG_LONG</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>slong_long</name></name> <operator>=</operator> <call><name>NUM2LL</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><name>TYPE_LONG_LONG</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ulong_long</name></name> <operator>=</operator> <call><name>NUM2ULL</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>TYPE_FLOAT</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ffloat</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_DOUBLE</name></expr>:</case>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ddouble</name></name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"unknown type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>generic_to_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>rettype</name></decl></parameter>, <parameter><decl><type><name>fiddle_generic</name></type> <name>retval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>rettype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cPointer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cPointer</name> <operator>=</operator> <call><name>rb_const_get</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"Pointer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TYPE_VOID</name></expr>:</case>
<return>return <expr><name>Qnil</name></expr>;</return>
<case>case <expr><name>TYPE_VOIDP</name></expr>:</case>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>cPointer</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>PTR2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>retval</name><operator>.</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TYPE_CHAR</name></expr>:</case>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><name><name>retval</name><operator>.</operator><name>fffi_sarg</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><operator>-</operator><name>TYPE_CHAR</name></expr>:</case>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>retval</name><operator>.</operator><name>fffi_arg</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TYPE_SHORT</name></expr>:</case>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>signed</name> <name>short</name><operator>)</operator><name><name>retval</name><operator>.</operator><name>fffi_sarg</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><operator>-</operator><name>TYPE_SHORT</name></expr>:</case>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>retval</name><operator>.</operator><name>fffi_arg</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TYPE_INT</name></expr>:</case>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>signed</name> <name>int</name><operator>)</operator><name><name>retval</name><operator>.</operator><name>fffi_sarg</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><operator>-</operator><name>TYPE_INT</name></expr>:</case>
<return>return <expr><call><name>UINT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>retval</name><operator>.</operator><name>fffi_arg</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TYPE_LONG</name></expr>:</case>
<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name><name>retval</name><operator>.</operator><name>slong</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><operator>-</operator><name>TYPE_LONG</name></expr>:</case>
<return>return <expr><call><name>ULONG2NUM</name><argument_list>(<argument><expr><name><name>retval</name><operator>.</operator><name>ulong</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>
<case>case <expr><name>TYPE_LONG_LONG</name></expr>:</case>
<return>return <expr><call><name>LL2NUM</name><argument_list>(<argument><expr><name><name>retval</name><operator>.</operator><name>slong_long</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><operator>-</operator><name>TYPE_LONG_LONG</name></expr>:</case>
<return>return <expr><call><name>ULL2NUM</name><argument_list>(<argument><expr><name><name>retval</name><operator>.</operator><name>ulong_long</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>TYPE_FLOAT</name></expr>:</case>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><name><name>retval</name><operator>.</operator><name>ffloat</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TYPE_DOUBLE</name></expr>:</case>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><name><name>retval</name><operator>.</operator><name>ddouble</name></name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"unknown type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
