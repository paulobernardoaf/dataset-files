<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\json\parser\parser.c">
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fbuffer/fbuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_RUBY_ENCODING_H</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXC_ENCODING</name></cpp:macro> <cpp:value>rb_utf8_encoding(),</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RB_ENC_RAISE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>enc_raise</name><parameter_list>(<parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>exc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mesg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mesg</name> <operator>=</operator> <call><name>rb_enc_vsprintf</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><call><name>rb_exc_new3</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_raise</name></cpp:macro> <cpp:value>enc_raise</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXC_ENCODING</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_raise</name></cpp:macro> <cpp:value>rb_raise</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>digit_values</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>UTF32</name></type> <name>unescape_unicode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UTF32</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>digit_values</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>UNI_REPLACEMENT_CHAR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>digit_values</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>UNI_REPLACEMENT_CHAR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>digit_values</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>UNI_REPLACEMENT_CHAR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>digit_values</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>UNI_REPLACEMENT_CHAR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_UTF32_to_UTF8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>UTF32</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">0x07FF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xC0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xE0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">0x1fffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xF0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>mJSON</name></decl>, <decl><type ref="prev"/><name>mExt</name></decl>, <decl><type ref="prev"/><name>cParser</name></decl>, <decl><type ref="prev"/><name>eParserError</name></decl>, <decl><type ref="prev"/><name>eNestingError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>CNaN</name></decl>, <decl><type ref="prev"/><name>CInfinity</name></decl>, <decl><type ref="prev"/><name>CMinusInfinity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cBigDecimal</name> <init>= <expr><name>Qundef</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>i_json_creatable_p</name></decl>, <decl><type ref="prev"/><name>i_json_create</name></decl>, <decl><type ref="prev"/><name>i_create_id</name></decl>, <decl><type ref="prev"/><name>i_create_additions</name></decl>,
<decl><type ref="prev"/><name>i_chr</name></decl>, <decl><type ref="prev"/><name>i_max_nesting</name></decl>, <decl><type ref="prev"/><name>i_allow_nan</name></decl>, <decl><type ref="prev"/><name>i_symbolize_names</name></decl>,
<decl><type ref="prev"/><name>i_object_class</name></decl>, <decl><type ref="prev"/><name>i_array_class</name></decl>, <decl><type ref="prev"/><name>i_decimal_class</name></decl>, <decl><type ref="prev"/><name>i_key_p</name></decl>,
<decl><type ref="prev"/><name>i_deep_const_get</name></decl>, <decl><type ref="prev"/><name>i_match</name></decl>, <decl><type ref="prev"/><name>i_match_string</name></decl>, <decl><type ref="prev"/><name>i_aset</name></decl>, <decl><type ref="prev"/><name>i_aref</name></decl>,
<decl><type ref="prev"/><name>i_leftshift</name></decl>, <decl><type ref="prev"/><name>i_new</name></decl>, <decl><type ref="prev"/><name>i_BigDecimal</name></decl>;</decl_stmt>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>126</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>



<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>108</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<enum>enum <block>{<decl><name>JSON_object_start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_object_first_final</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_object_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{<decl><name>JSON_object_en_main</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>167</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_object</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_nesting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cs</name> <init>= <expr><name>EVIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>last_name</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>object_class</name> <init>= <expr><name><name>json</name><operator>-&gt;</operator><name>object_class</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>&amp;&amp;</operator> <name>current_nesting</name> <operator>&gt;</operator> <name><name>json</name><operator>-&gt;</operator><name>max_nesting</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eNestingError</name></expr></argument>, <argument><expr><literal type="string">"nesting of %d is too deep"</literal></expr></argument>, <argument><expr><name>current_nesting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>object_class</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>rb_class_new_instance</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>object_class</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>132</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <name>JSON_object_start</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>182</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>139</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>( <expr><name>cs</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">123</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st2</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st0</name>:</label>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>_out</name>;</goto>
<label><name>st2</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof2</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st2</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st2</name>;</goto>
<case>case <expr><literal type="number">34</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st23</name>;</goto>
<case>case <expr><literal type="number">125</literal></expr>:</case> <goto>goto <name>tr4</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">9</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st2</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>tr2</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>149</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>parsing_name</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>JSON_parse_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>parsing_name</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block></if> <else>else <block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>np</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
</block_content>}</block>
<goto>goto <name>st3</name>;</goto>
<label><name>st3</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof3</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>180</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st4</name>;</goto>
<case>case <expr><literal type="number">58</literal></expr>:</case> <goto>goto <name>st8</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">9</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st3</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st4</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof4</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st5</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st7</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st5</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof5</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st6</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st5</name>;</goto>
<label><name>st6</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof6</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st6</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st5</name>;</goto>
<label><name>st7</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof7</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st3</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st7</name>;</goto>
<label><name>st8</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof8</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st8</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st8</name>;</goto>
<case>case <expr><literal type="number">34</literal></expr>:</case> <goto>goto <name>tr11</name>;</goto>
<case>case <expr><literal type="number">45</literal></expr>:</case> <goto>goto <name>tr11</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st19</name>;</goto>
<case>case <expr><literal type="number">73</literal></expr>:</case> <goto>goto <name>tr11</name>;</goto>
<case>case <expr><literal type="number">78</literal></expr>:</case> <goto>goto <name>tr11</name>;</goto>
<case>case <expr><literal type="number">91</literal></expr>:</case> <goto>goto <name>tr11</name>;</goto>
<case>case <expr><literal type="number">102</literal></expr>:</case> <goto>goto <name>tr11</name>;</goto>
<case>case <expr><literal type="number">110</literal></expr>:</case> <goto>goto <name>tr11</name>;</goto>
<case>case <expr><literal type="number">116</literal></expr>:</case> <goto>goto <name>tr11</name>;</goto>
<case>case <expr><literal type="number">123</literal></expr>:</case> <goto>goto <name>tr11</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">10</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>tr11</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st8</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>tr11</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>134</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><call><name>JSON_parse_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>current_nesting</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>object_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><name>last_name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><name>i_aset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>last_name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>np</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<goto>goto <name>st9</name>;</goto>
<label><name>st9</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof9</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>267</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st9</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st9</name>;</goto>
<case>case <expr><literal type="number">44</literal></expr>:</case> <goto>goto <name>st10</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st15</name>;</goto>
<case>case <expr><literal type="number">125</literal></expr>:</case> <goto>goto <name>tr4</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">9</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st9</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st10</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof10</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st10</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st10</name>;</goto>
<case>case <expr><literal type="number">34</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st11</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">9</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st10</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st11</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof11</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st12</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st14</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st12</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof12</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st13</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st12</name>;</goto>
<label><name>st13</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof13</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st13</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st10</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st12</name>;</goto>
<label><name>st14</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof14</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st10</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st14</name>;</goto>
<label><name>st15</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof15</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st16</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st18</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st16</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof16</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st17</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st16</name>;</goto>
<label><name>st17</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof17</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st17</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st9</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st16</name>;</goto>
<label><name>st18</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof18</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st9</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st18</name>;</goto>
<label><name>tr4</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>157</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block>
<goto>goto <name>st27</name>;</goto>
<label><name>st27</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof27</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>363</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<goto>goto <name>st0</name>;</goto>
<label><name>st19</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof19</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st20</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st22</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st20</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof20</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">20</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st21</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st20</name>;</goto>
<label><name>st21</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof21</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st21</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st8</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st20</name>;</goto>
<label><name>st22</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof22</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st8</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st22</name>;</goto>
<label><name>st23</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof23</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st24</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st26</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st24</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof24</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st25</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st24</name>;</goto>
<label><name>st25</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof25</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">25</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st25</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st2</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st24</name>;</goto>
<label><name>st26</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof26</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">26</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st2</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st26</name>;</goto>
</block_content>}</block></switch>
<label><name>_test_eof2</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof3</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof4</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof5</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof6</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof7</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof8</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof9</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof10</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof11</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof12</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof13</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof14</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof15</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof16</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof17</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof18</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">18</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof27</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof19</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">19</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof20</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof21</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof22</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof23</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof24</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof25</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof26</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>

<label><name>_test_eof</name>:</label> <block>{<block_content/>}</block>
<label><name>_out</name>:</label> <block>{<block_content/>}</block>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>183</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name>cs</name> <operator>&gt;=</operator> <name>JSON_object_first_final</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>create_additions</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klassname</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>object_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>klassname</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>create_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>klassname</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><name>i_aref</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>create_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>klassname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>mJSON</name></expr></argument>, <argument><expr><name>i_deep_const_get</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>klassname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>i_json_creatable_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>i_json_create</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>486</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<enum>enum <block>{<decl><name>JSON_value_start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_value_first_final</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_value_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{<decl><name>JSON_value_en_main</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>283</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_value</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_nesting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cs</name> <init>= <expr><name>EVIL</name></expr></init></decl>;</decl_stmt>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>502</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <name>JSON_value_start</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>290</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>509</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>( <expr><name>cs</name></expr> )</condition>
<block>{<block_content>
<label><name>st1</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof1</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st1</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st1</name>;</goto>
<case>case <expr><literal type="number">34</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">45</literal></expr>:</case> <goto>goto <name>tr3</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st6</name>;</goto>
<case>case <expr><literal type="number">73</literal></expr>:</case> <goto>goto <name>st10</name>;</goto>
<case>case <expr><literal type="number">78</literal></expr>:</case> <goto>goto <name>st17</name>;</goto>
<case>case <expr><literal type="number">91</literal></expr>:</case> <goto>goto <name>tr7</name>;</goto>
<case>case <expr><literal type="number">102</literal></expr>:</case> <goto>goto <name>st19</name>;</goto>
<case>case <expr><literal type="number">110</literal></expr>:</case> <goto>goto <name>st23</name>;</goto>
<case>case <expr><literal type="number">116</literal></expr>:</case> <goto>goto <name>st26</name>;</goto>
<case>case <expr><literal type="number">123</literal></expr>:</case> <goto>goto <name>tr11</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">10</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>tr3</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st1</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st0</name>:</label>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>_out</name>;</goto>
<label><name>tr2</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>235</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><call><name>JSON_parse_string</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block></if> <else>else <block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>np</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
</block_content>}</block>
<goto>goto <name>st29</name>;</goto>
<label><name>tr3</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>240</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>pe</name> <operator>&gt;</operator> <name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>MinusInfinity</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>allow_nan</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>CMinusInfinity</name></expr>;</expr_stmt>
<block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>p</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>rb_enc_raise</name><argument_list>(<argument>EXC_ENCODING eParserError</argument>, <argument><literal type="string">"%u: unexpected token at '%s'"</literal></argument>, <argument>__LINE__</argument>, <argument>p</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>JSON_parse_float</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>np</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>JSON_parse_integer</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>np</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block>
</block_content>}</block>
<goto>goto <name>st29</name>;</goto>
<label><name>tr7</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>258</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>JSON_parse_array</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>current_nesting</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block></if> <else>else <block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>np</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
</block_content>}</block>
<goto>goto <name>st29</name>;</goto>
<label><name>tr11</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>264</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>JSON_parse_object</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>current_nesting</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block></if> <else>else <block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>np</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
</block_content>}</block>
<goto>goto <name>st29</name>;</goto>
<label><name>tr25</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>228</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>allow_nan</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>CInfinity</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>rb_enc_raise</name><argument_list>(<argument>EXC_ENCODING eParserError</argument>, <argument><literal type="string">"%u: unexpected token at '%s'"</literal></argument>, <argument>__LINE__</argument>, <argument>p - <literal type="number">8</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<goto>goto <name>st29</name>;</goto>
<label><name>tr27</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>221</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>allow_nan</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>CNaN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>rb_enc_raise</name><argument_list>(<argument>EXC_ENCODING eParserError</argument>, <argument><literal type="string">"%u: unexpected token at '%s'"</literal></argument>, <argument>__LINE__</argument>, <argument>p - <literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<goto>goto <name>st29</name>;</goto>
<label><name>tr31</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>215</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>st29</name>;</goto>
<label><name>tr34</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>212</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>st29</name>;</goto>
<label><name>tr37</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>218</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>st29</name>;</goto>
<label><name>st29</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof29</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">29</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>270</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>629</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st29</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st29</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st2</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">9</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st29</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st2</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof2</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st5</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st3</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof3</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st4</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st3</name>;</goto>
<label><name>st4</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof4</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st4</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st29</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st3</name>;</goto>
<label><name>st5</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof5</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st29</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st5</name>;</goto>
<label><name>st6</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof6</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st7</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st9</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st7</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof7</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st8</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st7</name>;</goto>
<label><name>st8</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof8</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st8</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st1</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st7</name>;</goto>
<label><name>st9</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof9</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st1</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st9</name>;</goto>
<label><name>st10</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof10</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">110</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st11</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st11</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof11</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">102</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st12</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st12</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof12</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">105</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st13</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st13</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof13</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">110</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st14</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st14</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof14</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">105</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st15</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st15</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof15</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">116</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st16</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st16</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof16</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">121</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>tr25</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st17</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof17</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">97</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st18</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st18</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof18</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">78</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>tr27</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st19</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof19</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">97</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st20</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st20</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof20</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">20</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">108</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st21</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st21</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof21</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">115</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st22</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st22</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof22</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">101</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>tr31</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st23</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof23</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">117</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st24</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st24</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof24</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">108</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st25</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st25</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof25</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">25</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">108</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>tr34</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st26</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof26</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">26</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">114</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st27</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st27</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof27</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">117</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st28</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st28</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof28</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">28</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">101</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>tr37</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
</block_content>}</block></switch>
<label><name>_test_eof1</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof29</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof2</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof3</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof4</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof5</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof6</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof7</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof8</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof9</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof10</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof11</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof12</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof13</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof14</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof15</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof16</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof17</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof18</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">18</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof19</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">19</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof20</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof21</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof22</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof23</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof24</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof25</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof26</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof27</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof28</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>

<label><name>_test_eof</name>:</label> <block>{<block_content/>}</block>
<label><name>_out</name>:</label> <block>{<block_content/>}</block>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>291</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name>cs</name> <operator>&gt;=</operator> <name>JSON_value_first_final</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>880</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<enum>enum <block>{<decl><name>JSON_integer_start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_integer_first_final</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_integer_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{<decl><name>JSON_integer_en_main</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>307</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_integer</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cs</name> <init>= <expr><name>EVIL</name></expr></init></decl>;</decl_stmt>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>896</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <name>JSON_integer_start</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>314</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>memo</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>904</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>( <expr><name>cs</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">45</literal></expr>:</case> <goto>goto <name>st2</name>;</goto>
<case>case <expr><literal type="number">48</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">49</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st5</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st0</name>:</label>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>_out</name>;</goto>
<label><name>st2</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof2</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">48</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st3</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><literal type="number">49</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st5</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st3</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof3</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st0</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>tr4</name>;</goto>
<label><name>tr4</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>304</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block>
<goto>goto <name>st4</name>;</goto>
<label><name>st4</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof4</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>945</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<goto>goto <name>st0</name>;</goto>
<label><name>st5</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof5</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st5</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>tr4</name>;</goto>
</block_content>}</block></switch>
<label><name>_test_eof2</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof3</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof4</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof5</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>

<label><name>_test_eof</name>:</label> <block>{<block_content/>}</block>
<label><name>_out</name>:</label> <block>{<block_content/>}</block>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>316</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name>cs</name> <operator>&gt;=</operator> <name>JSON_integer_first_final</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><name>p</name> <operator>-</operator> <name><name>json</name><operator>-&gt;</operator><name>memo</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fbuffer_clear</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>memo</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>rb_cstr2inum</name><argument_list>(<argument><expr><call><name>FBUFFER_PTR</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>979</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<enum>enum <block>{<decl><name>JSON_float_start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_float_first_final</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_float_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{<decl><name>JSON_float_en_main</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>341</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>


<function><type><specifier>static</specifier> <name>int</name></type> <name>is_bigdecimal_class</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cBigDecimal</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_const_defined</name><argument_list>(<argument><expr><name>rb_cObject</name></expr></argument>, <argument><expr><name>i_BigDecimal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cBigDecimal</name> <operator>=</operator> <call><name>rb_const_get_at</name><argument_list>(<argument><expr><name>rb_cObject</name></expr></argument>, <argument><expr><name>i_BigDecimal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name> <operator>==</operator> <name>cBigDecimal</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_float</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cs</name> <init>= <expr><name>EVIL</name></expr></init></decl>;</decl_stmt>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1008</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <name>JSON_float_start</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>361</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>memo</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1016</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>( <expr><name>cs</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">45</literal></expr>:</case> <goto>goto <name>st2</name>;</goto>
<case>case <expr><literal type="number">48</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">49</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st7</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st0</name>:</label>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>_out</name>;</goto>
<label><name>st2</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof2</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">48</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st3</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><literal type="number">49</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st7</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st3</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof3</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">46</literal></expr>:</case> <goto>goto <name>st4</name>;</goto>
<case>case <expr><literal type="number">69</literal></expr>:</case> <goto>goto <name>st5</name>;</goto>
<case>case <expr><literal type="number">101</literal></expr>:</case> <goto>goto <name>st5</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st4</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof4</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st8</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st8</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof8</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">69</literal></expr>:</case> <goto>goto <name>st5</name>;</goto>
<case>case <expr><literal type="number">101</literal></expr>:</case> <goto>goto <name>st5</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">46</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st8</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">45</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st0</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>tr9</name>;</goto>
<label><name>tr9</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>335</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block>
<goto>goto <name>st9</name>;</goto>
<label><name>st9</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof9</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1081</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<goto>goto <name>st0</name>;</goto>
<label><name>st5</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof5</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">43</literal></expr>:</case> <goto>goto <name>st6</name>;</goto>
<case>case <expr><literal type="number">45</literal></expr>:</case> <goto>goto <name>st6</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st10</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st6</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof6</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st10</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st10</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof10</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">69</literal></expr>:</case> <goto>goto <name>st0</name>;</goto>
<case>case <expr><literal type="number">101</literal></expr>:</case> <goto>goto <name>st0</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">46</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st10</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">45</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st0</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>tr9</name>;</goto>
<label><name>st7</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof7</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">46</literal></expr>:</case> <goto>goto <name>st4</name>;</goto>
<case>case <expr><literal type="number">69</literal></expr>:</case> <goto>goto <name>st5</name>;</goto>
<case>case <expr><literal type="number">101</literal></expr>:</case> <goto>goto <name>st5</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st7</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
</block_content>}</block></switch>
<label><name>_test_eof2</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof3</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof4</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof8</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof9</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof5</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof6</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof10</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof7</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>

<label><name>_test_eof</name>:</label> <block>{<block_content/>}</block>
<label><name>_out</name>:</label> <block>{<block_content/>}</block>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>363</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name>cs</name> <operator>&gt;=</operator> <name>JSON_float_first_final</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><name>p</name> <operator>-</operator> <name><name>json</name><operator>-&gt;</operator><name>memo</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fbuffer_clear</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>memo</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>decimal_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>rb_float_new</name><argument_list>(<argument><expr><call><name>rb_cstr_to_dbl</name><argument_list>(<argument><expr><call><name>FBUFFER_PTR</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>text</name></decl>;</decl_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>FBUFFER_PTR</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_bigdecimal_class</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>decimal_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>i_BigDecimal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>decimal_class</name></name></expr></argument>, <argument><expr><name>i_new</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1168</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<enum>enum <block>{<decl><name>JSON_array_start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_array_first_final</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_array_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{<decl><name>JSON_array_en_main</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>416</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_array</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_nesting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cs</name> <init>= <expr><name>EVIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>array_class</name> <init>= <expr><name><name>json</name><operator>-&gt;</operator><name>array_class</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>&amp;&amp;</operator> <name>current_nesting</name> <operator>&gt;</operator> <name><name>json</name><operator>-&gt;</operator><name>max_nesting</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eNestingError</name></expr></argument>, <argument><expr><literal type="string">"nesting of %d is too deep"</literal></expr></argument>, <argument><expr><name>current_nesting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>array_class</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>rb_class_new_instance</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>array_class</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1190</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <name>JSON_array_start</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>429</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1197</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>( <expr><name>cs</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">91</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st2</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st0</name>:</label>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>_out</name>;</goto>
<label><name>st2</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof2</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st2</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st2</name>;</goto>
<case>case <expr><literal type="number">34</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">45</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st13</name>;</goto>
<case>case <expr><literal type="number">73</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">78</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">91</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">93</literal></expr>:</case> <goto>goto <name>tr4</name>;</goto>
<case>case <expr><literal type="number">102</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">110</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">116</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">123</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">10</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>tr2</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st2</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>tr2</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>393</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><call><name>JSON_parse_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>current_nesting</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>array_class</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><name>i_leftshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>np</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<goto>goto <name>st3</name>;</goto>
<label><name>st3</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof3</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1256</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
<case>case <expr><literal type="number">44</literal></expr>:</case> <goto>goto <name>st4</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st9</name>;</goto>
<case>case <expr><literal type="number">93</literal></expr>:</case> <goto>goto <name>tr4</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">9</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st3</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st4</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof4</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st4</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st4</name>;</goto>
<case>case <expr><literal type="number">34</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">45</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st5</name>;</goto>
<case>case <expr><literal type="number">73</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">78</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">91</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">102</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">110</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">116</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">123</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">10</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>tr2</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st4</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st5</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof5</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st6</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st8</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st6</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof6</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st7</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st6</name>;</goto>
<label><name>st7</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof7</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st7</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st4</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st6</name>;</goto>
<label><name>st8</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof8</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st4</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st8</name>;</goto>
<label><name>st9</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof9</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st10</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st12</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st10</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof10</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st11</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st10</name>;</goto>
<label><name>st11</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof11</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st11</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st10</name>;</goto>
<label><name>st12</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof12</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st3</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st12</name>;</goto>
<label><name>tr4</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>408</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block>
<goto>goto <name>st17</name>;</goto>
<label><name>st17</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof17</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1363</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<goto>goto <name>st0</name>;</goto>
<label><name>st13</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof13</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st14</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st16</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st14</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof14</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st15</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st14</name>;</goto>
<label><name>st15</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof15</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st15</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st2</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st14</name>;</goto>
<label><name>st16</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof16</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st2</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st16</name>;</goto>
</block_content>}</block></switch>
<label><name>_test_eof2</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof3</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof4</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof5</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof6</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof7</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof8</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof9</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof10</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof11</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof12</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof17</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof13</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof14</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof15</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof16</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>

<label><name>_test_eof</name>:</label> <block>{<block_content/>}</block>
<label><name>_out</name>:</label> <block>{<block_content/>}</block>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>430</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>

<if_stmt><if>if<condition>(<expr><name>cs</name> <operator>&gt;=</operator> <name>JSON_array_first_final</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>rb_enc_raise</name><argument_list>(<argument>EXC_ENCODING eParserError</argument>, <argument><literal type="string">"%u: unexpected token at '%s'"</literal></argument>, <argument>__LINE__</argument>, <argument>p</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>json_string_unescape</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stringEnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>string</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name> <init>= <expr><name>string</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>unescape</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unescape_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pe</name> <operator>&lt;</operator> <name>stringEnd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pe</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unescape</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>unescape_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>&gt;</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_str_buf_cat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>pe</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>unescape</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>unescape</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"\r"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>unescape</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"\t"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name>unescape</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"\""</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name>unescape</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"\\"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>unescape</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"\b"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>unescape</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"\f"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>&gt;</operator> <name>stringEnd</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<macro><name>rb_enc_raise</name><argument_list>(
<argument>EXC_ENCODING eParserError</argument>,
<argument><literal type="string">"%u: incomplete unicode character escape sequence at '%s'"</literal></argument>, <argument>__LINE__</argument>, <argument>p</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>UTF32</name></type> <name>ch</name> <init>= <expr><call><name>unescape_unicode</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>++</operator><name>pe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pe</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>UNI_SUR_HIGH_START</name> <operator>==</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0xFC00</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pe</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>&gt;</operator> <name>stringEnd</name> <operator>-</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<macro><name>rb_enc_raise</name><argument_list>(
<argument>EXC_ENCODING eParserError</argument>,
<argument><literal type="string">"%u: incomplete surrogate pair at '%s'"</literal></argument>, <argument>__LINE__</argument>, <argument>p</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>pe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UTF32</name></type> <name>sur</name> <init>= <expr><call><name>unescape_unicode</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>pe</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name>sur</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pe</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>unescape</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>unescape_len</name> <operator>=</operator> <call><name>convert_UTF32_to_UTF8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>unescape</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pe</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>rb_str_buf_cat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>unescape</name></expr></argument>, <argument><expr><name>unescape_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>++</operator><name>pe</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pe</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>rb_str_buf_cat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1508</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<enum>enum <block>{<decl><name>JSON_string_start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_string_first_final</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_string_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{<decl><name>JSON_string_en_main</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>537</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>match_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>regexp</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>memo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regexp</name> <operator>==</operator> <name>Qundef</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ST_STOP</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>i_json_creatable_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>regexp</name></expr></argument>, <argument><expr><name>i_match</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ST_STOP</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_string</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cs</name> <init>= <expr><name>EVIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>match_string</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>rb_str_buf_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1538</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <name>JSON_string_start</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>558</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>memo</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1546</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>( <expr><name>cs</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">34</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st2</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st0</name>:</label>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>_out</name>;</goto>
<label><name>st2</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof2</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">34</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">92</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">0</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">31</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st0</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st2</name>;</goto>
<label><name>tr2</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>523</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>json_string_unescape</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>memo</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
<block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>FORCE_UTF8</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>534</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block>
<goto>goto <name>st8</name>;</goto>
<label><name>st8</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof8</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1589</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<goto>goto <name>st0</name>;</goto>
<label><name>st3</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof3</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">117</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st4</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><literal type="number">0</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">31</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st0</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st2</name>;</goto>
<label><name>st4</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof4</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">65</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st5</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">70</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">97</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">102</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st5</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<goto>goto <name>st5</name>;</goto></block_content></block></else></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st5</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof5</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">65</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st6</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">70</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">97</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">102</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st6</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<goto>goto <name>st6</name>;</goto></block_content></block></else></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st6</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof6</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">65</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st7</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">70</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">97</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">102</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st7</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<goto>goto <name>st7</name>;</goto></block_content></block></else></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st7</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof7</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">65</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st2</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">70</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">97</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">102</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st2</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<goto>goto <name>st2</name>;</goto></block_content></block></else></if_stmt>
<goto>goto <name>st0</name>;</goto>
</block_content>}</block></switch>
<label><name>_test_eof2</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof8</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof3</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof4</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof5</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof6</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof7</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>

<label><name>_test_eof</name>:</label> <block>{<block_content/>}</block>
<label><name>_out</name>:</label> <block>{<block_content/>}</block>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>560</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>create_additions</name></name> <operator>&amp;&amp;</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name>match_string</name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>match_string</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>memo</name> <init>= <expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>match_string</name></expr></argument>, <argument><expr><name>match_i</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>i_json_create</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>symbolize_names</name></name> <operator>&amp;&amp;</operator> <name><name>json</name><operator>-&gt;</operator><name>parsing_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>rb_str_intern</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cs</name> <operator>&gt;=</operator> <name>JSON_string_first_final</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>convert_encoding</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RUBY_ENCODING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>enc</name> <operator>==</operator> <call><name>rb_ascii8bit_encoding</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OBJ_FROZEN</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FORCE_UTF8</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>rb_str_conv_enc</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>source</name></expr>;</return>
</block_content>}</block></function>




























<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cParser_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>source</name></decl>, <decl><type ref="prev"/><name>opts</name></decl>;</decl_stmt>
<expr_stmt><expr><name>GET_PARSER_INIT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>Vsource</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"already initialized instance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RB_SCAN_ARGS_OPTIONAL_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RB_SCAN_ARGS_OPTIONAL_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>rb_convert_type</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>, <argument><expr><literal type="string">"Hash"</literal></expr></argument>, <argument><expr><literal type="string">"to_hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"opts needs to be like a hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name> <init>= <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_max_nesting</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>max_nesting</name> <init>= <expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>max_nesting</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>max_nesting</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>max_nesting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_allow_nan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>allow_nan</name></name> <operator>=</operator> <ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>allow_nan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_symbolize_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>symbolize_names</name></name> <operator>=</operator> <ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>symbolize_names</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_create_additions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>create_additions</name></name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>create_additions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>symbolize_names</name></name> <operator>&amp;&amp;</operator> <name><name>json</name><operator>-&gt;</operator><name>create_additions</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr><literal type="string">"options :symbolize_names and :create_additions cannot be "</literal>
<literal type="string">" used in conjunction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_create_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>create_id</name></name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>create_id</name></name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>mJSON</name></expr></argument>, <argument><expr><name>i_create_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_object_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>object_class</name></name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>object_class</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_array_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>array_class</name></name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>array_class</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_decimal_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>decimal_class</name></name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>decimal_class</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_match_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>match_string</name> <init>= <expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>match_string</name></name> <operator>=</operator> <ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>match_string</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>match_string</name></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>match_string</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RB_SCAN_ARGS_OPTIONAL_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>allow_nan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>create_additions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>create_id</name></name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>mJSON</name></expr></argument>, <argument><expr><name>i_create_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>object_class</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>array_class</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>decimal_class</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>convert_encoding</name><argument_list>(<argument><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>Vsource</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1852</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<enum>enum <block>{<decl><name>JSON_start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_first_final</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>}</block>;</enum>
<enum>enum <block>{<decl><name>JSON_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{<decl><name>JSON_en_main</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>760</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>








<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cParser_parse</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cs</name> <init>= <expr><name>EVIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>GET_PARSER</name></expr>;</expr_stmt>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1877</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <name>JSON_start</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>776</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>source</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pe</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name><name>json</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1886</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>( <expr><name>cs</name></expr> )</condition>
<block>{<block_content>
<label><name>st1</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof1</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st1</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st1</name>;</goto>
<case>case <expr><literal type="number">34</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">45</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st6</name>;</goto>
<case>case <expr><literal type="number">73</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">78</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">91</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">102</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">110</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">116</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
<case>case <expr><literal type="number">123</literal></expr>:</case> <goto>goto <name>tr2</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">10</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">48</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">57</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>tr2</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st1</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st0</name>:</label>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>_out</name>;</goto>
<label><name>tr2</name>:</label>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>752</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><call><name>JSON_parse_value</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>np</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <block>{<block_content><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <goto>goto <name>_out</name>;</goto></block_content>}</block> </block_content>}</block></if> <else>else <block>{<block_content><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name>np</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
</block_content>}</block>
<goto>goto <name>st10</name>;</goto>
<label><name>st10</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof10</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1930</cpp:number> <cpp:file>"parser.c"</cpp:file></cpp:line>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <goto>goto <name>st10</name>;</goto>
<case>case <expr><literal type="number">32</literal></expr>:</case> <goto>goto <name>st10</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st2</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><literal type="number">9</literal> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st10</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st0</name>;</goto>
<label><name>st2</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof2</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st3</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st5</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st3</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof3</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st4</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st3</name>;</goto>
<label><name>st4</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof4</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st4</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st10</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st3</name>;</goto>
<label><name>st5</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof5</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st10</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st5</name>;</goto>
<label><name>st6</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof6</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st7</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st9</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st0</name>;</goto>
<label><name>st7</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof7</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st8</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st7</name>;</goto>
<label><name>st8</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof8</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<switch>switch<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">42</literal></expr>:</case> <goto>goto <name>st8</name>;</goto>
<case>case <expr><literal type="number">47</literal></expr>:</case> <goto>goto <name>st1</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>st7</name>;</goto>
<label><name>st9</name>:</label>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name>p</name> <operator>==</operator> <name>pe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>_test_eof9</name>;</goto></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>st1</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>st9</name>;</goto>
</block_content>}</block></switch>
<label><name>_test_eof1</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof10</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof2</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof3</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof4</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof5</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof6</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof7</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof8</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>
<label><name>_test_eof9</name>:</label> <expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <goto>goto <name>_test_eof</name>;</goto>

<label><name>_test_eof</name>:</label> <block>{<block_content/>}</block>
<label><name>_out</name>:</label> <block>{<block_content/>}</block>
</block_content>}</block>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>779</cpp:number> <cpp:file>"parser.rl"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name>cs</name> <operator>&gt;=</operator> <name>JSON_first_final</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>==</operator> <name>pe</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>rb_enc_raise</name><argument_list>(<argument>EXC_ENCODING eParserError</argument>, <argument><literal type="string">"%u: unexpected token at '%s'"</literal></argument>, <argument>__LINE__</argument>, <argument>p</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>JSON_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_gc_mark_maybe</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>Vsource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark_maybe</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>create_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark_maybe</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>object_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark_maybe</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>array_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark_maybe</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>decimal_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark_maybe</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>match_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>JSON_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fbuffer_free</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>JSON_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>json</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>FBUFFER_CAPA</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEW_TYPEDDATA_WRAPPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>JSON_Parser_type</name> <init>= <expr><block>{
<expr><literal type="string">"JSON/Parser"</literal></expr>,
<expr><block>{<expr><name>JSON_mark</name></expr>, <expr><name>JSON_free</name></expr>, <expr><name>JSON_memsize</name></expr>,}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cJSON_parser_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>JSON_Parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>JSON_Parser_type</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>fbuffer</name></name> <operator>=</operator> <call><name>fbuffer_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cParser_source</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>GET_PARSER</name></expr>;</expr_stmt>
<return>return <expr><call><name>rb_str_dup</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>Vsource</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_parser</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<expr_stmt><expr><call><name>rb_require</name><argument_list>(<argument><expr><literal type="string">"json/common"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mJSON</name> <operator>=</operator> <call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"JSON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mExt</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mJSON</name></expr></argument>, <argument><expr><literal type="string">"Ext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cParser</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mExt</name></expr></argument>, <argument><expr><literal type="string">"Parser"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eParserError</name> <operator>=</operator> <call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"JSON::ParserError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eNestingError</name> <operator>=</operator> <call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"JSON::NestingError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>eParserError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>eNestingError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cParser</name></expr></argument>, <argument><expr><name>cJSON_parser_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cParser</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>cParser_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cParser</name></expr></argument>, <argument><expr><literal type="string">"parse"</literal></expr></argument>, <argument><expr><name>cParser_parse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cParser</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>cParser_source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CNaN</name> <operator>=</operator> <call><name>rb_const_get</name><argument_list>(<argument><expr><name>mJSON</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"NaN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>CNaN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CInfinity</name> <operator>=</operator> <call><name>rb_const_get</name><argument_list>(<argument><expr><name>mJSON</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"Infinity"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>CInfinity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CMinusInfinity</name> <operator>=</operator> <call><name>rb_const_get</name><argument_list>(<argument><expr><name>mJSON</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"MinusInfinity"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>CMinusInfinity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_json_creatable_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"json_creatable?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_json_create</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"json_create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_create_id</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"create_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_create_additions</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"create_additions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_chr</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"chr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max_nesting</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"max_nesting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_allow_nan</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"allow_nan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_symbolize_names</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"symbolize_names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_object_class</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"object_class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_array_class</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"array_class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_decimal_class</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"decimal_class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_match</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_match_string</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"match_string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_key_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"key?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_deep_const_get</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"deep_const_get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_aset</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"[]="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_aref</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_leftshift</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_new</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_BigDecimal</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"BigDecimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








</unit>
