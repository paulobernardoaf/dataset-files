<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\json\generator\generator.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fbuffer/fbuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"generator.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RUBY_ENCODING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>CEncoding_UTF_8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>i_encoding</name></decl>, <decl><type ref="prev"/><name>i_encode</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>mJSON</name></decl>, <decl><type ref="prev"/><name>mExt</name></decl>, <decl><type ref="prev"/><name>mGenerator</name></decl>, <decl><type ref="prev"/><name>cState</name></decl>, <decl><type ref="prev"/><name>mGeneratorMethods</name></decl>, <decl><type ref="prev"/><name>mObject</name></decl>,
<decl><type ref="prev"/><name>mHash</name></decl>, <decl><type ref="prev"/><name>mArray</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_INTEGER_UNIFICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><type ref="prev"/><name>mInteger</name></decl>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl><type ref="prev"/><name>mFixnum</name></decl>, <decl><type ref="prev"/><name>mBignum</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl><type ref="prev"/><name>mFloat</name></decl>, <decl><type ref="prev"/><name>mString</name></decl>, <decl><type ref="prev"/><name>mString_Extend</name></decl>,
<decl><type ref="prev"/><name>mTrueClass</name></decl>, <decl><type ref="prev"/><name>mFalseClass</name></decl>, <decl><type ref="prev"/><name>mNilClass</name></decl>, <decl><type ref="prev"/><name>eGeneratorError</name></decl>,
<decl><type ref="prev"/><name>eNestingError</name></decl>,
<decl><type ref="prev"/><name>i_SAFE_STATE_PROTOTYPE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>i_to_s</name></decl>, <decl><type ref="prev"/><name>i_to_json</name></decl>, <decl><type ref="prev"/><name>i_new</name></decl>, <decl><type ref="prev"/><name>i_indent</name></decl>, <decl><type ref="prev"/><name>i_space</name></decl>, <decl><type ref="prev"/><name>i_space_before</name></decl>,
<decl><type ref="prev"/><name>i_object_nl</name></decl>, <decl><type ref="prev"/><name>i_array_nl</name></decl>, <decl><type ref="prev"/><name>i_max_nesting</name></decl>, <decl><type ref="prev"/><name>i_allow_nan</name></decl>, <decl><type ref="prev"/><name>i_ascii_only</name></decl>,
<decl><type ref="prev"/><name>i_pack</name></decl>, <decl><type ref="prev"/><name>i_unpack</name></decl>, <decl><type ref="prev"/><name>i_create_id</name></decl>, <decl><type ref="prev"/><name>i_extend</name></decl>, <decl><type ref="prev"/><name>i_key_p</name></decl>,
<decl><type ref="prev"/><name>i_aref</name></decl>, <decl><type ref="prev"/><name>i_send</name></decl>, <decl><type ref="prev"/><name>i_respond_to_p</name></decl>, <decl><type ref="prev"/><name>i_match</name></decl>, <decl><type ref="prev"/><name>i_keys</name></decl>, <decl><type ref="prev"/><name>i_depth</name></decl>,
<decl><type ref="prev"/><name>i_buffer_initial_length</name></decl>, <decl><type ref="prev"/><name>i_dup</name></decl>;</decl_stmt>






























<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>trailingBytesForUTF8</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>
}</block></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UTF32</name></type> <name><name>offsetsFromUTF8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00000000UL</literal></expr>, <expr><literal type="number">0x00003080UL</literal></expr>, <expr><literal type="number">0x000E2080UL</literal></expr>,
<expr><literal type="number">0x03C82080UL</literal></expr>, <expr><literal type="number">0xFA082080UL</literal></expr>, <expr><literal type="number">0x82082080UL</literal></expr> }</block></expr></init></decl>;</decl_stmt>











<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>isLegalUTF8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UTF8</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UTF8</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UTF8</name> <modifier>*</modifier></type><name>srcptr</name> <init>= <expr><name>source</name><operator>+</operator><name>length</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>length</name></expr>)</condition> <block>{<block_content>
<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>--</operator><name>srcptr</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <name>a</name> <operator>&gt;</operator> <literal type="number">0xBF</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>--</operator><name>srcptr</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <name>a</name> <operator>&gt;</operator> <literal type="number">0xBF</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>--</operator><name>srcptr</name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0xBF</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>source</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xE0</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0xA0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><literal type="number">0xED</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0x9F</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><literal type="number">0xF0</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0x90</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><literal type="number">0xF4</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0x8F</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <break>break;</break>
<default>default:</default> <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></switch>

<case>case <expr><literal type="number">1</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>*</operator><name>source</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>source</name> <operator>&lt;</operator> <literal type="number">0xC2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>source</name> <operator>&gt;</operator> <literal type="number">0xF4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>unicode_escape</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>UTF16</name></type> <name>character</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>digits</name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>digits</name><index>[<expr><name>character</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>digits</name><index>[<expr><operator>(</operator><name>character</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>digits</name><index>[<expr><operator>(</operator><name>character</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>digits</name><index>[<expr><name>character</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>unicode_escape_to_buffer</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>UTF16</name></type>
<name>character</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>unicode_escape</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>character</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_UTF8_to_JSON_ASCII</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UTF8</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>(</operator><name>UTF8</name> <operator>*</operator><operator>)</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UTF8</name> <modifier>*</modifier></type><name>sourceEnd</name> <init>= <expr><name>source</name> <operator>+</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>source</name> <operator>&lt;</operator> <name>sourceEnd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UTF32</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>extraBytesToRead</name> <init>= <expr><name><name>trailingBytesForUTF8</name><index>[<expr><operator>*</operator><name>source</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>source</name> <operator>+</operator> <name>extraBytesToRead</name> <operator>&gt;=</operator> <name>sourceEnd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"JSON::GeneratorError"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"partial character in source, but hit end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isLegalUTF8</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>extraBytesToRead</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"JSON::GeneratorError"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"source sequence is illegal/malformed utf-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<switch>switch <condition>(<expr><name>extraBytesToRead</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>source</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>source</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt> 
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>source</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>source</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>source</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>source</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>ch</name> <operator>-=</operator> <name><name>offsetsFromUTF8</name><index>[<expr><name>extraBytesToRead</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;=</operator> <name>UNI_MAX_BMP</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <name>UNI_SUR_HIGH_START</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <name>UNI_SUR_LOW_END</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UNI_STRICT_CONVERSION</name></expr></cpp:if>
<expr_stmt><expr><name>source</name> <operator>-=</operator> <operator>(</operator><name>extraBytesToRead</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"JSON::GeneratorError"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"source sequence is illegal/malformed utf-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>unicode_escape_to_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>UNI_REPLACEMENT_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\\\\"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\\\""</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\\t"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\\f"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\b'</literal></expr>:</case>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\\b"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>unicode_escape_to_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>UTF16</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name>UNI_MAX_UTF16</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UNI_STRICT_CONVERSION</name></expr></cpp:if>
<expr_stmt><expr><name>source</name> <operator>-=</operator> <operator>(</operator><name>extraBytesToRead</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"JSON::GeneratorError"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"source sequence is illegal/malformed utf8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>unicode_escape_to_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>UNI_REPLACEMENT_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>-=</operator> <name>halfBase</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unicode_escape_to_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>UTF16</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <name>halfShift</name><operator>)</operator> <operator>+</operator> <name>UNI_SUR_HIGH_START</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unicode_escape_to_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>UTF16</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ch</name> <operator>&amp;</operator> <name>halfMask</name><operator>)</operator> <operator>+</operator> <name>UNI_SUR_LOW_START</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_UTF8_to_JSON</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>escape</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>escape_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ascii_only</name> <init>= <expr><call><name>rb_enc_str_asciionly_p</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>end</name> <operator>&lt;</operator> <name>len</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="string">"\\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>escape_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="string">"\\r"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>escape_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="string">"\\t"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>escape_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case>
<expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="string">"\\f"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>escape_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\b'</literal></expr>:</case>
<expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="string">"\\b"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>escape_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>unicode_escape</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>UTF16</name><operator>)</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>escape</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>escape_len</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="string">"\\\\"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>escape_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name>escape</name> <operator>=</operator> <literal type="string">"\\\""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>escape_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>clen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ascii_only</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <name><name>trailingBytesForUTF8</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>+</operator> <name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"JSON::GeneratorError"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"partial character in source, but hit end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isLegalUTF8</name><argument_list>(<argument><expr><operator>(</operator><name>UTF8</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"JSON::GeneratorError"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"source sequence is illegal/malformed utf-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block>
<continue>continue;</continue>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>escape</name></expr></argument>, <argument><expr><name>escape_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>++</operator><name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>escape</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fstrndup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



























































































<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mHash_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GENERATE_JSON</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mArray_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>GENERATE_JSON</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_INTEGER_UNIFICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mInteger_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GENERATE_JSON</name><argument_list>(<argument><expr><name>integer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mFixnum_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GENERATE_JSON</name><argument_list>(<argument><expr><name>fixnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mBignum_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GENERATE_JSON</name><argument_list>(<argument><expr><name>bignum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mFloat_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GENERATE_JSON</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mString_included_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>modul</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>modul</name></expr></argument>, <argument><expr><name>i_extend</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mString_Extend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mString_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GENERATE_JSON</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mString_to_json_raw_object</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>mJSON</name></expr></argument>, <argument><expr><name>i_create_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_class_name</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i_unpack</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"C*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"raw"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mString_to_json_raw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>mString_to_json_raw_object</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mHash_to_json</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mString_Extend_json_create</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"raw"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i_pack</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"C*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mTrueClass_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GENERATE_JSON</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mFalseClass_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GENERATE_JSON</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mNilClass_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GENERATE_JSON</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mObject_to_json</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>string</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>cState_from_state_s</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>cState_partial_generate</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>State_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fbuffer_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>object_delim</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fbuffer_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fbuffer_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>State_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>indent_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>space_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>space_before_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>object_nl_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>array_nl_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>FBUFFER_CAPA</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>object_delim</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>FBUFFER_CAPA</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>FBUFFER_CAPA</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEW_TYPEDDATA_WRAPPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>JSON_Generator_State_type</name> <init>= <expr><block>{
<expr><literal type="string">"JSON/Generator/State"</literal></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>State_free</name></expr>, <expr><name>State_memsize</name></expr>,}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<return>return <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>JSON_Generator_State</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>JSON_Generator_State_type</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_configure</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_check_convert_type</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>, <argument><expr><literal type="string">"Hash"</literal></expr></argument>, <argument><expr><literal type="string">"to_hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_convert_type</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>, <argument><expr><literal type="string">"Hash"</literal></expr></argument>, <argument><expr><literal type="string">"to_h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>opts</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_indent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>indent_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_space</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_space_before</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space_before_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_array_nl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_object_nl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_max_nesting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>max_nesting</name> <init>= <expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>max_nesting</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>max_nesting</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>max_nesting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>depth</name> <init>= <expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_buffer_initial_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>option_given_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>buffer_initial_length</name> <init>= <expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>buffer_initial_length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>initial_length</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>buffer_initial_length</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initial_length</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>buffer_initial_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>initial_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>buffer_initial_length</name></name> <operator>=</operator> <name>initial_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_allow_nan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>allow_nan</name></name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_ascii_only</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ascii_only</name></name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_state_ivars</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ivars</name> <init>= <expr><call><name>rb_obj_instance_variables</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ivars</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>key</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ivars</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>key_len</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name> <init>= <expr><call><name>rb_iv_get</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>rb_str_intern</name><argument_list>(<argument><expr><call><name>rb_str_substr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_to_h</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_state_ivars</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_indent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>indent_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_space</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_space_before</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_before_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_object_nl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_array_nl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_allow_nan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>allow_nan</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_ascii_only</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>ascii_only</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_max_nesting</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>max_nesting</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_depth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>i_buffer_initial_length</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buffer_initial_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_aref</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>i_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i_respond_to_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i_send</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern_str</name><argument_list>(<argument><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_aset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>name_writer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>i_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_writer</name> <operator>=</operator> <call><name>rb_str_cat2</name><argument_list>(<argument><expr><call><name>rb_str_dup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i_respond_to_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>name_writer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i_send</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>name_writer</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern_str</name><argument_list>(<argument><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>hash_foreach_arg</name> <block>{
<decl_stmt><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>Vstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iter</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>json_object_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hash_foreach_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator>struct <name>hash_foreach_arg</name> <operator>*</operator><operator>)</operator><name>_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>Vstate</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>Vstate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>object_nl</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>object_nl_len</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>object_nl_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>indent</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>indent_len</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>indent_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>delim</name> <init>= <expr><call><name>FBUFFER_PTR</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>delim_len</name> <init>= <expr><call><name>FBUFFER_LEN</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>delim2</name> <init>= <expr><call><name>FBUFFER_PTR</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>delim2_len</name> <init>= <expr><call><name>FBUFFER_LEN</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>depth</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>depth</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name></decl>, <decl><type ref="prev"/><name>key_to_s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>iter</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><name>delim_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>object_nl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>object_nl</name></expr></argument>, <argument><expr><name>object_nl_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>indent</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>depth</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>CLASS_OF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>klass</name> <operator>==</operator> <name>rb_cString</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>key_to_s</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>klass</name> <operator>==</operator> <name>rb_cSymbol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>key_to_s</name> <operator>=</operator> <call><name>rb_id2str</name><argument_list>(<argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>key_to_s</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>i_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>key_to_s</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>generate_json</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>key_to_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>delim2</name></expr></argument>, <argument><expr><name>delim2_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>generate_json</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>iter</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json_object</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>object_nl</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>object_nl_len</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>object_nl_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>indent</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>indent_len</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>indent_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>max_nesting</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>max_nesting</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>depth</name> <init>= <expr><operator>++</operator><name><name>state</name><operator>-&gt;</operator><name>depth</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hash_foreach_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max_nesting</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>&gt;</operator> <name>max_nesting</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eNestingError</name></expr></argument>, <argument><expr><literal type="string">"nesting of %ld is too deep"</literal></expr></argument>, <argument><expr><operator>--</operator><name><name>state</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>Vstate</name></name> <operator>=</operator> <name>Vstate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>iter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>json_object_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <operator>--</operator><name><name>state</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>object_nl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>object_nl</name></expr></argument>, <argument><expr><name>object_nl_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>indent</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>depth</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json_array</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>array_nl</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>array_nl_len</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>array_nl_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>indent</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>indent_len</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>indent_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>max_nesting</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>max_nesting</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>delim</name> <init>= <expr><call><name>FBUFFER_PTR</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>delim_len</name> <init>= <expr><call><name>FBUFFER_LEN</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>depth</name> <init>= <expr><operator>++</operator><name><name>state</name><operator>-&gt;</operator><name>depth</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max_nesting</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>&gt;</operator> <name>max_nesting</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eNestingError</name></expr></argument>, <argument><expr><literal type="string">"nesting of %ld is too deep"</literal></expr></argument>, <argument><expr><operator>--</operator><name><name>state</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>array_nl</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>array_nl</name></expr></argument>, <argument><expr><name>array_nl_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><name>delim_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>indent</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>depth</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>generate_json</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <operator>--</operator><name>depth</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>array_nl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>array_nl</name></expr></argument>, <argument><expr><name>array_nl_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>indent</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>depth</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RUBY_ENCODING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>enc_utf8_compatible_p</name><parameter_list>(<parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc</name> <operator>==</operator> <call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc</name> <operator>==</operator> <call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json_string</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RUBY_ENCODING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>enc_utf8_compatible_p</name><argument_list>(<argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_str_encode</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CEncoding_UTF_8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ascii_only</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>convert_UTF8_to_JSON_ASCII</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>convert_UTF8_to_JSON</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json_null</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json_false</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json_true</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json_fixnum</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_append_long</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json_bignum</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fbuffer_append_str</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_INTEGER_UNIFICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json_integer</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>generate_json_fixnum</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>generate_json_bignum</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json_float</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>allow_nan</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>allow_nan</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_nan</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eGeneratorError</name></expr></argument>, <argument><expr><literal type="string">"%u: %"</literal><name>PRIsVALUE</name><literal type="string">" not allowed in JSON"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>RB_OBJ_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eGeneratorError</name></expr></argument>, <argument><expr><literal type="string">"%u: %"</literal><name>PRIsVALUE</name><literal type="string">" not allowed in JSON"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>RB_OBJ_STRING</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fbuffer_append_str</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_json</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>Vstate</name></decl></parameter>, <parameter><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name> <init>= <expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>klass</name> <operator>==</operator> <name>rb_cHash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_json_object</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>klass</name> <operator>==</operator> <name>rb_cArray</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_json_array</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>klass</name> <operator>==</operator> <name>rb_cString</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_json_string</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_json_null</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_json_false</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Qtrue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_json_true</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_json_fixnum</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_json_bignum</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>klass</name> <operator>==</operator> <name>rb_cFloat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>generate_json_float</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rb_respond_to</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i_to_json</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i_to_json</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fbuffer_append_str</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>generate_json_string</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>Vstate</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FBuffer</name> <modifier>*</modifier></type><name>cState_prepare_buffer</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>fbuffer_alloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buffer_initial_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>object_delim</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_clear</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim</name></name> <operator>=</operator> <call><name>fbuffer_alloc</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_clear</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name> <operator>=</operator> <call><name>fbuffer_alloc</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_before_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_delim2</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fbuffer_clear</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name> <operator>=</operator> <call><name>fbuffer_alloc</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fbuffer_append_char</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_delim</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_partial_generate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>cState_prepare_buffer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>generate_json</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>fbuffer_to_s</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_generate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><call><name>cState_partial_generate</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>state</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>opts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>buffer_initial_length</name></name> <operator>=</operator> <name>FBUFFER_INITIAL_LENGTH_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cState_configure</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_init_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>orig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSON_Generator_State</name> <modifier>*</modifier></type><name>objState</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>origState</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>orig</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>obj</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_STATE_TO</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>objState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_STATE_TO</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>origState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>objState</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unallocated JSON::State"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name>objState</name></expr></argument>, <argument><expr><name>origState</name></expr></argument>, <argument><expr><name>JSON_Generator_State</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objState</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><name><name>origState</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>, <argument><expr><name><name>origState</name><operator>-&gt;</operator><name>indent_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objState</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><name><name>origState</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><name><name>origState</name><operator>-&gt;</operator><name>space_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objState</name><operator>-&gt;</operator><name>space_before</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><name><name>origState</name><operator>-&gt;</operator><name>space_before</name></name></expr></argument>, <argument><expr><name><name>origState</name><operator>-&gt;</operator><name>space_before_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objState</name><operator>-&gt;</operator><name>object_nl</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><name><name>origState</name><operator>-&gt;</operator><name>object_nl</name></name></expr></argument>, <argument><expr><name><name>origState</name><operator>-&gt;</operator><name>object_nl_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objState</name><operator>-&gt;</operator><name>array_nl</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><name><name>origState</name><operator>-&gt;</operator><name>array_nl</name></name></expr></argument>, <argument><expr><name><name>origState</name><operator>-&gt;</operator><name>array_nl_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>origState</name><operator>-&gt;</operator><name>array_delim</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>objState</name><operator>-&gt;</operator><name>array_delim</name></name> <operator>=</operator> <call><name>fbuffer_dup</name><argument_list>(<argument><expr><name><name>origState</name><operator>-&gt;</operator><name>array_delim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>origState</name><operator>-&gt;</operator><name>object_delim</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>objState</name><operator>-&gt;</operator><name>object_delim</name></name> <operator>=</operator> <call><name>fbuffer_dup</name><argument_list>(<argument><expr><name><name>origState</name><operator>-&gt;</operator><name>object_delim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>origState</name><operator>-&gt;</operator><name>object_delim2</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>objState</name><operator>-&gt;</operator><name>object_delim2</name></name> <operator>=</operator> <call><name>fbuffer_dup</name><argument_list>(<argument><expr><name><name>origState</name><operator>-&gt;</operator><name>object_delim2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_from_state_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>opts</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>rb_cHash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i_new</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>prototype</name> <init>= <expr><call><name>rb_const_get</name><argument_list>(<argument><expr><name>mJSON</name></expr></argument>, <argument><expr><name>i_SAFE_STATE_PROTOTYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>, <argument><expr><name>i_dup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_indent</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr> ?</condition><then> <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>indent_len</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_indent_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>indent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>indent_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>indent_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_space</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr> ?</condition><then> <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_len</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_space_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>space</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>space</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_space_before</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr> ?</condition><then> <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_before_len</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_space_before_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>space_before</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>space_before</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>space_before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space_before_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space_before</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>space_before</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>space_before_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_object_nl</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr> ?</condition><then> <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl_len</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_object_nl_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>object_nl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>object_nl</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>object_nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>object_nl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>object_nl_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_array_nl</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr> ?</condition><then> <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl_len</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_array_nl_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>array_nl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>array_nl</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>array_nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl</name></name> <operator>=</operator> <call><name>fstrndup</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>array_nl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>array_nl_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_check_circular_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>max_nesting</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_max_nesting</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>max_nesting</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_max_nesting_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>max_nesting</name></name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_allow_nan_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>allow_nan</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_ascii_only_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>ascii_only</name></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_depth</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_depth_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_buffer_initial_length</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buffer_initial_length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>cState_buffer_initial_length_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>buffer_initial_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>initial_length</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_STATE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>buffer_initial_length</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initial_length</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>buffer_initial_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>initial_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>buffer_initial_length</name></name> <operator>=</operator> <name>initial_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Init_generator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<expr_stmt><expr><call><name>rb_require</name><argument_list>(<argument><expr><literal type="string">"json/common"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mJSON</name> <operator>=</operator> <call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"JSON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mExt</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mJSON</name></expr></argument>, <argument><expr><literal type="string">"Ext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mGenerator</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mExt</name></expr></argument>, <argument><expr><literal type="string">"Generator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eGeneratorError</name> <operator>=</operator> <call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"JSON::GeneratorError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eNestingError</name> <operator>=</operator> <call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"JSON::NestingError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>eGeneratorError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>eNestingError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cState</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mGenerator</name></expr></argument>, <argument><expr><literal type="string">"State"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><name>cState_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"from_state"</literal></expr></argument>, <argument><expr><name>cState_from_state_s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>cState_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>cState_init_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"indent"</literal></expr></argument>, <argument><expr><name>cState_indent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"indent="</literal></expr></argument>, <argument><expr><name>cState_indent_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"space"</literal></expr></argument>, <argument><expr><name>cState_space</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"space="</literal></expr></argument>, <argument><expr><name>cState_space_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"space_before"</literal></expr></argument>, <argument><expr><name>cState_space_before</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"space_before="</literal></expr></argument>, <argument><expr><name>cState_space_before_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"object_nl"</literal></expr></argument>, <argument><expr><name>cState_object_nl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"object_nl="</literal></expr></argument>, <argument><expr><name>cState_object_nl_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"array_nl"</literal></expr></argument>, <argument><expr><name>cState_array_nl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"array_nl="</literal></expr></argument>, <argument><expr><name>cState_array_nl_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"max_nesting"</literal></expr></argument>, <argument><expr><name>cState_max_nesting</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"max_nesting="</literal></expr></argument>, <argument><expr><name>cState_max_nesting_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"check_circular?"</literal></expr></argument>, <argument><expr><name>cState_check_circular_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"allow_nan?"</literal></expr></argument>, <argument><expr><name>cState_allow_nan_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"ascii_only?"</literal></expr></argument>, <argument><expr><name>cState_ascii_only_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"depth"</literal></expr></argument>, <argument><expr><name>cState_depth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"depth="</literal></expr></argument>, <argument><expr><name>cState_depth_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"buffer_initial_length"</literal></expr></argument>, <argument><expr><name>cState_buffer_initial_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"buffer_initial_length="</literal></expr></argument>, <argument><expr><name>cState_buffer_initial_length_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"configure"</literal></expr></argument>, <argument><expr><name>cState_configure</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"merge"</literal></expr></argument>, <argument><expr><literal type="string">"configure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"to_h"</literal></expr></argument>, <argument><expr><name>cState_to_h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"to_hash"</literal></expr></argument>, <argument><expr><literal type="string">"to_h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>cState_aref</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"[]="</literal></expr></argument>, <argument><expr><name>cState_aset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><literal type="string">"generate"</literal></expr></argument>, <argument><expr><name>cState_generate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mGeneratorMethods</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGenerator</name></expr></argument>, <argument><expr><literal type="string">"GeneratorMethods"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mObject</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"Object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mObject</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mObject_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mHash</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"Hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mHash</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mHash_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mArray</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"Array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mArray</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mArray_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_INTEGER_UNIFICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>mInteger</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"Integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mInteger</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mInteger_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>mFixnum</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"Fixnum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mFixnum</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mFixnum_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mBignum</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"Bignum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mBignum</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mBignum_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>mFloat</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"Float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mFloat</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mFloat_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mString</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"String"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>mString</name></expr></argument>, <argument><expr><literal type="string">"included"</literal></expr></argument>, <argument><expr><name>mString_included_s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mString</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mString_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mString</name></expr></argument>, <argument><expr><literal type="string">"to_json_raw"</literal></expr></argument>, <argument><expr><name>mString_to_json_raw</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mString</name></expr></argument>, <argument><expr><literal type="string">"to_json_raw_object"</literal></expr></argument>, <argument><expr><name>mString_to_json_raw_object</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mString_Extend</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mString</name></expr></argument>, <argument><expr><literal type="string">"Extend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mString_Extend</name></expr></argument>, <argument><expr><literal type="string">"json_create"</literal></expr></argument>, <argument><expr><name>mString_Extend_json_create</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mTrueClass</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"TrueClass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mTrueClass</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mTrueClass_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mFalseClass</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"FalseClass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mFalseClass</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mFalseClass_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mNilClass</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mGeneratorMethods</name></expr></argument>, <argument><expr><literal type="string">"NilClass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>mNilClass</name></expr></argument>, <argument><expr><literal type="string">"to_json"</literal></expr></argument>, <argument><expr><name>mNilClass_to_json</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_to_s</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"to_s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_to_json</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"to_json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_new</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_indent</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"indent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_space</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_space_before</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"space_before"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_object_nl</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"object_nl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_array_nl</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"array_nl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max_nesting</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"max_nesting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_allow_nan</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"allow_nan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ascii_only</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"ascii_only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_depth</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_buffer_initial_length</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"buffer_initial_length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pack</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_unpack</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"unpack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_create_id</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"create_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_extend</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"extend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_key_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"key?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_aref</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_send</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"__send__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_respond_to_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"respond_to?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_match</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_keys</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"keys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dup</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RUBY_ENCODING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>CEncoding_UTF_8</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"Encoding"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"find"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_encoding</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_encode</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>i_SAFE_STATE_PROTOTYPE</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"SAFE_STATE_PROTOTYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
