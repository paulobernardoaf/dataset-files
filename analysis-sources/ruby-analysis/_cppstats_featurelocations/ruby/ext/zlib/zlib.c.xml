<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\zlib\zlib.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby/io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby/thread.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VALGRIND_MEMCHECK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/memcheck.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VALGRIND_MAKE_MEM_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALGRIND_MAKE_MEM_DEFINED</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VALGRIND_MAKE_READABLE((p), (n))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VALGRIND_MAKE_MEM_UNDEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALGRIND_MAKE_MEM_UNDEFINED</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VALGRIND_MAKE_WRITABLE((p), (n))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALGRIND_MAKE_MEM_DEFINED</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALGRIND_MAKE_MEM_UNDEFINED</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_ZLIB_VERSION</name></cpp:macro> <cpp:value>"1.1.0"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RB_PASS_CALLED_KEYWORDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_class_new_instance_kw</name><parameter_list>(<parameter><type><name>argc</name></type></parameter>, <parameter><type><name>argv</name></type></parameter>, <parameter><type><name>klass</name></type></parameter>, <parameter><type><name>kw_splat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_class_new_instance(argc, argv, klass)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GZIP_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZIP_SUPPORT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEF_MEM_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAX_MEM_LEVEL</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_MEM_LEVEL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_MEM_LEVEL</name></cpp:macro> <cpp:value>MAX_MEM_LEVEL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>&gt;</operator> <name>SIZEOF_INT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uInt</name></type>
<name>max_uint</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>UINT_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>uInt</name><operator>)</operator><name>n</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_UINT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>max_uint(n)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_UINT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uInt)(n)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_dictionaries</name></decl>;</decl_stmt>



<expr_stmt><expr><specifier>static</specifier> <macro><name>NORETURN</name><argument_list>(<argument>void raise_zlib_error(int, const char*)</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zlib_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>do_checksum</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>uLong</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>uLong</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uInt</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zlib_adler32</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zlib_crc32</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zlib_crc_table</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>voidpf</name></type> <name>zlib_mem_alloc</name><parameter_list>(<parameter><decl><type><name>voidpf</name></type></decl></parameter>, <parameter><decl><type><name>uInt</name></type></decl></parameter>, <parameter><decl><type><name>uInt</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zlib_mem_free</name><parameter_list>(<parameter><decl><type><name>voidpf</name></type></decl></parameter>, <parameter><decl><type><name>voidpf</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>finalizer_warn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>zstream</name>;</struct_decl>
<struct_decl>struct <name>zstream_funcs</name>;</struct_decl>
<struct_decl>struct <name>zstream_run_args</name>;</struct_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>zstream_funcs</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_expand_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_expand_buffer_into</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>zstream_expand_buffer_non_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_append_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>zstream_detach_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>zstream_shift_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_buffer_ungets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_buffer_ungetbyte</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_append_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_discard_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_reset_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_passthrough_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>zstream_detach_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>zstream_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>zstream_ensure_end</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_run</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Bytef</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>zstream_sync</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Bytef</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_mark</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>zstream_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>zstream_funcs</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>get_zstream</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstream_finalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_end</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_reset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_finish</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_flush_next_in</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_flush_next_out</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_avail_out</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_set_avail_out</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_avail_in</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_total_in</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_total_out</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_data_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_adler</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_finished_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_zstream_closed_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_deflate_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_deflate_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_deflate_init_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>deflate_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_deflate_s_deflate</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_deflate_deflate</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_deflate_addstr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_deflate_flush</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_deflate_params</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_deflate_set_dictionary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>inflate_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_inflate_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_inflate_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_inflate_s_inflate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_inflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_inflate_inflate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_inflate_addstr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_inflate_sync</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_inflate_sync_point_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_inflate_set_dictionary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GZIP_SUPPORT</name></expr></cpp:if>
<struct_decl>struct <name>gzfile</name>;</struct_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_mark</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_new</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>zstream_funcs</name><operator>*</operator></expr></argument>, <argument><expr><macro><name>void</name> <argument_list>(<argument>*</argument>)</argument_list></macro> <call><name>_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>gzfile</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_write_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_read_raw_partial</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_read_raw_rescue</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_read_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gzfile_read_raw_ensure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>gzfile_read_raw_until_zero</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>gzfile_get16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>gzfile_get32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_set32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_make_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_make_footer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_check_footer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Bytef</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>gzfile_read_more</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_calc_crc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_read_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_ungets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_ungetbyte</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_writer_end_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_writer_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_reader_end_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_reader_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzfile_reader_rewind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_reader_get_unused</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>get_gzfile</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_ensure_close</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_s_wrap</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_s_open</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>NORETURN</name><argument_list>(<argument>static void gzfile_raise(struct gzfile *, VALUE, const char *)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzfile_error_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_to_io</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_crc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_mtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_level</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_os_code</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_orig_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_comment</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_lineno</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_set_lineno</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_set_mtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_set_orig_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_set_comment</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_close</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_finish</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_closed_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_eof_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_sync</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_set_sync</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_total_in</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_total_out</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzfile_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzwriter_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzwriter_s_open</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzwriter_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzwriter_flush</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzwriter_write</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzwriter_putc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_s_open</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_rewind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_unused</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_read</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_getc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_readchar</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_each_byte</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_ungetc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_ungetbyte</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gzreader_skip_linebreaks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>gzreader_gets</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_gets</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_readline</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_each</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_gzreader_readlines</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 









































































<function_decl><type><name>void</name></type> <name>Init_zlib</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cZError</name></decl>, <decl><type ref="prev"/><name>cStreamEnd</name></decl>, <decl><type ref="prev"/><name>cNeedDict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cStreamError</name></decl>, <decl><type ref="prev"/><name>cDataError</name></decl>, <decl><type ref="prev"/><name>cMemError</name></decl>, <decl><type ref="prev"/><name>cBufError</name></decl>, <decl><type ref="prev"/><name>cVersionError</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>raise_zlib_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>exc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>zError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_exc_new2</name><argument_list>(<argument><expr><name>cStreamEnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z_NEED_DICT</name></expr>:</case>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_exc_new2</name><argument_list>(<argument><expr><name>cNeedDict</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z_STREAM_ERROR</name></expr>:</case>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_exc_new2</name><argument_list>(<argument><expr><name>cStreamError</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z_DATA_ERROR</name></expr>:</case>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_exc_new2</name><argument_list>(<argument><expr><name>cDataError</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z_BUF_ERROR</name></expr>:</case>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_exc_new2</name><argument_list>(<argument><expr><name>cBufError</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z_VERSION_ERROR</name></expr>:</case>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_exc_new2</name><argument_list>(<argument><expr><name>cVersionError</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z_MEM_ERROR</name></expr>:</case>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_exc_new2</name><argument_list>(<argument><expr><name>cMemError</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z_ERRNO</name></expr>:</case>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_exc_new_str</name><argument_list>(<argument><expr><name>cZError</name></expr></argument>,
<argument><expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"unknown zlib error %d: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>finalizer_warn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"zlib(finalizer): %s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zlib_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>zlibVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>&gt;</operator> <name>SIZEOF_INT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>uLong</name></type>
<name>checksum_long</name><parameter_list>(<parameter><function_decl><type><name>uLong</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>uLong</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uInt</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>uLong</name></type> <name>sum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>UINT_MAX</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>UINT_MAX</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uInt</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checksum_long</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>sum</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(func)((sum), (ptr), (len))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>do_checksum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><function_decl><type><name>uLong</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>uLong</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uInt</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>vsum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>NUM2ULONG</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Z_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>Z_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>checksum_long</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>rb_uint2inum</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zlib_adler32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>do_checksum</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>adler32</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ADLER32_COMBINE</name></expr></argument>)</argument_list></call></expr></cpp:if>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zlib_adler32_combine</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>adler1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>adler2</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ULONG2NUM</name><argument_list>(
<argument><expr><call><name>adler32_combine</name><argument_list>(<argument><expr><call><name>NUM2ULONG</name><argument_list>(<argument><expr><name>adler1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2ULONG</name><argument_list>(<argument><expr><name>adler2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_zlib_adler32_combine</name></cpp:macro> <cpp:value>rb_f_notimplement</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zlib_crc32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>do_checksum</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>crc32</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CRC32_COMBINE</name></expr></argument>)</argument_list></call></expr></cpp:if>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zlib_crc32_combine</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>crc1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>crc2</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ULONG2NUM</name><argument_list>(
<argument><expr><call><name>crc32_combine</name><argument_list>(<argument><expr><call><name>NUM2ULONG</name><argument_list>(<argument><expr><name>crc1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2ULONG</name><argument_list>(<argument><expr><name>crc2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_zlib_crc32_combine</name></cpp:macro> <cpp:value>rb_f_notimplement</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zlib_crc_table</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_Z_CRC_T</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>z_crc_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>z_crc_t</name> <modifier>*</modifier></type><name>crctbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>crctbl</name> <operator>=</operator> <call><name>get_crc_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>rb_uint2inum</name><argument_list>(<argument><expr><name><name>crctbl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>





<struct>struct <name>zstream</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<struct><specifier>const</specifier> struct <name>zstream_funcs</name> <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>reset</name>)<parameter_list>(<parameter><decl><type><name>z_streamp</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>end</name>)<parameter_list>(<parameter><decl><type><name>z_streamp</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>run</name>)<parameter_list>(<parameter><decl><type><name>z_streamp</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><modifier>*</modifier><name>func</name></decl>;</struct>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_FLAG_READY</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_FLAG_IN_STREAM</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_FLAG_FINISHED</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_FLAG_CLOSING</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_FLAG_GZFILE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_FLAG_UNUSED</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_READY</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((z)-&gt;flags |= ZSTREAM_FLAG_READY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_IS_READY</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((z)-&gt;flags &amp; ZSTREAM_FLAG_READY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_IS_FINISHED</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((z)-&gt;flags &amp; ZSTREAM_FLAG_FINISHED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_IS_CLOSING</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((z)-&gt;flags &amp; ZSTREAM_FLAG_CLOSING)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_IS_GZFILE</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((z)-&gt;flags &amp; ZSTREAM_FLAG_GZFILE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_BUF_FILLED</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(NIL_P((z)-&gt;buf) ? 0 : RSTRING_LEN((z)-&gt;buf))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_EXPAND_BUFFER_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_INITIAL_BUFSIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_AVAIL_OUT_STEP_MAX</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTREAM_AVAIL_OUT_STEP_MIN</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>zstream_funcs</name></name></type> <name>deflate_funcs</name> <init>= <expr><block>{
<expr><name>deflateReset</name></expr>, <expr><name>deflateEnd</name></expr>, <expr><name>deflate</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>zstream_funcs</name></name></type> <name>inflate_funcs</name> <init>= <expr><block>{
<expr><name>inflateReset</name></expr>, <expr><name>inflateEnd</name></expr>, <expr><name>inflate</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>zstream_run_args</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flush</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>interrupt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>jump_state</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>stream_output</name></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>static</specifier> <name>voidpf</name></type>
<name>zlib_mem_alloc</name><parameter_list>(<parameter><decl><type><name>voidpf</name></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>uInt</name></type> <name>items</name></decl></parameter>, <parameter><decl><type><name>uInt</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>voidpf</name></type> <name>p</name> <init>= <expr><call><name>xmalloc2</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>VALGRIND_MAKE_MEM_DEFINED</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>items</name> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zlib_mem_free</name><parameter_list>(<parameter><decl><type><name>voidpf</name></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>voidpf</name></type> <name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>zstream_funcs</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <name>zlib_mem_alloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <name>zlib_mem_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zstream_init_deflate</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>zstream_init((z), &amp;deflate_funcs)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zstream_init_inflate</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>zstream_init((z), &amp;inflate_funcs)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_expand_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_expand_buffer_into</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>ZSTREAM_INITIAL_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_GZFILE</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>buf_filled</name> <init>= <expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_filled</name> <operator>&gt;=</operator> <name>ZSTREAM_AVAIL_OUT_STEP_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_obj_reveal</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>rb_cString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_expand_buffer_into</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>ZSTREAM_AVAIL_OUT_STEP_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>zstream_expand_buffer_into</name><argument_list>(<argument><expr><name>z</name></expr></argument>,
<argument><expr><name>ZSTREAM_AVAIL_OUT_STEP_MAX</name> <operator>-</operator> <name>buf_filled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>zstream_expand_buffer_non_stream</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_expand_buffer_into</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>rb_str_buf_new</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <call><name>MAX_UINT</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_obj_hide</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_modify_expand</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_END</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <call><name>MAX_UINT</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>zstream_expand_buffer_protect</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator>struct <name>zstream</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>zstream_expand_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zstream_expand_buffer_non_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>inc</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_str_capacity</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name> <operator>&gt;=</operator> <name>ZSTREAM_AVAIL_OUT_STEP_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>ZSTREAM_AVAIL_OUT_STEP_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inc</name> <operator>&lt;</operator> <name>ZSTREAM_AVAIL_OUT_STEP_MIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <name>ZSTREAM_AVAIL_OUT_STEP_MIN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_modify_expand</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>inc</name> <operator>&lt;</operator> <name>ZSTREAM_AVAIL_OUT_STEP_MAX</name><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><name>int</name><operator>)</operator><name>inc</name></expr> </then><else>: <expr><name>ZSTREAM_AVAIL_OUT_STEP_MAX</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_END</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ZSTREAM_EXPAND_BUFFER_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_append_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>rb_str_buf_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_buf_cat</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_obj_hide</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><call><name>rb_str_capacity</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_modify_expand</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>&gt;=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>-=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_END</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zstream_append_buffer2</name><parameter_list>(<parameter><type><name>z</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>zstream_append_buffer((z),(Bytef*)RSTRING_PTR(v),RSTRING_LEN(v))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zstream_detach_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ZSTREAM_IS_GZFILE</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>


<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_obj_reveal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>rb_cString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_GZFILE</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zstream_shift_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>buflen</name> <init>= <expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bufptr</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>bufptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>bufptr</name></expr></argument>, <argument><expr><name>bufptr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_END</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>rb_str_capacity</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;</operator> <name>ZSTREAM_AVAIL_OUT_STEP_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>ZSTREAM_AVAIL_OUT_STEP_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name>buflen</name></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_buffer_ungets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>filled</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>rb_str_capacity</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_expand_buffer_into</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RSTRING_GETMEM</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>bufptr</name></expr></argument>, <argument><expr><name>filled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>bufptr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufptr</name></expr></argument>, <argument><expr><name>filled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>bufptr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>filled</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name><operator>+=</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name><operator>-=</operator><operator>(</operator><name>uInt</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_buffer_ungetbyte</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Bytef</name></type> <name>cc</name> <init>= <expr><operator>(</operator><name>Bytef</name><operator>)</operator><name>c</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>zstream_buffer_ungets</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_append_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>rb_str_buf_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_buf_cat</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_obj_hide</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_buf_cat</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zstream_append_input2</name><parameter_list>(<parameter><type><name>z</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>RB_GC_GUARD(v),zstream_append_input((z), (Bytef*)RSTRING_PTR(v), RSTRING_LEN(v))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_discard_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RBASIC_CLASS</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>oldlen</name></decl>, <decl><type ref="prev"/><name>newlen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RSTRING_GETMEM</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <name>oldlen</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_gc_force_recycle</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>rb_str_substr</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_reset_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RBASIC_CLASS</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_passthrough_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_append_buffer2</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zstream_detach_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_obj_reveal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>rb_cString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>z</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>ZSTREAM_FLAG_READY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_reset_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zstream_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_READY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"attempt to close uninitialized zstream; ignored."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ZSTREAM_FLAG_IN_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"attempt to close unfinished zstream; reset forced."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_reset</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>zstream_reset_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>z</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>end</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zstream_ensure_end</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>zstream_end</name><argument_list>(<argument><expr><operator>(</operator>struct <name>zstream</name> <operator>*</operator><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>zstream_run_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream_run_args</name></name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator>struct <name>zstream_run_args</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>state</name></decl>, <decl><type ref="prev"/><name>flush</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>flush</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uInt</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>Z_OK</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>interrupt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>z</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ZSTREAM_FLAG_IN_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ZSTREAM_FLAG_FINISHED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>Z_BUF_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ZSTREAM_FLAG_IN_STREAM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <operator>&amp;</operator><name>inflate_funcs</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ZSTREAM_FLAG_IN_STREAM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stream_output</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>rb_thread_call_with_gvl</name><argument_list>(<argument><expr><name>zstream_expand_buffer_protect</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>zstream_expand_buffer_non_stream</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>Z_OK</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>jump_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><name>err</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_unblock_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream_run_args</name></name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator>struct <name>zstream_run_args</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>interrupt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_run</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream_run_args</name></name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>old_input</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>flush</name></name> <operator>=</operator> <name>flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>interrupt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>jump_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>stream_output</name></name> <operator>=</operator> <operator>!</operator><call><name>ZSTREAM_IS_GZFILE</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>zstream_append_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>old_input</name> <operator>=</operator> <call><name>zstream_detach_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_obj_hide</name><argument_list>(<argument><expr><name>old_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>old_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <call><name>MAX_UINT</name><argument_list>(<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>old_input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_expand_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>loop</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RB_NOGVL_UBF_ASYNC_SAFE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>rb_thread_call_without_gvl</name><argument_list>(<argument><expr><name>zstream_run_func</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>args</name></expr></argument>,
<argument><expr><name>zstream_unblock_func</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>rb_nogvl</name><argument_list>(<argument><expr><name>zstream_run_func</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>args</name></expr></argument>,
<argument><expr><name>zstream_unblock_func</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>args</name></expr></argument>,
<argument><expr><name>RB_NOGVL_UBF_ASYNC_SAFE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>!=</operator> <name>Z_FINISH</name> <operator>&amp;&amp;</operator> <name>err</name> <operator>==</operator> <name>Z_BUF_ERROR</name>
<operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ZSTREAM_FLAG_IN_STREAM</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>zstream_reset_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_append_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>Z_NEED_DICT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>self</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>self</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dicts</name> <init>= <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_dictionaries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dict</name> <init>= <expr><call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>dicts</name></expr></argument>, <argument><expr><call><name>rb_uint2inum</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>adler</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_inflate_set_dictionary</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_append_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>old_input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>old_input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_force_recycle</name><argument_list>(<argument><expr><name>old_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>jump_state</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>jump_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zstream_sync</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <call><name>MAX_UINT</name><argument_list>(<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>inflateSync</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_discard_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>,
<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_append_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zstream_reset_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_DATA_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <call><name>MAX_UINT</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>inflateSync</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_append_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_DATA_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_finalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name><name>z</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>end</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>Z_STREAM_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>finalizer_warn</name><argument_list>(<argument><expr><literal type="string">"the stream state was inconsistent."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>Z_DATA_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>finalizer_warn</name><argument_list>(<argument><expr><literal type="string">"the stream was freed prematurely."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstream_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_READY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_finalize</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>zstream_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>zstream</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>zstream_data_type</name> <init>= <expr><block>{
<expr><literal type="string">"zstream"</literal></expr>,
<expr><block>{ <expr><name>zstream_mark</name></expr>, <expr><name>zstream_free</name></expr>, <expr><name>zstream_memsize</name></expr>, }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zstream_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>zstream_funcs</name></name> <modifier>*</modifier></type><name>funcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>zstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zstream_data_type</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_init</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <operator>(</operator><name>voidpf</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zstream_deflate_new</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>zstream_new((klass), &amp;deflate_funcs)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zstream_inflate_new</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>zstream_new((klass), &amp;inflate_funcs)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type>
<name>get_zstream</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>zstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zstream_data_type</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_READY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cZError</name></expr></argument>, <argument><expr><literal type="string">"stream is not ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>





































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_end</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>zstream_end</name><argument_list>(<argument><expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_reset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>zstream_reset</name><argument_list>(<argument><expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_finish</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_flush_next_in</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>zstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zstream_data_type</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>zstream_detach_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_flush_next_out</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>zstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zstream_data_type</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_avail_out</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>zstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zstream_data_type</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_uint2inum</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_set_avail_out</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zstream_expand_buffer_into</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_avail_in</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>zstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zstream_data_type</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_total_in</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_uint2inum</name><argument_list>(<argument><expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>stream</name><operator>.</operator><name>total_in</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_total_out</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_uint2inum</name><argument_list>(<argument><expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>stream</name><operator>.</operator><name>total_out</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_data_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>stream</name><operator>.</operator><name>data_type</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_adler</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_uint2inum</name><argument_list>(<argument><expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>stream</name><operator>.</operator><name>adler</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_finished_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_zstream_closed_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>zstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zstream_data_type</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>ZSTREAM_IS_READY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXNUMARG</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>ifnil</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(NIL_P((val)) ? (ifnil) : (FIX2INT((val))))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_LEVEL</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIXNUMARG((val), Z_DEFAULT_COMPRESSION)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_WBITS</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIXNUMARG((val), MAX_WBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_MEMLEVEL</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIXNUMARG((val), DEF_MEM_LEVEL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_STRATEGY</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIXNUMARG((val), Z_DEFAULT_STRATEGY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_FLUSH</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FIXNUMARG((val), Z_NO_FLUSH)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_deflate_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>zstream_deflate_new</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_deflate_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>wbits</name></decl>, <decl><type ref="prev"/><name>memlevel</name></decl>, <decl><type ref="prev"/><name>strategy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"04"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memlevel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>zstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zstream_data_type</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>deflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><call><name>ARG_LEVEL</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Z_DEFLATED</name></expr></argument>,
<argument><expr><call><name>ARG_WBITS</name><argument_list>(<argument><expr><name>wbits</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG_MEMLEVEL</name><argument_list>(<argument><expr><name>memlevel</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ARG_STRATEGY</name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ZSTREAM_READY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_deflate_init_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>orig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>zstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zstream_data_type</name></expr></argument>, <argument><expr><name>z1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>get_zstream</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>z1</name> <operator>==</operator> <name>z2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>deflateCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z1</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z2</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>z1</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z2</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qnil</name></expr> </then><else>: <expr><call><name>rb_str_dup</name><argument_list>(<argument><expr><name><name>z2</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z1</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>z2</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qnil</name></expr> </then><else>: <expr><call><name>rb_str_dup</name><argument_list>(<argument><expr><name><name>z2</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z1</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>z2</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>deflate_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator>struct <name>zstream</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>VALUE</name><operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>src</name> <init>= <expr><operator>(</operator><operator>(</operator><name>VALUE</name><operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_deflate_s_deflate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>, <decl><type ref="prev"/><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>lev</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lev</name> <operator>=</operator> <call><name>ARG_LEVEL</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_init_deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>deflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>.</operator><name>stream</name></name></expr></argument>, <argument><expr><name>lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ZSTREAM_READY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_ensure</name><argument_list>(<argument><expr><name>deflate_run</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><name>zstream_ensure_end</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>!=</operator> <name>Z_NO_FLUSH</name> <operator>||</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_deflate_deflate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>flush</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_deflate</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>ARG_FLUSH</name><argument_list>(<argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_deflate_addstr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_deflate</name><argument_list>(<argument><expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_deflate_flush</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v_flush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flush</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <call><name>FIXNUMARG</name><argument_list>(<argument><expr><name>v_flush</name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>!=</operator> <name>Z_NO_FLUSH</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_deflate_params</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v_level</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v_strategy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>strategy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uInt</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>filled</name></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>ARG_LEVEL</name><argument_list>(<argument><expr><name>v_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strategy</name> <operator>=</operator> <call><name>ARG_STRATEGY</name><argument_list>(<argument><expr><name>v_strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>deflateParams</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filled</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>err</name> <operator>==</operator> <name>Z_BUF_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"deflateParams() returned Z_BUF_ERROR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_expand_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>filled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>deflateParams</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filled</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>filled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_deflate_set_dictionary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>src</name> <init>= <expr><name>dic</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>deflateSetDictionary</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>dic</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_inflate_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>inflate</name> <init>= <expr><call><name>zstream_inflate_new</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>inflate</name></expr></argument>, <argument><expr><name>id_dictionaries</name></expr></argument>, <argument><expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>inflate</name></expr>;</return>
</block_content>}</block></function>














































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_inflate_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>wbits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>zstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zstream_data_type</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>inflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><call><name>ARG_WBITS</name><argument_list>(<argument><expr><name>wbits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ZSTREAM_READY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>inflate_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator>struct <name>zstream</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>VALUE</name><operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>src</name> <init>= <expr><operator>(</operator><operator>(</operator><name>VALUE</name><operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_inflate_s_inflate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>, <decl><type ref="prev"/><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_init_inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ZSTREAM_READY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_ensure</name><argument_list>(<argument><expr><name>inflate_run</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><name>zstream_ensure_end</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_inflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_inflate_add_dictionary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dictionary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dictionaries</name> <init>= <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_dictionaries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>checksum</name> <init>= <expr><call><name>do_checksum</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dictionary</name></expr></argument>, <argument><expr><name>adler32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>dictionaries</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><name>dictionary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>






































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_inflate_inflate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_append_buffer2</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>do_inflate</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_passthrough_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_inflate_addstr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_append_buffer2</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>do_inflate</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_passthrough_input</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_inflate_sync</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>zstream_sync</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_inflate_sync_point_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>inflateSyncPoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_inflate_set_dictionary</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>get_zstream</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>src</name> <init>= <expr><name>dic</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>inflateSetDictionary</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>dic</name></expr>;</return>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GZIP_SUPPORT</name></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_MAGIC1</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_MAGIC2</name></cpp:macro> <cpp:value>0x8b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_METHOD_DEFLATE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_FLAG_MULTIPART</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_FLAG_EXTRA</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_FLAG_ORIG_NAME</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_FLAG_COMMENT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_FLAG_ENCRYPT</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_FLAG_UNKNOWN_MASK</name></cpp:macro> <cpp:value>0xc0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_EXTRAFLAG_FAST</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_EXTRAFLAG_SLOW</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_MSDOS</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_AMIGA</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_VMS</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_UNIX</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_ATARI</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_OS2</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_MACOS</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_TOPS20</name></cpp:macro> <cpp:value>0x0a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_WIN32</name></cpp:macro> <cpp:value>0x0b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_VMCMS</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_ZSYSTEM</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_CPM</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_QDOS</name></cpp:macro> <cpp:value>0x0c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_RISCOS</name></cpp:macro> <cpp:value>0x0d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_UNKNOWN</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_CODE</name></cpp:macro> <cpp:value>OS_UNIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_write</name></decl>, <decl><type ref="prev"/><name>id_read</name></decl>, <decl><type ref="prev"/><name>id_readpartial</name></decl>, <decl><type ref="prev"/><name>id_flush</name></decl>, <decl><type ref="prev"/><name>id_seek</name></decl>, <decl><type ref="prev"/><name>id_close</name></decl>, <decl><type ref="prev"/><name>id_path</name></decl>, <decl><type ref="prev"/><name>id_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cGzError</name></decl>, <decl><type ref="prev"/><name>cNoFooter</name></decl>, <decl><type ref="prev"/><name>cCRCError</name></decl>, <decl><type ref="prev"/><name>cLengthError</name></decl>;</decl_stmt>





<struct>struct <name>gzfile</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>os_code</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VALUE</name></type> <name>orig_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VALUE</name></type> <name>comment</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ecflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ungetc</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>end</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ecopts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZFILE_CBUF_CAPA</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZFILE_FLAG_SYNC</name></cpp:macro> <cpp:value>ZSTREAM_FLAG_UNUSED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZFILE_FLAG_HEADER_FINISHED</name></cpp:macro> <cpp:value>(ZSTREAM_FLAG_UNUSED &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZFILE_FLAG_FOOTER_FINISHED</name></cpp:macro> <cpp:value>(ZSTREAM_FLAG_UNUSED &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZFILE_FLAG_MTIME_IS_SET</name></cpp:macro> <cpp:value>(ZSTREAM_FLAG_UNUSED &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZFILE_IS_FINISHED</name><parameter_list>(<parameter><type><name>gz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ZSTREAM_IS_FINISHED(&amp;(gz)-&gt;z) &amp;&amp; ZSTREAM_BUF_FILLED(&amp;(gz)-&gt;z) == 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZFILE_READ_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<struct>struct <name>read_raw_arg</name> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<struct>struct <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>buf</name></decl>;</decl_stmt>
}</block> <decl><name>in</name></decl>;</struct>
}</block> <decl><name>as</name></decl>;</union>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>orig_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_mark</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>ecopts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zstream</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_READY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <operator>&amp;</operator><name>deflate_funcs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>finalizer_warn</name><argument_list>(<argument><expr><literal type="string">"Zlib::GzipWriter object must be closed explicitly."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zstream_finalize</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>gzfile_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gzfile</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>gzfile_data_type</name> <init>= <expr><block>{
<expr><literal type="string">"gzfile"</literal></expr>,
<expr><block>{ <expr><name>gzfile_mark</name></expr>, <expr><name>gzfile_free</name></expr>, <expr><name>gzfile_memsize</name></expr>, }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>zstream_funcs</name></name> <modifier>*</modifier></type><name>funcs</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>endfunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>zstream_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>ZSTREAM_FLAG_GZFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>os_code</name></name> <operator>=</operator> <name>OS_CODE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>orig_name</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Z_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ungetc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>endfunc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator> <call><name>rb_default_external_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ecflags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ecopts</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>zstream_funcs</name></name> <modifier>*</modifier></type><name>funcs</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>endfunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>gzfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gzfile_data_type</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_init</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>funcs</name></expr></argument>, <argument><expr><name>endfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gzfile_writer_new</name><parameter_list>(<parameter><type><name>gz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gzfile_new((gz),&amp;deflate_funcs,gzfile_writer_end)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gzfile_reader_new</name><parameter_list>(<parameter><type><name>gz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gzfile_new((gz),&amp;inflate_funcs,gzfile_reader_end)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>zstream_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>ZSTREAM_FLAG_GZFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Z_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ungetc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>ec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_econv_close</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ec</name></name> <operator>=</operator> <call><name>rb_econv_open_opts</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>ecflags</name></name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>ecopts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>closeflag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name> <init>= <expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>gz</name><operator>-&gt;</operator><name>end</name></name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>orig_name</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>closeflag</name> <operator>&amp;&amp;</operator> <call><name>rb_respond_to</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id_close</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id_close</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_write_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>id_write</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_SYNC</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>rb_respond_to</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>id_flush</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>id_flush</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_read_raw_partial</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>read_raw_arg</name></name> <modifier>*</modifier></type><name>ra</name> <init>= <expr><operator>(</operator>struct <name>read_raw_arg</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>id_readpartial</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_read_raw_rescue</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>read_raw_arg</name></name> <modifier>*</modifier></type><name>ra</name> <init>= <expr><operator>(</operator>struct <name>read_raw_arg</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><call><name>rb_errinfo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rb_eNoMethodError</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>id_read</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name><name>ra</name><operator>-&gt;</operator><name>as</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_read_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>read_raw_arg</name></name></type> <name>ra</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ra</name><operator>.</operator><name>io</name></name> <operator>=</operator> <name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ra</name><operator>.</operator><name>as</name><operator>.</operator><name>in</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>GZFILE_READ_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ra</name><operator>.</operator><name>as</name><operator>.</operator><name>in</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>outbuf</name></expr>;</expr_stmt>

<return>return <expr><call><name>rb_rescue2</name><argument_list>(<argument><expr><name>gzfile_read_raw_partial</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>ra</name></expr></argument>,
<argument><expr><name>gzfile_read_raw_rescue</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>ra</name></expr></argument>,
<argument><expr><name>rb_eEOFError</name></expr></argument>, <argument><expr><name>rb_eNoMethodError</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gzfile_read_raw_ensure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>gzfile_read_raw</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>zstream_append_input2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>gzfile_read_raw_until_zero</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>,
<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>gzfile_read_raw</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_append_input2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>gzfile_get16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>|=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>gzfile_get32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>|=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>|=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>|=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffU</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_set32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>n</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_raise</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>exc</name> <init>= <expr><call><name>rb_exc_new2</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>id_input</name></expr></argument>, <argument><expr><call><name>rb_str_resurrect</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_error_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_call_super</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>input</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>id_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">", input="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>rb_str_inspect</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_make_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Bytef</name></type> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>extraflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>orig_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>GZ_FLAG_ORIG_NAME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>GZ_FLAG_COMMENT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_MTIME_IS_SET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>Z_BEST_SPEED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extraflags</name> <operator>|=</operator> <name>GZ_EXTRAFLAG_FAST</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>Z_BEST_COMPRESSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extraflags</name> <operator>|=</operator> <name>GZ_EXTRAFLAG_SLOW</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GZ_MAGIC1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GZ_MAGIC2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GZ_METHOD_DEFLATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_set32</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>gz</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>extraflags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>gz</name><operator>-&gt;</operator><name>os_code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_append_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>orig_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_append_buffer2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>orig_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_append_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_append_buffer2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_append_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>GZFILE_FLAG_HEADER_FINISHED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_make_footer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Bytef</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>gzfile_set32</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_set32</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>total_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_append_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>GZFILE_FLAG_FOOTER_FINISHED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>flags</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gzfile_read_raw_ensure</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_raise</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"not in gzip format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>head</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>head</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>GZ_MAGIC1</name> <operator>||</operator> <name><name>head</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>GZ_MAGIC2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_raise</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"not in gzip format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>head</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>GZ_METHOD_DEFLATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"unsupported compression method %d"</literal></expr></argument>, <argument><expr><name><name>head</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>head</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GZ_FLAG_MULTIPART</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"multi-part gzip file is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GZ_FLAG_ENCRYPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"encrypted gzip file is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GZ_FLAG_UNKNOWN_MASK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"unknown flags 0x%02x"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>head</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <name>GZ_EXTRAFLAG_FAST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>Z_BEST_SPEED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>head</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <name>GZ_EXTRAFLAG_SLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>Z_BEST_COMPRESSION</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>Z_DEFAULT_COMPRESSION</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>gzfile_get32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>head</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>os_code</name></name> <operator>=</operator> <name><name>head</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_discard_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GZ_FLAG_EXTRA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gzfile_read_raw_ensure</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>gzfile_get16</name><argument_list>(<argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gzfile_read_raw_ensure</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zstream_discard_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GZ_FLAG_ORIG_NAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gzfile_read_raw_ensure</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>gzfile_read_raw_until_zero</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>orig_name</name></name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_discard_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GZ_FLAG_COMMENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gzfile_read_raw_ensure</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>gzfile_read_raw_until_zero</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_discard_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name> <operator>!=</operator> <name>Qnil</name> <operator>&amp;&amp;</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_check_footer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>GZFILE_FLAG_FOOTER_FINISHED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gzfile_read_raw_ensure</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_raise</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>cNoFooter</name></expr></argument>, <argument><expr><literal type="string">"footer is not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>gzfile_get32</name><argument_list>(<argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>gzfile_get32</name><argument_list>(<argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>zstream_discard_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>crc</name></name> <operator>!=</operator> <name>crc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cCRCError</name></expr></argument>, <argument><expr><literal type="string">"invalid compressed data -- crc error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>!=</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cLengthError</name></expr></argument>, <argument><expr><literal type="string">"invalid compressed data -- length error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_HEADER_FINISHED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_make_header</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_SYNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>checksum_long</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_SYNC</name><operator>)</operator></expr>
?</condition><then> <expr><name>Z_SYNC_FLUSH</name></expr> </then><else>: <expr><name>Z_NO_FLUSH</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_write_raw</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>gzfile_read_more</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>gzfile_read_raw</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_calc_crc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>gz</name><operator>-&gt;</operator><name>ungetc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ungetc</name></name> <operator>-=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>checksum_long</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gz</name><operator>-&gt;</operator><name>ungetc</name></name></expr></argument>,
<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>gz</name><operator>-&gt;</operator><name>ungetc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ungetc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_newstr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>ec</name></name> <operator>&amp;&amp;</operator> <call><name>rb_enc_dummy_p</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_econv_str_convert</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ECONV_PARTIAL_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_str_conv_enc_opts</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>,
<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>ecflags</name></name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>ecopts</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>gzfile_fill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative length %ld given"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_read_more</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>GZFILE_IS_FINISHED</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_FOOTER_FINISHED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_check_footer</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>len</name> <operator>&lt;</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>gzfile_fill</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>zstream_shift_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gzfile_calc_crc</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_readpartial</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>outbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative length %ld given"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>outbuf</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_read_more</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>GZFILE_IS_FINISHED</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_FOOTER_FINISHED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_check_footer</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eEOFError</name></expr></argument>, <argument><expr><literal type="string">"end of file reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>zstream_shift_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_calc_crc</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_force_recycle</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>outbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_read_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_read_more</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>GZFILE_IS_FINISHED</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_FOOTER_FINISHED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_check_footer</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dst</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_calc_crc</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gzfile_newstr</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_getc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>buf</name></decl>, <decl><type ref="prev"/><name>dst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rb_enc_mbmaxlen</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_read_more</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>GZFILE_IS_FINISHED</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_FOOTER_FINISHED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_check_footer</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>ec</name></name> <operator>&amp;&amp;</operator> <call><name>rb_enc_dummy_p</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ss</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>se</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ds</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cbuf</name> <init>= <expr><call><name>rb_enc_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GZFILE_CBUF_CAPA</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <name>sp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>se</name> <operator>=</operator> <name>sp</name> <operator>+</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ds</name> <operator>=</operator> <name>dp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ds</name> <operator>+</operator> <name>GZFILE_CBUF_CAPA</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rb_econv_convert</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>se</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr><name>ECONV_PARTIAL_INPUT</name><operator>|</operator><name>ECONV_AFTER_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_econv_check_error</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>zstream_shift_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>sp</name> <operator>-</operator> <name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_calc_crc</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>dp</name> <operator>-</operator> <name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cbuf</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rb_enc_mbclen</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_END</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>gzfile_read</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dst</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>gzfile_newstr</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_ungets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Bytef</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>zstream_buffer_ungets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ungetc</name></name><operator>+=</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_ungetbyte</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>zstream_buffer_ungetbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ungetc</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_writer_end_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><operator>(</operator>struct <name>gzfile</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_HEADER_FINISHED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_make_header</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_make_footer</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_write_raw</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_writer_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_CLOSING</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>ZSTREAM_FLAG_CLOSING</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>gzfile_writer_end_run</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>gz</name></expr></argument>, <argument><expr><name>zstream_ensure_end</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_reader_end_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><operator>(</operator>struct <name>gzfile</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GZFILE_IS_FINISHED</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_FOOTER_FINISHED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_check_footer</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_reader_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_CLOSING</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>ZSTREAM_FLAG_CLOSING</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>gzfile_reader_end_run</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>gz</name></expr></argument>, <argument><expr><name>zstream_ensure_end</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzfile_reader_rewind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>total_in</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>id_seek</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>rb_int2inum</name><argument_list>(<argument><expr><operator>-</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_reset</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_reader_get_unused</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_READY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GZFILE_IS_FINISHED</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_FOOTER_FINISHED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_check_footer</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_resurrect</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type>
<name>get_gzfile</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>gzfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gzfile_data_type</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_READY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"closed gzip stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>gz</name></expr>;</return>
</block_content>}</block></function>










































<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name></decl>;</decl_stmt>
}</block></struct></type> <name>new_wrap_arg_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>new_wrap</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>new_wrap_arg_t</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>new_wrap_arg_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_class_new_instance_kw</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>klass</name></name></expr></argument>, <argument><expr><name>RB_PASS_CALLED_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_ensure_close</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>gzfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gzfile_data_type</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_READY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzfile_close</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_wrap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>close_io_on_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>close_io_on_error</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>new_wrap_arg_t</name></type> <name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>klass</name></name> <operator>=</operator> <name>klass</name></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><name>new_wrap</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_io_close</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_class_new_instance_kw</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>RB_PASS_CALLED_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>gzfile_ensure_close</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_s_wrap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>gzfile_wrap</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzfile_s_open</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name></decl>, <decl><type ref="prev"/><name>filename</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UNLIMITED_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>io</name> <operator>=</operator> <call><name>rb_file_open_str</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>
<return>return <expr><call><name>gzfile_wrap</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_to_io</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>io</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_crc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_uint2inum</name><argument_list>(<argument><expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>crc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_mtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_time_new</name><argument_list>(<argument><expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>mtime</name></expr></argument>, <argument><expr><operator>(</operator><name>time_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_level</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>level</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_os_code</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>os_code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_orig_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>orig_name</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_comment</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>comment</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_lineno</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>lineno</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_set_lineno</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>lineno</name></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_set_mtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>mtime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_HEADER_FINISHED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"header is already written"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_Integer</name><argument_list>(<argument><expr><name>mtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>NUM2UINT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>GZFILE_FLAG_MTIME_IS_SET</name></expr>;</expr_stmt>

<return>return <expr><name>mtime</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_set_orig_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_HEADER_FINISHED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"header is already written"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><call><name>rb_str_to_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>orig_name</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_set_comment</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_HEADER_FINISHED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"header is already written"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><call><name>rb_str_to_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_close</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>gzfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gzfile_data_type</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_READY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>io</name> <operator>=</operator> <name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_close</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>io</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_finish</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name></decl>;</decl_stmt>

<expr_stmt><expr><name>io</name> <operator>=</operator> <name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_close</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>io</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_closed_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>gzfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gzfile_data_type</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_eof_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><call><name>GZFILE_IS_FINISHED</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_sync</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GZFILE_FLAG_SYNC</name><operator>)</operator></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_set_sync</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>GZFILE_FLAG_SYNC</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>GZFILE_FLAG_SYNC</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_total_in</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_uint2inum</name><argument_list>(<argument><expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>total_in</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_total_out</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>total_out</name> <init>= <expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>total_out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>buf_filled</name> <init>= <expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>total_out</name> <operator>&gt;=</operator> <operator>(</operator><name>uLong</name><operator>)</operator><name>buf_filled</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_uint2inum</name><argument_list>(<argument><expr><name>total_out</name> <operator>-</operator> <name>buf_filled</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>buf_filled</name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name>total_out</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzfile_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>gzfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gzfile_data_type</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>gz</name><operator>-&gt;</operator><name>path</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_gzfile_ecopts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_io_extract_encoding_option</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ecflags</name></name> <operator>=</operator> <call><name>rb_econv_prepare_opts</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ec</name></name> <operator>=</operator> <call><name>rb_econv_open_opts</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>ecflags</name></name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>ecopts</name></name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzwriter_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>gzfile_writer_new</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzwriter_s_open</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>gzfile_s_open</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzwriter_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>strategy</name></decl>, <decl><type ref="prev"/><name>opt</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>rb_check_convert_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>, <argument><expr><literal type="string">"Hash"</literal></expr></argument>, <argument><expr><literal type="string">"to_hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"12"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>gzfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gzfile_data_type</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <call><name>ARG_LEVEL</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>deflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>Z_DEFLATED</name></expr></argument>,
<argument><expr><operator>-</operator><name>MAX_WBITS</name></expr></argument>, <argument><expr><name>DEF_MEM_LEVEL</name></expr></argument>, <argument><expr><call><name>ARG_STRATEGY</name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ZSTREAM_READY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gzfile_ecopts</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_respond_to</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>id_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>rb_gzfile_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzwriter_flush</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v_flush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flush</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flush</name> <operator>=</operator> <call><name>FIXNUMARG</name><argument_list>(<argument><expr><name>v_flush</name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>!=</operator> <name>Z_NO_FLUSH</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gzfile_write_raw</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_respond_to</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>id_flush</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>id_flush</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzwriter_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>argc</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><operator>*</operator><name>argv</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_obj_as_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name> <operator>&amp;&amp;</operator> <name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name> <operator>!=</operator> <call><name>rb_ascii8bit_encoding</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_conv_enc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_write</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>SIZET2NUM</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzwriter_putc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>NUM2CHR</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gzfile_write</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_gzwriter_addstr</name></cpp:macro> <cpp:value>rb_io_addstr</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_gzwriter_printf</name></cpp:macro> <cpp:value>rb_io_printf</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_gzwriter_print</name></cpp:macro> <cpp:value>rb_io_print</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_gzwriter_puts</name></cpp:macro> <cpp:value>rb_io_puts</cpp:value></cpp:define>
























































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>gzfile_reader_new</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_s_open</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>gzfile_s_open</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name></decl>, <decl><type ref="prev"/><name>opt</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>gzfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gzfile_data_type</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>inflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>-</operator><name>MAX_WBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ZSTREAM_READY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_read_header</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gzfile_ecopts</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_respond_to</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>id_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>rb_gzfile_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_rewind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gzfile_reader_rewind</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_unused</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>gzfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gzfile_data_type</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gzfile_reader_get_unused</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>gzfile_read_all</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative length %ld given"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>gzfile_read</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_readpartial</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vlen</name></decl>, <decl><type ref="prev"/><name>outbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative length %ld given"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>gzfile_readpartial</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_getc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>gzfile_getc</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_readchar</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_gzreader_getc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eEOFError</name></expr></argument>, <argument><expr><literal type="string">"end of file reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_getbyte</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>gzfile_read</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_readbyte</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_gzreader_getbyte</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eEOFError</name></expr></argument>, <argument><expr><literal type="string">"end of file reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_each_char</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>c</name> <operator>=</operator> <call><name>rb_gzreader_getc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_each_byte</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>c</name> <operator>=</operator> <call><name>rb_gzreader_getbyte</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_bytes</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"Zlib::GzipReader#bytes is deprecated; use #each_byte instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_enumeratorize</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"each_byte"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_gzreader_each_byte</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_ungetc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_gzreader_ungetbyte</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gz</name> <operator>=</operator> <call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name> <operator>&amp;&amp;</operator> <name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name> <operator>!=</operator> <call><name>rb_ascii8bit_encoding</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_str_conv_enc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_ungets</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>Bytef</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_ungetbyte</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gzfile_ungetbyte</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><call><name>NUM2CHR</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gzreader_skip_linebreaks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GZFILE_IS_FINISHED</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_read_more</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_calc_crc</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GZFILE_IS_FINISHED</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_read_more</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>zstream_shift_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_calc_crc</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rscheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rsptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rslen</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>rsptr</name> <operator>&amp;&amp;</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>rslen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"rs modified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>gzreader_charboundary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>s</name> <operator>+</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>rb_enc_left_char_head</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name> <init>= <expr><name>p</name> <operator>-</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_enc_precise_mbclen</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>MBCLEN_NEEDMORE_P</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>gzfile_fill</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <call><name>MBCLEN_NEEDMORE_LEN</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>MBCLEN_CHARFOUND_P</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>l</name> <operator>+</operator> <call><name>MBCLEN_CHARFOUND_LEN</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>gzreader_gets</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rsptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rslen</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rspara</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name><name>gz</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><call><name>rb_enc_mbmaxlen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rs</name> <operator>=</operator> <name>rb_rs</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>lim</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>lim</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_check_string_type</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <name>rs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rs</name> <operator>=</operator> <name>rb_rs</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rs</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>lim</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>gzfile_read_all</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>gzfile_fill</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;=</operator> <name>limit</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GZFILE_IS_FINISHED</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gzreader_charboundary</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>zstream_shift_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dst</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_calc_crc</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>gzfile_newstr</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>lineno</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rsptr</name> <operator>=</operator> <literal type="string">"\n\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rslen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rspara</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rsptr</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rslen</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rspara</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rspara</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzreader_skip_linebreaks</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>rslen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>lineno</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>gzfile_read</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>rslen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_read_more</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>rslen</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>filled</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_read_more</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>n</name> <operator>-</operator> <name>rslen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rspara</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rscheck</name><argument_list>(<argument><expr><name>rsptr</name></expr></argument>, <argument><expr><name>rslen</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>filled</name> <operator>=</operator> <call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>filled</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filled</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>rsptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>filled</name> <operator>-</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>filled</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>filled</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>res</name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rslen</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>rsptr</name></expr></argument>, <argument><expr><name>rslen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <name>limit</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ZSTREAM_BUF_FILLED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>n</name> <operator>||</operator> <operator>!</operator><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gzreader_charboundary</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>lineno</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>gzfile_read</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dst</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rspara</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gzreader_skip_linebreaks</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>gzfile_newstr</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_gets</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>gzreader_gets</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_lastline_set</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_readline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_gzreader_gets</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eEOFError</name></expr></argument>, <argument><expr><literal type="string">"end of file reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_each</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name> <operator>=</operator> <call><name>gzreader_gets</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"Zlib::GzipReader#lines is deprecated; use #each_line instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_enumeratorize</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"each_line"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_gzreader_each</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_readlines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name> <operator>=</operator> <call><name>gzreader_gets</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gzreader_external_encoding</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><call><name>get_gzfile</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zlib_gzip_end_rescue</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><operator>(</operator>struct <name>gzfile</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>gz</name><operator>-&gt;</operator><name>end</name></name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zlib_gzip_ensure</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_rescue</name><argument_list>(<argument><expr><name>zlib_gzip_end_rescue</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zlib_gzip_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>ZSTREAM_FLAG_CLOSING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_make_footer</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTHASH_GIVEN_P</name><parameter_list>(<parameter><type><name>opts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(argc &gt; 0 &amp;&amp; !NIL_P((opts) = rb_check_hash_type(argv[argc-1])) &amp;&amp; (--argc, 1))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_level</name></decl>, <decl><type ref="prev"/><name>id_strategy</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>zlib_gzip_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zlib_s_gzip</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name></type> <name>gz0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><operator>&amp;</operator><name>gz0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>opts</name></decl>, <decl><type ref="prev"/><name>level</name><init>=<expr><name>Qnil</name></expr></init></decl>, <decl><type ref="prev"/><name>strategy</name><init>=<expr><name>Qnil</name></expr></init></decl>, <decl><type ref="prev"/><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OPTHASH_GIVEN_P</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name><name>keyword_ids</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>kwargs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>keyword_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>id_level</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keyword_ids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>id_strategy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_get_kwargs</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>keyword_ids</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>kwargs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>kwargs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>kwargs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>strategy</name> <operator>=</operator> <name><name>kwargs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_init</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deflate_funcs</name></expr></argument>, <argument><expr><name>zlib_gzip_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <call><name>ARG_LEVEL</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>deflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>Z_DEFLATED</name></expr></argument>,
<argument><expr><operator>-</operator><name>MAX_WBITS</name></expr></argument>, <argument><expr><name>DEF_MEM_LEVEL</name></expr></argument>, <argument><expr><call><name>ARG_STRATEGY</name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zlib_gzip_end</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ZSTREAM_READY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><name>gz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>zlib_gzip_run</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><name>zlib_gzip_ensure</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>gz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zlib_gzip_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><operator>(</operator>struct <name>gzfile</name> <operator>*</operator><operator>)</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>src</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gzfile_make_header</name><argument_list>(<argument><expr><name>gz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Bytef</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>checksum_long</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_close</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zlib_gunzip_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>ZSTREAM_FLAG_CLOSING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zstream_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>zlib_gunzip_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zlib_gunzip</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name></type> <name>gz0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><operator>&amp;</operator><name>gz0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gzfile_init</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inflate_funcs</name></expr></argument>, <argument><expr><name>zlib_gunzip_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>inflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>-</operator><name>MAX_WBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raise_zlib_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <name>Qundef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ZSTREAM_READY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>zlib_gunzip_run</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>gz</name></expr></argument>, <argument><expr><name>zlib_gzip_ensure</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>gz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>zlib_gunzip_run</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gzfile</name></name> <modifier>*</modifier></type><name>gz</name> <init>= <expr><operator>(</operator>struct <name>gzfile</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gzfile_read_header</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>zstream_detach_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzfile_calc_crc</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ZSTREAM_IS_FINISHED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gz</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>gz</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>cNoFooter</name></expr></argument>, <argument><expr><literal type="string">"footer is not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gzfile_check_footer</name><argument_list>(<argument><expr><name>gz</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>
<name>Init_zlib</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mZlib</name></decl>, <decl><type ref="prev"/><name>cZStream</name></decl>, <decl><type ref="prev"/><name>cDeflate</name></decl>, <decl><type ref="prev"/><name>cInflate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GZIP_SUPPORT</name></expr></cpp:if>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cGzipFile</name></decl>, <decl><type ref="prev"/><name>cGzipWriter</name></decl>, <decl><type ref="prev"/><name>cGzipReader</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>mZlib</name> <operator>=</operator> <call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"Zlib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_dictionaries</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@dictionaries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cZError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>, <argument><expr><name>rb_eStandardError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cStreamEnd</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"StreamEnd"</literal></expr></argument>, <argument><expr><name>cZError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cNeedDict</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"NeedDict"</literal></expr></argument>, <argument><expr><name>cZError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cDataError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"DataError"</literal></expr></argument>, <argument><expr><name>cZError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cStreamError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"StreamError"</literal></expr></argument>, <argument><expr><name>cZError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cMemError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"MemError"</literal></expr></argument>, <argument><expr><name>cZError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cBufError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"BufError"</literal></expr></argument>, <argument><expr><name>cZError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cVersionError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"VersionError"</literal></expr></argument>, <argument><expr><name>cZError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"zlib_version"</literal></expr></argument>, <argument><expr><name>rb_zlib_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"adler32"</literal></expr></argument>, <argument><expr><name>rb_zlib_adler32</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"adler32_combine"</literal></expr></argument>, <argument><expr><name>rb_zlib_adler32_combine</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"crc32"</literal></expr></argument>, <argument><expr><name>rb_zlib_crc32</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"crc32_combine"</literal></expr></argument>, <argument><expr><name>rb_zlib_crc32_combine</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"crc_table"</literal></expr></argument>, <argument><expr><name>rb_zlib_crc_table</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>RUBY_ZLIB_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"ZLIB_VERSION"</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>ZLIB_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cZStream</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"ZStream"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_undef_alloc_func</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"avail_out"</literal></expr></argument>, <argument><expr><name>rb_zstream_avail_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"avail_out="</literal></expr></argument>, <argument><expr><name>rb_zstream_set_avail_out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"avail_in"</literal></expr></argument>, <argument><expr><name>rb_zstream_avail_in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"total_in"</literal></expr></argument>, <argument><expr><name>rb_zstream_total_in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"total_out"</literal></expr></argument>, <argument><expr><name>rb_zstream_total_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"data_type"</literal></expr></argument>, <argument><expr><name>rb_zstream_data_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"adler"</literal></expr></argument>, <argument><expr><name>rb_zstream_adler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"finished?"</literal></expr></argument>, <argument><expr><name>rb_zstream_finished_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"stream_end?"</literal></expr></argument>, <argument><expr><name>rb_zstream_finished_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"closed?"</literal></expr></argument>, <argument><expr><name>rb_zstream_closed_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"ended?"</literal></expr></argument>, <argument><expr><name>rb_zstream_closed_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><name>rb_zstream_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>, <argument><expr><name>rb_zstream_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><name>rb_zstream_reset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"finish"</literal></expr></argument>, <argument><expr><name>rb_zstream_finish</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"flush_next_in"</literal></expr></argument>, <argument><expr><name>rb_zstream_flush_next_in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cZStream</name></expr></argument>, <argument><expr><literal type="string">"flush_next_out"</literal></expr></argument>, <argument><expr><name>rb_zstream_flush_next_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_BINARY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"ASCII"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_ASCII</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Z_TEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_TEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_UNKNOWN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cDeflate</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"Deflate"</literal></expr></argument>, <argument><expr><name>cZStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDeflate</name></expr></argument>, <argument><expr><literal type="string">"deflate"</literal></expr></argument>, <argument><expr><name>rb_deflate_s_deflate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"deflate"</literal></expr></argument>, <argument><expr><name>rb_deflate_s_deflate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cDeflate</name></expr></argument>, <argument><expr><name>rb_deflate_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDeflate</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>rb_deflate_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDeflate</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>rb_deflate_init_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDeflate</name></expr></argument>, <argument><expr><literal type="string">"deflate"</literal></expr></argument>, <argument><expr><name>rb_deflate_deflate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDeflate</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><name>rb_deflate_addstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDeflate</name></expr></argument>, <argument><expr><literal type="string">"flush"</literal></expr></argument>, <argument><expr><name>rb_deflate_flush</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDeflate</name></expr></argument>, <argument><expr><literal type="string">"params"</literal></expr></argument>, <argument><expr><name>rb_deflate_params</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDeflate</name></expr></argument>, <argument><expr><literal type="string">"set_dictionary"</literal></expr></argument>, <argument><expr><name>rb_deflate_set_dictionary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cInflate</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"Inflate"</literal></expr></argument>, <argument><expr><name>cZStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cInflate</name></expr></argument>, <argument><expr><literal type="string">"inflate"</literal></expr></argument>, <argument><expr><name>rb_inflate_s_inflate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"inflate"</literal></expr></argument>, <argument><expr><name>rb_inflate_s_inflate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cInflate</name></expr></argument>, <argument><expr><name>rb_inflate_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cInflate</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>rb_inflate_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cInflate</name></expr></argument>, <argument><expr><literal type="string">"add_dictionary"</literal></expr></argument>, <argument><expr><name>rb_inflate_add_dictionary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cInflate</name></expr></argument>, <argument><expr><literal type="string">"inflate"</literal></expr></argument>, <argument><expr><name>rb_inflate_inflate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cInflate</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><name>rb_inflate_addstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cInflate</name></expr></argument>, <argument><expr><literal type="string">"sync"</literal></expr></argument>, <argument><expr><name>rb_inflate_sync</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cInflate</name></expr></argument>, <argument><expr><literal type="string">"sync_point?"</literal></expr></argument>, <argument><expr><name>rb_inflate_sync_point_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cInflate</name></expr></argument>, <argument><expr><literal type="string">"set_dictionary"</literal></expr></argument>, <argument><expr><name>rb_inflate_set_dictionary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"NO_COMPRESSION"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_NO_COMPRESSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"BEST_SPEED"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_BEST_SPEED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"BEST_COMPRESSION"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_BEST_COMPRESSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT_COMPRESSION"</literal></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_DEFAULT_COMPRESSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"FILTERED"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_FILTERED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"HUFFMAN_ONLY"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_HUFFMAN_ONLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Z_RLE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"RLE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_RLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Z_FIXED</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"FIXED"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_FIXED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT_STRATEGY"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"MAX_WBITS"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>MAX_WBITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"DEF_MEM_LEVEL"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEF_MEM_LEVEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"MAX_MEM_LEVEL"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>MAX_MEM_LEVEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"NO_FLUSH"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"SYNC_FLUSH"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"FULL_FLUSH"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_FULL_FLUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"FINISH"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GZIP_SUPPORT</name></expr></cpp:if>
<expr_stmt><expr><name>id_write</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_read</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_readpartial</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"readpartial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_flush</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_seek</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"seek"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_close</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_path</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_input</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cGzipFile</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"GzipFile"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cGzError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>, <argument><expr><name>cZError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_attr</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzError</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>gzfile_error_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cNoFooter</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"NoFooter"</literal></expr></argument>, <argument><expr><name>cGzError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cCRCError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"CRCError"</literal></expr></argument>, <argument><expr><name>cGzError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cLengthError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>,<argument><expr><literal type="string">"LengthError"</literal></expr></argument>,<argument><expr><name>cGzError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cGzipWriter</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"GzipWriter"</literal></expr></argument>, <argument><expr><name>cGzipFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cGzipReader</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"GzipReader"</literal></expr></argument>, <argument><expr><name>cGzipFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_include_module</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><name>rb_mEnumerable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"wrap"</literal></expr></argument>, <argument><expr><name>rb_gzfile_s_wrap</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_undef_alloc_func</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"to_io"</literal></expr></argument>, <argument><expr><name>rb_gzfile_to_io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"crc"</literal></expr></argument>, <argument><expr><name>rb_gzfile_crc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"mtime"</literal></expr></argument>, <argument><expr><name>rb_gzfile_mtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><name>rb_gzfile_level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"os_code"</literal></expr></argument>, <argument><expr><name>rb_gzfile_os_code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"orig_name"</literal></expr></argument>, <argument><expr><name>rb_gzfile_orig_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><name>rb_gzfile_comment</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"lineno"</literal></expr></argument>, <argument><expr><name>rb_gzfile_lineno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"lineno="</literal></expr></argument>, <argument><expr><name>rb_gzfile_set_lineno</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"mtime="</literal></expr></argument>, <argument><expr><name>rb_gzfile_set_mtime</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"orig_name="</literal></expr></argument>, <argument><expr><name>rb_gzfile_set_orig_name</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"comment="</literal></expr></argument>, <argument><expr><name>rb_gzfile_set_comment</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><name>rb_gzfile_close</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"finish"</literal></expr></argument>, <argument><expr><name>rb_gzfile_finish</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"closed?"</literal></expr></argument>, <argument><expr><name>rb_gzfile_closed_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"eof"</literal></expr></argument>, <argument><expr><name>rb_gzfile_eof_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"eof?"</literal></expr></argument>, <argument><expr><name>rb_gzfile_eof_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"sync"</literal></expr></argument>, <argument><expr><name>rb_gzfile_sync</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipFile</name></expr></argument>, <argument><expr><literal type="string">"sync="</literal></expr></argument>, <argument><expr><name>rb_gzfile_set_sync</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"pos"</literal></expr></argument>, <argument><expr><name>rb_gzfile_total_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"pos"</literal></expr></argument>, <argument><expr><name>rb_gzfile_total_in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"tell"</literal></expr></argument>, <argument><expr><name>rb_gzfile_total_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"tell"</literal></expr></argument>, <argument><expr><name>rb_gzfile_total_in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>, <argument><expr><name>rb_gzwriter_s_open</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><name>rb_gzwriter_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>rb_gzwriter_initialize</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"flush"</literal></expr></argument>, <argument><expr><name>rb_gzwriter_flush</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><name>rb_gzwriter_write</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"putc"</literal></expr></argument>, <argument><expr><name>rb_gzwriter_putc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><name>rb_gzwriter_addstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"printf"</literal></expr></argument>, <argument><expr><name>rb_gzwriter_printf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"print"</literal></expr></argument>, <argument><expr><name>rb_gzwriter_print</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipWriter</name></expr></argument>, <argument><expr><literal type="string">"puts"</literal></expr></argument>, <argument><expr><name>rb_gzwriter_puts</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>, <argument><expr><name>rb_gzreader_s_open</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><name>rb_gzreader_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>rb_gzreader_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"rewind"</literal></expr></argument>, <argument><expr><name>rb_gzreader_rewind</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"unused"</literal></expr></argument>, <argument><expr><name>rb_gzreader_unused</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><name>rb_gzreader_read</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"readpartial"</literal></expr></argument>, <argument><expr><name>rb_gzreader_readpartial</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"getc"</literal></expr></argument>, <argument><expr><name>rb_gzreader_getc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"getbyte"</literal></expr></argument>, <argument><expr><name>rb_gzreader_getbyte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"readchar"</literal></expr></argument>, <argument><expr><name>rb_gzreader_readchar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"readbyte"</literal></expr></argument>, <argument><expr><name>rb_gzreader_readbyte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"each_byte"</literal></expr></argument>, <argument><expr><name>rb_gzreader_each_byte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"each_char"</literal></expr></argument>, <argument><expr><name>rb_gzreader_each_char</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><name>rb_gzreader_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"ungetc"</literal></expr></argument>, <argument><expr><name>rb_gzreader_ungetc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"ungetbyte"</literal></expr></argument>, <argument><expr><name>rb_gzreader_ungetbyte</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"gets"</literal></expr></argument>, <argument><expr><name>rb_gzreader_gets</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"readline"</literal></expr></argument>, <argument><expr><name>rb_gzreader_readline</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"each"</literal></expr></argument>, <argument><expr><name>rb_gzreader_each</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"each_line"</literal></expr></argument>, <argument><expr><name>rb_gzreader_each</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"lines"</literal></expr></argument>, <argument><expr><name>rb_gzreader_lines</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"readlines"</literal></expr></argument>, <argument><expr><name>rb_gzreader_readlines</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cGzipReader</name></expr></argument>, <argument><expr><literal type="string">"external_encoding"</literal></expr></argument>, <argument><expr><name>rb_gzreader_external_encoding</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"gzip"</literal></expr></argument>, <argument><expr><name>zlib_s_gzip</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"gunzip"</literal></expr></argument>, <argument><expr><name>zlib_gunzip</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_CODE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_CODE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_MSDOS"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_MSDOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_AMIGA"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_AMIGA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_VMS"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_VMS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_UNIX"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_UNIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_ATARI"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_ATARI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_OS2"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_OS2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_MACOS"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_MACOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_TOPS20"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_TOPS20</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_WIN32"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_WIN32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_VMCMS"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_VMCMS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_ZSYSTEM"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_ZSYSTEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_CPM"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_CPM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_QDOS"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_QDOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_RISCOS"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_RISCOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mZlib</name></expr></argument>, <argument><expr><literal type="string">"OS_UNKNOWN"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>OS_UNKNOWN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_level</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_strategy</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"strategy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>






















































































































</unit>
